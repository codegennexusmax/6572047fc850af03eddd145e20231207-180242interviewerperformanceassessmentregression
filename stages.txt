[{"_id": "6572047fc850af03eddd1461", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/Colaberry Interview Prep.csv", "in": [], "out": ["6572047fc850af03eddd1462"], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "ColaberryInterviewPrep", "comment": "", "pipeline_id": "6572047fc850af03eddd145e", "sub_type": "HDFS", "stage_type": "source", "stage_attributes": {"url": "/FileStore/platform/uploadedSourceFiles/Colaberry Interview Prep.csv", "filename": "Colaberry Interview Prep.csv", "delimiter": ",", "file_type": "Delimeted", "dbfs_token": "", "dbfs_domain": "", "is_header": "Use Header Line", "domain": "http://172.31.59.158", "port": "40070", "dirPath": "/FileStore/platform", "server_url": "/numtraPlatform/NumtraPlatformV3/uploads/platform/"}, "status": "new", "position": {"x": -80, "y": 160}, "shape_attributes": {"image": {"refHeight": "100%", "xlinkHref": "assets/svg/source/hdfs-source.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 10, "fill": "#333333", "type": "source", "text": "Colaberry Interview Prep", "slug": "hdfs", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"inherited": true, "checked": true, "field": "InterviewDate", "alias": "InterviewDate", "type": "date", "position": 0}, {"inherited": true, "checked": true, "field": "NoofDays", "alias": "NoofDays", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "LogInterviewID", "alias": "LogInterviewID", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "QID", "alias": "QID", "type": "numeric", "position": 3}, {"inherited": true, "checked": true, "field": "Job_Title", "alias": "Job_Title", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "Job_Description", "alias": "Job_Description", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "Recruiter_First_Name", "alias": "Recruiter_First_Name", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "Recruiter_Last_Name", "alias": "Recruiter_Last_Name", "type": "String", "position": 7}, {"inherited": true, "checked": true, "field": "Recruiter_Email_Address", "alias": "Recruiter_Email_Address", "type": "String", "position": 8}, {"inherited": true, "checked": true, "field": "Company_name", "alias": "Company_name", "type": "String", "position": 9}, {"inherited": true, "checked": true, "field": "SetName", "alias": "SetName", "type": "String", "position": 10}, {"inherited": true, "checked": true, "field": "CandidateID", "alias": "CandidateID", "type": "String", "position": 11}, {"inherited": true, "checked": true, "field": "SurveyResponse", "alias": "SurveyResponse", "type": "String", "position": 12}, {"inherited": true, "checked": true, "field": "InterviewType", "alias": "InterviewType", "type": "String", "position": 13}, {"inherited": true, "checked": true, "field": "Preparationscore", "alias": "Preparationscore", "type": "String", "position": 14}, {"inherited": true, "checked": true, "field": "AutoInterviewsCount", "alias": "AutoInterviewsCount", "type": "String", "position": 15}, {"inherited": true, "checked": true, "field": "AutoInterviewsDuration", "alias": "AutoInterviewsDuration", "type": "String", "position": 16}, {"inherited": true, "checked": true, "field": "MentorInterviewsCount", "alias": "MentorInterviewsCount", "type": "String", "position": 17}, {"inherited": true, "checked": true, "field": "MentorInterviewsDuration", "alias": "MentorInterviewsDuration", "type": "String", "position": 18}, {"inherited": true, "checked": true, "field": "Mentor", "alias": "Mentor", "type": "String", "position": 19}, {"inherited": true, "checked": true, "field": "Applicant", "alias": "Applicant", "type": "String", "position": 20}, {"inherited": true, "checked": true, "field": "Recruiter_InterviewCount", "alias": "Recruiter_InterviewCount", "type": "String", "position": 21}, {"inherited": true, "checked": true, "field": "Technical_InterviewCount", "alias": "Technical_InterviewCount", "type": "String", "position": 22}, {"inherited": true, "checked": true, "field": "InterviewScore", "alias": "InterviewScore", "type": "String", "position": 23}], "actual_schema": [{"inherited": true, "checked": true, "field": "InterviewDate", "alias": "InterviewDate", "type": "date", "position": 0}, {"inherited": true, "checked": true, "field": "NoofDays", "alias": "NoofDays", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "LogInterviewID", "alias": "LogInterviewID", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "QID", "alias": "QID", "type": "numeric", "position": 3}, {"inherited": true, "checked": true, "field": "Job_Title", "alias": "Job_Title", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "Job_Description", "alias": "Job_Description", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "Recruiter_First_Name", "alias": "Recruiter_First_Name", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "Recruiter_Last_Name", "alias": "Recruiter_Last_Name", "type": "String", "position": 7}, {"inherited": true, "checked": true, "field": "Recruiter_Email_Address", "alias": "Recruiter_Email_Address", "type": "String", "position": 8}, {"inherited": true, "checked": true, "field": "Company_name", "alias": "Company_name", "type": "String", "position": 9}, {"inherited": true, "checked": true, "field": "SetName", "alias": "SetName", "type": "String", "position": 10}, {"inherited": true, "checked": true, "field": "CandidateID", "alias": "CandidateID", "type": "String", "position": 11}, {"inherited": true, "checked": true, "field": "SurveyResponse", "alias": "SurveyResponse", "type": "String", "position": 12}, {"inherited": true, "checked": true, "field": "InterviewType", "alias": "InterviewType", "type": "String", "position": 13}, {"inherited": true, "checked": true, "field": "Preparationscore", "alias": "Preparationscore", "type": "String", "position": 14}, {"inherited": true, "checked": true, "field": "AutoInterviewsCount", "alias": "AutoInterviewsCount", "type": "String", "position": 15}, {"inherited": true, "checked": true, "field": "AutoInterviewsDuration", "alias": "AutoInterviewsDuration", "type": "String", "position": 16}, {"inherited": true, "checked": true, "field": "MentorInterviewsCount", "alias": "MentorInterviewsCount", "type": "String", "position": 17}, {"inherited": true, "checked": true, "field": "MentorInterviewsDuration", "alias": "MentorInterviewsDuration", "type": "String", "position": 18}, {"inherited": true, "checked": true, "field": "Mentor", "alias": "Mentor", "type": "String", "position": 19}, {"inherited": true, "checked": true, "field": "Applicant", "alias": "Applicant", "type": "String", "position": 20}, {"inherited": true, "checked": true, "field": "Recruiter_InterviewCount", "alias": "Recruiter_InterviewCount", "type": "String", "position": 21}, {"inherited": true, "checked": true, "field": "Technical_InterviewCount", "alias": "Technical_InterviewCount", "type": "String", "position": 22}, {"inherited": true, "checked": true, "field": "InterviewScore", "alias": "InterviewScore", "type": "String", "position": 23}], "selected_schema": [], "created_at": "2023-12-07 17:44:31.324000", "joinSchema": [], "updated_at": "2023-12-07 17:46:37.859000", "__v": 0, "stage_runningstate": "executed", "sampleData": [{"InterviewDate": "12/6/2023", "NoofDays": 6, "LogInterviewID": 287, "QID": 2743, "Job_Title": "Business Intelligence Developer", "Job_Description": "About the job Job Summary   The Business Intelligence Developer works independently, and collaboratively, to elicit requirements and create specifications. They then design, architect, and implement complex and visually compelling reporting and business intelligence (BI) solutions (data visualizations, extract-transform-load (ETL), ad hoc querying, etc.)   The individual in this position interfaces with various functional teams to support the BI solution delivery. They proactively identify needs or issues, develop strategies, and propose/implement technical and process solutions. The Senior BI Developer leads complex or specialized projects and will grow to become a subject matter expert with responsibility for mentoring and training all levels of BI developers as well business stakeholders   Essential Functions And Tasks   Responsible for designing and implementing BI solutions using the Microsoft BI Toolkit (SQL, SSIS, SSAS, SSRS, Power BI) to enable the analysis of data to support strategic initiatives and ongoing business requirements. Solutions include, but are not limited to, end-user reports, ad hoc requests, data visualizations, extract-transform-load (ETL) systems, master data management (MDM), and other BI Solutions   This position is expected to have a proactive approach and create the best solution to address business needs and current infrastructure. Care will be given to provide accurate data to fulfill the requirements of the developed solutions   Actively seeks opportunities to expand technical knowledge and capabilities   Work with the Development team to establish best patterns, practices, and standards as new technology arises   Participate in the out of hours support process   Performs special projects and other duties as assigned   Education And Experience Requirements   Bachelor\u2019s Degree in Computer Science, Information Technology, Data Science, Math, Finance, or a related field, or equivalent training   Two (2) to five (5) years of experience as a Business Intelligence Developer   At least three (3) years of progressively responsible experience building Data Warehouse and Business intelligence solutions. Experience using Microsoft Business Intelligence technologies: SSAS, SSIS, SSRS or similar technologies and database platforms such as Information Builder\u2019s WebFocus, SQL, Tableau, SAP, Power BI, or Oracle. Experience working with SQL queries and data processes   Certification in Lean, Six Sigma or other advanced performance improvement methodology, preferred   Knowledge, Skills, And Abilities   Knowledge and experience with SQL, SSIS, SSAS and SSRSs that support an Enterprise Data Warehouse environment   Ideal candidates will have hands-on experience with the full life cycle of Data warehouse design and development including logical and physical data modeling, mapping data elements from various data sources, and loading EDW objects including dimensions and fact tables   Candidates must have hands-on experience with gathering business requirements, documenting the reporting and analysis specifications, and designing technical architecture   Proven ability to answer technical questions   Strong knowledge and experience with healthcare reporting, Analytics, and Business reporting needs is a must   Excellent communication and client-facing skills   Ability to be flexible and work under high pressure in a complex environment   HealthCare/RCM/Financial systems is a major plus   Experience with large Health care EMRs is a plus   Understand and comply with company policies and procedures", "Recruiter_First_Name": "Joshua", "Recruiter_Last_Name": "Vazquez", "Recruiter_Email_Address": "Joshua.Vazquez@ventrahealth.com", "Company_name": "Ventra Health", "SetName": "EMMANUEL OJENIYI_12/06/2023_Ventra Health_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "24", "Technical_InterviewCount": "6", "InterviewScore": "NULL"}, {"InterviewDate": "12/5/2023", "NoofDays": 5, "LogInterviewID": 273, "QID": 2744, "Job_Title": "Senior Analyst, IT Business Analyst", "Job_Description": "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com  Job Description  What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements.  Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed.", "Recruiter_First_Name": "Beau", "Recruiter_Last_Name": "Jones", "Recruiter_Email_Address": "Beau.Jones@connectiverx.com", "Company_name": "ConnectiveRx", "SetName": "Yama Touray_12/05/2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "12/4/2023", "NoofDays": 4, "LogInterviewID": 288, "QID": 2745, "Job_Title": "ETL Developer", "Job_Description": "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. You will be responsible for extracting, transforming, and loading data from various sources into our data warehouse, ensuring the accuracy, reliability, and performance of our data pipelines. Additionally, this role will also provide support for Reporting and Analytics assignments as needed.  Key Responsibilities:  Data Extraction and Transformation: Design and develop ETL processes to extract data from multiple sources, transform it to meet business requirements, and ensure data quality and consistency. SQL Server Integration Services (SSIS): Create, optimize, and maintain SSIS packages to automate data workflows, including data cleansing, enrichment, and loading into target systems. Complex SQL Queries: Create and optimize complex SQL queries, stored procedures, and functions to extract, transform, and load data from various data sources. Business Requirements: Collaborate with cross-functional teams to gather business requirements and translate them into technical specifications for data integration and ETL solutions. Data Profiling and Analysis: Perform data profiling and analysis to identify data quality issues and propose appropriate solutions. Data Quality: Implement data cleansing, transformation, and validation rules to ensure the accuracy and consistency of data. Data Modeling: Collaborate with database administrators and data architects to design and maintain data models and database schemas. Managing Data Pipelines: Manage and maintain data pipelines, ensuring their reliability, performance, and scalability to meet business needs. Agile Methodology: Apply Agile methodologies to ensure that ETL processes align with Agile principles and practices, facilitating collaboration, and adaptability within the team. Software Development Life Cycle (SDLC): Demonstrate a strong understanding of the Software Development Life Cycle (SDLC) process, ensuring that testing activities are aligned with each phase of the SDLC, from requirements gathering to deployment. Documentation: Develop and maintain documentation, including data flow diagrams, data dictionaries, and technical specifications. Performance Optimization: Monitor and optimize the performance of SQL queries, ETL processes, and database systems to ensure efficient data processing and system reliability. Issue Resolution: Troubleshoot and resolve data-related issues, including data integration failures, data quality problems, and performance bottlenecks. Industry Trends: Stay up to date with industry trends and best practices in SQL development, ETL, and data integration technologies. Be part of an on-call rotation. Qualifications / Requirements  Bachelor\u2019s degree in information systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred. Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+ years\u2019 experience with advanced SQL and SSIS Prefer 2 years\u2019 experience with Microsoft BI Suite, Power BI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint and modeling tools such as ERStudio Prefer experience with other ETL tools such as AWS Glue, etc. Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization. Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused. Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data Python experience a plus Familiarity with API integrations About Symmetry  Symmetry Lending specializes in providing mortgage fulfillment services to include origination, servicing, and capital markets needs to various Lenders across the country with whom we partner. We have offices in Atlanta, GA, Eden Prairie, MN, Denver, CO, Orlando, FL, and Anaheim, CA, and we do business from coast to coast. We take great pride in building a diverse team of motivated professionals that contribute to an exciting work atmosphere. We provide a competitive benefits package including medical, dental, and vision plan options, paid time off, and more.", "Recruiter_First_Name": "Capri", "Recruiter_Last_Name": "Talley", "Recruiter_Email_Address": "capri.talley@symmetrylending.com", "Company_name": "Symmetry Lending", "SetName": "MULUGETA TADE_12/04/2023_Symmetry Lending_ETL Developer", "CandidateID": "40376", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Kwabena Manu", "Applicant": "MULUGETA TADE", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "12/4/2023", "NoofDays": 4, "LogInterviewID": 274, "QID": 2741, "Job_Title": "Senior Analyst, IT Business Analyst", "Job_Description": "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com Job Description What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements. Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed", "Recruiter_First_Name": "Beau", "Recruiter_Last_Name": "Jones", "Recruiter_Email_Address": "Beau.Jones@connectiverx.com", "Company_name": "ConnectiveRx", "SetName": "Talq Tera_12-04-2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "21", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "10", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "12/1/2023", "NoofDays": 1, "LogInterviewID": 265, "QID": 2742, "Job_Title": "Analytics Consultant", "Job_Description": "Position Summary Join our team as an Analytics Consultant and help drive our marketing, call center, claims, and retention initiatives to new heights! We're seeking a highly skilled individual with a focus on data analysis and advanced analytics to support our efforts across all business units.  As an Analytics Consultant, you'll be responsible for analyzing data, providing actionable insights, and making data-driven decisions that impact our company strategy efforts. With your expertise in data analysis and advanced analytics, you'll play a key role in optimizing our analytics capabilities for maximum impact and ROI. You'll collaborate closely cross-functionally to gather data, analyze trends, and uncover insights that support our business objectives. You\u2019ll support the broader business in performing deep dive analyses to drive business growth. Think of yourself as an internal consultant tasked with improving business processes utilizing data driven insights.  Located at our office in Naperville, our office environment is a key driver of our company culture and employee experience, so a regular in-office hybrid model (generally T-TH in-office and M & F remote) is required.  Responsibilities include but are not limited to: Utilizing advanced analytics approaches such as cohort analysis, risk analysis, and predictive modeling to inform decision-making and improve the customer experience across the organization. Collaborating with various teams to gather and analyze customer data and provide insights that support decision-making and improve overall business processes. Developing dashboards and visualizations to provide regular reporting and insights to support various teams within the company. Identifying incremental opportunities to improve business processes and drive growth by leveraging data to inform marketing and acquisition efforts. Utilizing data to inform company-wide strategies and initiatives that drive growth and efficiency. Providing thought leadership on analytics and identifying new and innovative ways to leverage data to drive business growth across the organization. We\u2019re Excited if This is You: 5+ years of experience in analytics and 3+ years in business intelligence roles In-depth technical knowledge in data modeling, SQL, and Python Strong understanding of business metrics and ability to drive growth. Proficiency in driving data-driven insights and informed business decision making. Demonstrated track record of delivering significant business impact through data analysis and implementation of insights. Strong communication and collaboration skills, with the ability to work effectively in a team environment. Proven track record of partnering with Analytics and Commercial Finance functions to drive improvements by way of analytical capabilities. Education Bachelor\u2019s degree  Computer Skills Needed to Perform this Job Proficiency in Microsoft and Google Suites Prior knowledge of SQL Understanding of ETL/Cloud Infrastructure Proficiency in Tableau, Looker, or other BI tool", "Recruiter_First_Name": "Pamela", "Recruiter_Last_Name": "Hord", "Recruiter_Email_Address": "Pamela.Hord@oncoursehome.com", "Company_name": "Oncourse Home Solutions", "SetName": "Mary Gathogo_12-01-2023_Oncourse Home Solutions_Analytics Consultant", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "74", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "17", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "12/1/2023", "NoofDays": 1, "LogInterviewID": 282, "QID": 2740, "Job_Title": "Sr. Datawarehouse and BI Developer", "Job_Description": "Key Responsibilities: - Troubleshoot and tune existing Data Warehouse, Dashboards and Reporting systems - Write and modify SSRS and Power BI reports - Design and improve current ETL processes - Maintain Azure Devops Pipelines - Create and update Power BI Data Models - Own and develop relationships with end-users, working with them to optimize and enhance existing reports and integrations - Help design, document and maintain system processes - Improve systems by studying current practices and designing modifications. - Recommend controls by identifying problems and writing improved procedures. - Maintain professional and technical knowledge by attending educational workshops; reviewing professional publications; establishing personal networks; benchmarking state-of-the-art practices Requirements \uf0b7 Bachelor\u2019s degree in Computer Science, Business or Information Science. \uf0b7 Minimum of 5 to 10 years of experience in the field or in a related area. \uf0b7 Experience with Microsoft SQL Server 2008 onwards, Transact-SQL, and Business Intelligence Development Studio (SSAS, SSIS, SSRS, Visual Studio). \uf0b7 Power BI Experience \uf0b7 Knowledge in Azure Data Factory and Pipelines \uf0b7 Familiarity with Essbase and MDX scripts a plus \uf0b7 Operational Data Warehouse experience \uf0b7 Must demonstrate basic knowledge or expertise in the following technology disciplines: Servers, Desktop/Laptop/Workstation Computing, Networking, Security, Programming, and/or IT Operations \uf0b7 Able to read, write and speak English fluently. \uf0b7 Proficient in Microsoft Office Suite (Outlook, Word, Excel, Access and PowerPoint) required. \uf0b7 Detail oriented and ability to work in a team setting. \uf0b7 Ability to be a self-starter and resolve issues with minimal supervision. \uf0b7 Maintains a positive attitude \uf0b7 Ability to handle multiple projects, prioritize tasks, and exercise good judgment. \uf0b7 Good customer skills \uf0b7 Willing to learn new systems and technology", "Recruiter_First_Name": "Barcley", "Recruiter_Last_Name": "Cadet", "Recruiter_Email_Address": "Barcley.Cadet@carriageservices.com", "Company_name": "Carriage Services", "SetName": "EMMANUEL OJENIYI_12-01-2023_Carriage Services_Sr. Datawarehouse and BI Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "11", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "23", "Technical_InterviewCount": "6", "InterviewScore": "NULL"}, {"InterviewDate": "11/30/2023", "NoofDays": 0, "LogInterviewID": 285, "QID": 2738, "Job_Title": "PowerBI Eng", "Job_Description": "Hey Jane,  My name is Bradie, and I work with Brooksource, a National IT Services Company. I came across your profile and was extremely impressed with your PowerBI and SQL exposure paired with your business intelligence experience! That is exactly the kind of background our client is currently looking for.  Based on your experience, I have an awesome opportunity for you! I am reaching out to you today as an extension of our Fortune 24 Healthcare Insurance client, Centene Corporation.  We are currently seeking a mid-level Power BI Engineer to support the creation of analytics and visualization solutions tied to a suite of applications that encompass the following business functions: Fraud, Waste and Abuse, Claims processing and Quality Assurance. You will primarily support new application builds as well as improvements on existing applications.  What we are looking for: - 2-5 years professional experience creating/building data visualizations and dashboards - Strong experience with PowerBI and SQL queries -Exposure to Snowflake architecture mapping and creation preferred - Experience with Gitlab, Confluent Cloud, Kafka, or equivalent tools - High attitude/aptitude and ability to work in large data set environment  Additional Details: - 5+ month contract (potential to convert to FTE) - Fully remote schedule - W2 Only (no sponsorship provided)  I believe this opportunity could align great and would love the chance to speak with you further! Please let me know if you would be interested and when you would be available for a quick 10-minute phone call discussing the position further.  Looking forward to hearing back from you!  Bradie Schoemehl Senior Technical Recruiter", "Recruiter_First_Name": "Bradie", "Recruiter_Last_Name": "Schoemehl", "Recruiter_Email_Address": "bschoemehl@brooksource.com", "Company_name": "Centene Corporation - Brooksource", "SetName": "Jane Mwangi_11/30/2023_Centene Corporation - Brooksource_PowerBI Eng", "CandidateID": "38690", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "100", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1813", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "1878", "Mentor": "Leslie Boye", "Applicant": "Jane Mwangi", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "11/30/2023", "NoofDays": 0, "LogInterviewID": 286, "QID": 2739, "Job_Title": "Clinical Data Analyst", "Job_Description": "Overview: Supports the mission of People's Community Clinic to provide high quality care, by championing and supporting a robust health analytics program.  The starting salary rate for this position is $65,000 - $75,000 annually. Responsibilities: Identifies and implements informatics strategies to support patient outcomes, professional practice and organizational performance. Continuously collects, analyzes, and reports data to end users, including clinicians and administrative staff, through one-time project-based work and by developing tools and systems to support end users\u2019 ongoing needs for data-driven decision making Trains clinical staff on the integrated use of analytics to create sustained progress toward a culture of quality improvement. Provides critical analysis and evaluation of health IT and recommends revision of clinical systems, processes, and workflow to ensure achievement of positive patient outcomes. Serves as the liaison for health IT efforts representing clinician needs. Incorporates clinical research and evidence-based clinical knowledge into informatics program and platform. Collaborate with clinical and IT team members to ensure the effectiveness of technologies and workflows that impact clinical users. Applies human factors and ergonomics to the design of systems and devices. Provides project management oversight of data improvement initiatives. Adheres to HIPAA guidelines. Qualifications: Education: High school diploma or GED. Bachelor\u2019s or other advanced degree in Healthcare Informatics, Nursing, Public Health, or related field preferred. Experience: Two years\u2019 experience working with data, preferably in a healthcare setting. Experience participating in quality improvement and quality assurance efforts preferred. Experience in using a database programming language such as SQL preferred. Experience in statistical programming language such as R or SPSS preferred.  Knowledge, Skills, and Abilities: Strong analytic ability, including problem identification and resolution. Familiarity with EHR and EHR analytics preferred. Strong knowledge of Excel. Ability to work effectively with people of diverse background and varying levels of computer and data expertise. Excellent written and oral communication skills. Ability to work independently with minimal supervision. Able to lead cross-functional teams and influence without direct supervisory authority. Ability to meet deadlines.  Certificate/License: None Required. RN license preferred.  Our Benefits Include: 18 PTO days per year & 11 paid holidays Major Medical Health Insurance Coverage. Most employees experience $0 in out-of-pocket medical expenses. Dental & Vision Flexible Spending Accounts Employer paid Life Insurance Employer paid Short-Term and Long-Term Disability Annual Training 403(b) with 4% employer matching", "Recruiter_First_Name": "Tashira", "Recruiter_Last_Name": "Lott", "Recruiter_Email_Address": "austinpcc+email+6nc-3c2907147b@talent.icims.com", "Company_name": "People's Community Clinic", "SetName": "Jane Mwangi_11/30/2023_People's Community Clinic_Clinical Data Analyst", "CandidateID": "38690", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1517", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Leslie Boye", "Applicant": "Jane Mwangi", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "11/30/2023", "NoofDays": 0, "LogInterviewID": 280, "QID": 2733, "Job_Title": "Tableau and Database Specialist", "Job_Description": "Responsibilities:  Collaborate with cross-functional teams to understand business requirements and translate them into technical solutions. Design, develop, and optimize database systems, ETL processes, and data models for efficient data storage and retrieval. Create interactive and insightful Tableau dashboards and reports to enable data visualization and analysis. Write and optimize complex SQL queries to extract and transform data for use in Tableau Troubleshoot issues related to data, databases, and Tableau reports. Provide support and mentorship to junior team members. Stay updated on emerging technologies, tools, and best practices in the field.    Required Skills:  Masters or bachelor in computer technology or related field  4 years of professional experience in back-end software development with a strong focus on Tableau and database management. A strong understanding of databases is crucial. This includes knowledge of relational database systems like MySQL, PostgreSQL, or Microsoft SQL Server, as well as NoSQL databases like MongoDB. Proficiency in writing and optimizing SQL queries for data retrieval and manipulation. Knowledge of complex joins, subqueries, and indexing is important. Ability to design and implement ETL processes to extract, transform, and load data from various sources into a database for analysis in Tableau. Understanding the business context and how data analysis and reporting contribute to business goals is important for creating relevant Tableau dashboards. Experience Utilizing: JIRA, ZEPHYR, Microsoft Word, PowerPoint, Excel, Teams, Share point. Strong communication skills    Desired Skills  Additional Key Information  Work must be performed from a US location and engaged resource must be video capable during work hours in the eastern US time zone. This position is on a long term/multi-year contract that includes the possibility for yearly performance-based bonuses. This should be a W-2 hire.", "Recruiter_First_Name": "Nikole", "Recruiter_Last_Name": "Detz", "Recruiter_Email_Address": "NDetz@m-inc.com", "Company_name": "Momentum Inc", "SetName": "EMMANUEL OJENIYI_11/30/2023_Momentum Inc_Tableau and Database Specialist", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "74", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "65", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "22", "Technical_InterviewCount": "6", "InterviewScore": "NULL"}, {"InterviewDate": "11/28/2023", "NoofDays": -2, "LogInterviewID": 261, "QID": 2723, "Job_Title": "EIT Team Lead", "Job_Description": "ob Description:   BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.   Job Responsibilities   Managing the planning, scheduling and deployment of all hardware facilities and associated software for major or multiple sites. Trains, develops, and mentors staff by providing subject matter direction and guidance. Assigns, monitors, and reviews progress and accuracy of work.Provides staff management oversight including hiring, promoting, or making recommendations for staff.Conducts performance reviews and assessments, manages performance, engages in skills assessment, and promotes professional development of staff. Directing, motivating and developing staff, maximizing their individual contribution, professional growth and ability to function effectively with their colleagues as a team. Ensuring adherence to policies, plans, objectives, budgets and staffing allocations for the assigned site. Optimizes the utilization of resources and adheres to Departmental budgeting and fiscal responsibilities. Actively participates in project teams, manages and tracks project details, and provides leadership during periods of transition. Ensures compliance with corporate and industry standards, policies, procedures, and regulations.   Job Qualifications   Education   Bachelor's Degree in a Computer Sciences related field or equivalent work experience   Experience   5 years - Experience in Information Technology required   Skills\\Certifications   Knowledge of information technology concepts, methodology, terminology and standards. Demonstrated ability to interpret and translate technical and/or or complex concepts into information meaningful to project team members and/or business personnel. Strong interpersonal and organizational skills PC Skills required (Basic Microsoft Office and E-Mail) Adaptive to high pace and changing environment Must be able to communicate effectively with both technical and non-technical co-workers Must be willing to adjust schedule to perform maintenance and upgrades outside of business hours and be part of an on-call rotation.   Job Specific Requirements:    Working knowledge with regards to End User Experience (Business user experience) Prior experience with Agile is preferred.   Preferred Skills:   Number of Openings Available:   1   Worker Type:   Employee   Worker Sub-Type:   Employee   Company:   BCBST BlueCross BlueShield of Tennessee, Inc.   Applying for this job indicates your acknowledgement and understanding of the following statements:   BCBST is an Equal Opportunity employer (EEO), and all employees and applicants will be entitled to equal employment opportunities when employment decisions are made. BCBST will take affirmative action to recruit, hire, train and promote individuals in all job classifications without regard to race, religion, color, age, sex, national origin, citizenship, pregnancy, veteran status, sexual orientation, physical or mental disability, gender identity, or any other characteristic protected by applicable law.   Further information regarding BCBST's EEO Policies/Notices may be found by reviewing the following page:   BCBST's EEO Policies/Notices   BlueCross BlueShield of Tennessee is not accepting unsolicited assistance from search firms for this employment opportunity. All resumes submitted by search firms to any employee at BlueCross BlueShield of Tennessee via-email, the Internet or any other method without a valid, written Direct Placement Agreement in place for this position from BlueCross BlueShield of Tennessee HR/Talent Acquisition will not be considered. No fee will be paid in the event the applicant is hired by BlueCross BlueShield of Tennessee as a result of the referral or through other means.    All applicants will be advised that BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.", "Recruiter_First_Name": "Shirudkar", "Recruiter_Last_Name": "Dipti", "Recruiter_Email_Address": "Dipti_Shirudkar@bcbst.com", "Company_name": "BlueCross BlueShield of Tennessee", "SetName": "EMMANUEL OJENIYI_11/28/2023_BlueCross BlueShield of Tennessee_EIT Team Lead", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 4", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 4", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 4"}, {"InterviewDate": "11/28/2023", "NoofDays": -2, "LogInterviewID": 281, "QID": 2734, "Job_Title": "BI Developer", "Job_Description": "\"Position: BI Developer Hours: 8-5pm EST Location: Remote - EST time zone   Local healthcare client in Atlanta, GA is looking to bring on a resource to the BI team to assist with day-to-day analysis and project/data development. They are seeking a high performer with the ability to hit the ground running and maintain a \"\"we vs me\"\" mentality with other team members.   Requirement:  Minimum 5 years of experience in the following: Strong SQL experience Strong Power BI experience Enterprise Database Reporting Analytical Thinker Business facing skillsets Report optimization Metric Insights experience is a plus Must be a team player - we vs me mentality   Responsibilities:   Ensures all projects and data developed is value-adding and provides actionable insights.  Building new data tables", "Recruiter_First_Name": " and making adjustments to existing tables. Ability to find a way to be able to look at data to see how it will change reporting. Ability to understand a business problem and work through various legacy systems.  Ability to communicate clearly and efficiently with internal business members\"", "Recruiter_Last_Name": "Henry", "Recruiter_Email_Address": "Russell", "Company_name": "hrussell@medasource.com", "SetName": "Medasource", "CandidateID": "OLUKAYODE AKINRIMISI_11/28/2023_Medasource_BI Developer", "SurveyResponse": "31661", "InterviewType": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "Preparationscore": " engaging interviewer", "AutoInterviewsCount": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsDuration": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "MentorInterviewsCount": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "Mentor": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Applicant": "     \"\"HandlingChallengingQuestions\"\": 5", "Recruiter_InterviewCount": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Technical_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "InterviewScore": "     \"\"InterviewerEngagement\"\": 5"}, {"InterviewDate": "11/24/2023", "NoofDays": -6, "LogInterviewID": 215, "QID": 2688, "Job_Title": "Data Warehouse Specialist", "Job_Description": "https://www.indeed.com/viewjob?jk=bbe2a3fe0476f181&tk=1h5a6oa4dh5hp801&from=serp&vjs=3  The Role  We are looking for an experienced and energetic leader to join the team as a Data Warehouse Specialist. As a Data Warehouse Specialist, you will play a critical role in developing data warehouses for our clients. You will be responsible for conducting assessments, developing strategies, and providing expert guidance to enhance their data governance.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  Collaborate with clients to understand their business requirements and design effective data warehouse solutions. Develop and implement data warehouse architecture, data models, schemas, and structures. Design and implement efficient Extract, Transform, and Load (ETL) processes to populate and update data warehouses. Ensure data quality and integrity by establishing appropriate data validation and cleansing procedures. Optimize data warehouse performance through indexing, partitioning, and other performance tuning techniques. Implement effective backup, recovery, and security measures for data warehouses. Evaluate existing data frameworks and identify opportunities for improvement. Conduct in-depth data analysis to identify data quality issues, inconsistencies, and gaps. Recommend and implement enhancements to data frameworks to meet client requirements. Collaborate with cross-functional teams to define data governance policies, standards, and best practices. Conduct regular audits to ensure compliance with data governance guidelines. Participate in project planning and scoping activities, providing technical expertise on data warehouse solutions. Demonstrate expertise in data modeling, dimensional modeling, and data warehouse design principles. Proficiently use SQL, ETL tools, and programming languages to extract, transform, and load data. Utilize data visualization tools to create meaningful reports and dashboards for clients. Stay up to date with the latest trends, tools, and technologies in data warehousing and business intelligence. Qualifications  Bachelor's degree in Computer Science, Information Systems, or a related field. Relevant certifications (e.g., AWS) are highly desirable. Proven experience working on data warehouse projects, including data modeling, ETL development, and performance optimization. Strong understanding of database concepts and proficiency in SQL. Experience with data warehousing tools and technologies (e.g., Snowflake, Amazon Redshift, Microsoft Azure SQL Data Warehouse) Proficiency in at least one ETL tool (e.g., Informatica, Talend, SSIS). Familiarity with data governance principles and best practices. Excellent problem-solving and analytical skills. Strong communication and interpersonal skills to effectively collaborate with clients and team members. Ability to manage multiple projects and prioritize tasks effectively. Professionalism and client-oriented mindset, with the ability to establish trust and maintain confidentiality. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "Recruiter_First_Name": "Laurine", "Recruiter_Last_Name": "Lachica", "Recruiter_Email_Address": "laurine.lachica@modaliconsulting.com", "Company_name": "Modali Consulting", "SetName": "Feven Asmelash_11/24/2023_Modali Consulting_Data Warehouse Specialist", "CandidateID": "39112", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Ayodele Adepoju", "Applicant": "Feven Asmelash", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "11/21/2023", "NoofDays": -9, "LogInterviewID": 227, "QID": 2698, "Job_Title": "SQL Developer", "Job_Description": "https://www.indeed.com/viewjob?jk=dd7d5cb7585219aa&tk=1hepmokcejm4n800&from=serp&vjs=3&applied=1&from=smart-apply", "Recruiter_First_Name": "Steven", "Recruiter_Last_Name": "Penn", "Recruiter_Email_Address": "Steven.Penn@ideaentity.com", "Company_name": "Idea Entity", "SetName": "OLUKAYODE AKINRIMISI_11/21/2023_Idea Entity_SQL Developer", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/21/2023", "NoofDays": -9, "LogInterviewID": 254, "QID": 2722, "Job_Title": "Business Intelligence Developer", "Job_Description": "Competencies  Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience  3+ years\u2019 experience with Integration Services (SSIS)  5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions  Technical documentation skills Self-motivated and directed, with keen attention to detail  Experience with data management Good written and oral communications   Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data  Create ETL processes to load database structures  Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Recruiter_First_Name": "Tony", "Recruiter_Last_Name": "Guzman", "Recruiter_Email_Address": "tguzman@uslegalsupport.com", "Company_name": "U.S. Legal Support", "SetName": "OLUKAYODE AKINRIMISI_11/21/2023_U.S. Legal Support_Business Intelligence Developer", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/20/2023", "NoofDays": -10, "LogInterviewID": 248, "QID": 2717, "Job_Title": "Business Intelligence Lead Developer", "Job_Description": "Key Responsibilities:  Develop and optimize SQL queries for data extraction and analysis. Collaborate with business stakeholders to gather and understand reporting requirements. Create visually compelling and insightful reports using Looker. Field daily report requests from multiple Backoffice teams to meet the needs of customers. Conducting and troubleshooting reports and data models. Comprehend and work with Key Performance Indicators (KPIs) and metrics.  Qualifications:  A minimum of 10 years of experience in report writing or as a business analyst. Proficiency in SQL query development (queries, stored procedures, functions) and data analysis. Familiarity with SQL Server databases and data warehousing. Proven experience with one or more of the following reporting tools: Looker, Business Objects, Power BI, or Tableau. Strong understanding of KPIs and metrics. Exhibit adaptability and a quick learning curve to efficiently contribute to projects.  Knowledge of Snowflake Datawarehouse query development is a plus.", "Recruiter_First_Name": "Jessica", "Recruiter_Last_Name": "Toub", "Recruiter_Email_Address": "jtoub@nutrisystem.com", "Company_name": "Nutrisystem Inc", "SetName": "Shahad Jawad_11/20/2023_Nutrisystem Inc_Business Intelligence Lead Developer", "CandidateID": "38744", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "908", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "AMINAT OKERINDE", "Applicant": "Shahad Jawad", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "11/20/2023", "NoofDays": -10, "LogInterviewID": 224, "QID": 2695, "Job_Title": "Business Development Specialist", "Job_Description": "Earn $100K+ annually \u2026 as a Sideline\u2014no need to quit your day job. Part-time or full-time.    Pay for Performance, 1099 compensation.    The Ideal Candidate:    Self-motivator who routinely sets and exceeds their own goals. If you're goal-oriented and self-motivated, you'll thrive here. Proven track record of relationship-building and influencing. Exceptional relationship-building skills.    Position Overview:    Pay for Performance, 1099 compensation \u2013 residual monthly income paid for the client's life (average 10+ years!). This position requires no quotas and no caps on earnings. Work alongside your current position or business. Sideline, Part-time or Full-time. Training and ongoing support provided.   General Responsibilities:    Identify opportunities in our cost-saving services with prospects and new clients, building them into long-term relationships. Serve as a liaison between prospective clients and Business Development Director/SME.   Requirements:     Current or former Business Professional, Executive, B2B Sales Rep, Finance Executive, CFO, COO, or Controller. Ability to lead conversations with prospects and clients. Must have 10+ years of business experience working with decision-makers. Strong communication and interpersonal skills. Positive and results-driven. Ability to work well independently and with others.   About Us:    Aspire Partners offers B2B solutions with front-end timing and at no cost or investment to prospective companies. It's a win-win for clients. Current inflationary conditions make our services more relevant and in demand for all sectors. Companies desperately need our help. Our solutions can help companies thrive during these uncertain times by solving efficiency issues and adding to their bottom line.   Every business needs to reach peak profitability and efficiency. Handling account payables, reducing expenses, and attracting and retaining good employees is vital to the success of every business. We create operational efficiencies and actual cost savings for companies of all sizes and industries without switching vendors or current, established relationships with company vendors or service providers.", "Recruiter_First_Name": "David", "Recruiter_Last_Name": "MacKillop", "Recruiter_Email_Address": "dmacKillop@aspirepartnersusa.com", "Company_name": "Aspire Partners", "SetName": "Stephanie Anne Lim_11/21/2023_Aspire Partners_Business Development Specialist", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 4", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 2", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 1", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 3", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/20/2023", "NoofDays": -10, "LogInterviewID": 263, "QID": 2725, "Job_Title": "Business Intelligence Developer", "Job_Description": "Job Description Summary:  The Business Intelligence Developer is responsible for developing, implementing and supporting reporting and business intelligence solutions to meet the information needs of the organization. The Business Intelligence Developer supports one or more business units in preparing analysis and reporting to drive the business while ensuring accuracy and consistency. Must be able to work with multiple teams and business units simultaneously and thrive in fast-paced, dynamic environment. Must demonstrate the eagerness and ability to learn and must work well in a team environment.   Competencies   Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience 3+ years\u2019 experience with Integration Services (SSIS) 5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions Technical documentation skills Self-motivated and directed, with keen attention to detail Experience with data management Good written and oral communications  Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data Create ETL processes to load database structures Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Recruiter_First_Name": "Tony", "Recruiter_Last_Name": "Guzman", "Recruiter_Email_Address": "tguzman@uslegalsupport.com", "Company_name": "USLegalSupport", "SetName": "OLUKAYODE AKINRIMISI_11/20/2023_USLegalSupport_Business Intelligence Developer", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "11/18/2023", "NoofDays": -12, "LogInterviewID": 229, "QID": 2700, "Job_Title": "siness intelligence developer", "Job_Description": "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI RAYUS is committed to delivering clinical excellence in communities across the U.S., driven by our passion for and superior service to referring providers and patients. RAYUS Radiology is built on our brilliant medicine, brilliant team, brilliant technology and services - all to provide the highest level of patient\u00a0care\u00a0possible.", "Recruiter_First_Name": "prashant", "Recruiter_Last_Name": "Tolia", "Recruiter_Email_Address": "prashant.tolia@RAYUSradiology.com", "Company_name": "siness intelligence developer", "SetName": "Shahad Jawad_11/18/2023_siness intelligence developer_siness intelligence developer", "CandidateID": "38744", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "823", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "1157", "Mentor": "AMINAT OKERINDE", "Applicant": "Shahad Jawad", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "11/18/2023", "NoofDays": -12, "LogInterviewID": 230, "QID": 2701, "Job_Title": "business intelligence developer", "Job_Description": "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI", "Recruiter_First_Name": "parshant", "Recruiter_Last_Name": "tolia", "Recruiter_Email_Address": "parshant.tolia@RADYUSradiology.com", "Company_name": "Rayus radiology", "SetName": "Shahad Jawad_11/18/2023_Rayus radiology_business intelligence developer", "CandidateID": "38744", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "11", "Mentor": "AMINAT OKERINDE", "Applicant": "Shahad Jawad", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "11/17/2023", "NoofDays": -13, "LogInterviewID": 246, "QID": 2715, "Job_Title": "Systems Analyst", "Job_Description": "Bachelor\u2019s Degree in Computer Science, Engineering, Management Information Systems, or a related field Five years of related experience in application administration and support, including experience utilizing SQL and related SQL management tools (SSMS, SSAS, SSIS and SSRS) Skills Required Knowledge of computer system capabilities, business processes and workflow Experience with enterprise applications and understanding of database driven applications Experience with SQL scripting Strong understanding of the software development life cycle Excellent communication skills, both written and verbal, including the ability to bridge functional and technical resources by communicating effectively with individuals of varying systems expertise and business needs Proven problem solving and analytical thinking and ability to approach problems logically and systematically Ability to maintain good customer relations with clients and external vendors and partners Essential Functions  Builds ad hoc queries, reports and business processes using standard Blackbaud CRM features/functionality      Builds custom business process and data integrations using SQL Supports system users with issues, new requests and system upgrades Collaborates with team members and individuals across the Development and Alumni Relations division to develop best practices, re-usable objects and effective documentation Analyzes and documents user needs, existing and new policies, processes, procedures and operational methods to consider possible improvements to new and existing systems Utilizes elicitation techniques to understand business processes and translate into system requirements and/or development of systems solutions Defines and documents business requirements, technical specifications and test cases for system developments May include the writing of all or a portion of functional and technical specifications Coordinates with business and technology teams, ascertaining system requirements, such as program functions, output requirements, input data acquisition, and system techniques and controls Problem solves in areas such as system design, input/output requirements and procedural flow between departments and/or business systems Performs configuration of enterprise application software Performs testing of new systems, upgrades and patching of existing systems Plans, conducts and documents results of testing Performs all other duties as assigned Additional Functions  Has frequent contact with division staff and other university offices Open office environment Many hours spent in front of a computer Evening/weekend and on call work as required to meet project deadlines and/or maintain system availability Preferences  Six or more years of related experience in application software support Programming experience utilizing SQL and related SQL tools, and report development tools using SSRS, PowerBI and/or Tableau Experience developing business intelligence solutions Experience building SSIS (SQL Server Integration Services) packages Experience with project management methodologies Experience with REST APIs Experience with alumni/development database systems, preferably Blackbaud CRM Experience in non-profit or higher education setting Thorough understanding and working knowledge of alumni relations and/or fundraising Skills Excellent organizational skills Strong attention to detail High levels of overall organization, accuracy and time management Goal oriented with the ability to prioritize a heavy workload Willingness to take charge of assignments and follow through with minimal supervision Ability to work with high level of confidentiality Proficiency in Microsoft Office Suite", "Recruiter_First_Name": "Toni", "Recruiter_Last_Name": "Parker", "Recruiter_Email_Address": "Toni.Parker@rice.edu", "Company_name": "Rice University", "SetName": "OLUKAYODE AKINRIMISI_11/17/2023_Rice University_Systems Analyst", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/15/2023", "NoofDays": -15, "LogInterviewID": 247, "QID": 2716, "Job_Title": "Data Engineer", "Job_Description": "DATA ENGINEER  In every office around the world, HH Global offers an entrepreneurial culture that sets ambitious goals and looks beyond the status quo.  At HH Global , we reward sharp, unconventional thinkers who are motivated to create their own success. Our winning culture draws from employees who step up to the challenge of solving tough problems and making a difference. We dream big, so our clients can dream bigger.  Responsibilities   Document new reporting features or bugs from both internal and external users   Coordinate testing of reports with users   Manage an accurate and visible task and project list and meet regularly for input on prioritization.   Analyzes data, identifies trends and outliers, and recommends solutions when appropriate.   Coordinate with team members overseas   Create and maintain system protocols by writing and updating procedures; this includes documentation and writing SQL stored procedures.   Generate standard or custom reports summarizing business, financial, or economic data for review by executives, managers, clients, and other stakeholders. This will involve using T-SQL, SSIS, SSRS, and other report writing tools.   Willingness to learn new reporting technologies such as Microsoft Power BI, Tableau, or Qlikview   Participate in physical and virtual meetings as required to facilitate functional requirement gathering and report development.   Maintain or update business intelligence tools, databases, dashboards, systems, or methods   Assist with project management activities by identifying project milestones, phases, and elements; tracking activities, resolving problems, and publishing progress reports.   Manage timely flow of business intelligence information to users.   Requirements   Must be legally authorized to work in the United States without needing current or future employer sponsorship.   Bachelor\u2019s degree in a business or technology related discipline   2 + Years work experience   Working knowledge of SQL   Microsoft Business Intelligence Suite (SSRS, SSIS, SSAS)   Experience with Azure cloud environment: Azure SQL Database, Azure Data Factory   Strong Microsoft Excel skills related to data analysis and manipulation   Proven ability to document and prioritize issues raised by others   Ability to prioritize tasks and directly support the department managers.   Good troubleshooting and error isolation skills.   Ability to work independently on assigned tasks as well as to accept direction on given assignments.   Must be able to interact and communicate with individuals at all levels of the organization.   Your resume will be reviewed by a member of our Recruiting team and we\u2019ll reach out to you directly if there\u2019s a fit. We\u2019re using video conferencing software (Microsoft Teams) to conduct our interviews, but all interviews will be live with a member of our Recruiting or Hiring teams.  Equal Employment Opportunity Employer: HH Global is an equal opportunity employer and all qualified applicants will receive consideration for employment without regard to race, color, religion, sex, national origin, disability status, protected veteran status, sexual orientation, gender, gender identity and gender expression, or any other characteristic protected by law.", "Recruiter_First_Name": "Amanda", "Recruiter_Last_Name": "Filian", "Recruiter_Email_Address": "jdefaehsz@jobvite.com", "Company_name": "HH Global", "SetName": "Mary Gathogo_11/15/2023_HH Global_Data Engineer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "16", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "11/15/2023", "NoofDays": -15, "LogInterviewID": 231, "QID": 2702, "Job_Title": "Sr Engineer, Data Management and Analytics role!", "Job_Description": "Professional who expertly designs, creates, and implements Self-Service BI data models. Plan, implement and oversee comprehensive BI delivery strategy. Design, build and deploy EPIC reporting solutions (Clarity, Caboodle, RWB, Radar, Metrics) Innovator, adept at conceptualizing and developing marketable tools that cater to the needs and demands of multiple clients. Build relationships with the business users, understand how data can solve business problems, and formulate business requirements for the BI tools. Work with data warehouse System Analyst and Engineering team to implement data schema to accommodate new analytics requirements. Manage meta data for BI models, reports, and dashboards (author, usage, data source) Create technical and functional documentation and provide training for BI tools.", "Recruiter_First_Name": "Heather", "Recruiter_Last_Name": "McGinnis", "Recruiter_Email_Address": "heather.mcginnis@pacden.com", "Company_name": "Pacific Dental Services", "SetName": "Talq Tera_11/15/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics role!", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "60", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "94", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "9", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "11/14/2023", "NoofDays": -16, "LogInterviewID": 232, "QID": 2703, "Job_Title": "Sr Engineer, Data Management and Analytics", "Job_Description": "https://www.indeed.com/viewjob?jk=57bafe6006d3d2ad&tk=1hdr8h4cejr51801&from=serp&vjs=3", "Recruiter_First_Name": "Heather", "Recruiter_Last_Name": "McGinnis", "Recruiter_Email_Address": "heather.mcginnis@pacden.com", "Company_name": "Pacific Dental Services", "SetName": "Talq Tera_11/14/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "8", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "11/13/2023", "NoofDays": -17, "LogInterviewID": 202, "QID": 2676, "Job_Title": "Associate Consultant, Data Analyst", "Job_Description": "The Role  We're seeking a seasoned and dynamic professional to join us as an Associate Consultant, Data Analytics. In this role, you'll be instrumental in delivering projects to our clients. You'll be responsible for analyzing, strategizing, implementing measures, and offering expert guidance to enhance our clients' operational resilience.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  \u2022  Conduct in-depth data analysis to identify trends, patterns, and insights that can inform client strategies and recommendations.  \u2022  Collaborate closely with clients to understand their business objectives and tailor data-driven solutions that address their specific needs.  \u2022  Create visually compelling and easy-to-understand data visualizations, dashboards, and reports to effectively communicate findings to both technical and non-technical stakeholders.  \u2022  Apply statistical techniques and predictive modeling to uncover correlations and forecast potential outcomes, enhancing the accuracy of strategic planning.  \u2022  Ensure the quality, accuracy, and reliability of data by conducting data cleaning, validation, and preprocessing procedures.  \u2022  Present analytical findings and recommendations to clients in a clear and concise manner, demonstrating the value of data-driven decision-making.  \u2022  Leverage cutting-edge analytics tools and technologies to optimize data analysis processes and streamline workflows.  \u2022  Collaborate with cross-functional teams to tackle complex business problems, utilizing your data expertise to drive innovative solutions.  \u2022  Stay up-to-date with the latest trends and advancements in data analytics, bringing new ideas and best practices to the team.  \u2022  Assist in project planning, timeline management, and resource allocation to ensure the successful execution of data analytics initiatives.  Qualifications  Bachelor's or Master's degree in a related field (e.g., Data Science, Statistics, Business Analytics). Proficiency in data analysis tools such as Python, R, or SQL. Experience with data visualization tools like Tableau, Power BI, or similar. Strong analytical thinking and problem-solving skills. Excellent communication and presentation abilities. Ability to work collaboratively in a team-oriented environment. Prior consulting or client-facing experience is a plus. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "Recruiter_First_Name": "Laurine", "Recruiter_Last_Name": "Lachica", "Recruiter_Email_Address": "laurine.lachica@modaliconsulting.com", "Company_name": "Modali Consulting", "SetName": "EMMANUEL OJENIYI_11/13/2023_Modali Consulting_Associate Consultant, Data Analyst", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/13/2023", "NoofDays": -17, "LogInterviewID": 238, "QID": 2709, "Job_Title": "Technical Data Analyst (Remote)", "Job_Description": "https://ds-llc.com/technicaldataanalyst", "Recruiter_First_Name": "Abby", "Recruiter_Last_Name": "Tumang", "Recruiter_Email_Address": "atumang@ds-llc.com", "Company_name": "Digital Strategy LLC", "SetName": "EMMANUEL OJENIYI_11/13/2023_Digital Strategy LLC_Technical Data Analyst (Remote)", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "20", "Technical_InterviewCount": "6", "InterviewScore": "NULL"}, {"InterviewDate": "11/12/2023", "NoofDays": -18, "LogInterviewID": 228, "QID": 2699, "Job_Title": "SQL Developer", "Job_Description": "Designing and maintaining SQL Server Database architecture as well as ensuring their optimal performance, availability, and security. Optimizing SQL Server Database performance, including query tuning, indexing, and statics maintenance. Creating complex parameterized (declare) T-SQL script, as well as using T-SQ: scripts and queries for business intelligence reporting. Writing optimized complex SQL queries for integration with other applications. Performing multipart sub-queries and joining the table indexing and maintenance (clustered and non-clustered). Creating user defined functions, views, and stored procedures. Working with intricate recursive queries, i.e., Common table expressions (CTE), table variables. Developing, configuring, and deploying SSIS packages. Implementing and enforcing database security measures, including access controls, encryption, auditing, updating, merging, deleting, and inserting the databases. Creating and using stored procedures and creating over clauses with or without partitioning. Effective partnership with development teams to design data management and governance protocols, manage the information lifecycle, design infrastructure, and data integration controls.", "Recruiter_First_Name": "Steven", "Recruiter_Last_Name": "Penn", "Recruiter_Email_Address": "Steven.Penn@ideaentity.com", "Company_name": "IDEA ENTITY", "SetName": "OLUKAYODE AKINRIMISI_11/12/2023_IDEA ENTITY_SQL Developer", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "1331", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "11/11/2023", "NoofDays": -19, "LogInterviewID": 221, "QID": 2693, "Job_Title": "Business Data Analyst", "Job_Description": "Job Summary:  Join HonestMed, a fast-growing ecommerce company in the medical supply space, as a Data Analyst. Utilize your analytical prowess to enhance our online retail business's performance. Your primary responsibilities will include monitoring key performance indicators, such as website traffic, conversion rates, and sales, identifying growth opportunities, optimizing website designs, implementing marketing campaigns, and maintaining comprehensive business intelligence reporting to drive HonestMed's success.  Essential Functions and Key Responsibilities:  Identify, ingest, and clean critical data sources for modeling and reporting. Design and manage dashboards and reports for marketing and business teams. Provide actionable metrics, insights, and recommendations on consumer analytics and marketing campaigns. Lead projects leveraging data analytics to address complex business issues. Narrate the customer and service story through BI tools and timely reporting. Become the company's data expert, deeply understanding the data landscape across customer journeys. Promote data-literacy and accelerate data knowledge among colleagues and customers. Foster a team-oriented and inclusive work environment. Collaborate effectively with all organizational levels and stakeholders. Be on-site in Oceanside, CA Perform additional duties as required. Knowledge Skills and Abilities:  Minimum of 3 years in data analytics, focused on consumer, retail, and marketing data. Expertise in creating dynamic, data-driven dashboards, preferably in Tableau. Proficiency in consumer analytics, marketing analytics, and forecasting. Demonstrated ability to apply data and analytics to problem-solving. Experience in effectively presenting complex results to all organization levels. Outstanding leadership, communication, interpersonal, and presentation skills. Ability to foster positive working relationships within and outside the company. Required Education and Experience:  Bachelor's degree or relevant combination of education and experience. Strong proficiency in SQL, Python, and Excel. Experience in building data pipelines is a plus. Minimum 5 years of e-Commerce experience preferred. Strong data visualization skills with dashboard building expertise in Tableau or Power BI.", "Recruiter_First_Name": "Kevin", "Recruiter_Last_Name": "Thomas", "Recruiter_Email_Address": "Kevin.Thomas@honestmed.com", "Company_name": "Honest-Medical", "SetName": "Calvine  Cheptoo _11/11/2023_Honest-Medical_Business Data Analyst", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 4", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 4", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 5"}, {"InterviewDate": "11/10/2023", "NoofDays": -20, "LogInterviewID": 220, "QID": 2692, "Job_Title": "Data Engineer/ETL Developer", "Job_Description": "Must-haves   - 5+ years of experience developing ETL database in a SQL Server Environment  - Strong knowledge of Data Warehousing methodology and ETL best practices  - Experience with SSIS and SSAS  - .Net experience (doing translations and storing them for later use)  - Database experience - knowing what is dirty data, how to move data, clustered and non-clustered indexing  - .Net experience (doing translations and storing them for later use). - Strong communication (verbal & written) - being able to communicate issues in a timely manner - API experience   Plusses   - DBA background  - OLAP cube development  - HTML experience - Power BI experience   Day-to-Day  Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.  This role is hybrid (up to 2-3 days onsite on some weeks) and a typical work week is Monday-Friday, 8am-5pm.", "Recruiter_First_Name": "Nathan", "Recruiter_Last_Name": "Seiler", "Recruiter_Email_Address": "Nathan.Seiler@insightglobal.com", "Company_name": "Insight Global", "SetName": "Rio Rochelle Florague_11/10/2023_Insight Global_Data Engineer/ETL Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "18", "Technical_InterviewCount": "6", "InterviewScore": "NULL"}, {"InterviewDate": "11/9/2023", "NoofDays": -21, "LogInterviewID": 223, "QID": 2694, "Job_Title": "Tableau Data Analyst", "Job_Description": "SaaS solution provider located in the Cayman Islands is searching for a (Senior) Tableau Data Analyst to work remotely from anywhere in the United States.  Candidate will join their team and be responsible for designing, developing and maintaining the Tableau dashboards and reports.     About:  This company has extensive experience in operating world-class data centers hosting SaaS solutions.  They are a 20-year-old company with a solid client base focused on building long term client relationships and world class solutions.  They have a business model for long term loyalty with their staff and clients.     Candidate will work remotely from a home office and on occasion be required to work outside of regular business hours and share on-call duties with other members on the Application Support team.  Candidate will be given the opportunity to travel and work in a Caribbean lifestyle for one week each year when they visit the company\u2019s headquarters and data centers in the Cayman Islands.  Over time is expected in this position.     Note:  Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers. Job Requirements Education:  College Degree in Computer Science, Information Systems or related field.    Technical Skills & Abilities:  Three (3)+ years proven experience as a Tableau Developer or similar role - required Proficient in Tableau Desktop and Tableau Server Strong understanding of data visualization principles and best practices Experience with data modeling, data integration, and ETL processes Strong knowledge of SQL for data manipulation and querying; extensive experience writing functions and scripts    Responsibilities:  Develop and maintain Tableau dashboards and reports to support business analytics needs Collaborate with stakeholders to gather requirements and understand business objectives Design and implement data visualizations using Tableau best practices Create complex calculations, parameters, and filters to support data analysis Optimize Tableau performance and troubleshoot issues as needed Conduct data analysis and provide insights to drive business decision-making Stay up-to-date with Tableau features and functionalities to ensure effective utilization Soft Skills:  Excellent problem-solving skills and attention to detail Strong communication and collaboration abilities Fluent in the English language Additional Information Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers.", "Recruiter_First_Name": "Marie", "Recruiter_Last_Name": "Mikelson", "Recruiter_Email_Address": "marie.mikelson@profoundjobs.com", "Company_name": "1 of 36 ProFound Staffing", "SetName": "Robelyn Florague_11/09/2023_1 of 36 ProFound Staffing_Tableau Data Analyst", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "18", "Technical_InterviewCount": "5", "InterviewScore": "NULL"}, {"InterviewDate": "11/8/2023", "NoofDays": -22, "LogInterviewID": 216, "QID": 2689, "Job_Title": "BI Data Engineer", "Job_Description": "Publishing.com has helped thousands of normal everyday people to become successful self-published authors. And along the way, we also became one the most successful companies in the US (  Want to be at the forefront of the AI revolution? Join us! We are building the most comprehensive AI-powered self-publishing platform and you get to join us at ground zero. Instead of just teaching people how to create successful books, we are going to help them do it.  About you:  You are a data engineer with strong analytical skills and hands-on experience with modern data warehousing and business intelligence solutions. You know how to use code and no-code to ingest data from various sources, how to interpret data and translate it into business insight, and how to prepare reports and dashboards that are easy to understand and digest.  And you have a great attitude!  About this role:  As our first data engineer, you will have the opportunity to make important contributions to various aspects of our data platform. Your main responsibilities are:  Build a highly scalable data warehouse Propose, design, and implement data ingestion pipelines (ELT/ETL) Maintain our local and cloud data platforms Understand and interpret business intelligence requirements and translate them into technical solutions Build business analytics and dashboards to address sales and marketing needs  Required skills:  Strong problem solving skills Strong communication skills Strong SQL skills Expert in using data warehousing solutions such as BigQuery, Snowflake, or Databricks Experience with data ingestion services such as Fivetran, Matilion, Segment, or similar Experience with Google Sheets Experience with business analytics for marketing and sales Strong programming skills in JavaScript and Python Experience with HubSpot Experience with Git Experience with agile development Experience working with marketing and sales teams Strong sense of ownership  Preferred Skills:  Experience with Google Clouds Experience building CI/CD pipelines Experience with AWS, Azure, or GCP Experience with Terraform or other IaC solutions Experience with DevOps and SRE best practices", "Recruiter_First_Name": "Olivia", "Recruiter_Last_Name": "Dandapa", "Recruiter_Email_Address": "olivia.d@publishing.com", "Company_name": "Publishing.com", "SetName": "AYODEJI OLAWOYE_11/08/2023_Publishing.com_BI Data Engineer", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1703", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "11/8/2023", "NoofDays": -22, "LogInterviewID": 217, "QID": 2690, "Job_Title": "Data Analyst", "Job_Description": "Description  Robert Half is currently working with a client seeking a Data Analyst. The Data Analyst will be responsible for the preparation of financial reports that serve as summary information for managers. The Data Analyst will be analyzing a variety of data types and reporting on that information. This Data Analyst position is for someone who is deadline driven and highly analytical.  What you get to do every single day   Call out relevant insights from compiled analytical reports  Organize, manipulate, and extract data in response to management requests  Create and share key decision-making data for market assessments, forecasting and further investigation  Complete data mining projects- Analyze corporate reports in order to create financial reports  Requirements   Complete competence in data management and manipulation  Ability to work independently with minimal oversight  BS/BA in Accounting, finance, or economics  Skilled in spreadsheet and reporting applications, including V-lookups, pivot tables, and queries  Strong communication skills and able to receive criticism well  Critical thinking and problem-solving skills are a must, as well as great attention to detail  Understanding of a variety of data models  5+ years of experience in financial planning and analysis, data analysis or similar role  Robert Half is the world\u2019s first and largest specialized talent solutions firm that connects highly qualified job seekers to opportunities at great companies. We offer contract, temporary and permanent placement solutions for finance and accounting, technology, marketing and creative, legal, and administrative and customer support roles.  Robert Half works to put you in the best position to succeed. We provide access to top jobs, competitive compensation and benefits, and free online training. Stay on top of every opportunity - whenever you choose - even on the go.  All applicants applying for U.S. job openings must be legally authorized to work in the United States. Benefits are available to contract/temporary professionals, including medical, vision, dental, and life and disability insurance. Hired contract/temporary professionals are also eligible to enroll in our company 401(k) plan. Visit", "Recruiter_First_Name": "Lauren", "Recruiter_Last_Name": "Etherton", "Recruiter_Email_Address": "Lauren.Etherton@roberthalf.com", "Company_name": "Robert Half", "SetName": "Yama Touray_11/08/2023_Robert Half_Data Analyst", "CandidateID": "37640", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 5", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 5", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 4"}, {"InterviewDate": "11/7/2023", "NoofDays": -23, "LogInterviewID": 214, "QID": 2687, "Job_Title": "Senior Data Base Developer/Data Modeler", "Job_Description": "A remote position position opened for candidates in the USA; What you will do  Design and develop database solutions using SQL Server; Create and maintain data models, database schema, and data dictionaries; Implement Service Broker queue concepts; Provide solutions to other groups and work collaboratively with cross-functional teams; Discuss pros and cons of potential solutions and make recommendations based on business needs; Perform troubleshooting and debugging of database issues; Maintain database performance by identifying and resolving production and application development Must haves  7+ years of experience in data modeling, database development, and database design; Strong experience with SQL server; Work with Control-m jobs scheduling and Jenkins; Knowledge of Service Broker queue concepts and their implementation; Ability to create database schemas, data models, and data dictionaries; Ability to work well in a team-oriented, collaborative environment; Excellent communication and interpersonal skills.", "Recruiter_First_Name": "Shreya", "Recruiter_Last_Name": "Nandi", "Recruiter_Email_Address": "shreya.nandi@agileengine.com", "Company_name": "Agile Engine", "SetName": "Mary Gathogo_11/08/2023_Agile Engine_Senior Data Base Developer/Data Modeler", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "8", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "15", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "11/3/2023", "NoofDays": -27, "LogInterviewID": 213, "QID": 2686, "Job_Title": "Sr Business/Data Analyst", "Job_Description": "Comprehend Greenhouse Gas regulatory requirements and translate them into business requirements and data objectives  Transform available data into actionable business intelligence to inform and recommend tactical and strategic Greenhouse Gas approaches  Use and manage existing date forecasting tools to generate GHG forecasts and actionable recommendations  Extend forecasting processes and methods to wider marketing and sales forecasting needs  Assimilate, aggregate, and query data to provide recommendations based on statistical analysis  Monitor data integrity and notify appropriate personnel of data impairments  Develop solutions for automating complex repeatable queries that normalize and cleanse data  Synthesize data into actionable content, and communicate findings back to the business  Become a subject matter expert on improving data, processes, and methodologies to identify inefficiencies and recommend improvements  Ensure that consistent documentation is developed and maintained to easily replicate and improve processes related to data and data analysis  Engage in creating quality metrics, reports, KPIs and Dashboards  Consult with business teams on project requirement gathering and communicating the appropriate selection, utilization, and interpretation of advanced statistical methodologies used in projects  Support GHG operational processes as needed  Effectively communicate and present to both technical and non-technical employees on advanced analytics", "Recruiter_First_Name": "Christopher", "Recruiter_Last_Name": "Hill", "Recruiter_Email_Address": "careers@paccarparts.com", "Company_name": "Paccar Parts", "SetName": "Jane Mwangi_11/03/2023_Paccar Parts_Sr Business/Data Analyst", "CandidateID": "38690", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "62.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "827", "MentorInterviewsCount": "2", "MentorInterviewsDuration": "1847", "Mentor": "Leslie Boye", "Applicant": "Jane Mwangi", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "11/3/2023", "NoofDays": -27, "LogInterviewID": 210, "QID": 2683, "Job_Title": "Database Administrator", "Job_Description": "About the job StrideCare, a healthcare multi-specialty physician group, is currently seeking a highly skilled and experienced Database Architect and Data Analyst to join our dynamic team. The ideal candidate will possess expertise in ETL processes, and Power BI, and have prior experience in the medical field.  Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.", "Recruiter_First_Name": "Rocky and Tracy", "Recruiter_Last_Name": "Massey and Miller", "Recruiter_Email_Address": "<Tracy.Miller@stridecare.com>, <rocky.massey@stridecare.com>", "Company_name": "StrideCare", "SetName": "AYODEJI OLAWOYE_11/03/2023_StrideCare_Database Administrator", "CandidateID": "33898", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 212, "QID": 2685, "Job_Title": "DATABASE ADMINISTRATOR", "Job_Description": "Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.   Qualifications And Education Requirements   Bachelor's or Master's degree in Computer Science, Information Systems, Data Science, or a related field.   Must be local or able to work Hybrid in Dallas, TX   Proven experience as a Database Architect, Data Analyst, or a similar role.   Strong proficiency in designing and managing relational databases (e.g., SQL Server, Oracle, MySQL).   Expertise in ETL processes, data integration, and transformation techniques.   In-depth knowledge of NetSuite, including configuration, customization, and integration capabilities.   Proficiency in data analysis and visualization tools such as Power BI, Tableau, or similar platforms.   Familiarity with medical data management, healthcare industry regulations, and terminology.   Strong analytical and problem-solving skills with the ability to extract insights from complex datasets.   Excellent communication and collaboration skills to effectively work with cross-functional teams and stakeholders.   Attention to detail, with the ability to prioritize tasks and manage multiple projects simultaneously.   StrideCare Offers a Total Rewards Benefits Package That Includes   Major medical insurance   Dental and vision   401k   Long- and short-term disability   Corporate outings   Fun and casual corporate environment   PTO   Paid holidays   No weekends, evenings, nights, or holidays (paid holidays)   Excellent work - life balance (Monday - Friday work schedules)   Employee Assistance Program and more!", "Recruiter_First_Name": "Tracy", "Recruiter_Last_Name": "Miller", "Recruiter_Email_Address": "Tracy.Miller@stridecare.com", "Company_name": "StrideCare", "SetName": "AYODEJI OLAWOYE_11/02/2023_StrideCare_DATABASE ADMINISTRATOR", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1690", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 204, "QID": 2678, "Job_Title": "Power BI and Power Apps Developer", "Job_Description": "Design and develop interactive Power BI reports and dashboards. Extract, transform, and load (ETL) data from various sources into Power BI. Collaborate with business users to gather requirements and translate them into effective visualizations. Develop custom applications using Power Apps to streamline business processes. Integrate Power Apps with other Microsoft 365 applications and services. Create canvas and model-driven apps that meet the organization's needs. Design and implement data models to support reporting and analytics requirements. Perform data analysis to identify trends, patterns, and insights. Automate repetitive tasks and workflows using Power Automate (Flow). Ensure seamless integration between Power BI, Power Apps, and other Microsoft 365 tools. Collaborate with cross-functional teams to understand business requirements and provide technical solutions. Train end-users on how to use Power BI reports and Power Apps applications effectively.", "Recruiter_First_Name": "Kyle", "Recruiter_Last_Name": "Skelton", "Recruiter_Email_Address": "kyle.skelton@msg.clrco.com", "Company_name": "Atlas Technologies, Inc.", "SetName": "Avworo  OGHENEKEVWE _11/02/2023_Atlas Technologies, Inc._Power BI and Power Apps Developer", "CandidateID": "38457", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "31.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "72", "MentorInterviewsCount": "2", "MentorInterviewsDuration": "674", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 209, "QID": 2682, "Job_Title": "Solution Assessment Consultant", "Job_Description": "Apeiron Sumus is looking for a Solution Assessment Consultant to join our team in United States. This person will lead the successful execution of a variety of projects from start to finish.  The ideal candidate is a self-starter with excellent time-management and problem-solving abilities who thrives in fast-paced environments. Someone with high energy, a curiosity about the industry, and tenacity and has previous Microsoft Technology sales experience. This person will bring new ideas, have a deep passion for the role and create ways to attain new accounts.  Responsibilities:  Assessment Implementation -\u202fTrusted advisor to consult on effective plan deployment and new opportunity developments. Able to qualify solution assessment opportunities, handover to Technical team for execution and position partners in the overall sales process.  Customer Engagement - Receives the nomination and engagement with the customer may begin through contact to secure acceptance of the Letter of Engagement and orchestrates project delivery under a remote assistance model.  Orchestrate Assessment process - Manage and execute the activities required to perform a Solution Assessment in each account. Starts the data collection phase, executed under a tele-assisted model that includes remote installation, configuration, and execution of discovery tools, data collection, troubleshooting, data analysis, and the creation of the deliverable for the Solution Assessment.  Report Information and Migration Handover - Shares and fine tunes the report information with Microsoft Team and Designated Migration Partner prior to presenting the team\u2019s Insights & Recommendations to the customer. Hand-offs the Assessment to a designated Migration Partner and Microsoft Field Team to act on the Migration Plan and Drive Consumption.  Partner and Supplier Relationship Management - Recommends Solution Assessment Partner (in case of partner delivered assessments) and coordinates end-to-end engagement with Partner  Professional and Technical competencies:  Hands-on experience with multiple sales techniques  Experience with Microsoft Office and CRM software  Familiarity with MS Cloud and PowerBI  Understanding of sales performance metrics Strong written and verbal communication skills  Attention to detail, data analysis, and analytical skills  Integrate consulting on Microsoft solutions and offerings in support of organizations\u2019 business needs Work with IT systems in support of collecting data  Self-Direction and a focus on quality, apply independent judgment to accomplish objectives   Desirable Certifications:  Microsoft Certified | Azure Fundamentals | AZ-900 Microsoft 365 Certified | Fundamentals | MS-900 Microsoft Certified | Dynamics 365 Fundamentals (CRM) | MB-910  Personal Profile:  Required languages: English Educational level: Bachelor\u2019s degree Special conditions or requirements: Open to work on a global environment with different cultures and languages This is a remote position", "Recruiter_First_Name": "Nydia Valenzuela", "Recruiter_Last_Name": "Salazar", "Recruiter_Email_Address": "v-nydiav@microsoft.com", "Company_name": "Apeiron Sumus LLC", "SetName": "Feven Asmelash_11/02/2023_Apeiron Sumus LLC_Solution Assessment Consultant", "CandidateID": "39112", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Ayodele Adepoju", "Applicant": "Feven Asmelash", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 205, "QID": 2679, "Job_Title": "Database Developer", "Job_Description": "Graphic Business Solutions (GBS) is currently seeking a talented Database Developer with two or more years\u2019 proven SQL Server experience to join our growing software development team.  A successful candidate for this position will have a strong background in developing and maintaining world-class data solutions using Microsoft SQL Server technologies. The candidate will have advanced T-SQL skills with a strong ability to work independently on a wide range of business-enhancing data projects. Equally important to these specific technology skills are excellent written and verbal communication skills both with the team and external teams, the ability to multi-task, the ability to translate business requirements to database requirements, the ability adapt quickly to new environments and using creativity to solve difficult problems as a key member of the software development team.  Essential responsibilities and characteristics of this position include the following:  Develop and organize SQL Server objects, such as Stored Procedures, Functions, Views, Tables, SSIS packages, etc., that support automation efforts Co-develop SQL-based solutions for an e-commerce environment Generate and deliver solutions that provide business intelligence to stakeholders Collaborate with other database developers in the software development team on complex data projects Exhibit an understanding of fundamental database design principles Ability to prioritize and manage multiple concurrent tasks and projects Ability to collaborate in a small and productive development team Motivated self-starter with the ability to learn and adapt to new technologies Passion for working with technology and excitement for creating high-quality products Rigorous attention to detail and focus on the quality of deliverables Excellent verbal and written communication skills Dedication and an appetite for learning new technologies and furthering professional growth Solid analytical and problem-solving skills Requirements:  Minimum Required Qualifications:  Must have 5 or more years\u2019 worth of experience and deep knowledge of:  MSSQL Server 2019 or higher Advanced T-SQL skillset Knowledge of MS SQL Server performance tuning, and the design and implementation of a high-availability database architecture. ETL, SSIS, SSRS SSMS and Visual Studio GIT and version control Familiarity with MS development technologies, C#, ASP.NET and web technologies, HTML, Javascript, CSS, XML etc. highly desirable. Additional Preferred Qualifications:  Tableau Experience with reporting and business intelligence systems Exposure and understanding of Agile Methodologies Proficient with all aspects of the Software Development Lifecycle Excellence in debugging practices Comfortable with GIT and deployments Expert-level proficiency in Excel Desired Education:  Associate's degree or above in Computer Science, Information Systems, Business Administration or related field Work Hours:  Typically, Monday through Friday, 8:30 am to 5:00 pm with the flexibility to meet business demands as needed. This position does not require travel.", "Recruiter_First_Name": "Bobby", "Recruiter_Last_Name": "Shreckengost", "Recruiter_Email_Address": "bobby@markful.com", "Company_name": "Markful", "SetName": "Calvine  Cheptoo _11/02/2023_Markful_Database Developer", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 4", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 3", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 2"}, {"InterviewDate": "11/1/2023", "NoofDays": -29, "LogInterviewID": 203, "QID": 2677, "Job_Title": "Senior Report Developer", "Job_Description": "Title: Senior Report Developer Location: Remote - Anywhere USA As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company. This position will focus on delivery of solutions inside our Data Management/Analytics business unit. Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Recruiter_First_Name": "Tim", "Recruiter_Last_Name": "Strandberg", "Recruiter_Email_Address": "Tim.Strandberg@datavail.com", "Company_name": "Datavail", "SetName": "EMMANUEL OJENIYI_11/01/2023_Datavail_Senior Report Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "2058", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "16", "Technical_InterviewCount": "5", "InterviewScore": "NULL"}, {"InterviewDate": "11/1/2023", "NoofDays": -29, "LogInterviewID": 208, "QID": 2681, "Job_Title": "BI Developer", "Job_Description": "Job: BI Developer  Location: Woodlands, TX  Duration: 6 Month contract-to-perm     Job Description *  The BI Developer will be responsible for the design and development of data models that support enterprise analytical reporting and dashboard solutions. This position will work closely with business users and executives to gather, define, and translate business requirements into BI solutions. The applicant must have excellent collaboration skills with the ability to communicate concepts and solutions effectively and clearly. This position will also play a key technical role requiring expert level skills in the design, development and implementation of data warehousing and BI solutions. This person needs to be located in the Houston, TX area to attend in person meetings (about once every other month) to collaborate on team meetings.", "Recruiter_First_Name": "Ray", "Recruiter_Last_Name": "Andrzejewski", "Recruiter_Email_Address": "Ray.Andrzejewski@insightglobal.com", "Company_name": "Insight Global", "SetName": "EMMANUEL OJENIYI_11/01/2023_Insight Global_BI Developer", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 4"}, {"InterviewDate": "10/31/2023", "NoofDays": -30, "LogInterviewID": 207, "QID": 2680, "Job_Title": "Business Intelligence Developer (BI)", "Job_Description": "\"Responsibilities Job Description Job Description  The Business Intelligence (BI) Developer is responsible for the design, creation, and maintenance of sustainable reporting solutions to support data-driven decisions by the client.  Drives significant analytic initiatives in support of business strategies.  Develops an understanding of business processes and operational tools in order to create meaningful reporting designs.  Responsible for the analysis of business data needs and develops the required data modeling.  Designs and develops creative and interactive data visualizations.  Partners with business leaders across the organization to support and implement high-quality, data-driven solutions.  Assists IT with collecting and storing operational data from source systems.  Stays current on all processes, techniques, tools, and industry best practices to ensure the client is at the forefront of Business Intelligence solutions.  REQUIRED QUALIFICATIONS  3-5 years of Business Intelligence experience  3-5 years of Data Analytics, Dashboarding, Reporting, or Analysis experience  Bachelor\u2019s Degree in Data Science, Business, or related field  JOB FUNCTIONS AND RESPONSIBILITIES  Partner with business leaders and SMEs to understand reporting and analytics needs within their functions.  Gather, document, and analyze business reporting and communications requirements from stakeholders  Map business requirements to source data structures and develop data models from data located within multiple data stores utilizing data solutions such as SQL or Snowflake  Design, build, and maintain dashboards visualizations using BI applications such as Tableau  Ensure dashboards are creatively designed and tell a story behind the data.  Analyze report data for accuracy and report on potential quality errors  Participate in peer review process to ensure all reports are accurate prior to distribution  Partner with business owners to prioritize projects to ensure the most important items are being successfully addressed.  Partner with IT to identify and store required data sets.  Provide ongoing analytics expertise and insights into data trends across the operational segments.  Lead and facilitate dashboard demonstration and educational sessions  Provide ad-hoc data analysis and support to business functions.  REQUIRED COMPETENCIES  Healthcare experience  Advanced skills in data applications such as Power BI, ETL, Tableau (some knowledge) and SQL (some knowledge)  Ability to display complex quantitative data in a simple, intuitive format to present findings in a clear manner  Creativity in designing data visualizations  Strong understanding of data structures that ease the generation of reliable data  Strong analytical skills with some moderate project management knowledge  Proficient Data mining and normalization skills  How to Apply:  If you are a results-driven professional with the qualifications and experience required for this role, we invite you to apply by responding to this portal or send your resume to careers@StoneLaurel.com with the subject line \"\"BI Developer.\"\" We look forward to welcoming a dedicated and strategic thinker to our team.  Company Description  StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "Recruiter_First_Name": " NC", "Recruiter_Last_Name": " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.  While our engagements have taken us around the globe", "Recruiter_Email_Address": " working with some of the largest Fortune 500 companies", "Company_name": " our focus has always been on being the best", "SetName": " not the biggest.  We believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "CandidateID": " client focus", "SurveyResponse": " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.  Company Description StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "InterviewType": " NC", "Preparationscore": " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.\\r\\n\\r\\nWhile our engagements have taken us around the globe", "AutoInterviewsCount": " working with some of the largest Fortune 500 companies", "AutoInterviewsDuration": " our focus has always been on being the best", "MentorInterviewsCount": " not the biggest.\\r\\n\\r\\nWe believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "MentorInterviewsDuration": " client focus", "Mentor": " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.\"", "Applicant": "George", "Recruiter_InterviewCount": "Williams", "Technical_InterviewCount": "gwilliams@stonelaurel.com", "InterviewScore": "StoneLaurel"}, {"InterviewDate": "10/26/2023", "NoofDays": -35, "LogInterviewID": 200, "QID": 2674, "Job_Title": "Sr. Consultant, Power BI Analyst", "Job_Description": "Technossus, a leading software solutions and technology consulting company, is seeking a qualified and experienced Sr. Consultant, Power BI Analyst to join our team. As a Sr. Consultant, Power BI Analyst, you will be responsible for developing interactive and insightful dashboards and reports to help our clients make better-informed business decisions. At Technossus, we value our commitment to delivering cutting-edge solutions, and our Sr. Consultant, Power BI Analyst is a key player in ensuring our clients receive exceptional value and quality every time.  Location: Full time onsite in Long Beach 5 days a week   Responsibilities Collaborate with stakeholders and team members to understand their business intelligence needs and translate them into data visualizations that provide actionable insights. Develop interactive dashboards and reports in Power BI to track business performance and identify trends. Analyze and interpret data to provide recommendations that enhance decision-making processes. Design and implement data models and data architecture to support the management and analysis of large data sets. Identify and resolve data quality and integration issues. Share best practices with the team to increase knowledge and optimize processes. Stay up-to-date with the latest Business Intelligence trends and technologies. Requirements  Proven experience in developing high-quality dashboards and reports in Power BI. Understanding of Data Warehouse design and architecture. Strong business acumen and the ability to translate business requirements into technical solutions. Excellent communication and presentation skills. 5+ years of working experience as BI Analyst and a bachelor's degree in engineering, computer science, commerce degree or equivalent 5+ Years of Power BI experience with DAX and Power Query Strong/excellent SQL Skills including PL/SQL Benefits  Our job titles may span more than one career level. The starting base pay for this role is between $110,000.00 and $140,000.00. The actual base pay is dependent upon many factors, such as: training, transferable skills, work experience, business needs, and market demands. The base pay range is subject to change and may be modified in the future. This role may also be eligible for bonus and benefits.  Benefits:  Medical, Dental, Vision, 401k Match Health Savings & Flexible Spending Account Health Care FSA Dependent Day Care FSA Company paid life, AD&D, & LTD insurance Flexible PTO policy Continued training to level up your skills Supplemental benefits available: Accident Insurance Critical Illness Insurance Hospital Indemnity Employee Assistance Program Physical Demands:  While performing the duties of this job, the employee routinely is required to sit; walk; talk and hear; use hands to keyboard, finger, handle, and feel; stoop, kneel, crouch, twist, reach, and stretch. Speaking and hearing ability sufficient to communicate in person, over telephone, and/or video conference.  The ability to stand, walk, and sit in a computer chair for long periods of time. The ability to see and respond to dangerous situations. Speaking and hearing ability sufficient to communicate in person, over telephone and/or video conferences. Sufficient hand, arm, and finger dexterity to operate a computer keyboard and other office equipment. Emotional Demands:  While performing the duties of this role the employee is required to maintain a professional and positive attitude with clients and colleagues. Frequent deep thinking and interactions with multiple stakeholders and clients. Ability to utilize knowledge and experience to problem solve, make quick decisions, and interpret proposals publicly or in group setting.  Ability to problem solve Able to make quick decisions Frequent deep thinking Communicate clearly with coworkers Lead and direct a team Articulate objectives and expectations clearly Speak publicly Interpret data", "Recruiter_First_Name": "Julie", "Recruiter_Last_Name": "Antifave", "Recruiter_Email_Address": "Julie.Antifave@technossus.com", "Company_name": "Technossus", "SetName": "Calvine  Cheptoo _10/26/2023_Technossus_Sr. Consultant, Power BI Analyst", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 3", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 3", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/26/2023", "NoofDays": -35, "LogInterviewID": 201, "QID": 2675, "Job_Title": "Power BI Developer", "Job_Description": "POSITION: POWER BI DEVELOPER/ANALYST \u2013 W2 ONLY LOCATION: REMOTE TYPE: DIRECT HIRE Are you a problem-solver with a passion for data analysis and visualization? Our direct client, a leader in the global travel industry including being well known in global travel analytics, is seeking a Business Intelligence (BI) Developer/Analyst to join their leading-edge team. In this role, you&#39;ll bring your expert Power BI development skills, data analytics, SQL knowledge, and understanding of relational databases, working with valued clients in the corporate travel industry. You&#39;ll be at the forefront of their analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for their client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. This is also a great opportunity to work for a Microsoft Power BI Partner! Responsibilities: \uf0b7 Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client&#39;s needs. \uf0b7 Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. \uf0b7 SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. \uf0b7 Client Relationship Management: Work directly with a specific, valued main client, understanding their needs, and presenting your findings in a clear and persuasive manner. Qualifications: \uf0b7 Bachelor&#39;s Degree in Information Systems, Computer Science, Business Administration, or a related field. \uf0b7 Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. \uf0b7 Solid experience in SQL and working with relational databases. \uf0b7 Excellent analytical skills with the ability to dissect large amounts of data. \uf0b7 Strong communication skills and the ability to effectively convey complex information. \uf0b7 Experience in the corporate travel industry is a plus.", "Recruiter_First_Name": "Suzy", "Recruiter_Last_Name": "Carlson", "Recruiter_Email_Address": "scarlson@entelli.com", "Company_name": "Entelli", "SetName": "Mary Gathogo_10/26/2023_Entelli_Power BI Developer", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/25/2023", "NoofDays": -36, "LogInterviewID": 197, "QID": 2671, "Job_Title": "Data Engineer", "Job_Description": "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.   This position is remote. We are unable to offer work sponsorship for this role.    We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.   Your impact:   Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company\u2019s product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform.", "Recruiter_First_Name": "Aaron", "Recruiter_Last_Name": "Talbert", "Recruiter_Email_Address": "aaron.talbert@buyersedgeplatform.com", "Company_name": "ArrowStream", "SetName": "Yama Touray_10/25/2023_ArrowStream_Data Engineer", "CandidateID": "37640", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/24/2023", "NoofDays": -37, "LogInterviewID": 198, "QID": 2672, "Job_Title": "Business Intelligence Developer", "Job_Description": "Primarily responsible for the data warehouse ETL framework and architecture Partner and align with business leaders and stakeholders to understand the business needs and address them using the many variations of visualizers PowerBI has to offer Provide training, guidance, and support to users Build & modify a solid data infrastructure, to include underpinning enterprise scale BI analytics / reporting platform, add / create new data models and integrate new data as needed Monitor analytics and metrics results Interact with internal clients to evaluate performance, availability and to collaborate on ways to improve the platform / reporting data Identify and act upon data infrastructure needs, data warehouse design, infrastructure maintenance and investment areas Manage infrastructure projects from beginning to end, including ideation, execution, socialization, and stakeholder management Ensure data integrity and compliance with any and all data security policies Translate business requirements into technical documentation Debug, monitor and troubleshoot BI Solution in development and production environments Conduct and participate in code walkthroughs and document technical design Follow the release cycles and implement on-time delivery of bug fixes, change requests and enhancements Other Duties as assigned", "Recruiter_First_Name": "Luca", "Recruiter_Last_Name": "Talone", "Recruiter_Email_Address": "luca.talone@niceforyou.com", "Company_name": "NICE North America LLC", "SetName": "Talq Tera_10/24/2023_NICE North America LLC_Business Intelligence Developer", "CandidateID": "39119", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying", "InterviewType": " with excellent question clarity", "Preparationscore": " engaging interviewer", "AutoInterviewsCount": " and relevant technical aspects. Strong performance in showcasing skills and qualifications", "AutoInterviewsDuration": " though a challenge in recruiter miscommunication. Positive sentiment in open-ended responses", "MentorInterviewsCount": " but some neutrality in additional feedback.\"\"", "MentorInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "Mentor": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Applicant": "     \"\"HandlingChallengingQuestions\"\": 3", "Recruiter_InterviewCount": "     \"\"LikelihoodToRecommendCompany\"\": 3", "Technical_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 3", "InterviewScore": "     \"\"InterviewerEngagement\"\": 3"}, {"InterviewDate": "10/21/2023", "NoofDays": -40, "LogInterviewID": 195, "QID": 2669, "Job_Title": "Senior BI Developer", "Job_Description": "Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.", "Recruiter_First_Name": "Patrick", "Recruiter_Last_Name": "Gallagher", "Recruiter_Email_Address": "Patrick.Gallagher@msg.paycomonline.com", "Company_name": "Cedar Gate Technologies Recruiter", "SetName": "EMMANUEL OJENIYI_10/21/2023_Cedar Gate Technologies Recruiter_Senior BI Developer", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 4", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 4", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 4"}, {"InterviewDate": "10/20/2023", "NoofDays": -41, "LogInterviewID": 196, "QID": 2670, "Job_Title": "Senior BI Developer", "Job_Description": "Position Summary  Reasons you will want this position:  Cedar Gate Technologies is a rapidly growing company with limitless career growth and advancement for top performers Our culture appreciates and rewards creative ideas, especially those that achieve better outcomes for everyone Interact regularly with our executives and senior leadership. Gain valuable work experience with the leader in healthcare technology for value-based care Work in a highly productive environment with a Remote Hybrid work schedule, including a focus on work-life balance. Summary  Cedar Gate Technologies is looking to hire a hard-working and organized Senior BI Developer to be responsible for the upkeep and development of reports and dashboards to support business performance monitoring and decision-making. In this role, you will build and maintain designs for generating reports on financial and market intelligence, collaborate with internal department leaders and global resources to understand business needs, and successfully communicate project results and challenges. You will be part of a talented team that demonstrates superb technical competency, delivering mission-critical reporting infrastructure and ensuring the highest levels of performance and security.   Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.  Job Location: Hybrid Remote in our office in Houston, TX, but also considering Fully Remote within the USA   Required Experience / Qualifications  5 years of experience performing SQL-based data analysis 2 years of experience building friendly end-user reports and dashboards in SSRS, Power BI, or Tableau. Ability to work well under pressure by efficiently prioritizing and managing multiple tasks to meet performance expectations and deadlines. Superior customer service skills with demonstrated experience of this on the resume. Excellent written and verbal communication skills in English. Consistently presents a professional, businesslike image to the public, especially in front of clients, visitors, and internal leadership. BS/BA in a related field to Management Information Systems, Healthcare Management, or Computer Science/Engineering. Demonstrate strong critical thinking and analytical skills. Excellent interpersonal and observational skills in order to assess trainee\u2019s understanding and progress. Possess a positive attitude and a willingness to learn from everyone at all levels of experience. Self-motivated and team-oriented.", "Recruiter_First_Name": "Patrick", "Recruiter_Last_Name": "Gallagher", "Recruiter_Email_Address": "patrick.gallagher@cedargate.com", "Company_name": "Cedar Gate Technologies", "SetName": "EMMANUEL OJENIYI_10/20/2023_Cedar Gate Technologies_Senior BI Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "14", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/18/2023", "NoofDays": -43, "LogInterviewID": 186, "QID": 2662, "Job_Title": "Senior Reports Developer", "Job_Description": "Title: Senior Report Developer  Location: Remote - Anywhere USA  As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company.  This position will focus on delivery of solutions inside our Data Management/Analytics business unit.  Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Recruiter_First_Name": "Tim", "Recruiter_Last_Name": "Strandberg", "Recruiter_Email_Address": "Tim.Strandberg@datavail.com", "Company_name": "Datavail", "SetName": "EMMANUEL OJENIYI_10/18/2023_Datavail_Senior Reports Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "13", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/18/2023", "NoofDays": -43, "LogInterviewID": 180, "QID": 2657, "Job_Title": "Business Intelligence Report Analyst", "Job_Description": "Position Overview The Talent Business Intelligence (BI) Reporting Analyst works within Talent & Program Delivery to provide expertise in data analysis, business intelligence tools, and learning and development measurement principles to contribute to the ongoing improvement of employee performance and skills within the organization. This individual will design, develop, and validate dashboards, alerts, and reports that measure business performance across Talent & Delivery programs for management purposes. Ensures information is easily available to users for direct consumption. Conducts analyses of functional business processes and participates in the development of business cases in the support of continuous improvement programs and the implementation of enabling technologies. This individual provides leadership in facilitating information gathering, structured documentation and presentation of findings to all levels of management. This role enhances program effectiveness and enables sound business decisions by providing insights and data which are accurate, relevant, and reliable. Primary Responsibilities To perform this job successfully, an individual must be able to perform each essential duty satisfactorily. The requirements listed below are representative of the knowledge, skill, and/or ability required. Reasonable accommodations may be made to enable individuals with disabilities to perform the essential functions.  Collect and organize data from various sources, including learning management systems (LMS), employee performance training records, surveys, and other relevant systems. Define and track key performance indicators (KPIs) related to learning and development, such as training completion rates, learner engagement, skill acquisition, and business impact. Interprets & analyzes operational metrics in order to create meaningful dashboards & reporting related to Talent & Program Delivery initiatives. Design, build and deploy BI solutions Works with subject matter experts, especially within various departments across the enterprise, to understand business KPIs and resulting outcomes, defining requirements for data integration, reporting, analysis, and descriptive, predictive, and prescriptive business intelligence solution options. Builds and updates process control measurements and changes existing reports and dashboards as needed Increases the usage practices around objective performance data in day-to-day management activities Other duties as assigned Education and Experience  The minimum education, experience, skills and certifications/training required to successfully perform the job:  Bachelor\u2019s degree in business, computer science, information systems or equivalent work experience Minimum 4 years\u2019 experience Oracle BI, SAP Business Objects etc. Knowledge of Data Warehouse platforms Knowledge of languages such as Python, R, Scala, SQL, etc. Experience working with multidimensional data sets/databases such as SQL, Salesforce, JSON, etc. Strong MS Office skills, especially with Power BI and Excel Understanding of report writing required Experience with Lean Six Sigma preferred", "Recruiter_First_Name": "Elisa", "Recruiter_Last_Name": "Wingate", "Recruiter_Email_Address": "EWingate@paylocity.com", "Company_name": "Paylocity", "SetName": "Calvine  Cheptoo _10/18/2023_Paylocity_Business Intelligence Report Analyst", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 1", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 1", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 3", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 2", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/18/2023", "NoofDays": -43, "LogInterviewID": 193, "QID": 2668, "Job_Title": "Data Engineer", "Job_Description": "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.  This position is remote. We are unable to offer work sponsorship for this role.  We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.  Your impact:  Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company's product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform. About you:  Microsoft SQL Server solutions DB Architecture Stored Procedure SSIS Performance Tuning Enterprise Analytics Toolsets Examples: MicroStrategy, Power BI, Tableau, Looker Python Scripting Agile Development Process Jira 3+ years hands-on experience in developing and architecture of large-scale, multi-tenant, real-time, customer-facing data platforms using relational and non-relational database platforms and micro-services architecture patterns. 3+ years hands-on experience in developing Microsoft SQL Server solutions including DB architecture, stored procedure, SSIS and performance tuning. 1+ years hands-on experience in designing and developing enterprise analytics reports and dashboards that are deployed into a customer-facing analytics reporting platform. 1+ years hands-on experience with enterprise analytics back-end components including schema, analytics engine and web layer to support a customer-facing analytics reporting platform. 1+ years hands-on experience with REST API, Python scripting experience is a plus. Significant experience collaborating with individuals in product development and engineering roles to envision and deliver a customer-facing analytics report platform. Experience in delivering an agile environment and understand how to maximize results from sprints, releases and road maps. Experience in creating a variety of architecture and business artifacts to communicate all aspects of a proposed solution to a diverse audience comprised of technical and business team members. Experience in designing and leading experiments or proofs of concept which increase team knowledge and bring about effective technical and business decisions. Keep up with industry trends, enjoy teaching yourself new technology, and enjoy talking about different technical problems and their solutions. Courage to debate with colleagues and drive out the best solution for the organization, not just your solution. One or more industry certifications in a relevant data architecture or engineering topic area.", "Recruiter_First_Name": "Aaron", "Recruiter_Last_Name": "Talbert", "Recruiter_Email_Address": "aaron.talbert@buyersedgeplatform.com", "Company_name": "ArrowStream", "SetName": "Yama Touray_10/18/2023_ArrowStream_Data Engineer", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "6", "AutoInterviewsDuration": "425", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "10/17/2023", "NoofDays": -44, "LogInterviewID": 189, "QID": 2665, "Job_Title": "Navy ERP Level III Data Analyst", "Job_Description": "NavAide is on the lookout for dedicated professionals committed to supporting the Navy's strategic alignment in enhancing the FM workforce, standardizing business processes, and leveraging data analytics. Specifically, this role will engage deeply in the Navy ERP data migration initiative and facilitate close collaboration with FM&C and Government clients. If you thrive in dynamic, challenging settings and have a penchant for pioneering change and innovation, then this opportunity might just be your next great leap.  Duties & Responsibilities:  Work in tandem with FM&C and Government clients, understanding data migration needs, and aligning them with the strategic aspirations of the ASN FM&C. Lead and oversee the creation and deployment of a Program Management Plan, touching crucial facets like organizational structure, transition plan, risk management, and performance metrics. Steer data health assessments and migration processes including, but not limited to, data mapping, post-migration data validation, and business transition. Oversee financial reconciliation, DDRS reporting, and user acceptance testing. Be at the forefront of organizational change management by crafting strategies and conducting change readiness assessments. Play a pivotal role in training strategy development, execution, and user management to ensure a smooth and hitch-free data migration process. Provide unwavering leadership to subordinate teams, making sure of strict adherence to financial standards and guidance. Knowledge, Skills & Abilities:  Demonstrable expertise in IT development, database management, and data analytics. Excellent communication, negotiation, and problem-solving acumen. Strong alignment with NavAide's ethos and guiding principles. Proficiency in tools and languages such as SQL, Python, and R, along with familiarity with data visualization tools like Tableau and Power BI. In-depth understanding of Navy ERP migration or related large-scale data migration projects. Education & Experience:  A Bachelor's Degree from an accredited institution in a field relevant to the role. Between 6-15+ years of work experience, with a preference for those who have engaged with State or Federal Government agencies or sizable corporations. While not mandatory, certifications or exposure to the Department of Navy Financial Management & Systems would be an added advantage.", "Recruiter_First_Name": "Lauren", "Recruiter_Last_Name": "Poynter", "Recruiter_Email_Address": "candidate-5eba678d684f@navaide.breezy-mail.com", "Company_name": "NavAide", "SetName": "Calvine  Cheptoo _10/17/2023_NavAide_Navy ERP Level III Data Analyst", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "195", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "10/17/2023", "NoofDays": -44, "LogInterviewID": 192, "QID": 2667, "Job_Title": "ETL Developer", "Job_Description": "Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.", "Recruiter_First_Name": "Paige", "Recruiter_Last_Name": "Bucher", "Recruiter_Email_Address": "Paige.Bucher@insightglobal.com", "Company_name": "Insight Global", "SetName": "EMMANUEL OJENIYI_10/17/2023_Insight Global_ETL Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "12", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/14/2023", "NoofDays": -47, "LogInterviewID": 175, "QID": 2652, "Job_Title": "Power BI Reporting Specialist", "Job_Description": "This is the job\u2026. Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026. 3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026. Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "Recruiter_First_Name": "Kelly", "Recruiter_Last_Name": "Dye", "Recruiter_Email_Address": "kdye@acronym.com", "Company_name": "Acronym", "SetName": "Mary Gathogo_10/14/2023_Acronym_Power BI Reporting Specialist", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/13/2023", "NoofDays": -48, "LogInterviewID": 187, "QID": 2663, "Job_Title": "Product BI Analyst", "Job_Description": "About the job ABOUT US Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards! ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable. Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns. With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement. THE ROLE The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting. We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements. You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units. KEY TASKS & RESPONSIBILITIES Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Liz", "Recruiter_Last_Name": "Ostrander", "Recruiter_Email_Address": "lizostrander@auctiontechnologygroup.com", "Company_name": "Auction Technology Group", "SetName": "JORUM MWANGI_10/13/2023_Auction Technology Group_Product BI Analyst", "CandidateID": "37975", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "AMINAT OKERINDE", "Applicant": "JORUM MWANGI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "10/13/2023", "NoofDays": -48, "LogInterviewID": 179, "QID": 2656, "Job_Title": "BI Developer", "Job_Description": "No description details", "Recruiter_First_Name": "Brittany", "Recruiter_Last_Name": "Butler", "Recruiter_Email_Address": "bbutler@tetratec.com", "Company_name": "TETRA Technologies", "SetName": "EMMANUEL OJENIYI_10/13/2023_TETRA Technologies_BI Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "11", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/12/2023", "NoofDays": -49, "LogInterviewID": 182, "QID": 2659, "Job_Title": "Senior Business Analyst Data Visualization", "Job_Description": "Senior Analyst \u2013 Business Strategy and Data Visualization  Incredible well-established, high growth Texas based company is looking for a to join their San Antonio team! Company offers challenge, is team-oriented, has a great work/life balance and a career path! This Company is recognized for its customer service focus and single digit turnover!  The Senior Analyst is responsible for analyzing data and presenting insightful recommendations and findings!  Essential Functions:  \u00b7 Informs marketing strategy by analyzing marketing campaign effectiveness and ROI, sharing insights about response rates across channels and audiences with Marketing Managers  \u00b7 Perform analysis and creates insight that inform sales and marketing decisions in operations, sales, marketing, and support groups.  \u00b7 Presents valuable insightful information and recommends actionable items.  \u00b7 Downloads data from multiple systems and reporting databases, develops and disseminates reports to end users.  \u00b7 Responds to data requests from management and performs basic reporting.  \u00b7 Develops and executes complex reports and custom queries.  \u00b7 Prepares technical reports by collecting, analyzing, and summarizing information and trends from various systems.  \u00b7 Maintains databases for the collection, analysis, and dissemination of operational data throughout the company.  \u00b7 Entry, extraction, and ad-hoc reporting from various systems to support business objectives and the needs of the department.  \u00b7 Provides report training to applicable departments/roles.  \u00b7 Creates and provides opportunity and market share reports and analysis using all applicable business reporting databases.  Qualifications:  \u00b7 High school diploma or equivalent required; BA/BS, preferred.  \u00b7 A minimum of three years of work-related experience required.  \u00b7 Strong knowledge of data analytics and applicable reporting tools  \u00b7 Strong analytical and database management skills  \u00b7 Strong working knowledge and/or experience including but not limited to DBS, Tableau, Alteryx, WMS, Salesforce, MS Dynamics and Outlook  \u00b7 Ability to identify problems and to review related information to develop and evaluate options and implement solutions.  \u00b7 Consulting and influencing abilities.  \u00b7 Excellent interpersonal and customer service skills  \u00b7 Creative ability to understand the implications of new information for both current and future problem-solving and decision-making.  \u00b7 Ability to train and motivate others.  \u00b7 Outgoing personality  #IND1  Job Type: Full-time  Pay: $81,000.00 - $88,000.00 per year  Benefits:  401(k) 401(k) matching Dental insurance Flexible spending account Health insurance Health savings account Paid time off Parental leave Professional development assistance Tuition reimbursement Vision insurance Schedule:  Monday to Friday Work Location: Hybrid remote in Irving, TX 75062", "Recruiter_First_Name": "Vanessa", "Recruiter_Last_Name": "Burk", "Recruiter_Email_Address": "vanessa@zarecruiting.com", "Company_name": "Z & A Recruiting", "SetName": "LILIAN NJERI_10/12/2023_Z & A Recruiting_Senior Business Analyst Data Visualization", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "5", "InterviewScore": "NULL"}, {"InterviewDate": "10/12/2023", "NoofDays": -49, "LogInterviewID": 181, "QID": 2658, "Job_Title": "Business Intelligence Developer", "Job_Description": "Primarily responsible for the data warehouse ETL framework and architecture Partner and align with business leaders and stakeholders to understand the business needs and address them using the many variations of visualizers PowerBI has to offer Provide training, guidance, and support to users Build & modify a solid data infrastructure, to include underpinning enterprise scale BI analytics / reporting platform, add / create new data models and integrate new data as needed Monitor analytics and metrics results Interact with internal clients to evaluate performance, availability and to collaborate on ways to improve the platform / reporting data Identify and act upon data infrastructure needs, data warehouse design, infrastructure maintenance and investment areas Manage infrastructure projects from beginning to end, including ideation, execution, socialization, and stakeholder management Ensure data integrity and compliance with any and all data security policies Translate business requirements into technical documentation Debug, monitor and troubleshoot BI Solution in development and production environments Conduct and participate in code walkthroughs and document technical design Follow the release cycles and implement on-time delivery of bug fixes, change requests and enhancements Other Duties as assigned", "Recruiter_First_Name": "Luca", "Recruiter_Last_Name": "Talone", "Recruiter_Email_Address": "luca.talone@niceforyou.com", "Company_name": "Nice North America", "SetName": "Talq Tera_10/13/2023_Nice North America_Business Intelligence Developer", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "4", "AutoInterviewsDuration": "75", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/11/2023", "NoofDays": -50, "LogInterviewID": 155, "QID": 2632, "Job_Title": "Data Developer 2", "Job_Description": "5+ years SQL Development  Role Experience with SSIS and SSRS Looking for local to the Woodlands(greater Houston area).  Available for hybrid-remote work, but not looking to hire anyone remote that isn\u2019t local.  Basically if they are too far away that can\u2019t ask them to come into the office tomorrow, then they are too far away.  SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.   SQL Server Developer III Qualifications  Ideally 5- 7 years\u2019 experience in a SQL Server development role required. Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. 2+ years of experience monitoring database performance and tuning to maximize efficiency required. SQL Server Integration and Reporting Services experience required. High School Diploma or equivalent required. Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.", "Recruiter_First_Name": "Thomas", "Recruiter_Last_Name": "Johnson", "Recruiter_Email_Address": "ThomasJ@woodforest.com", "Company_name": "Procom - Woodforest National Bank", "SetName": "OLUKAYODE AKINRIMISI_10/11/2023_Procom - Woodforest National Bank_Data Developer 2", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "6", "AutoInterviewsDuration": "468", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/11/2023", "NoofDays": -50, "LogInterviewID": 178, "QID": 2655, "Job_Title": "Business Intelligence Analyst II", "Job_Description": "Overview:Shift4 (NYSE: FOUR) is boldly redefining commerce by simplifying complex payments ecosystems across the world. As the leader in commerce-enabling technology, Shift4 powers billions of transactions annually for hundreds of thousands of businesses in virtually every industry. For more information, visit www.shift4.com. We are looking for a Business Intelligence Analyst (BA) with a Data Mapping Focus to join our Information Technology Group. As a BIA, you will be understanding business operations and gather, analyze and identify data from their sources to map to target databases and reports of the Business Intelligence solution to ensure the flow of information and data to the entire organization. The position requires at least 3 years of prior experience as a Business Intelligence Analyst within Data Mapping. We are looking for individuals that are extremely self-sufficient, available to work flexible hours and hold themselves to the highest standards of professionalism. Responsibilities:  Responsible for the BI Data Mapping, which includes analyzing business requirements from stakeholders, identifying location of necessary data from technical systems, and defining transformations to meet target needs. Create and maintain documents of needed BI Data Mapping. Conduct source data profiling for anomalies and information summaries. Interpret data from a business perspective to aid in the modeling of the data targets such as business intelligence reports or an enterprise data warehouse. Supports the strategy for how data will be documented, handled, stored and processed to support the requirements from across all business units. Provides support for the ETL and BI developers for all data related analysis, questions and issues. Maintain accountability of Data Mapping using our Software Development Life Cycle (SDLC). Contribute to and enforce the use of the Business Intelligence solution. Support key metrics and shared goals that determine success for a particular area. Qualifications:  3-5+ years of experience in business intelligence analysis surrounding system knowledge and data mapping. Advanced experience of technical systems from both the application and data repository points of view. Advanced experience in SQL proficiency (T-SQL, MySQL, and PostgreSQL). Advanced experience in extracting, transforming and mining of data. Advanced experience with BI tools such as Tableau and ETL tools like SSIS. Advanced experience working with various data sources such as AWS Redshift, Postgres, SQL Server, Amazon Athena, Excel, Flat Files, etc. Advanced experience working with large data sets from sources such as AWS Redshift, Postgres, SQL Server, etc. Experience working with an Enterprise Data Warehouse and Dimensional Databases is a plus. Advanced experience of the SDLC and how BIA processes fit into KANBAN and Scrum Frameworks. Experience with Jira and Confluence is a plus. Ability to prioritize multiple tasks and easily adjust to changing priorities. Ability to identify problems, initiate solutions, and effectively collaborate and communicate with team members. Have excellent verbal and written communication skills. Location: Remote  Location: 2202 N. Irving Street, Allentown, PA 18109  Job Type: Full-time  Experience:  SQL: 3 years (Required) Oracle: 3 years (Preferred) finding, understand and working with data in a variety of databases/files: 3 years (Required) understanding the business process of systems: 3 years (Required) data mapping: 3 years (Required) documentation of data mapping (reports): 3 years (Required) writing queries and simple database view: 3 years (Required) Microsoft Excel: 3 years (Required)", "Recruiter_First_Name": "Rita", "Recruiter_Last_Name": "Varga", "Recruiter_Email_Address": "rita.varga@shift4.com", "Company_name": "Shift4 Payments", "SetName": "Mary Gathogo_10/11/2023_Shift4 Payments_Business Intelligence Analyst II", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 1", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 2", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 2", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 3", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 2"}, {"InterviewDate": "10/10/2023", "NoofDays": -51, "LogInterviewID": 177, "QID": 2654, "Job_Title": "Product BI Analyst", "Job_Description": "About the job ABOUT US Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards! ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable. Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns. With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement. THE ROLE The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting. We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements. You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units. KEY TASKS & RESPONSIBILITIES Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Liz", "Recruiter_Last_Name": "Ostrander", "Recruiter_Email_Address": "lizostrander@auctiontechnologygroup.com", "Company_name": "ATG (Auction Technology Group)", "SetName": "Nadege Nguemo Mbouyo_10/10/2023_ATG (Auction Technology Group)_Product BI Analyst", "CandidateID": "34701", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "10/9/2023", "NoofDays": -52, "LogInterviewID": 176, "QID": 2653, "Job_Title": "Product BI Analyst", "Job_Description": "About the job ABOUT US  Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards!   ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable.   Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns.     With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement.   THE ROLE  The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting.   We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements.   You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units.   KEY TASKS & RESPONSIBILITIES   Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Liz", "Recruiter_Last_Name": "Ostrander", "Recruiter_Email_Address": "lizostrander@auctiontechnologygroup.com", "Company_name": "Auction Technology Group", "SetName": "Nadege Nguemo Mbouyo_10/09/2023_Auction Technology Group_Product BI Analyst", "CandidateID": "34701", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 2", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 3", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 2", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 4"}, {"InterviewDate": "10/8/2023", "NoofDays": -53, "LogInterviewID": 172, "QID": 2649, "Job_Title": "Product BI Analyst", "Job_Description": "Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Matea", "Recruiter_Last_Name": "Jerkovic", "Recruiter_Email_Address": "mateajerkovic@auctiontechnologygroup.com", "Company_name": "ATG (Auction Technology Group)", "SetName": "Nadege Nguemo Mbouyo_10/08/2023_ATG (Auction Technology Group)_Product BI Analyst", "CandidateID": "34701", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 162, "QID": 2639, "Job_Title": "Data Developer II", "Job_Description": "SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.", "Recruiter_First_Name": "Milind", "Recruiter_Last_Name": "Sethi", "Recruiter_Email_Address": "milinds@procomservices.com", "Company_name": "Woodforest National Bank", "SetName": "OLUKAYODE AKINRIMISI_10/07/2023_Woodforest National Bank_Data Developer II", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "997", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 171, "QID": 2648, "Job_Title": "Data Developer II", "Job_Description": "The Data Developer II will be responsible for developing, supporting, and enhancing database programs and reports using the SQL platform. This senior position typically handles projects of a more complex nature and serves as a resource to junior team members.  Key Responsibilities: \u00b7  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. \u00b7  Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. \u00b7  Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. \u00b7  Monitors database performance and tunes to maximize efficiency. \u00b7  Develops new and enhances existing database objects and packages to advance functionality and automation of systems.  Competencies Required: \u00b7  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. \u00b7  Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. \u00b7  Self-starter with the ability to work independently while supporting a team environment. \u00b7  Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. \u00b7  Flexibility to provide after hours and weekend support on occasion to support business needs. \u00b7  Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. \u00b7  Proficient with database performance monitoring and tuning to maximize efficiency. \u00b7  Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems. Qualifications   Minimum Qualifications/Experience: \u00b7  5-7 years\u2019 experience in a SQL Server development role required.    \u00b7  Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. \u00b7  2+ years of experience monitoring database performance and tuning to maximize efficiency required. \u00b7  SQL Server Integration and Reporting Services experience required.  Formal Education & Certification: \u00b7  High School Diploma or equivalent required. \u00b7  Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.  Work Status: \u00b7  Full-Time.  Supervisory Responsibility: \u00b7  None.  Travel: \u00b7  No travel expected.  Working Conditions: \u00b7  Conditions involve lifting no more than ten pounds, sitting most of the time, but may involve walking, moving, or standing for brief periods, and occasionally lifting and carrying articles like files, ledgers, folders, etc.", "Recruiter_First_Name": "Milind", "Recruiter_Last_Name": "Sethi", "Recruiter_Email_Address": "milinds@procomservices.com", "Company_name": "Woodforest National Bank", "SetName": "OLUKAYODE AKINRIMISI_10/07/2023_Woodforest National Bank_Data Developer II", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 166, "QID": 2643, "Job_Title": "Senior IT Business System Analyst", "Job_Description": "Summary  Under general supervision, this position will involve reviewing, researching, analyzing, monitoring, and manipulating school and business-related data within many database systems, implementing information delivery improvements, ensuring data accuracy, and creating daily, weekly, and quarterly reports and dashboards, including support ticketing processes.   Essential Functions  Demonstrates expert proficiency in the design, development, and implementation of data, reporting and database technologies and tools, Consults with businesses to resolve complex data issues Champions\u2019 efforts to extend existing data architecture to ensure new and existing user demands and application requirements are met on an ongoing basis Advise database design/code through in-depth understanding of business needs/functionalities and provides expertise in devising, negotiating, and defending database schema and data models Consults with database administration and client areas and provides solutions in resolving complex issues during the translation to a physical database design Provides knowledge and expertise of enterprise data to assist Spartan functional groups in the creation and definition of internal and external dashboards, reports, and KPIs Provides direction and guidance on reports and visualizations and ensures recommendations are aligned with user needs and capabilities Uses expertise to evaluate market trends and provide input into the selection of tools and any necessary changes to the company\u2019s data management, reporting and visualization environment Serve as a mentor to other data analyst within IT and throughout organization Accomplishes engineering and organization mission by completing related results as needed  Knowledge / Skills:  Experience in consultative requirements elicitation, design and building of data management, reporting, and visualization solutions Motivated and able to quickly learn new technologies and tools 5+ years report and analysis development experience Experience scripting in TSQL and other database technologies Experience in SSRS or equivalent technologies Experience with PowerBI, Tableau or equivalent technologies (Power BI development/design experience is a plus) Ability to develop, design and solution specifications Demonstrated record of perusing and applying new advancements in information technology to solving business problems related to data management, reporting, and data visualization Must be a self-starter with effective oral and written communication skills. Must also be customer-service oriented and an experienced problem solver who seeks assistance when necessary Education and Work Experience  High School diploma or GED required Bachelor\u2019s degree preferred in computer science or related discipline, or equivalent work experience required 5 to 7 years\u2019 experience directly related to duties and responsibilities specified", "Recruiter_First_Name": "Preeti", "Recruiter_Last_Name": "Singh", "Recruiter_Email_Address": "PREETI.SINGH@msg.paycomonline.com", "Company_name": "Spartan College", "SetName": "Talq Tera_10/07/2023_Spartan College_Senior IT Business System Analyst", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 169, "QID": 2646, "Job_Title": "Power BI Specialist", "Job_Description": "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "Recruiter_First_Name": "Kelly", "Recruiter_Last_Name": "Dye", "Recruiter_Email_Address": "kdye@acronym.com", "Company_name": "Acronym US", "SetName": "Mary Gathogo_10/07/2023_Acronym US_Power BI Specialist", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "136", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "11", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 165, "QID": 2642, "Job_Title": "Sr Data Analyst", "Job_Description": "Sr Data Analyst Partnered with a client who simplifies shipping logistics for merchants and warehouses, offering customized API solutions that streamline the shipping process and make logistics a seamless and stress- free experience. Position Overview: As a Senior Data Analyst, you will play a key role in providing valuable insights and supporting data- driven decision-making processes. You will work closely with cross-functional teams to analyze complex data sets, identify trends, and help drive business growth. The ideal candidate will have a minimum of 5 years of experience in data analysis, strong proficiency in VBA, and advanced MS Excel skills.  Key Responsibilities: \uf0b7 Perform in-depth data analysis to identify trends, patterns, and insights. \uf0b7 Create and maintain complex Excel models using VBA to automate repetitive tasks and streamline processes. \uf0b7 Create macros that can be changed easily in a fast-changing environment. \uf0b7 Provide recommendations for process improvements based on data analysis. \uf0b7 Stay updated on industry trends and best practices in data analysis. \uf0b7 Mentor and provide guidance to junior analysts when necessary. Qualifications: \uf0b7 Bachelor&#39;s degree in a related field (e.g., Statistics, Mathematics, Computer Science). \uf0b7 Minimum of 5 years of experience as a Data Analyst. \uf0b7 Proficiency in VBA for Excel automation is a must. \uf0b7 Advanced skills in Microsoft Excel, including pivot tables, complex formulas, and data visualization. \uf0b7 Strong analytical and problem-solving skills. \uf0b7 Excellent communication and teamwork abilities. \uf0b7 Ability to prioritize and multi-task. \uf0b7 Attention to detail and high level of accuracy. \uf0b7 Experience with data visualization tools (e.g., Tableau, Power BI). \uf0b7 Knowledge of shipping, logistics, or eCommerce industry is not mandatory, but a plus. \uf0b7 Fluency in Mandarin is not mandatory, a plus.", "Recruiter_First_Name": "Lisa", "Recruiter_Last_Name": "Choe", "Recruiter_Email_Address": "lchoe@ledgent.com", "Company_name": "Ledgent Technology", "SetName": "Calvine  Cheptoo _10/07/2023_Ledgent Technology_Sr Data Analyst", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "251", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "6", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 170, "QID": 2647, "Job_Title": "Business Intelligence Analyst", "Job_Description": "Role Summary  This role\u2019s objectives are to develop reports in Power BI that meet our clients\u2019 expectations. We anticipate this will require consequential expertise in working with Power BI, which includes DAX programming.   Duties and Responsibilities  Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.    Qualifications and Skills  Demonstrable expertise in working with Power BI, including DAX programming. Please note that having experience is insufficient. Succeeding in this role requires demonstrable expertise building sophisticated Power BI dashboards and interfaces.  Experience successfully engaging with clients to develop user-facing reports. Excellent verbal and written communication skills. Experience with other BI tools, notably Tableau, is strongly desired, but not required.    Why Abett?   Opportunity to join a high-growth, venture backed software company, with a clear and important mission.  Competitive market salary and equity options. Flexible hours/scheduling. Work remotely. Fully paid health, dental and vision benefits available. Unlimited PTO.", "Recruiter_First_Name": "Kate", "Recruiter_Last_Name": "Lofgren", "Recruiter_Email_Address": "kate@abett.com", "Company_name": "Abett", "SetName": "Avworo  OGHENEKEVWE _10/07/2023_Abett_Business Intelligence Analyst", "CandidateID": "38457", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "21", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "46", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 173, "QID": 2650, "Job_Title": "Business Intelligence Analyst", "Job_Description": "Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.", "Recruiter_First_Name": "Kate", "Recruiter_Last_Name": "Lofgren", "Recruiter_Email_Address": "kate@abett.com", "Company_name": "Abett", "SetName": "Avworo  OGHENEKEVWE _10/07/2023_Abett_Business Intelligence Analyst", "CandidateID": "38457", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "43.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "869", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "60", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/6/2023", "NoofDays": -55, "LogInterviewID": 164, "QID": 2641, "Job_Title": "Power BI Reporting Specialist", "Job_Description": "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus) The annual base salary for this role ranges from $80,000 - $90,000. Starting pay will be based on several factors and commensurate with qualifications, experience, and work location.  Benefits/Perks:  Unlimited Paid Time Off Program Great benefit plans: Medical, Dental, Vision, FSA, Pre-tax Transit, Short Term Disability, Life Insurance, 401k AcronymCares Matching Gifts program for employee donations DE&I Employee Resource Groups", "Recruiter_First_Name": "Kelly", "Recruiter_Last_Name": "Dye", "Recruiter_Email_Address": "kdye@acronym.com", "Company_name": "Acronym US", "SetName": "Mary Gathogo_10/06/2023_Acronym US_Power BI Reporting Specialist", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/6/2023", "NoofDays": -55, "LogInterviewID": 157, "QID": 2634, "Job_Title": "Sr. Data Analyst", "Job_Description": "Job Responsibilities  \u00b7 Collaborate closely with cross-functional teams in engineering, supply chain, and production to identify key performance metrics and indicators.  \u00b7 Design, develop, and implement comprehensive Power BI dashboards and reports that provide actionable insights for program management and decision-making.  \u00b7 Utilize DAX language to create advanced calculations, measures, and transformations to ensure accurate representation of metrics in reports.  \u00b7 Build and maintain complex data models with a keen focus on establishing accurate and efficient table relationships, enabling seamless data flow and analysis.  \u00b7 Analyze large datasets to extract valuable insights, identify trends, and present findings in a clear and concise manner.  \u00b7 Work closely with stakeholders to understand their data needs and translate requirements into effective data visualizations.  \u00b7 Lead the development of data-driven solutions that enhance program efficiency, quality, and overall performance.  \u00b7 Establish data quality standards and procedures to ensure accuracy, consistency, and reliability of metrics.  \u00b7 Stay current with industry trends, best practices, and advancements in data visualization, DAX language, and program management techniques.  Education/Experience  \u00b7 Bachelor's degree in a relevant field such as Engineering, Supply Chain Management, Business Analytics, or a related discipline. Master's degree is a plus.  \u00b7 Proven experience (5+ years) in utilizing Power BI for data visualization and creating advanced dashboards and reports.  \u00b7 Demonstrated expertise in setting up and managing metrics for complex programs within engineering, supply chain, or production environments.  \u00b7 Proficiency in the DAX language is essential, with the ability to create complex calculations and measures.  \u00b7 Strong aptitude for establishing and optimizing table relationships to ensure accurate data modeling.  \u00b7 Excellent analytical skills and the ability to transform raw data into meaningful insights.  \u00b7 Effective communication skills to collaborate with technical and non-technical stakeholders.  \u00b7 Experience in data manipulation, transformation, and cleaning for accurate analysis.  \u00b7 Detail-oriented mindset with a commitment to data accuracy and quality.  \u00b7 Ability to work independently, prioritize tasks, and manage multiple projects simultaneously.  \u00b7 Familiarity with engineering, supply chain, or production processes is a plus.  \u00b7 Certifications in Power BI and relevant data analysis fields are valuable.", "Recruiter_First_Name": "Luis", "Recruiter_Last_Name": "Cruz", "Recruiter_Email_Address": "lcruz@mammoth777.com", "Company_name": "Mammoth Freighters", "SetName": "LILIAN NJERI_10/06/2023_Mammoth Freighters_Sr. Data Analyst", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "62.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1696", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "46", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "5", "InterviewScore": "NULL"}, {"InterviewDate": "10/4/2023", "NoofDays": -57, "LogInterviewID": 159, "QID": 2636, "Job_Title": "Data Analyst II", "Job_Description": "EKN Engineering is a fast-growing civil engineering and technology consulting company located in Irvine, CA. We are looking for a Data Analyst II to join us on our quest to further invent and innovate.  As a Data Analyst II, you will liaise with both internal and external stakeholders to anticipate their needs and help foster a data-led culture. You should be able to work with both technical and non-technical teams to define and measure key business metrics and use them in insightful reports. The successful candidate will turn data into information, information into insight, and insight into business decisions.  Responsibilities  Interpret data, analyze results, and identify opportunities for new reporting. Validate data by continually reviewing both reports and data sources for accuracy and consistency. Create and maintain reports and dashboards in Microsoft Excel and Power BI. Administer and improve the data management system, including deployment pipelines. Establish KPI's to measure the effectiveness of business decisions. Create presentations and reports based on recommendations and findings. Work with management to prioritize business and information needs. Requirements  Proficiency with Microsoft Excel. Intermediate-level proficiency using SQL or similar query language. Exceptional problem-solving, technical, and analytical skills. Bachelors' degree in Data Analytics, Mathematics, Statistics, or related field. Experience with Microsoft Power BI or Tableau or similar data visualization software. Competence managing various aspects of a data pipeline, including data validation, data management, data analysis and data visualization. &nbsp;", "Recruiter_First_Name": "Fiona", "Recruiter_Last_Name": "Connor", "Recruiter_Email_Address": "fconnor@eknengineering.com", "Company_name": "EKN Engineering", "SetName": "Calvine  Cheptoo _10/04/2023_EKN Engineering_Data Analyst II", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "341", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "10/4/2023", "NoofDays": -57, "LogInterviewID": 163, "QID": 2640, "Job_Title": "Business Intelligence Developer", "Job_Description": "No description details", "Recruiter_First_Name": "Amanda", "Recruiter_Last_Name": "Austin", "Recruiter_Email_Address": "aaustin@brooksource.com", "Company_name": "Brooksource", "SetName": "EMMANUEL OJENIYI_10/04/2023_Brooksource_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "12.5", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "479", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "10", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/3/2023", "NoofDays": -58, "LogInterviewID": 158, "QID": 2635, "Job_Title": "Power BI Reports Developer", "Job_Description": "\"Description: Leading with our people, Digital Consultants' mission is to deliver the highest level of professional solutions while being a trusted partner and advisor to our customers. With a culture of practicality, opportunity, and creativity we remain dedicated to being honest, trustworthy, respectful, and ethical in everything we do. We are a certified SBA 8(a) small-disadvantaged business that supports multiple IT customers within the Federal, civilian, and private sectors. Digital Consultants also offers our employees growth opportunities, competitive wages, and a full benefits package. Our founding principles, Fairness and Common Sense make working here more than a job, it is the Digital family.  Digital Consultants is seeking a Power BI Reports Developer to join our team! As the Power BI Reports Developer, you will be designing ETL processes and working directly with developers, testers, and other roles active to translate product roadmap features into well-defined product requirements including features, user stories, and acceptance test criteria.  Duties to include:  Maintain and support data analytics platforms Develop and update relevant technical documentation Collaborate directly with analysts and end users to integrate systems and create effective reports Develop and execute database queries and conduct analyses as needed Maintain status updates for all assigned ad hoc report requests Knowledge of SQL queries, SQL Server Reporting Services (SSRS), and MS SQL Server An expert that understands the Power BI platform and its tools very well. Takes complete responsibility for the development and administration of BI tools including transforming raw data into valuable and meaningful insights in the form of appealing dashboards and reports. Recreating existing reports from the current platform into Power BI.\"\" Build complex dimensional data models and reports from the bottom up Audit existing Power BI efforts with a focus on improvement Visualize compelling data stories on the report canvas Produce KPIs with user-friendly display dashboards Collaborate with client's data team Familiarity with data warehouse design (e.g. dimensional modeling) and data mining Requirements: Active DOD Secret Clearance IAT level II Certification: GSEC", "Recruiter_First_Name": " Security+CE", "Recruiter_Last_Name": " or", "Recruiter_Email_Address": " SSCP Power BI Data Analyst or associate degree in a related field 5+ Power BI specific focus Experience w/ DevOps Framework Experience visualizing data in Power BI Desktop and Power BI Service Extensive experience with building dashboards and custom reports in Power BI Strong analytical orientation and problem-solving skills Focusing on backend work with very large and intricate data models to create high-performing dashboards and paginated reports Rebuild existing SAP Business Intelligence-based reports", "Company_name": " utilizing PowerBi dashboards Design effective BI data models Evaluate and improve existing BI systems\"", "SetName": "Rufus", "CandidateID": "Benhur", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Digital Consultants, LLC", "Preparationscore": "Avworo  OGHENEKEVWE _10/03/2023_Digital Consultants, LLC_Power BI Reports Developer", "AutoInterviewsCount": "38457", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "Recruiter", "MentorInterviewsDuration": "18.75", "Mentor": "0", "Applicant": "NULL", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1490", "InterviewScore": "Sowmya Attur"}, {"InterviewDate": "10/3/2023", "NoofDays": -58, "LogInterviewID": 151, "QID": 2629, "Job_Title": "Data Visualization Manager", "Job_Description": "Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms", "Recruiter_First_Name": "Kaylee", "Recruiter_Last_Name": "Pearson", "Recruiter_Email_Address": "kpearson@theshipyard.com", "Company_name": "The Shipyard", "SetName": "Talq Tera_10/03/2023_The Shipyard_Data Visualization Manager", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "3990", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "9/26/2023", "NoofDays": -65, "LogInterviewID": 147, "QID": 2625, "Job_Title": "Business intelligence Analyst 2", "Job_Description": "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred 5-7 years experience is preferred Basic knowledge of programming languages in order to comprehend reading code and basic functions. Ability to create business solutions that increase competitive advantage. Ability to exercise good judgment in selecting methods and techniques for obtaining solutions. Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines. Ability to solve technical problems/ processes and understand complex details. Ability to increase operating efficiency by producing high quality technical solutions. A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level. Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must.", "Recruiter_First_Name": "Jeevana", "Recruiter_Last_Name": "Adusumilli", "Recruiter_Email_Address": "n/a", "Company_name": "Microsoft", "SetName": "ANNE NDUNGU_09/26/2023_Microsoft_Business intelligence Analyst 2", "CandidateID": "37048", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "43.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "778", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "63", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/24/2023", "NoofDays": -67, "LogInterviewID": 144, "QID": 2622, "Job_Title": "Business intelligence Analyst 2", "Job_Description": "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred  5-7 years experience is preferred   Basic knowledge of programming languages in order to comprehend reading code and basic functions.   Ability to create business solutions that increase competitive advantage.   Ability to exercise good judgment in selecting methods and techniques for obtaining solutions.   Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines.   Ability to solve technical problems/ processes and understand complex details.   Ability to increase operating efficiency by producing high quality technical solutions.   A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level.   Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must.", "Recruiter_First_Name": "Jeevana", "Recruiter_Last_Name": "Adusumilli", "Recruiter_Email_Address": "n/a", "Company_name": "Microsoft", "SetName": "ANNE NDUNGU_09/24/2023_Microsoft_Business intelligence Analyst 2", "CandidateID": "37048", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "37.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "791", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/24/2023", "NoofDays": -67, "LogInterviewID": 146, "QID": 2624, "Job_Title": "power BI Developer", "Job_Description": "- Open to W-2 candidates - Building Power BI dashboards - Some sort of risk environment (Could be cyber/operations/etc..) OR another financial institution", "Recruiter_First_Name": "Wendy", "Recruiter_Last_Name": "Rociles", "Recruiter_Email_Address": "jobs@edward.com", "Company_name": "Edward Jones", "SetName": "Nadege Nguemo Mbouyo_09/24/2023_Edward Jones_power BI Developer", "CandidateID": "34701", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "346", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "9/21/2023", "NoofDays": -70, "LogInterviewID": 136, "QID": 2617, "Job_Title": "Lead SQL Developer", "Job_Description": "Job Description  This person will be responsible for maintaining the quality and direction of data solutions in support of our Finance team.  The role requires knowledge of database development tools and services, with an emphasis on SSAS.  Qualifications  Experience Required: 7 \u2013 10 Years Education Required: Bachelors Degree Minimum seven (7+) years experience in a multi-disciplined IT environment with strong expertise in data analysis, data modeling, data governance and involvement in enterprise architecture Minimum of five (5+) years experience, hands-on, data profiling and performance tuning databases and data marts with Oracle and / or SQL Server Experience with performance improvement using Azure and/or on-premise Microsoft technologies Experience taking a leading role in architecting, designing and developing solutions exceeding business expectations Knowledge of interpreting business processes and requirements and translating them into logical and physical data models adhering to documented standards and best practices Excellent problem solving and communication skills with experience in interacting with business and technical teams at all levels Responsibilities  This person will be ultimately responsible for performing the data analysis and profiling necessary to provide direction, standards, and implementation of data management solutions associated with data ingestion, transformation, integration, and analytics Engage in full stack Microsoft BI development activities to deploy usable and measurable projects meeting business needs leveraging tools such as SSIS, SSAS, stored procedures and Power BI Write complex Stored procedures to harmonize data sets for reporting Setup dimensional/tabular data models Setup and deploy row/object level security Develop and publish Power BI reports Provide input and implement solutions to drive the continuous improvement of the development and support teams Participate in data integration, business intelligence (BI), and enterprise information management programs by rationalizing data processing to support reuse", "Recruiter_First_Name": "Sarah", "Recruiter_Last_Name": "Weigel", "Recruiter_Email_Address": "sarah.weigel@gravityitresources.com", "Company_name": "Gravity IT Resources", "SetName": "OLUKAYODE AKINRIMISI_09/21/2023_Gravity IT Resources_Lead SQL Developer", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "9/21/2023", "NoofDays": -70, "LogInterviewID": 137, "QID": 2618, "Job_Title": "BI Developer/Analyst", "Job_Description": "With minimal supervision, completes the technical design, build, testing, and documentation of Power BI reports based on on-premises and SaaS data sources. The role is within a large and complex ERP implementation project and will primarily support the PMO in creating reporting solutions for project KPI tracking as well as data analysis and validation to support project activities.  * Education:-  bachelor\u2019s degree or equivalent experience is required  * Experience:- Minimum of four (4) to six (6) years of progressive, relevant information technology experience", "Recruiter_First_Name": "Bharath", "Recruiter_Last_Name": "Amudala", "Recruiter_Email_Address": "bharath.amudala@peopletech.com", "Company_name": "People tech group", "SetName": "ANNE NDUNGU_09/21/2023_People tech group_BI Developer/Analyst", "CandidateID": "37048", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1793", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "9/21/2023", "NoofDays": -70, "LogInterviewID": 134, "QID": 2615, "Job_Title": "Senior Developer (Tableau + ETL)", "Job_Description": "Immediate Hire \u2013 Senior Developer (Tableau + ETL) - Irving, TX  (DAY 1 ONSITE) Hybrid    Role: Senior Developer (Tableau + ETL)  Location: Irving, TX  (DAY 1 ONSITE) Hybrid  Duration: Fulltime     Required skills (technical & professional) : \u2022       8+ years of overall IT experience. \u2022       4+ years\u2019 experience working with Tableau with ETL experience. \u2022       You will work closely with customers, product owners and dev team to ensure requirements and business objectives are translated into working technical designs \u2022       Drive end-to-end design, development and implementation of complex solutions, often using new technologies \u2022       Design and develop Tableau reports and dashboards that will yield actionable insights that present the answers to business questions \u2022       Code and modify SQL/ETL based on dashboard requirements \u2022       Run ad-hoc analysis for Product and Business Managers using standard query languages and operationalize for repeatable use via Tableau reporting suite", "Recruiter_First_Name": "Thomas", "Recruiter_Last_Name": "Martin", "Recruiter_Email_Address": "thomas@itbtalent.com", "Company_name": "Tech M/Citi Bank", "SetName": "EMMANUEL OJENIYI_09/21/2023_Tech M/Citi Bank_Senior Developer (Tableau + ETL)", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "9", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/20/2023", "NoofDays": -71, "LogInterviewID": 133, "QID": 2614, "Job_Title": "Power BI and Reporting Analyst", "Job_Description": "We are looking for a savvy Power BI and Reporting Analyst, with previous experience in the retail energy space, to join our growing team of enterprise data and analytics experts. The hire will be responsible for advancing our reporting and analytics footprint. The ideal candidate is an experienced BI Analyst who enjoys optimizing data reporting processes and driving insights.  ESSENTIAL SKILLS AND EXPERIENCE Successful job applicants will be able to perform these functions. Reasonable accommodations will be made to enable individuals with disabilities to perform essential functions. \u2022 5+ years of experience in a related role. \u2022 3+ years of experience using Microsoft PowerBI. \u2022 2+ years of experience working in the retail energy space. \u2022 Advanced working SQL knowledge and experience working with relational databases, query authoring (SQL) as well as working familiarity with a variety\u00a0of\u00a0databases.", "Recruiter_First_Name": "Anthony", "Recruiter_Last_Name": "Hathaway", "Recruiter_Email_Address": "ahathaway@wiredhivetech.com", "Company_name": "Wired Hive", "SetName": "OLUKAYODE AKINRIMISI_09/20/2023_Wired Hive_Power BI and Reporting Analyst", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "9/18/2023", "NoofDays": -73, "LogInterviewID": 127, "QID": 2608, "Job_Title": "Business Data Analyst", "Job_Description": "LivePerson (NASDAQ: LPSN) is a global leader in trustworthy and equal AI for business. Hundreds of the world's leading brands \u2014 including HSBC, Chipotle, and Virgin Media \u2014 use our Conversational Cloud platform to engage with millions of consumers safely and responsibly. We power a billion conversational interactions every month, providing a uniquely rich data set and safety tools to unlock the power of Generative AI and Large Language Models for better business outcomes.  At LivePerson, we foster an inclusive workplace culture that encourages meaningful connection, collaboration, and innovation. Every mind is invited to ask questions and actively seek new ways to achieve success and reach their full potential. We operate as one with a growth mindset. This means spotting opportunities, solving ambiguities and seeking effective solutions to challenges that make things better.   Overview:  Reporting to the Director of Data, Models, and Decisions (DMD), the successful candidate has an opportunity to join an innovative data science and engineering team that's operationalizing data across the organization. We see model-driven processes and workflows as a means to reduce uncertainty, reveal opportunity, and generate operational leverage that collectively create a new dimension of competitive advantage and lay the foundation for new revenue streams.  You will: Apply cutting-edge data visualization techniques to reveal actionable insights to business users Solve challenging data problems through in-depth analysis of many systems Apply statistical analysis to summarize data and forecast trends Participate in Data Requirement Gathering, Data Preparation and devise proper Data Interpretation Ensure data is maintained in our platform and all systems with best quality, always considering automation and scalability of your solutions Evangelize our products and train others on Data Visualization and presentation techniques, enabling them to create dashboards and reports themselves  You have: Demonstrated ability to uncover insights and relationships across numerous datasets 5+ years of experience analyzing data and creating dashboards and reports (Looker / PowerBI / Tableau / Metabase) 5+ years of experience interpreting and writing advanced SQL 2+ years of experience in Python and good working knowledge of pandas and matplotlib Bachelor's degree in Computer Science, Statistics, or another quantitative field Ability to work closely with teammates in a highly collaborative environment and simultaneously be a self-starter with strong individual contributions Excellent communication and presentation skills  Benefits: The salary range for this role will be between $88,000 to $120,000 Final compensation will be determined by a variety of factors, including, but not limited to, your location, skills, experience, education, and/or certifications. During the phone screening, the recruiter will provide the location-specific salary range for this role. Regardless of your personal situation or where you are in the world, LivePerson offers comprehensive and great benefits programs to meet your needs:  Health: medical, dental, vision and wellbeing. Time away: Public holidays and discretionary PTO package for flexible days off with manager approval. Financial: 401K, ESPP, Basic life and AD&D insurance, long-term and short-term disability Family: parental leave, maternity support, fertility services. Development: tuition reimbursement, native AI learning. Additional: 24/7 access to professional counselors, voluntary insurance coverage, exclusive perks and discounts. #LI-Remote", "Recruiter_First_Name": "Dan", "Recruiter_Last_Name": "Ashburn", "Recruiter_Email_Address": "dashburn@liveperson.com", "Company_name": "LivePerson", "SetName": "LILIAN NJERI_09/18/2023_LivePerson_Business Data Analyst", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1788", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/15/2023", "NoofDays": -76, "LogInterviewID": 126, "QID": 2607, "Job_Title": "Business Intelligence Developer", "Job_Description": "What you\u2019ll do as the BI Analyst:   Help elevate the Operations and Technology teams by diving deep into data, exploring opportunities for gaining insight and extracting value from the data, and finally, contributing actively to the dashboarding and reporting needs within the company. Act as SME for Snapsheet\u2019s analysis data model, supporting customers and in-house users in finding the information they need for reporting. Collaborate with development and product to provide schema modeling recommendations  Assist in validating launch data from new product releases  Build and maintain documentation on the products you\u2019re building   What we are looking for in a BI Analyst: B.S. or higher degree in related fields 4+ years of experience as a BI analyst (or related role) Proficiency in leveraging SQL to build reports  Experience in building, maintaining, and managing reports & dashboards using data visualization tools (i.e. Tableau, Qlik, Sisense) Self-starter mentality  Nice to haves: Previous experience with AI or ML is a plus  Previous experience pulling metrics or analytics for an operations department/organization", "Recruiter_First_Name": "Kyrsa", "Recruiter_Last_Name": "Galyan", "Recruiter_Email_Address": "kyrsa.galyan@snapsheet.me", "Company_name": "Snapsheet", "SetName": "Mary Gathogo_09/15/2023_Snapsheet_Business Intelligence Developer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "9", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/15/2023", "NoofDays": -76, "LogInterviewID": 129, "QID": 2610, "Job_Title": "Tableau Administrator", "Job_Description": "Responsible for impact analysis, identifying common BI patterns, L3 support queries, and more.", "Recruiter_First_Name": "Yolanda", "Recruiter_Last_Name": "Rountree", "Recruiter_Email_Address": "Lesli.Martinez-Torres@ey.com", "Company_name": "Ernst & Young, LLP", "SetName": "EMMANUEL OJENIYI_09/15/2023_Ernst & Young, LLP_Tableau Administrator", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "8", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/14/2023", "NoofDays": -77, "LogInterviewID": 122, "QID": 2603, "Job_Title": "Tableau Developer", "Job_Description": "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:   At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Recruiter_First_Name": "David", "Recruiter_Last_Name": "Dalrymple", "Recruiter_Email_Address": "david.dalrymple@cibr.com", "Company_name": "CIBR Warriors - BSA", "SetName": "EMMANUEL OJENIYI_09/14/2023_CIBR Warriors - BSA_Tableau Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/14/2023", "NoofDays": -77, "LogInterviewID": 123, "QID": 2604, "Job_Title": "Tableau developers", "Job_Description": "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions. The successful candidates will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.   Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. Degree in computer science, information systems, or related field or 10 years comparable experience in above PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Recruiter_First_Name": "Dave", "Recruiter_Last_Name": "Dalrymple", "Recruiter_Email_Address": "david.dalrymple@cibr.com", "Company_name": "Bridgesecurityadvisors", "SetName": "EMMANUEL OJENIYI_09/14/2023_Bridgesecurityadvisors_Tableau developers", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "71", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/14/2023", "NoofDays": -77, "LogInterviewID": 120, "QID": 2601, "Job_Title": "Data Engineer - Consultant/Senior", "Job_Description": "DATA ENGINEER \u2013 CONSULTANT/SENIOR  Lotis Blue Consulting is a growth advisory that helps clients grow and transform their organization to achieve their business goals. We apply expertise in behavioral and data science to set business and go-to-market strategy and then improve organization alignment to enable effective execution. We are looking for data and analytics-savvy professionals to join our Chicago-based team of consultants who have proven Data Engineering expertise and experience working with other data analysts and project resources. This role is client-facing and will be a fully-fledged member of the client service project team helping us to identify, understand and solve complex problems.  PRIMARY RESPONSIBILITIES Work with the Lotis Blue team to develop hypotheses that explain business problems or opportunities, and then create the analytical work plan to test them Create and manage highly structured data requests that acquire the right information in the right format to execute on the analytical work plan Serve as lead point of contact with the client and be accountable for all matters related to data acquisition, cleaning, integration, management, transformation, interpretation, and analytics Work with Power BI or Tableau to present and visualize new insights or reveal complex relationships between variables in a clear, accurate, and compelling manner that supports evolving ideation Lead discussions internally around the relationship between different data elements to add to the Lotis Blue team\u2019s knowledge, awareness, clarity, and depth in addressing the client situation and potential solutions Develop and provide meaningful insights and relevant points-of-view on complex concepts directly to clients through simple, plainspoken materials Contribute to leading-edge thinking that deepens the Firm\u2019s capabilities in data science and engineering and differentiates Lotis Blue in the market QUALIFICATIONS & EXPERIENCES Bachelor\u2019s degree in computer science, mathematics, engineering or related field At least two years of experience working on an analytics or data science team Experience communicating directly with clients and addressing business problems through analytics Passion for learning and track record of keeping up to date on technologies, platforms, and tools Some travel may be required REQUIRED KNOWLEDGE, SKILLS & CAPABILITIES Business acumen Teamwork and collaboration Critical thinking and ideation Project management Experience with and capability to execute on: Production databases (e.g., SQL Server, MongoDB) and related administrative tools (e.g., SQL Management Studio, Navicat) Python (preferable) or R Business Intelligence tools (e.g., Power BI, Tableau) PREFERRED KNOWLEDGE, SKILLS & CAPABILITIES Working knowledge of Azure Experience managing databases in the cloud (as well as AWS) Working knowledge of data transformation tools (e.g., Alteryx) Experience operationalizing data pipelines to support analytics in a production environment Coursework or qualification in Machine Learning Experience applying ML techniques in real world business scenarios", "Recruiter_First_Name": "Andrew", "Recruiter_Last_Name": "Harris", "Recruiter_Email_Address": "aharris@lbconsulting.com", "Company_name": "Lotis Blue Consulting, LLC", "SetName": "Mary Gathogo_09/14/2023_Lotis Blue Consulting, LLC_Data Engineer - Consultant/Senior", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "8", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/13/2023", "NoofDays": -78, "LogInterviewID": 125, "QID": 2606, "Job_Title": "Associate BI Developer", "Job_Description": "Salary in the $60-80K range + 10-20% bonus.  Here's some info on the need - MUST have  at least one year of experience with SQL, ETL, SSRS, and Power BI experience (data modeling, data viz, dashboarding, ad hoc reporting).  Seeking an Associate Business Intelligence (BI) Developer to contribute to the creation of BI solutions, transforming raw data into valuable insights.   Key Responsibilities:  \u2022   Assess requests for data interfaces, perform data profiling, and determine optimal methods for request fulfillment  \u2022    Translate diverse business requirements into precise technical specifications  \u2022     Construct data models to support data visualizations, interactive dashboards, and ad hoc data inquiries  \u2022    Engage in collaborative efforts with fellow developers and end-users as requests progress through their life cycle  \u2022     Conduct unit testing and quality assurance assessments on data models and reports  \u2022   Produce, review, interpret, and troubleshoot intricate code while adhering to established standards  \u2022   Investigate and resolve unforeseen work items, communicating findings promptly to the team and end users  \u2022    Evaluate and enhance our existing BI system   Essential Qualifications:  \u2022    Minimum of 1 year of experience in BI development  \u2022     Proficiency in SQL, SSRS, Excel, and Power BI  \u2022    Familiarity with relational databases, with a preference for understanding SQL Server Database Management Systems (RDBMS) principles  \u2022    Proficient in ETL processes and skilled in implementing data transformations using SQL and Power BI  \u2022     Basic knowledge of source control is advantageous", "Recruiter_First_Name": "Shaun", "Recruiter_Last_Name": "Fitzgerald", "Recruiter_Email_Address": "shaun.fitzgerald@jobot.com", "Company_name": "Jobot", "SetName": "Calvine  Cheptoo _09/13/2023_Jobot_Associate BI Developer", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1346", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/12/2023", "NoofDays": -79, "LogInterviewID": 119, "QID": 2600, "Job_Title": "Tableau Developer", "Job_Description": "This contract is W2 ONLY, no C2C.   The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Recruiter_First_Name": "David", "Recruiter_Last_Name": "Dalrymple", "Recruiter_Email_Address": "david.dalrymple@cibr.com", "Company_name": "CIBR Warriors", "SetName": "EMMANUEL OJENIYI_09/12/2023_CIBR Warriors_Tableau Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/12/2023", "NoofDays": -79, "LogInterviewID": 116, "QID": 2597, "Job_Title": "Senior BI Architect", "Job_Description": "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Recruiter_First_Name": "Colleen", "Recruiter_Last_Name": "Murray", "Recruiter_Email_Address": "cmurray@acgme.org", "Company_name": "ACGME", "SetName": "Mary Gathogo_09/12/2023_ACGME_Senior BI Architect", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/12/2023", "NoofDays": -79, "LogInterviewID": 117, "QID": 2598, "Job_Title": "Senior BI Architect", "Job_Description": "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions. ESSENTIAL FUNCTIONS AND RESPONSIBILITIES Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned. SUPERVISORY RESPONSIBILITY Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management. QUALIFICATIONS Minimum Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems. REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.", "Recruiter_First_Name": "Colleen", "Recruiter_Last_Name": "Murray", "Recruiter_Email_Address": "cmurray@acgme.org", "Company_name": "ACGME", "SetName": "Mary Gathogo_09/12/2023_ACGME_Senior BI Architect", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "282", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/11/2023", "NoofDays": -80, "LogInterviewID": 118, "QID": 2599, "Job_Title": "Data Integration Engineer", "Job_Description": "Insight Global is looking for a junior data integration engineer to join one of our clients in Midlothian VA. The role is hybrid on-site, 3 days per week. The engineer will be apart of the business systems solutions team. The ideal candidate would be responsible for coordinating and processing requests for SQL data integration work, validate requirements, identify system needs, recommend solutions, and work with other team members to develop end to end solutions.  This candidate would work with business lines and the data team to identify data sources, create data flow diagrams and document the processes.  Additional Responsibilities Include:  -Develop complex data structures and workflows to support processes utilizing MS SQL, custom integration tools and other resources.  -Stay informed of ways the organization uses data and makes recommendations as needed to improve efficiencies.  -Monitors and troubleshoot jobs and data issues.  -Coordinate integration changes as source systems are modified.", "Recruiter_First_Name": "Virginia", "Recruiter_Last_Name": "Griffith", "Recruiter_Email_Address": "Virginia.Griffith@insightglobal.com", "Company_name": "Insight Global", "SetName": "Avworo  OGHENEKEVWE _09/10/2023_Insight Global_Data Integration Engineer", "CandidateID": "38457", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "9/10/2023", "NoofDays": -81, "LogInterviewID": 114, "QID": 2595, "Job_Title": "SQL Developer", "Job_Description": "Required Skills and Experience *  5-7 years of experience in a SQL Development role 3+ years of experience using SSIS/SSRS for automated data imports and hands-on report/parameter creation. 3+ years creating queries within Visual Studio Experience creating stored procedures and views within SQL in a work environment Experience working with Microsoft Server 2012 or newer .NET experience- C# or VB.NET ETL Development experience     Nice to Have Skills and Experience  Experience utilizing Healthcare Information Systems and Databases Bachelor's Degree in computer science or any related field     Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "Recruiter_First_Name": "Brendan", "Recruiter_Last_Name": "Barker", "Recruiter_Email_Address": "Brendan.Barker@insightglobal.com", "Company_name": "Community First Health Plans", "SetName": "AYODEJI OLAWOYE_09/10/2023_Community First Health Plans_SQL Developer", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/8/2023", "NoofDays": -83, "LogInterviewID": 110, "QID": 2592, "Job_Title": "Business Intelligence Developer", "Job_Description": "Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.", "Recruiter_First_Name": "Daniela", "Recruiter_Last_Name": "Aguayo", "Recruiter_Email_Address": "Daniela.Aguayo@scipax.com", "Company_name": "Spalding Consulting", "SetName": "EMMANUEL OJENIYI_09/08/2023_Spalding Consulting_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/8/2023", "NoofDays": -83, "LogInterviewID": 107, "QID": 2589, "Job_Title": "BI Reporting", "Job_Description": "As a Business Solution Architect, you will\u2026 lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design. Lead the Functional team. Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "Recruiter_First_Name": "Dana", "Recruiter_Last_Name": "Turner", "Recruiter_Email_Address": "Dana.Turner@itineris.net", "Company_name": "Itineris", "SetName": "LILIAN NJERI_09/07/2023_Itineris_BI Reporting", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 103, "QID": 2585, "Job_Title": "Power Platform Developer", "Job_Description": "Responsibilities:  \u00b7 Experience Developing, deploying, and supporting SharePoint, Teams, Power Platform and SPFx applications.  \u00b7 Strong technical knowledge with Power Platform tools including Power Automate (Flow), Power Apps, Power BI, DataVerse.  \u00b7 Experience with enterprise level canvas applications utilizing Power Platform tools  \u00b7 Knowledge of Power Automate Technical REST & SOAP protocols  Desired Technical Skills:  Strong technical knowledge with Power Platform tools such as Power Automate (Flow), Power Apps, Power BI, DataVerse. Proven experience developing enterprise level applications utilizing Power Platform tools Strong experience with SharePoint administration, workflows, and development. Strong Microsoft Power Platform development experience Web development experience including, JavaScript, SQL ,XML, and CSS Design/implementation experience in the Microsoft Power Platform \u2013 MS PowerApps, Power Automate, and PowerBI. Experience :  Bachelor\u2019s in computer science, Information Systems or related field OR 4+ years of relevant work experience 3+ years of experience Developing and administrating enterprise applications Experience on teams with emphasis on development within Microsoft SharePoint environments Experience implementing and/or administrating IT service support management tools Strong interpersonal skills, oral and written communications across all levels of an organization", "Recruiter_First_Name": "Ram", "Recruiter_Last_Name": "V", "Recruiter_Email_Address": "ram@pavetalent.com", "Company_name": "Pave Talent", "SetName": "Mary Gathogo_09/07/2023_Pave Talent_Power Platform Developer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 111, "QID": 2593, "Job_Title": "Senior BI Architect", "Job_Description": "JOB OVERVIEW  Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Recruiter_First_Name": "Colleen", "Recruiter_Last_Name": "Murray", "Recruiter_Email_Address": "cmurray@acgme.org", "Company_name": "ACGME", "SetName": "Mary Gathogo_09/07/2023_ACGME_Senior BI Architect", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 100, "QID": 2583, "Job_Title": "Tableau Cloud", "Job_Description": "Tableau Opportunity Hi Emmanuel, I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak. Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently. Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Recruiter_First_Name": "Nicole", "Recruiter_Last_Name": "Mcneill", "Recruiter_Email_Address": "nicole.mcneill@unifyconsulting.com", "Company_name": "Unify Consukting", "SetName": "EMMANUEL OJENIYI_09/06/2023_Unify Consukting_Tableau Cloud", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 109, "QID": 2591, "Job_Title": "Business Intelligence Developer", "Job_Description": "Spalding Consulting, Inc. is seeking a Business Intelligence Developer in Lexington Park, MD -Remote.  Spalding Consulting, Inc. is a professional services company delivering cutting-edge solutions to the Department of Defense since 2001. Our expert-level solutions include software development, information technology, program management, financial management and business intelligence services. Spalding Consulting offers competitive compensation, career development, flexible work schedules and excellent benefits.  Position Type: Full-Time Work Location: This is a remote position (see on-site requirements below).  **On-Site Requirements: On-boarding will require 1-2 visits to Patuxent River, MD for candidates that are local to the area. Candidates out of state will be onboarded virtually. Training will be virtual and telework maximized/permitted to the greatest extent possible, however for local candidates, training/tasking may require on-site work a few hours per week. Future on-site/telework requirements/schedules may change as additional client direction is received.      Essential Functions: Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.   Qualifications and Experience:  Required: At least 5 years of experience developing software programs using any language At least 2 years\u2019 experience of developing solutions to support an ETL process Experience with Oracle, SQL, or Teradata databases Experience with working on a team of at least 5 developers Experience with understanding and modifying data models  Desired: Development experience using Tableau or Qlik Experience using Atlassian Jira Experience making REST API calls Experience in an Agile development environment   Security Clearance: Must be eligible to obtain a Secret clearance. Requirements to obtain a clearance include US Citizenship, security investigation, etc.", "Recruiter_First_Name": "Daniela", "Recruiter_Last_Name": "Aguayo", "Recruiter_Email_Address": "Daniela.Aguayo@scipax.com", "Company_name": "Spalding Consulting", "SetName": "EMMANUEL OJENIYI_09/07/2023_Spalding Consulting_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 106, "QID": 2588, "Job_Title": "Data Engineer", "Job_Description": "JOB DESCRIPTION & DETAILS     Day to day:  Insight Global is seeking a Data Engineer to support a local insurance company headquartered in Richmond, VA. This engineer will be responsible for enterprise data integration and reporting, as well as building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies. This candidate will be required to go onsite 2 days a week in the Richmond, VA area.     Responsibilities:  Assembling large, complex sets of data that meet non-functional and functional business requirements. Identifying, designing, and implementing internal process improvements including re-designing infrastructure for greater scalability, optimizing data delivery, and automating manual processes Building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies Building analytical tools to utilize the data pipeline, providing actionable insight into key business performance metrics including operational efficiency and customer acquisition Working with stakeholders including data, design, product and executive teams and assisting them with data-related technical issues Working with stakeholders including the Executive, Product, Data and Design teams to support their data infrastructure needs while assisting with data-related technical issues    Must Haves:  3-5+ years of experience as a Data Engineer Experience with MS SQL Server Platform (SSIS, SSRS & SSAS) Experience in data warehousing and ETL development (T-SQL, PLSQL, and/or SQL scripts) Experience working with intelligence products and data analytics tools (e.g. PowerBI, Tableau) Ability to compute, analyze and interpret complex and disparate data to produce relevant and consumable reports, dashboards, etc.", "Recruiter_First_Name": "Meg", "Recruiter_Last_Name": "Allen", "Recruiter_Email_Address": "Meg.Allen@insightglobal.com", "Company_name": "Randstad Federal", "SetName": "Avworo  OGHENEKEVWE _09/06/2023_Randstad Federal_Data Engineer", "CandidateID": "38457", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "9/5/2023", "NoofDays": -86, "LogInterviewID": 104, "QID": 2586, "Job_Title": "Senior SQL Database Administrator", "Job_Description": "Kelsey-Seybold Clinic, a Houston tradition in patient-centered care, is a multispecialty clinic with 40+ locations and comprises more than 700 physicians providing primary and specialty care collaboratively.  With more than 65 different clinical and non-clinical specialties, you can design a career path at Kelsey-Seybold Clinic to grow your future in a new direction.  Works collaboratively as a senior member of the Business Intelligence & Reporting team under the direction of KSC Application Technology Leadership. Supports, develops, and maintains SQL database environments and related technology. Acts as a team member on multi-team projects and uses advanced skill sets to develop, test, troubleshoot, and support database-related projects and associated solutions/applications. Acts as a mentor to others learning essential and advanced SQL-related skills.  Requirements include:  Bachelor\u2019s degree in a technical area or equivalent work experience 6 years experience in SQL database administration Flexibility and the ability to adapt to change. Proven communication, presentation, analytical, problem-solving, technical, and writing skills. MS SQL Server Administration MS SQL Transact SQL Programming (T-SQL) MS SQL Data Transformation Services (DTS) and SQL Server Integration Services (SSIS) programming. Performance Tuning of Hardware & MS SQL Server. MS SQL Server Analysis Services (SSAS) MS SQL Server Reporting Services (SSRS) Demonstrates an advanced understanding of the following: Database modeling/normalization Indexing strategies and maintenance Backup and recovery models Clustering and high availability Preferences include:  MCDBA MCTS MCITP Vendor Certified SQL Administrator Other database-related certification/s Why Kelsey-Seybold Clinic?  Medical, Vision, and Dental Tuition Reimbursement Company Matching 401K Employee Reward and Recognition Program Paid time off for vacation, sick, and holidays Employee Assistance Program Continuing Medical Education allowance If you want a satisfying career and a rich, rewarding personal life, don t choose between them.  Achieve them both at Kelsey-Seybold Clinic.  Kelsey-Seybold Clinic strives to provide equal opportunity employment without regard to race, color, religion, age, national origin, sex, gender, sexual orientation, gender identity/expression, genetic information, disability, veteran status, or any other basis protected by organizational policy or by federal, state, or local laws unless such distinction is required by law. Kelsey-Seybold is a VEVRAA Federal Contractor and desires priority referrals of protected veterans.  Job Type: Full-time  Pay: $110,090.00 - $136,995.00 per year  Benefits:  401(k) Dental insurance Flexible schedule Health insurance Life insurance Paid time off Professional development assistance Retirement plan Tuition reimbursement Vision insurance Schedule:  Monday to Friday Education:  Bachelor's (Preferred) Experience:  Database administration: 6 years (Preferred) Microsoft SQL Server: 6 years (Preferred) License/Certification:  Texas Driver's license (Preferred) Work Location: In person", "Recruiter_First_Name": "Cassie", "Recruiter_Last_Name": "Smith", "Recruiter_Email_Address": "cassiesmithboz6b_p3y@indeedemail.com", "Company_name": "Kelsey-Seybold Clinic", "SetName": "EMMANUEL OJENIYI_09/04/2023_Kelsey-Seybold Clinic_Senior SQL Database Administrator", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "9/5/2023", "NoofDays": -86, "LogInterviewID": 97, "QID": 2580, "Job_Title": "Tableau Developer (Business Intelligence)", "Job_Description": "Responsibilities Work closely with Data integration team to stage data for the reporting requirement Build rich visualization dashboards using tableau , SSRS and other relevant technologies Perform report administration & user access provisioning activities for optimized performance Support business team for self-service and ad-hoc activities Set standards for reporting & BI functions; design templates which are scalable, repeatable, and simple Work with business teams to understand their unique business and technical requirements for tools and analytics Lead the requirement gathering, design and development of reporting solution using various tools e.g Tableau, MS SSRS for all different types of reporting for all LOB. Lead the development of Master Reporting Inventory as part of Data Governance initiatives. Effective collaboration with multiple levels of end users including data stewards, leadership and management, executive and other end users. Led the reporting design and architecture and work closely with infrastructure to meet the needs of the business Work with other technical staff, such as networking to ensure connectivity, compatibility, and scalability of reporting platform & systems Support ongoing monitoring, automation and refinement of reporting solutions Work with management to identify and resolve reporting related issues Participate in process reviews and enhancements. Participate in design and delivery of cubes, dashboards and various self-service business intelligence solutions. Maintains a high degree of business functional knowledge and current automated technologies and tools. All other duties assigned", "Recruiter_First_Name": "Edward", "Recruiter_Last_Name": "Alonzo", "Recruiter_Email_Address": "not sure", "Company_name": "AltaMed", "SetName": "JORUM MWANGI_09/05/2023_AltaMed_Tableau Developer (Business Intelligence)", "CandidateID": "37975", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "568", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "AMINAT OKERINDE", "Applicant": "JORUM MWANGI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "9/1/2023", "NoofDays": -90, "LogInterviewID": 95, "QID": 2578, "Job_Title": "Sr. Architect, Power BI", "Job_Description": "Requirements  Bachelor\u2019s Degree desired in Computer Science, Information Technology, or related field Minimum of 5 years of experience with database design and Architecture, at least 2 years with Azure technologies, and previous Consulting experience Expert knowledge of Data Management, Business Intelligence and Analytics concepts including: Data Movement (ETL/ELT) Data Warehousing (Designing and Implementing, Azure SQL, Synapse) Azure Storage Technologies (Data Lake, Blob Storage) Data Governance (including Data Quality and Profiling, Master Data Management, and Metadata Management) Business Intelligence, including Reporting and Visualizations (Key Performance Indicators (KPI), and Scorecards) Predictive, Prescription, and Descriptive Analytics Expert knowledge of Microsoft Azure technologies: SQL Server on premises plus cloud supported versions) Azure Data Factory (including ARM templates) Azure Synapse, Cosmos DB Azure Data Lake/Azure Blob Storage Power BI for reporting and analytics Databricks Azure DevOps (including building Stories and tasks, and using development pipelines and ARM templates for publishing code) Eagerness to contribute in a team-oriented environment Excellent communication (written and oral) and interpersonal skills for both technical and non-technical teams Passionate about learning new technologies Analytical approach to problem-solving; ability to use technology to solve business problems Ability to work in a fast-paced environment   Additional Preferred Experience:  Analytics and Data Science tools, technologies, and techniques (R, Python, algorithms, Azure ML Studio/Services) Custom Visualizations in Microsoft Power BI using D3 and jQuery Azure Infrastructure architecture and design Knowledge and experience using Azure DevOps for source control, project deployment and project management", "Recruiter_First_Name": "Sue", "Recruiter_Last_Name": "Lieblang", "Recruiter_Email_Address": "slieblang@3cloudsolutions.com", "Company_name": "3Cloud", "SetName": "Mary Gathogo_09/01/2023_3Cloud_Sr. Architect, Power BI", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/31/2023", "NoofDays": -91, "LogInterviewID": 94, "QID": 2577, "Job_Title": "Business Intelligence Developer", "Job_Description": "Responsible for the design, development and maintenance of informational dashboards, data and report development. KPIs and dashboards according to semi-monthly / monthly cycle reporting. Coordinate forecasting exercise and planning resources. Analyze activity performance on providing reports, timelines, and analysis such as month-by-month hourly resource time utilization and unit costing, analysis on trends. Developing and providing accurate reporting tools for organization in relation with Programs and Indirect budgets. Interfacing with project teams to ensure consistent reporting of project performance, scope and accurate project forecasting. Conduct cost/benefit analysis and develop business case. Put in place all actions needed regarding continuous improvement and processes. A demonstrable experience in producing high quality and detailed written documents. Other duties as assigned or required.", "Recruiter_First_Name": "Daniela", "Recruiter_Last_Name": "Aguayo", "Recruiter_Email_Address": "Daniela.Aguayo@scipax.com", "Company_name": "Spalding Consulting", "SetName": "EMMANUEL OJENIYI_08/31/2023_Spalding Consulting_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/31/2023", "NoofDays": -91, "LogInterviewID": 93, "QID": 2576, "Job_Title": "Data Specialist", "Job_Description": "Data Specialist", "Recruiter_First_Name": "Sharon", "Recruiter_Last_Name": "Flanagan", "Recruiter_Email_Address": "SFlanagan@compia.global", "Company_name": "CompTIA", "SetName": "abebe woldeargay_08/31/2023_CompTIA_Data Specialist", "CandidateID": "37077", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "8/31/2023", "NoofDays": -91, "LogInterviewID": 92, "QID": 2575, "Job_Title": "Power BI Developer", "Job_Description": "Power BI Developer Position The Power BI Developer will be responsible for designing, developing, and maintaining interactive data visualizations and reports using the Power BI platform. To be successful in this role, the Power BI Developer will collaborate with stakeholders and business analysts to understand requirements and translate them into effective and visually appealing dashboards and reports. Your expertise in Power BI and data visualization will play a crucial role in helping our organization make informed decisions based on data-driven insights.", "Recruiter_First_Name": "Samuel", "Recruiter_Last_Name": "JOHNSON", "Recruiter_Email_Address": "linkedin.com/in/samjohnson2010", "Company_name": "ESP IT", "SetName": "Altish Asfaw_08/31/2023_ESP IT_Power BI Developer", "CandidateID": "37423", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "1196", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Leslie Boye", "Applicant": "Altish Asfaw", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/30/2023", "NoofDays": -92, "LogInterviewID": 96, "QID": 2579, "Job_Title": "SQL Developer", "Job_Description": "Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "Recruiter_First_Name": "Brendan", "Recruiter_Last_Name": "Barker", "Recruiter_Email_Address": "Brendan.Barker@insightglobal.com", "Company_name": "Community First Health Plans", "SetName": "AYODEJI OLAWOYE_08/30/2023_Community First Health Plans_SQL Developer", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "37.5", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "392", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "8/30/2023", "NoofDays": -92, "LogInterviewID": 98, "QID": 2581, "Job_Title": "Data Governance Analyst", "Job_Description": "The Data Governance Management Office (DGMO) is responsible for the development, implementation, and continuous improvement of an enterprise data governance framework that will increase coordination and consistency across enterprise domains, establish a shared, cross-functional understanding of critical data assets and concepts, and improve AltaMed\u2019s ability to make data-informed decisions using quality, trusted data & insights.   The Data Governance (DG) Analyst is responsible for facilitating and managing data governance initiatives, including the development of data standards, policies and procedures, and working with stakeholders from across the organization to promote and implement data governance best practices (data classification, data lineage, lifecycle management). This role will convene cross-functional groups to understand and document data requirements, data flows, and data use. In addition, the DG Analyst will help define and execute toward the implementation of an enterprise data governance roadmap, collaborating with data & analytics technical teams to bridge business objectives to analytical products & solutions.   To be successful in this role, individuals must have a blend of business acumen, a problem-solving attitude, data governance and data management knowledge, and a strong ability to communicate effectively with both technical and non-technical stakeholders. Other critical success factors include: comfort with ambiguity, curiosity and willingness to learn new subject matter, and an ability to build relationships with a focus on partnership. This role will support cross-functional teams with analysis and measurement of key data governance inputs, and requires some proficiency with data analysis and data quality measurement techniques.   Responsibilities   Contribute to and facilitate the creation of policies, standards, and documents on topics such as: data governance, data stewardship, master data management, data quality management. Build and maintain data governance collateral to centralize, coordinate, and share DGMO content with a wide array of enterprise stakeholders. Work with key business and technical stakeholders to create, manage, and curate an enterprise business glossary, data dictionary, and data catalog. Capture and share detailed formal documents, such as governance meeting minutes for operational, tactical, strategic, and executive audiences. Implement change control & change management processes and tools, and resolve enterprise data governance issues. Develop and socialize data maps to ensure transparency in the lineage and flow of data within and outside of the organization. Define and drive tactical roadmaps for enterprise data governance adoption, including socialization, stakeholder buy-in, operating model implementation, and data governance training. Work with other data & analytics teams to develop, promote, and monitor adherence to data quality standards. Develop, maintain, and socialize data inventory tools and methods to support data asset documentation & governance. Work with key stakeholders to define, monitor, and share data governance key performance, quality, and adherence metrics. Perform other duties as assigned.   Qualifications   Bachelor\u2019s degree in information technology, business, public health, mathematics, finance, or a related field, with appropriate professional and technical experience required. Minimum of 4 years of experience in data management, data analytics, product management, or consulting, or other relevant work experience required. Experience with project management techniques, such as cross-functional project coordination & delivery, work plan development, requirements gathering is required. Prior professional experience working within a healthcare environment (payer, provider, vendor) required. Proven ability to facilitate effective meetings and work sessions across various levels of staff and leadership required. Prior experience with data governance tools and platforms highly preferred. Previous experience in health care analytics, data strategy, business strategy, or clinical administration preferred. Prior experience with product management & agile delivery principles (Scaled Agile - SAFe) preferred. Show less  Seniority level Entry level Employment type Full-time Job function Information Technology Industries Wellness and Fitness Services", "Recruiter_First_Name": "Edward", "Recruiter_Last_Name": "Alonzo", "Recruiter_Email_Address": "ealonzo@altamed.org", "Company_name": "AltaMed", "SetName": "Betty Asmerom_08/30/2023_AltaMed_Data Governance Analyst", "CandidateID": "35551", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Saher Maiber", "Applicant": "Betty Asmerom", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/30/2023", "NoofDays": -92, "LogInterviewID": 87, "QID": 2570, "Job_Title": "Data Engineer", "Job_Description": "5+ years of experience working with SQL/Azure SQL/T-SQL. proficiency with at least one RDBMS like SQL Server DB, Oracle, MySQL, Postgres is must. Understanding of modern cloud data platforms like Azure or Snowflake is preferred but not required. Understanding of ETL and data warehousing concepts, coupled with hands-on experience of at least one ETL tool like SSIS, Azure Data Factory, Talend, Informatica. Knowledge of Power BI, DAX, or Tableau or SSRS. Adapt at conveying insights through data, assisting partners in identifying what matters and what steps they can take to help their business. Devotion to the QA process, conducting QA testing, and adept troubleshooting While AI or ML experience is preferred, it is not obligatory. Awareness of modern-day storage, compute, serverless, and orchestration services offered by cloud platform such as Azure, AWS, GCP. Experience with task automation, configuration, and alerts via PowerShell, Azure Data Factory, Databricks, SQL Agent, Data Pipelines. Working knowledge of Python and/or Spark (preferred but not required). Understanding of data modeling is desired but not mandatory. Advanced knowledge of performance monitoring and optimization. Be able to analyze system resource utilization, bottlenecks, and plan platform capacity sizing (activity monitors, traces, query tuning, optimizers, etc.) Capability to quickly adapt to new projects, systems, and technology tools. Must reside in Southern California. Some of the systems we work with are: Yardi (multiple modules including Voyager, Deal Manager), SQL databases and DW, Smartsheet, HubSpot, various 3rd party data sources.", "Recruiter_First_Name": "Drake", "Recruiter_Last_Name": "Van Ness", "Recruiter_Email_Address": "dvanness@rexfordindustrial.com", "Company_name": "Rexford Industrial", "SetName": "Talq Tera_08/30/2023_Rexford Industrial_Data Engineer", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "326", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/29/2023", "NoofDays": -93, "LogInterviewID": 78, "QID": 2561, "Job_Title": "Embedded BI Data Visualisation Specialist SIBU510", "Job_Description": "Analyze and Define Raw Data Visualizing and developing BI solutions (Dashboards, Scorecards, Analytic reports) Implement best practices to ensure dashboard design consistency for the best user experience Design and test analytics platform code. Data Preparation (Predictive & Restrictive) Enhance and Streamline data collection process Custom Analysis Long term research and prediction Using statistical techniques, collect and analyse data from the clients internal databases and systems and convert it to actionable intelligence; Lead the design of comprehensive data, intelligence and value proposition tools; Identify and communicate trends within complex datasets to stakeholders across the business, including the top problems that need to be solved and how to solve them proactively; Use internal data analytics tools to develop data dashboards that can be accessed by corporate security partners and senior stakeholders on demand; Improve standard operating procedures (SOPs) for implementing databases and data collection systems Plan, research and draft a range of tailored reports to deliver actionable insight for internal clients, including periodic reports (monthly, quarterly, bi-annual, etc.) and bespoke briefs with minimal supervision; Maintain clear and coherent communication, both verbal and written, to understand data needs and report results; Display creative thinking and consulting skills Identify gaps in crucial data, information and intelligence, and submit plans to fill them; Conduct briefings as needed for a variety of levels of customers as requested (via phone, video conference, in-person briefing, or industry conference); Establish and maintain professional relationships with internal stakeholders across the client business", "Recruiter_First_Name": "Alexandra", "Recruiter_Last_Name": "Adams", "Recruiter_Email_Address": "Alexandra.Adams@sibylline.co.uk", "Company_name": "Sibylline", "SetName": "Adib Kazi_08/29/2023_Sibylline_Embedded BI Data Visualisation Specialist SIBU510", "CandidateID": "38944", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "71", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "Adib Kazi", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/29/2023", "NoofDays": -93, "LogInterviewID": 91, "QID": 2574, "Job_Title": "Business Intelligence Architect", "Job_Description": "Responsibilities:   Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis.   With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables.   Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS.   Research and propose opportunities for data acquisition and new uses for existing data.   Code, test, and document new or modified data systems to create robust and scalable applications for analytics.   Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables.   In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions.   Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts.   Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI.   Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices.   Collaborate with Quality Assurance team to ensure valid and proper deliverables.   Support business decisions with ad-hoc analysis as needed.   Participate in rotation of after-hours support.   Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates.   Research new technologies for implementation by the team for producing cutting-edge solutions.   Cultivate business relationships with stakeholders.   May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.   Required:   Bachelor\u2019s degree in a related discipline (Computer Science, Information Systems Management, Engineering, or similar) or equivalent work experience.   Advanced knowledge of Microsoft\u2019s SQL Server, SSRS, SSIS, and SSAS.   Knowledgeable with Power BI, preferably with an on-premises environment.   Intermediate SQL Query, ETL, and Data Architecture experience.   Advanced Knowledge and ability in writing complex T-SQL code.   Ability to quickly identify and troubleshoot problematic SQL code.   Ability to design tables, data marts, and/or databases to suit reporting needs.   Knowledge of data mapping, database design, and data warehouse concepts.   Introductory experience with SQL Database Administration.   Knowledge using Jira, Bitbucket, GitKraken, and/or SourceTree with a good understanding of Git.   Desire and ability to learn emerging technologies and methodologies.   Ability to interpret report requests and requirements in order to build appropriate automated solutions.   Ability to work with shifting deadlines in a fast-paced environment.   Strong computer skills, including Microsoft Office (Access, Excel, Word, & Outlook).   Strong attention to detail, interpersonal skills, and notation skills.", "Recruiter_First_Name": "Jordan", "Recruiter_Last_Name": "Abraham", "Recruiter_Email_Address": "jabraham@marinerfinance.com", "Company_name": "Mariner Finance", "SetName": "Yama Touray_08/29/2023_Mariner Finance_Business Intelligence Architect", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 86, "QID": 2569, "Job_Title": "Data Analyst", "Job_Description": "Expected they will be able to:  \u2022\tCreating and developing actionable interactive reports and dashboards using statistical and business intelligence tools such as PowerBI \u2022\tConducting exploratory data analysis to identify areas for improvement and generate insights into products and services \u2022\tConsulting with stakeholders using human centered design approaches to understand the need for data products and to identify a potential solution. \u2022\tTranslating customer requirements for data products (datasets, reports, dashboards) into data solutions; creating calculated measures, columns, relationships, etc \u2022\tAnalyzing source systems and designing new data structures for high-volume, complex data. \u2022\tAccessing, transforming, cleansing, and testing data products using programming languages such as M, DAX, Python, R, and SQL. \u2022\tDesigning data visualization strategies that make large or complex datasets more understandable, accessible, and usable. \u2022\tDeveloping wireframes or prototypes of potential user experiences to share with stakeholder to collect feedback. \u2022\tCommunicating (orally and in written form) analytical results displayed through data visualizations to diverse stakeholder groups. General requirements:  \u2022\tTier 4-High Risk Public Trust Clearance \u2022\tIdeally 5 years of experience using business intelligence tools e.g. Power BI, to develop interactive data visualizations and reports. \u2022\tExperience using languages (e.g. DAX, M, Python, R, SQL) to structure and analyze data. \u2022\tKnowledge of data architecture and modelling, including relational databases.", "Recruiter_First_Name": "Jason", "Recruiter_Last_Name": "Dryer", "Recruiter_Email_Address": "jason.dryer@randstadusa.com", "Company_name": "Randstad federal", "SetName": "Yama Touray_08/28/2023_Randstad federal_Data Analyst", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1037", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 88, "QID": 2571, "Job_Title": "Power BI Developer", "Job_Description": "Power BI Developer Position The Power BI Developer will be responsible for designing, developing, and maintaining interactive data visualizations and reports using the Power BI platform. To be successful in this role, the Power BI Developer will collaborate with stakeholders and business analysts to understand requirements and translate them into effective and visually appealing dashboards and reports. Your expertise in Power BI and data visualization will play a crucial role in helping our organization make informed decisions based on data-driven insights.", "Recruiter_First_Name": "Samuel", "Recruiter_Last_Name": "Johnson", "Recruiter_Email_Address": "inmail-hit-reply@linkedin.com", "Company_name": "ESP IT", "SetName": "Altish Asfaw_08/28/2023_ESP IT_Power BI Developer", "CandidateID": "37423", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "237", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Leslie Boye", "Applicant": "Altish Asfaw", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 84, "QID": 2567, "Job_Title": "Business Intelligence Analyst-Power BI", "Job_Description": "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed Position Requirements  Education and Certifications Required \u2022\tBachelor\u2019s Degree in Business Analytics, Management Information Systems or, Business Computer Information Systems \u2022\tCBIP Certification a Plus Experience Required \u2022\t5 + years as a Business Intelligence Analyst, Business Analyst, Systems Support Analyst or Application Support Analyst \u2022\tExperience in Power BI developing reports and dashboards \u2022\tExperience in Business Objects Designer for creating and maintaining universes, WEBI, Derived tables, @functions and schemas \u2022\tUse of Business Objects to access data from a variety of sources \u2022\tPrior business systems analysis experience \u2022\tDrive RCA (root cause analysis) activities \u2022\tWorking experience in server and PC environments and skilled in navigating in a distributed server architecture Experience Preferred \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Recruiter_First_Name": "Wesley", "Recruiter_Last_Name": "Mercer", "Recruiter_Email_Address": "wesley.mercer@matrixres.com", "Company_name": "CoServ", "SetName": "LILIAN NJERI_08/28/2023_CoServ_Business Intelligence Analyst-Power BI", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1514", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 89, "QID": 2572, "Job_Title": "Business Intelligence Analyst-Power BI", "Job_Description": "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed    Experience Preferred  \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Recruiter_First_Name": "Chris", "Recruiter_Last_Name": "Cave", "Recruiter_Email_Address": "wesley.mercer@matrixres.com", "Company_name": "CoServ", "SetName": "LILIAN NJERI_08/28/2023_CoServ_Business Intelligence Analyst-Power BI", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "8/27/2023", "NoofDays": -95, "LogInterviewID": 90, "QID": 2573, "Job_Title": "Data Analytics", "Job_Description": "Data Analytics role", "Recruiter_First_Name": "Jason", "Recruiter_Last_Name": "Dryer", "Recruiter_Email_Address": "jason.dryer@randstadusa.com", "Company_name": "Randstad Federal", "SetName": "Yama Touray_08/27/2023_Randstad Federal_Data Analytics", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "1069", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/26/2023", "NoofDays": -96, "LogInterviewID": 85, "QID": 2568, "Job_Title": "Data Analytics", "Job_Description": "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.  Key Responsibilities:  Data Visualization Design: Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques. Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels. Data Analysis and Insight Generation: Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization. Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization. Data Quality and Governance: Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams. Implement data quality checks and validation processes to maintain the integrity of visualized data. Stakeholder Management and Collaboration: Engage with various departments and business leaders to gather requirements and understand their data needs. Collaborate with stakeholders to refine visualization designs and align them with business objectives. Data Strategy and Technology: Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities. Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.", "Recruiter_First_Name": "Ashley", "Recruiter_Last_Name": "Selki", "Recruiter_Email_Address": "https://www.linkedin.com/in/ashley-selki/.", "Company_name": "Lexipol LLC", "SetName": "AYODEJI OLAWOYE_08/26/2023_Lexipol LLC_Data Analytics", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 79, "QID": 2562, "Job_Title": "IT Data Specialist", "Job_Description": "JOB SUMMARY  At Houston Methodist, the IT Data Specialist is responsible for supporting an enterprise wide business intelligence and analytics framework that will provide the organization with solutions for effective decision-making. This position utilizes critical thinking, attention to detail, and effective communication skills and collaborates effectively with teams to consult with business area leads to generate solution recommendations. The IT Data Specialist plays a technical role on multiple projects and communicates effectively with technical and non-technical audiences. The position utilizes technical expertise in Business Intelligence architecture, design and implementation with experience in business, healthcare and technology projects. The incumbent will be actively involved in supporting, developing and advancing Houston Methodist\u2019s Analytics applications. The IT Data Specialist will use tools such as Microsoft SQL Server, Microsoft SQL Server Reporting Services, Microsoft SQL Server Integration Services, and Tableau to design and implement innovative approaches to data collection, analysis, interpretation and presentation to support planning and decision-making at all levels of the organization and assist in managing data as a corporate strategic resource.     Primary Job Responsibilities  Communicates (oral and written) effectively with customers, vendors, colleagues, and management about services, contact information, system availability, and information. Assists the business analysts to elicit requirements to document. technical and design specifications for package solutions, and/or software development. Assists with user education of business intelligence applications and helps ensure access to data with the goal of reduced reliance on technical specialists in order to obtain data. Develops Analytics Solutions including the data marts, Tableau data sources, reports and dashboards that support operational and strategic decision making. Identifies required source system data and develops ETL processes that move data from source systems into the data warehouse and data marts. Participates in resolving major system outages, disaster management and change control and provides technical or on call support for Analytics applications. Installs, configures, and deploys Analytics tools including as Microsoft SQL Server, and Tableau. Ensures all reported data and information are accurate, consistent, relevant and timely. Practices good time management, good assessment in professional decision making, and management reporting skills.", "Recruiter_First_Name": "Akshay", "Recruiter_Last_Name": "Kumar", "Recruiter_Email_Address": "akshay.kumar@Experis.com", "Company_name": "Houston Methodist", "SetName": "EMMANUEL OJENIYI_08/25/2023_Houston Methodist_IT Data Specialist", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "70", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 80, "QID": 2563, "Job_Title": "Tableau Cloud opportunity with Unify Consulting", "Job_Description": "Tableau Opportunity Hi Emmanuel,  I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak.  Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently.  Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Recruiter_First_Name": "Nicole", "Recruiter_Last_Name": "Mcneil", "Recruiter_Email_Address": "nicole.mcneill@unifyconsulting.com", "Company_name": "unifyconsulting.com", "SetName": "EMMANUEL OJENIYI_08/25/2023_unifyconsulting.com_Tableau Cloud opportunity with Unify Consulting", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 82, "QID": 2565, "Job_Title": "Power BI Developer", "Job_Description": "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.   Key Responsibilities:   Data Visualization Design:  Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques.  Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels.  Data Analysis and Insight Generation:  Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization.  Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization.  Data Quality and Governance:  Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams.  Implement data quality checks and validation processes to maintain the integrity of visualized data.  Stakeholder Management and Collaboration:  Engage with various departments and business leaders to gather requirements and understand their data needs.  Collaborate with stakeholders to refine visualization designs and align them with business objectives.  Data Strategy and Technology:  Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities.  Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.  Qualifications and Requirements  Bachelor's or Master's degree in Data Science, Data Visualization, Computer Science, or comparable experience.  Proven experience (typically 5+ years) in data visualization, with a track record of creating impactful visualizations.  Strong proficiency in data visualization tools such as Power BI, Tableau, or other industry-leading platforms.  Solid understanding of data analysis and data interpretation techniques to support the creation of meaningful visualizations.  Demonstrated ability to translate complex data concepts into clear and visually appealing presentations.  Strong communication and collaboration skills to work effectively with cross-functional teams and stakeholders.  Analytical mindset with a passion for discovering insights through data visualization.", "Recruiter_First_Name": "Annie", "Recruiter_Last_Name": "Daub", "Recruiter_Email_Address": "adaub@lexipol.com", "Company_name": "LEXIPOL", "SetName": "LILIAN NJERI_08/25/2023_LEXIPOL_Power BI Developer", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 83, "QID": 2566, "Job_Title": "Power BI Developer", "Job_Description": "As a Business Solution Architect, you will\u2026  lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design.   Lead the Functional team.  Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "Recruiter_First_Name": "Dana", "Recruiter_Last_Name": "Turner", "Recruiter_Email_Address": "Dana.Turner@itineris.net", "Company_name": "Itineries", "SetName": "LILIAN NJERI_08/25/2023_Itineries_Power BI Developer", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1891", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 81, "QID": 2564, "Job_Title": "Sr. Data Engineer", "Job_Description": "Essential Functions/ Responsibilities: The demands described here are representative of those that must be met by an employee to successfully perform the essential functions of this job. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Lead technical design, implementation, and problem resolution Partner cross-functionally to define and complete well-structured user stories Maintain, evolve and adhere to a maturing data governance policy Maintain and evolve a rapidly growing and robust data model containing vital customer information Design and implement reliable ETL solutions from a variety of data sources (APIs, Proprietary DB, No-SQL ) Provide best in class business analytics in the form of web-based reports and dashboards Define Data Engineering project feature delivery timelines and risks Provide mitigation options to solve for blockers and technical risks as they arise Identify technical debt, and communicate plans to manage it responsibly Provide mentoring as needed to team members Required Skills/Abilities: The requirements listed below are representative of the knowledge, skills, and/or abilities required to perform each essential duty satisfactorily. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Desire and passion to learn from like-minded, experienced, data-obsessed team members A strong sense of ownership, pride and commitment to quality Mastery of Microsoft Power BI Mastery of Business Intelligence data visualization tools Mastery of RDBMS (MSSQL) and/or NoSQL database technologies (MongoDB, Cosmos DB) Experience with cloud-based and/or on premises data warehousing (Azure preferred) Experience with Power BI Embedded Analytics Experience with Agile software development principles A track record of teamwork through high quality and timely Data Engineering projects Benefits you will receive:  Opportunity to work on an exciting and highly visible project at SEAM Group Participation in a fast-growing company Opportunity to learn new technologies and expand your skillset Flexible time off Flexible work hours Collaborative and embracing culture Comprehensive healthcare plan that includes access to health, dental, vision, disability, and life insurance at group rates 8 Paid Holidays Company 401k matching program Educational Reimbursement up to $1,000/year", "Recruiter_First_Name": "Laney", "Recruiter_Last_Name": "Nulph", "Recruiter_Email_Address": "recruiting.echo.ac72a5fdd54642d79b800c8a75a2c01f@echo.newtonsoftware.com", "Company_name": "SEAM Group", "SetName": "Mary Gathogo_08/25/2023_SEAM Group_Sr. Data Engineer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/23/2023", "NoofDays": -99, "LogInterviewID": 73, "QID": 2556, "Job_Title": "Data Visualization Manager", "Job_Description": "-Own data needs for clients and internal teams -Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports -Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools -Manage the retrieval, compiling, and formatting of large volumes of data -Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. -Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support -Learn new technologies as they evolve, and understand their impact to systems -Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously -Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals -Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities -Present and clearly articulate solution options to key stakeholders -Be a go-to resource with thorough understanding of data structures for various ad platforms", "Recruiter_First_Name": "Kaylee", "Recruiter_Last_Name": "Pearson", "Recruiter_Email_Address": "kpearson@theshipyard.com", "Company_name": "The Shipyard", "SetName": "Talq Tera_08/23/2023_The Shipyard_Data Visualization Manager", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/23/2023", "NoofDays": -99, "LogInterviewID": 77, "QID": 2560, "Job_Title": "Data Analytics", "Job_Description": "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.  Key Responsibilities:  Data Visualization Design: Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques. Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels. Data Analysis and Insight Generation: Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization. Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization. Data Quality and Governance: Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams. Implement data quality checks and validation processes to maintain the integrity of visualized data. Stakeholder Management and Collaboration: Engage with various departments and business leaders to gather requirements and understand their data needs. Collaborate with stakeholders to refine visualization designs and align them with business objectives. Data Strategy and Technology: Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities. Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.", "Recruiter_First_Name": "Annie", "Recruiter_Last_Name": "Daub", "Recruiter_Email_Address": "<adaub@lexipol.com>", "Company_name": "Lexipol LLC", "SetName": "AYODEJI OLAWOYE_08/23/2023_Lexipol LLC_Data Analytics", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "65", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/22/2023", "NoofDays": -100, "LogInterviewID": 74, "QID": 2557, "Job_Title": "Data Engineer", "Job_Description": "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. In addition to supporting extensions to the data warehouse design, this role will design and develop ETL required to onboard new types of business data. Finally, this role will also provide support for Analytics assignments as needed.  Responsibilities  Display sense of ownership over assigned work, requiring minimal direction and driving to completion in a sometimes fuzzy and uncharted environment. Designing and building new data pipelines that support business requirements. Work with IT and other business partners to support the evolution of the enterprise data architecture. Work with IT to build new ETLs to take data from various operational systems and extend existing data warehouse data model for analytics and reporting. Continually improve ongoing reporting and analysis processes, automating or simplifying self-service support for business constituents. Support the development of the company BI infrastructure, including the construction of scalable analytic solutions, and on-premises reporting tools. Utilize Power BI development to build scalable reporting models to serve BI reporting needs. Demonstrate the ability to gather requirements, extract and manipulate data residing in multiple disparate databases, and articulate solutions to support the business. Design, develop, and maintain performant data models in Power BI utilizing best practices. Serve as a subject matter expert for all data warehouse and enterprise systems Use new or existing technologies to produce analytics solutions (in the form of excel spreadsheets, dashboards, etc.). Work with IT and Analytics team to architect and build data pipelines to optimize for performance, data quality, scalability, ease of future development, and cost. Gather requirements, assess gaps and build roadmaps to help the analytics driven organization achieve its goals. Develop data-related Proof of Concepts in order to demonstrate feasibility and value to Symmetry business constituents. Qualifications / Requirements  Bachelor\u2019s degree in Information Systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+years\u2019 experience with advanced SQL concepts and writing SQL statements (SQL Server or similar). Prefer 2 years\u2019 experience with Microsoft BI Suite, PowerBI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Knowledge of the software development lifecycle, agile methodologies, and structured software development methodologies. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data At least 5 years of work experience", "Recruiter_First_Name": "Capri", "Recruiter_Last_Name": "Talley", "Recruiter_Email_Address": "capri.talley@symmetrylending.com", "Company_name": "Symmetry Lending", "SetName": "Calvine  Cheptoo _08/22/2023_Symmetry Lending_Data Engineer", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "283", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/22/2023", "NoofDays": -100, "LogInterviewID": 72, "QID": 2555, "Job_Title": "Data Analyst", "Job_Description": "Develop and maintain databases by acquiring data from primary and secondary sources. Build scripts and implement tools that will make the data evaluation process more flexible or scalable across datasets and platforms. Escalate and manage internal and external incident tickets through company\u2019s ticketing system. Work closely with project managers to understand and maintain focus on their analytics needs, including critical metrics and KPIs, and deliver actionable insights to relevant decision-makers. Provide after-hours or weekend support when necessary to perform high-risk or planned downtime of IT systems for upgrades and maintenance. Evaluate internal systems for efficiency, problems, and inaccuracies, and develop and maintain protocols for handling, processing, and cleaning data. Assist with the creation, deployment and maintenance of new datasets and reports that can be used to review and improve company goals across departments.", "Recruiter_First_Name": "Matthew", "Recruiter_Last_Name": "Pickering", "Recruiter_Email_Address": "matthew.pickering@msg.clrco.com", "Company_name": "Northwest Cascade Inc.", "SetName": "ANNE NDUNGU_08/22/2023_Northwest Cascade Inc._Data Analyst", "CandidateID": "37048", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "4", "AutoInterviewsDuration": "524", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/21/2023", "NoofDays": -101, "LogInterviewID": 75, "QID": 2558, "Job_Title": "Business Intelligence Developer", "Job_Description": "In Addition, You  Have an entrepreneurial streak Are self-motivated and driven Just get things done Roll with the punches when the unexpected happens or if the team needs to pivot direction Are passionate Have strong report visualization and data design intuition Pay attention to user feedback Thrive in an environment of open feedback/brainstorming/sharing Are a team player and people like working with you Are intellectually curious and always wanting to learn more Interested in creating a culture driven by metrics and experimentation   The Business Intelligence Developer will Design, implement, and maintain Dashboards, visualizations, and supporting data analysis layers. Additionally, he/she will design and develop visualization solutions against data warehouses, data marts, and cubes. This position will coordinate with other team members and managers to translate business needs into technical solutions and provide technical assistance to users pulling data from our self-service environment. The Business Intelligence Developer will troubleshoot issues in cubes and database objects (procedures \u2013 as they relate to surfacing data) to identify and solve problems with data accuracy and performance.   Education/Licensing Requirements   High School Diploma or equivalent. Bachelor\u2019s degree in a computer-related field or equivalent experience. Master\u2019s degree in a computer-related field is a plus.   Experience Requirements   Minimum 5 years of experience in MS BI tools (SSRS, SSAS, Power BI)  5+ years of relevant experience in report development, data science, business analytics, business intelligence, or comparable data engineering role, including data warehousing and business intelligence tools, techniques, and technology Minimum of 2 years of experience in Power BI Knowledge of SQL to write complex, highly-optimized queries across large volumes of data Successful work experience in MS SQL programming, database design, data warehouse design, query performance tuning, and writing stored procedures. Knowledge of ETL and data warehouse concepts and processes Experience with Tableau or an equivalent reporting tool to create impactful reports, visualizations, and interactive dashboards Understanding of data models Creativity to determine the best solution for a real-world problem with quantitative data Experience supporting a multi-database environment. Excellent understanding of OLTP and OLAP systems. Knowledge of best practices and software development process   Essential Skills/Experience   Fluently speak, read, and write English. Good verbal and written communication skills. Proven ability to prioritize and multi-task. SQL programming, server integration, and reporting  Curiosity and passion for data, visualization, and solving problems Creativity to determine the best solution for a real-world problem with quantitative data Experience with reporting, descriptive statistics, probability, and cleaning big datasets Willingness to question the validity, accuracy of data, and assumptions Enjoyment from collaborating with others in a team environment Eagerness to learn in a fast-paced environment Knowledge of medical data a plus   Essential Characteristics   Self-directed and organized. Discrete/ability to maintain confidentiality. Team player. Detail-oriented. Sense of urgency. Customer service orientation. Drive and self-reliance Ability to work under pressure. Ability to work well independently. Ability to take direction.   Essential Job Responsibilities   Evaluate and monitor databases to resolve performance issues. Develop, deploy, maintain and debug SSIS packages. Develop, test, and maintain MS SQL Server databases. Work with Business Analysts to aid in the design of the system. Investigate and resolve problems of data accuracy and availability Participate in integral testing to identify problems early. Perform error and stress scenarios. Participate in design and code reviews. Identify architectural issues and propose alternative solutions. Install upgrades and patches to existing databases. Develop and maintain data warehouse documentation.   Additional Job Responsibilities   Maintains a neat, orderly work area.  Performs other incidental and related duties as required. Actively demonstrates teamwork at all times. Ability to work overtime.", "Recruiter_First_Name": "Scott Bostic", "Recruiter_Last_Name": "Stafford", "Recruiter_Email_Address": "sbostic-stafford@signifyhealth.com", "Company_name": "Signify Health", "SetName": "Yama Touray_08/21/2023_Signify Health_Business Intelligence Developer", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "736", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/21/2023", "NoofDays": -101, "LogInterviewID": 66, "QID": 2549, "Job_Title": "Software Engineer", "Job_Description": "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices. What you have:   Required Knowledge, Skills and Abilities:   Hands-on experience working with modern ETL, BI tools & technology. Hands-on delivery experience in leading cloud data platforms: Snowflake, Azure Synapse. Extensive recent experience with SQL and SQL analytics: SQL Server, SSIS, SSRS, SSAS Hands-on experience implementing ETL pipelines using packaged tools: Attunity, Azure Data Factory Familiarity and experience with common BI and data exploration tools \u2013 Power BI, DAX Software development experience with C/C++ a definite plus. Scripting experience with Python, Ruby, Perl, Bash a definite plus. Perform data analysis required to troubleshoot data related issues and assist in the resolution of data issues. Strong organizational skills. Excellent written and oral communication skills. Business / Retail Operations background preferred.", "Recruiter_First_Name": "Lynda", "Recruiter_Last_Name": "Booth", "Recruiter_Email_Address": "lbooth@savers.com", "Company_name": "Savers", "SetName": "Mary Gathogo_08/21/2023_Savers_Software Engineer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/21/2023", "NoofDays": -101, "LogInterviewID": 70, "QID": 2553, "Job_Title": "Power BI Developer", "Job_Description": "Responsibilities: Consult with internal and external customers to collect BI requirements. Understand the customer\u2019s datasets. Correlate the datasets with the BI requirements. Create Power BI visualizations and edit existing reports. Publish and administrate Power BI Workspaces. Creation of staging databases and data warehouses for consumption by Power BI. Setup and administration of Power BI data connections.  Specific Skills Required:  Strong T-SQL skills. Knowledge of data warehousing products and techniques, including OLAP and/or SSAS. Experience in working with different departments and cross-functional teams, including customer interface and requirements gathering. Ability to manage multiple priorities and juggle customer demands. Exceptional problem-solving skills with the ability to leverage a wide variety of data and related tools to improve the efficiency of the organization. Strong communication, teamwork, and organizational skills. Solid relationship management and leadership skills and the ability to assume increasing responsibilities in a rapidly changing environment. Strong general technical aptitude.   Preferred Skills:  Additional software development skills, particularly in .NET are highly desirable  Education & Years of Experience:  Bachelor\u2019s degree preferred. Two-plus years\u2019 experience in BI. Proven expertise in creating Power BI visualizations, workspaces, datasets, DAX, database queries.", "Recruiter_First_Name": "Amy", "Recruiter_Last_Name": "Lambdin", "Recruiter_Email_Address": "allambdin@cshco.com", "Company_name": "Clarke Schaefer Hacket", "SetName": "Mary Gathogo_08/21/2023_Clarke Schaefer Hacket_Power BI Developer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 65, "QID": 2548, "Job_Title": "Power BI Developer/Analyst (Corporate Travel)", "Job_Description": "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995. Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel! About The Opportunity Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry. You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. Key Responsibilities Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs. Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner. Experience & Qualifications Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field. Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. Solid experience in SQL and working with relational databases. Excellent analytical skills with the ability to dissect large amounts of data. Strong communication skills and the ability to effectively convey complex information. Experience in the corporate travel industry is a plus.", "Recruiter_First_Name": "Andrea", "Recruiter_Last_Name": "Grimes", "Recruiter_Email_Address": "andrea.grimes@us.flightcentre.com", "Company_name": "Flight Center Travel Group (FCTG)", "SetName": "Mary Gathogo_08/17/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 51, "QID": 0, "Job_Title": "Application Specialist", "Job_Description": "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites up to 50% of the time Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Recruiter_First_Name": "Malyssa", "Recruiter_Last_Name": "Daletski", "Recruiter_Email_Address": "Malyssa.Daletski@hirschbach.com", "Company_name": "Hirschbach Motor Lines", "SetName": "NULL", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 67, "QID": 2550, "Job_Title": "Software Engineer, Business Intelligence", "Job_Description": "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices.", "Recruiter_First_Name": "Sandeep", "Recruiter_Last_Name": "Joshi", "Recruiter_Email_Address": "https://www.linkedin.com/in/sandeep-joshi-450a796/", "Company_name": "Savers/Value Village", "SetName": "AYODEJI OLAWOYE_08/17/2023_Savers/Value Village_Software Engineer, Business Intelligence", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 62, "QID": 2545, "Job_Title": "Tableau Developer", "Job_Description": "Design and Develop Tableau reports and dashboards \u2022 Provide operational support for existing Tableau reports/dashboards \u2022 Provide subject matter expertise for designing of Tableau workbooks \u2022 Participate in analysis, design, development, testing, deployment and support of dashboards and reports \u2022 Perform impact analysis and validation of existing production reports and universes after application and database upgrade \u2022 Interface with business analysts and/or users to clarify requirements. Work closely with the different business groups to cater to their reporting and dashboard needs. \u2022 Troubleshoot dashboard and report problems independently, determining the root cause and fixing the problem. \u2022 Understand reporting database schema/model, identify joins/tables, and perform data analysis. \u2022 Experience building complex dashboards using Tableau \u2022 Implement industry BI standards and best practices \u2022 Proactively identify problems/issues/risks and provide solutions \u2022 Develop report & dashboards using Business Objects and Tableau and Provide status updates on regular basis and be committed to aggressive delivery timelines", "Recruiter_First_Name": "Sofiia", "Recruiter_Last_Name": "Lievina", "Recruiter_Email_Address": "Sofiia.Lievina@dxc.com", "Company_name": "Luxoft", "SetName": "EMMANUEL OJENIYI_08/17/2023_Luxoft_Tableau Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/16/2023", "NoofDays": -106, "LogInterviewID": 64, "QID": 2547, "Job_Title": "Software Engineer", "Job_Description": "The team members in our stores are made up of different backgrounds, experiences, and perspectives, all with something special to contribute. Our Rethink Reuse business model of purchasing, reselling and recycling gives the community a smart way to shop and keeps 700 million pounds of used goods from landfills each year.  We also help more than 100 non-profit organizations by purchasing donated goods from them, which provides a source of revenue to help support their vital community programs and services.", "Recruiter_First_Name": "Lynda", "Recruiter_Last_Name": "Booth", "Recruiter_Email_Address": "lbooth@savers.com", "Company_name": "Savers", "SetName": "AYODEJI OLAWOYE_08/16/2023_Savers_Software Engineer", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/16/2023", "NoofDays": -106, "LogInterviewID": 69, "QID": 2552, "Job_Title": "BI Developer", "Job_Description": "Proven experience as a BI Developer with expertise in Tableau, SQL, and Tableau Prep. Strong proficiency in SQL for data manipulation and analysis. Experience in designing and developing interactive dashboards and reports using Tableau. Proficiency in at least one programming language like R, Python, or PostgreSQL.", "Recruiter_First_Name": "Lhuana", "Recruiter_Last_Name": "Silva", "Recruiter_Email_Address": "jobs@primusglobal.com", "Company_name": "PRIMUS Global Services", "SetName": "Nadege Nguemo Mbouyo_08/16/2023_PRIMUS Global Services_BI Developer", "CandidateID": "34701", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 68, "QID": 2551, "Job_Title": "Business Intelligence Architect", "Job_Description": "Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis. With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables. Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS. Research and propose opportunities for data acquisition and new uses for existing data. Code, test, and document new or modified data systems to create robust and scalable applications for analytics. Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables. In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions. Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts. Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI. Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices. Collaborate with Quality Assurance team to ensure valid and proper deliverables. Support business decisions with ad-hoc analysis as needed. Participate in rotation of after-hours support. Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates. Research new technologies for implementation by the team for producing cutting-edge solutions. Cultivate business relationships with stakeholders. May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.", "Recruiter_First_Name": "Jordan", "Recruiter_Last_Name": "Abraham", "Recruiter_Email_Address": "jabraham@marinerfinance.com", "Company_name": "MARINER FINANCE", "SetName": "Nadege Nguemo Mbouyo_08/15/2023_MARINER FINANCE_Business Intelligence Architect", "CandidateID": "34701", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 42, "QID": 2526, "Job_Title": "Application Specialist", "Job_Description": "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Recruiter_First_Name": "Malyssa", "Recruiter_Last_Name": "Daletski", "Recruiter_Email_Address": "recruiting+226318872@applytojob.com", "Company_name": "Hirschbach", "SetName": "Talq Tera_08/15/2023_Hirschbach_Application Specialist", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 43, "QID": 2527, "Job_Title": "Application Specialist", "Job_Description": "Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Recruiter_First_Name": "Malyssa", "Recruiter_Last_Name": "Daletski", "Recruiter_Email_Address": "Malyssa.Daletski@hirschbach.com", "Company_name": "Hirschbach", "SetName": "Talq Tera_08/15/2023_Hirschbach_Application Specialist", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 58, "QID": 2541, "Job_Title": "Power BI Developer/Analyst (Corporate Travel)", "Job_Description": "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL  Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995.  Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel!  About The Opportunity  Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry.  You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies.  Key Responsibilities  Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs.  Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations.  SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives.  Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner.  Experience & Qualifications  Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field.  Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI.  Solid experience in SQL and working with relational databases.  Excellent analytical skills with the ability to dissect large amounts of data.  Strong communication skills and the ability to effectively convey complex information.  Experience in the corporate travel industry is a plus.", "Recruiter_First_Name": "Andrea", "Recruiter_Last_Name": "Grimes", "Recruiter_Email_Address": "andrea.grimes@us.flightcentre.com", "Company_name": "Flight Center Travel Group (FCTG)", "SetName": "Mary Gathogo_08/15/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 59, "QID": 2542, "Job_Title": "Power BI Developer", "Job_Description": "Power BI Developer Hybrid Remote - 3x per week onsite Based in Rosemont IL Direct hire   At Medix, we are dedicated to creating opportunities for talent in Information Technology. Our dedicated recruiters offer a personalized service to make sure we truly understand your employment needs. We are currently seeking a hybrid remote Power BI Developer with one of our technology clients due growth. This is a direct hire opportunity. Partner with Medix, and you will experience the multiple benefits our company has to offer. We will hold a personal consultation with you to understand your skills and aspirations! Our placement services provide flexibility to accommodate your schedule and needs. We offer competitive compensation packages including full health, dental and vision insurance, 401k and PTO.  Power BI Developer  Job Responsibilities: Reports development Working with Power BI and other individuals across the data team to assist in the pulling of data from SQL and creating visualizations and dashboard for their application and software They will have a smaller team they meet with, but for the most part they will be operating on their own Need to have strong analytical skills and be able to adapt quickly Develop operational reports Build automated reports and dashboards with the help of Power BI and other reporting tools Understand business requirements to set functional specifications for reporting applications Be experienced in tools and systems on MS SQL Server BI Stack, including SSRS and TSQL, Power Query, MDX, PowerBI, and DAX Be able to quickly shape data into reporting and analytics solutions   Power BI Developer  Requirements:  As an Power BI Developer, this individual must be highly motivated, able to multitask and able to work in a fast paced IT environment. Qualified candidates must be able to self direct while working with others.  Other requirements of the role include:  4 years of Power BI experience (including dashboard creation and supporting end users on their visualization needs) Strong SQL experience  Strong understanding of BI functions and tools including SSRS, Power Query, and DAX Any fundamental database knowledge and relational database design  SSIS and SSRS knowledge", "Recruiter_First_Name": "Kylie", "Recruiter_Last_Name": "Hegemier", "Recruiter_Email_Address": "kylie.hegemier@medixteam.com", "Company_name": "Medix Technology", "SetName": "Mary Gathogo_08/15/2023_Medix Technology_Power BI Developer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 52, "QID": 2535, "Job_Title": "Data Visualization Manager", "Job_Description": "WHAT YOU\u2019LL DO  Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms WHAT YOU\u2019LL BRING  Bachelor's Degree in Data Analysis, Data Development, Marketing Data & Analytics, or related field and/or 3-5 years equivalent work experience in Data Developer or similar Data & Analytics Role Proficiency in SQL Experience with BI and Analytics Tools Experience building and supporting high-performance data models, visualizations, and KPIs for key initiatives Experience with data storytelling, data science, or data strategy Knowledge of data modeling and entity relationships Ability to write code with clean documentation Strong entrepreneurial drive Strong verbal and written communication skills and a collaborative, problem-solving mindset Customer/client service experience (internal and/or external audiences) Strong critical thinking, problem solving and analytical skills Strong verbal and written communication skills Proven experience in implementing innovations that drive business goals led from user feedback and experience NOT REQUIRED, BUT PREFERRED  Marketing, media, & advertising knowledge, including digital and traditional channels Experience with tools that support data engineering such as Looker, Fivetran, AWS, DBT Experience with data warehousing architecture and data modeling", "Recruiter_First_Name": "Pearson", "Recruiter_Last_Name": "Kaylee", "Recruiter_Email_Address": "kpearson@theshipyard.com", "Company_name": "The Shipyard", "SetName": "Calvine  Cheptoo _08/15/2023_The Shipyard_Data Visualization Manager", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "144", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/11/2023", "NoofDays": -111, "LogInterviewID": 53, "QID": 2536, "Job_Title": "Power BI / SSRS Developer", "Job_Description": "Job Description The Power BI / SSRS Developer\u2019s primary responsibility is to design, create and/or support data reporting systems and solutions for the Symmetry Lending organization. Systems include but are not limited to loan originations system, loan servicing system, data warehouse, company intranet, homegrown automation applications, and various partner interfaces. Additional responsibilities include analysis, design, and maintenance of departmental, financial, investor and regulatory reports. Qualifications / Requirements Experience working in the financial industry, ideally banking, lending, or similar as a Power BI and SSRS. Experience as a business analyst or quality assurance analyst is a major plus. 5+ years database design and development experience with MS SQL server technologies (SSRS and SSMS) with Data transformation / ETL and Power Query engine experience. 4+ years' experience with Power BI Desktop, Power Query, DAX (Data Analysis Expressions) language, data modeling, and visualizations. Strong analytical and data modeling skills with the ability to gather and analyze data from various sources, design effective data models, and create relationships between different data tables. Strong understanding of visualization with the ability to create compelling and interactive visualizations with an eye for design. A deep understanding of best practices for creating meaningful charts and graphs, and the ability to effectively communicate data insights to stakeholders. Collaborate with other analysts and developers to integrate Power BI solutions with other data sources and applications. Collaborate with key stakeholders across the organization to identify business requirements for reporting, dashboards, and visualizations. Experience writing complex and optimized SQL queries. Experience with SDLC and Agile processes. Strong verbal, written, and technical analysis skills. Responsibilities Work closely with business users and stakeholders to analyze and define business requirements. Create and provide time sensitive ad-hoc report/data requests. Participate in defining and adhering to best practices, standards and procedures as defined by Symmetry IT. Work closely with Quality Assurance to ensure accurate and compliant data implementations. Create various document artifacts including business requirements and technical design documents. Comply with company policies and procedures, security and regulatory requirements, and investor guidelines. Ensures all applicable internal NPI policies and procedures are followed, and confidentiality of borrower information is maintained. Any combination of following are strong pluses but not strictly required: You have a solid foundation in data analysis and an attention to detail which you use to understand business requirements and translate them into effective report designs. Your strong analytical skills will help you identify trends, patterns, and insights from the data. You have data warehouse design and/or some software development experience. You have a good understanding of data visualization principles and the ability to present data in a meaningful way. You are a continuous learner with a willingness to learn and stay updated with the latest trends, tools, and best practices.", "Recruiter_First_Name": "Talley", "Recruiter_Last_Name": "Capri", "Recruiter_Email_Address": "hrsymmetrylending4_eja@indeedemail.com", "Company_name": "Symmetry Lending", "SetName": "Calvine  Cheptoo _08/11/2023_Symmetry Lending_Power BI / SSRS Developer", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}], "datacache": 0, "originalcount": 143, "samplecount": 143, "samplefile": "/FileStore/platform/sampleData/6572047fc850af03eddd1461/part-00000-ebd20b89-8efb-4ae8-93db-c2986149cea8-c000.csv", "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": "{}"}}, {"_id": "6572047fc850af03eddd1462", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/Colaberry Interview Prep.csv", "in": ["6572047fc850af03eddd1461"], "out": ["6572047fc850af03eddd1463"], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "InterviewerPerformanceAssessment(Regression)_AutoFE", "dataPercentage": "10", "comment": "", "pipeline_id": "6572047fc850af03eddd145e", "sub_type": "Feature", "stage_type": "transformation", "stage_attributes": {"AutoFE": {"autoFE_flag": true, "dataPercentage": "10", "sampledata": [{"InterviewDate": "12/6/2023", "NoofDays": 6, "LogInterviewID": 287, "QID": 2743, "Job_Title": "Business Intelligence Developer", "Job_Description": "About the job Job Summary   The Business Intelligence Developer works independently, and collaboratively, to elicit requirements and create specifications. They then design, architect, and implement complex and visually compelling reporting and business intelligence (BI) solutions (data visualizations, extract-transform-load (ETL), ad hoc querying, etc.)   The individual in this position interfaces with various functional teams to support the BI solution delivery. They proactively identify needs or issues, develop strategies, and propose/implement technical and process solutions. The Senior BI Developer leads complex or specialized projects and will grow to become a subject matter expert with responsibility for mentoring and training all levels of BI developers as well business stakeholders   Essential Functions And Tasks   Responsible for designing and implementing BI solutions using the Microsoft BI Toolkit (SQL, SSIS, SSAS, SSRS, Power BI) to enable the analysis of data to support strategic initiatives and ongoing business requirements. Solutions include, but are not limited to, end-user reports, ad hoc requests, data visualizations, extract-transform-load (ETL) systems, master data management (MDM), and other BI Solutions   This position is expected to have a proactive approach and create the best solution to address business needs and current infrastructure. Care will be given to provide accurate data to fulfill the requirements of the developed solutions   Actively seeks opportunities to expand technical knowledge and capabilities   Work with the Development team to establish best patterns, practices, and standards as new technology arises   Participate in the out of hours support process   Performs special projects and other duties as assigned   Education And Experience Requirements   Bachelor\u2019s Degree in Computer Science, Information Technology, Data Science, Math, Finance, or a related field, or equivalent training   Two (2) to five (5) years of experience as a Business Intelligence Developer   At least three (3) years of progressively responsible experience building Data Warehouse and Business intelligence solutions. Experience using Microsoft Business Intelligence technologies: SSAS, SSIS, SSRS or similar technologies and database platforms such as Information Builder\u2019s WebFocus, SQL, Tableau, SAP, Power BI, or Oracle. Experience working with SQL queries and data processes   Certification in Lean, Six Sigma or other advanced performance improvement methodology, preferred   Knowledge, Skills, And Abilities   Knowledge and experience with SQL, SSIS, SSAS and SSRSs that support an Enterprise Data Warehouse environment   Ideal candidates will have hands-on experience with the full life cycle of Data warehouse design and development including logical and physical data modeling, mapping data elements from various data sources, and loading EDW objects including dimensions and fact tables   Candidates must have hands-on experience with gathering business requirements, documenting the reporting and analysis specifications, and designing technical architecture   Proven ability to answer technical questions   Strong knowledge and experience with healthcare reporting, Analytics, and Business reporting needs is a must   Excellent communication and client-facing skills   Ability to be flexible and work under high pressure in a complex environment   HealthCare/RCM/Financial systems is a major plus   Experience with large Health care EMRs is a plus   Understand and comply with company policies and procedures", "Recruiter_First_Name": "Joshua", "Recruiter_Last_Name": "Vazquez", "Recruiter_Email_Address": "Joshua.Vazquez@ventrahealth.com", "Company_name": "Ventra Health", "SetName": "EMMANUEL OJENIYI_12/06/2023_Ventra Health_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "24", "Technical_InterviewCount": "6", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 69.0, "Job_Title_stringindexer_transform": 0.0, "Job_Description_stringindexer_transform": 27.0, "Recruiter_First_Name_stringindexer_transform": 87.0, "Recruiter_Last_Name_stringindexer_transform": 93.0, "Recruiter_Email_Address_stringindexer_transform": 66.0, "Company_name_stringindexer_transform": 62.0, "SetName_stringindexer_transform": 70.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 24.0, "Technical_InterviewCount_stringindexer_transform": 6.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "12/5/2023", "NoofDays": 5, "LogInterviewID": 273, "QID": 2744, "Job_Title": "Senior Analyst, IT Business Analyst", "Job_Description": "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com  Job Description  What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements.  Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed.", "Recruiter_First_Name": "Beau", "Recruiter_Last_Name": "Jones", "Recruiter_Email_Address": "Beau.Jones@connectiverx.com", "Company_name": "ConnectiveRx", "SetName": "Yama Touray_12/05/2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "CandidateID": "37640", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 43.0, "Job_Title_stringindexer_transform": 20.0, "Job_Description_stringindexer_transform": 85.0, "Recruiter_First_Name_stringindexer_transform": 28.0, "Recruiter_Last_Name_stringindexer_transform": 16.0, "Recruiter_Email_Address_stringindexer_transform": 22.0, "Company_name_stringindexer_transform": 23.0, "SetName_stringindexer_transform": 81.0, "CandidateID_stringindexer_transform": 7.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 6.0, "Applicant_stringindexer_transform": 8.0, "Recruiter_InterviewCount_stringindexer_transform": 5.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "12/4/2023", "NoofDays": 4, "LogInterviewID": 288, "QID": 2745, "Job_Title": "ETL Developer", "Job_Description": "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. You will be responsible for extracting, transforming, and loading data from various sources into our data warehouse, ensuring the accuracy, reliability, and performance of our data pipelines. Additionally, this role will also provide support for Reporting and Analytics assignments as needed.  Key Responsibilities:  Data Extraction and Transformation: Design and develop ETL processes to extract data from multiple sources, transform it to meet business requirements, and ensure data quality and consistency. SQL Server Integration Services (SSIS): Create, optimize, and maintain SSIS packages to automate data workflows, including data cleansing, enrichment, and loading into target systems. Complex SQL Queries: Create and optimize complex SQL queries, stored procedures, and functions to extract, transform, and load data from various data sources. Business Requirements: Collaborate with cross-functional teams to gather business requirements and translate them into technical specifications for data integration and ETL solutions. Data Profiling and Analysis: Perform data profiling and analysis to identify data quality issues and propose appropriate solutions. Data Quality: Implement data cleansing, transformation, and validation rules to ensure the accuracy and consistency of data. Data Modeling: Collaborate with database administrators and data architects to design and maintain data models and database schemas. Managing Data Pipelines: Manage and maintain data pipelines, ensuring their reliability, performance, and scalability to meet business needs. Agile Methodology: Apply Agile methodologies to ensure that ETL processes align with Agile principles and practices, facilitating collaboration, and adaptability within the team. Software Development Life Cycle (SDLC): Demonstrate a strong understanding of the Software Development Life Cycle (SDLC) process, ensuring that testing activities are aligned with each phase of the SDLC, from requirements gathering to deployment. Documentation: Develop and maintain documentation, including data flow diagrams, data dictionaries, and technical specifications. Performance Optimization: Monitor and optimize the performance of SQL queries, ETL processes, and database systems to ensure efficient data processing and system reliability. Issue Resolution: Troubleshoot and resolve data-related issues, including data integration failures, data quality problems, and performance bottlenecks. Industry Trends: Stay up to date with industry trends and best practices in SQL development, ETL, and data integration technologies. Be part of an on-call rotation. Qualifications / Requirements  Bachelor\u2019s degree in information systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred. Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+ years\u2019 experience with advanced SQL and SSIS Prefer 2 years\u2019 experience with Microsoft BI Suite, Power BI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint and modeling tools such as ERStudio Prefer experience with other ETL tools such as AWS Glue, etc. Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization. Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused. Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data Python experience a plus Familiarity with API integrations About Symmetry  Symmetry Lending specializes in providing mortgage fulfillment services to include origination, servicing, and capital markets needs to various Lenders across the country with whom we partner. We have offices in Atlanta, GA, Eden Prairie, MN, Denver, CO, Orlando, FL, and Anaheim, CA, and we do business from coast to coast. We take great pride in building a diverse team of motivated professionals that contribute to an exciting work atmosphere. We provide a competitive benefits package including medical, dental, and vision plan options, paid time off, and more.", "Recruiter_First_Name": "Capri", "Recruiter_Last_Name": "Talley", "Recruiter_Email_Address": "capri.talley@symmetrylending.com", "Company_name": "Symmetry Lending", "SetName": "MULUGETA TADE_12/04/2023_Symmetry Lending_ETL Developer", "CandidateID": "40376", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Kwabena Manu", "Applicant": "MULUGETA TADE", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 30.0, "Job_Title_stringindexer_transform": 14.0, "Job_Description_stringindexer_transform": 45.0, "Recruiter_First_Name_stringindexer_transform": 12.0, "Recruiter_Last_Name_stringindexer_transform": 22.0, "Recruiter_Email_Address_stringindexer_transform": 16.0, "Company_name_stringindexer_transform": 1.0, "SetName_stringindexer_transform": 72.0, "CandidateID_stringindexer_transform": 17.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 17.0, "Applicant_stringindexer_transform": 27.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "12/4/2023", "NoofDays": 4, "LogInterviewID": 274, "QID": 2741, "Job_Title": "Senior Analyst, IT Business Analyst", "Job_Description": "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com Job Description What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements. Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed", "Recruiter_First_Name": "Beau", "Recruiter_Last_Name": "Jones", "Recruiter_Email_Address": "Beau.Jones@connectiverx.com", "Company_name": "ConnectiveRx", "SetName": "Talq Tera_12-04-2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "CandidateID": "39119", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "21", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "10", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 30.0, "Job_Title_stringindexer_transform": 20.0, "Job_Description_stringindexer_transform": 81.0, "Recruiter_First_Name_stringindexer_transform": 28.0, "Recruiter_Last_Name_stringindexer_transform": 16.0, "Recruiter_Email_Address_stringindexer_transform": 22.0, "Company_name_stringindexer_transform": 23.0, "SetName_stringindexer_transform": 20.0, "CandidateID_stringindexer_transform": 4.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 6.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 14.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 3.0, "Recruiter_InterviewCount_stringindexer_transform": 15.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "12/1/2023", "NoofDays": 1, "LogInterviewID": 265, "QID": 2742, "Job_Title": "Analytics Consultant", "Job_Description": "Position Summary Join our team as an Analytics Consultant and help drive our marketing, call center, claims, and retention initiatives to new heights! We're seeking a highly skilled individual with a focus on data analysis and advanced analytics to support our efforts across all business units.  As an Analytics Consultant, you'll be responsible for analyzing data, providing actionable insights, and making data-driven decisions that impact our company strategy efforts. With your expertise in data analysis and advanced analytics, you'll play a key role in optimizing our analytics capabilities for maximum impact and ROI. You'll collaborate closely cross-functionally to gather data, analyze trends, and uncover insights that support our business objectives. You\u2019ll support the broader business in performing deep dive analyses to drive business growth. Think of yourself as an internal consultant tasked with improving business processes utilizing data driven insights.  Located at our office in Naperville, our office environment is a key driver of our company culture and employee experience, so a regular in-office hybrid model (generally T-TH in-office and M & F remote) is required.  Responsibilities include but are not limited to: Utilizing advanced analytics approaches such as cohort analysis, risk analysis, and predictive modeling to inform decision-making and improve the customer experience across the organization. Collaborating with various teams to gather and analyze customer data and provide insights that support decision-making and improve overall business processes. Developing dashboards and visualizations to provide regular reporting and insights to support various teams within the company. Identifying incremental opportunities to improve business processes and drive growth by leveraging data to inform marketing and acquisition efforts. Utilizing data to inform company-wide strategies and initiatives that drive growth and efficiency. Providing thought leadership on analytics and identifying new and innovative ways to leverage data to drive business growth across the organization. We\u2019re Excited if This is You: 5+ years of experience in analytics and 3+ years in business intelligence roles In-depth technical knowledge in data modeling, SQL, and Python Strong understanding of business metrics and ability to drive growth. Proficiency in driving data-driven insights and informed business decision making. Demonstrated track record of delivering significant business impact through data analysis and implementation of insights. Strong communication and collaboration skills, with the ability to work effectively in a team environment. Proven track record of partnering with Analytics and Commercial Finance functions to drive improvements by way of analytical capabilities. Education Bachelor\u2019s degree  Computer Skills Needed to Perform this Job Proficiency in Microsoft and Google Suites Prior knowledge of SQL Understanding of ETL/Cloud Infrastructure Proficiency in Tableau, Looker, or other BI tool", "Recruiter_First_Name": "Pamela", "Recruiter_Last_Name": "Hord", "Recruiter_Email_Address": "Pamela.Hord@oncoursehome.com", "Company_name": "Oncourse Home Solutions", "SetName": "Mary Gathogo_12-01-2023_Oncourse Home Solutions_Analytics Consultant", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "74", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "17", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 23.0, "Job_Title_stringindexer_transform": 56.0, "Job_Description_stringindexer_transform": 44.0, "Recruiter_First_Name_stringindexer_transform": 74.0, "Recruiter_Last_Name_stringindexer_transform": 42.0, "Recruiter_Email_Address_stringindexer_transform": 58.0, "Company_name_stringindexer_transform": 106.0, "SetName_stringindexer_transform": 74.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 6.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 26.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 27.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "12/1/2023", "NoofDays": 1, "LogInterviewID": 282, "QID": 2740, "Job_Title": "Sr. Datawarehouse and BI Developer", "Job_Description": "Key Responsibilities: - Troubleshoot and tune existing Data Warehouse, Dashboards and Reporting systems - Write and modify SSRS and Power BI reports - Design and improve current ETL processes - Maintain Azure Devops Pipelines - Create and update Power BI Data Models - Own and develop relationships with end-users, working with them to optimize and enhance existing reports and integrations - Help design, document and maintain system processes - Improve systems by studying current practices and designing modifications. - Recommend controls by identifying problems and writing improved procedures. - Maintain professional and technical knowledge by attending educational workshops; reviewing professional publications; establishing personal networks; benchmarking state-of-the-art practices Requirements \uf0b7 Bachelor\u2019s degree in Computer Science, Business or Information Science. \uf0b7 Minimum of 5 to 10 years of experience in the field or in a related area. \uf0b7 Experience with Microsoft SQL Server 2008 onwards, Transact-SQL, and Business Intelligence Development Studio (SSAS, SSIS, SSRS, Visual Studio). \uf0b7 Power BI Experience \uf0b7 Knowledge in Azure Data Factory and Pipelines \uf0b7 Familiarity with Essbase and MDX scripts a plus \uf0b7 Operational Data Warehouse experience \uf0b7 Must demonstrate basic knowledge or expertise in the following technology disciplines: Servers, Desktop/Laptop/Workstation Computing, Networking, Security, Programming, and/or IT Operations \uf0b7 Able to read, write and speak English fluently. \uf0b7 Proficient in Microsoft Office Suite (Outlook, Word, Excel, Access and PowerPoint) required. \uf0b7 Detail oriented and ability to work in a team setting. \uf0b7 Ability to be a self-starter and resolve issues with minimal supervision. \uf0b7 Maintains a positive attitude \uf0b7 Ability to handle multiple projects, prioritize tasks, and exercise good judgment. \uf0b7 Good customer skills \uf0b7 Willing to learn new systems and technology", "Recruiter_First_Name": "Barcley", "Recruiter_Last_Name": "Cadet", "Recruiter_Email_Address": "Barcley.Cadet@carriageservices.com", "Company_name": "Carriage Services", "SetName": "EMMANUEL OJENIYI_12-01-2023_Carriage Services_Sr. Datawarehouse and BI Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "11", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "23", "Technical_InterviewCount": "6", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 23.0, "Job_Title_stringindexer_transform": 74.0, "Job_Description_stringindexer_transform": 47.0, "Recruiter_First_Name_stringindexer_transform": 50.0, "Recruiter_Last_Name_stringindexer_transform": 34.0, "Recruiter_Email_Address_stringindexer_transform": 46.0, "Company_name_stringindexer_transform": 86.0, "SetName_stringindexer_transform": 73.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 6.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 4.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 20.0, "Technical_InterviewCount_stringindexer_transform": 6.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/30/2023", "NoofDays": 0, "LogInterviewID": 285, "QID": 2738, "Job_Title": "PowerBI Eng", "Job_Description": "Hey Jane,  My name is Bradie, and I work with Brooksource, a National IT Services Company. I came across your profile and was extremely impressed with your PowerBI and SQL exposure paired with your business intelligence experience! That is exactly the kind of background our client is currently looking for.  Based on your experience, I have an awesome opportunity for you! I am reaching out to you today as an extension of our Fortune 24 Healthcare Insurance client, Centene Corporation.  We are currently seeking a mid-level Power BI Engineer to support the creation of analytics and visualization solutions tied to a suite of applications that encompass the following business functions: Fraud, Waste and Abuse, Claims processing and Quality Assurance. You will primarily support new application builds as well as improvements on existing applications.  What we are looking for: - 2-5 years professional experience creating/building data visualizations and dashboards - Strong experience with PowerBI and SQL queries -Exposure to Snowflake architecture mapping and creation preferred - Experience with Gitlab, Confluent Cloud, Kafka, or equivalent tools - High attitude/aptitude and ability to work in large data set environment  Additional Details: - 5+ month contract (potential to convert to FTE) - Fully remote schedule - W2 Only (no sponsorship provided)  I believe this opportunity could align great and would love the chance to speak with you further! Please let me know if you would be interested and when you would be available for a quick 10-minute phone call discussing the position further.  Looking forward to hearing back from you!  Bradie Schoemehl Senior Technical Recruiter", "Recruiter_First_Name": "Bradie", "Recruiter_Last_Name": "Schoemehl", "Recruiter_Email_Address": "bschoemehl@brooksource.com", "Company_name": "Centene Corporation - Brooksource", "SetName": "Jane Mwangi_11/30/2023_Centene Corporation - Brooksource_PowerBI Eng", "CandidateID": "38690", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "100", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1813", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "1878", "Mentor": "Leslie Boye", "Applicant": "Jane Mwangi", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 13.0, "Job_Title_stringindexer_transform": 53.0, "Job_Description_stringindexer_transform": 129.0, "Recruiter_First_Name_stringindexer_transform": 73.0, "Recruiter_Last_Name_stringindexer_transform": 85.0, "Recruiter_Email_Address_stringindexer_transform": 72.0, "Company_name_stringindexer_transform": 66.0, "SetName_stringindexer_transform": 9.0, "CandidateID_stringindexer_transform": 12.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 11.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 7.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 9.0, "Mentor_stringindexer_transform": 10.0, "Applicant_stringindexer_transform": 13.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/30/2023", "NoofDays": 0, "LogInterviewID": 286, "QID": 2739, "Job_Title": "Clinical Data Analyst", "Job_Description": "Overview: Supports the mission of People's Community Clinic to provide high quality care, by championing and supporting a robust health analytics program.  The starting salary rate for this position is $65,000 - $75,000 annually. Responsibilities: Identifies and implements informatics strategies to support patient outcomes, professional practice and organizational performance. Continuously collects, analyzes, and reports data to end users, including clinicians and administrative staff, through one-time project-based work and by developing tools and systems to support end users\u2019 ongoing needs for data-driven decision making Trains clinical staff on the integrated use of analytics to create sustained progress toward a culture of quality improvement. Provides critical analysis and evaluation of health IT and recommends revision of clinical systems, processes, and workflow to ensure achievement of positive patient outcomes. Serves as the liaison for health IT efforts representing clinician needs. Incorporates clinical research and evidence-based clinical knowledge into informatics program and platform. Collaborate with clinical and IT team members to ensure the effectiveness of technologies and workflows that impact clinical users. Applies human factors and ergonomics to the design of systems and devices. Provides project management oversight of data improvement initiatives. Adheres to HIPAA guidelines. Qualifications: Education: High school diploma or GED. Bachelor\u2019s or other advanced degree in Healthcare Informatics, Nursing, Public Health, or related field preferred. Experience: Two years\u2019 experience working with data, preferably in a healthcare setting. Experience participating in quality improvement and quality assurance efforts preferred. Experience in using a database programming language such as SQL preferred. Experience in statistical programming language such as R or SPSS preferred.  Knowledge, Skills, and Abilities: Strong analytic ability, including problem identification and resolution. Familiarity with EHR and EHR analytics preferred. Strong knowledge of Excel. Ability to work effectively with people of diverse background and varying levels of computer and data expertise. Excellent written and oral communication skills. Ability to work independently with minimal supervision. Able to lead cross-functional teams and influence without direct supervisory authority. Ability to meet deadlines.  Certificate/License: None Required. RN license preferred.  Our Benefits Include: 18 PTO days per year & 11 paid holidays Major Medical Health Insurance Coverage. Most employees experience $0 in out-of-pocket medical expenses. Dental & Vision Flexible Spending Accounts Employer paid Life Insurance Employer paid Short-Term and Long-Term Disability Annual Training 403(b) with 4% employer matching", "Recruiter_First_Name": "Tashira", "Recruiter_Last_Name": "Lott", "Recruiter_Email_Address": "austinpcc+email+6nc-3c2907147b@talent.icims.com", "Company_name": "People's Community Clinic", "SetName": "Jane Mwangi_11/30/2023_People's Community Clinic_Clinical Data Analyst", "CandidateID": "38690", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1517", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Leslie Boye", "Applicant": "Jane Mwangi", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 13.0, "Job_Title_stringindexer_transform": 68.0, "Job_Description_stringindexer_transform": 16.0, "Recruiter_First_Name_stringindexer_transform": 91.0, "Recruiter_Last_Name_stringindexer_transform": 101.0, "Recruiter_Email_Address_stringindexer_transform": 57.0, "Company_name_stringindexer_transform": 40.0, "SetName_stringindexer_transform": 66.0, "CandidateID_stringindexer_transform": 12.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 41.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 10.0, "Applicant_stringindexer_transform": 13.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/30/2023", "NoofDays": 0, "LogInterviewID": 280, "QID": 2733, "Job_Title": "Tableau and Database Specialist", "Job_Description": "Responsibilities:  Collaborate with cross-functional teams to understand business requirements and translate them into technical solutions. Design, develop, and optimize database systems, ETL processes, and data models for efficient data storage and retrieval. Create interactive and insightful Tableau dashboards and reports to enable data visualization and analysis. Write and optimize complex SQL queries to extract and transform data for use in Tableau Troubleshoot issues related to data, databases, and Tableau reports. Provide support and mentorship to junior team members. Stay updated on emerging technologies, tools, and best practices in the field.    Required Skills:  Masters or bachelor in computer technology or related field  4 years of professional experience in back-end software development with a strong focus on Tableau and database management. A strong understanding of databases is crucial. This includes knowledge of relational database systems like MySQL, PostgreSQL, or Microsoft SQL Server, as well as NoSQL databases like MongoDB. Proficiency in writing and optimizing SQL queries for data retrieval and manipulation. Knowledge of complex joins, subqueries, and indexing is important. Ability to design and implement ETL processes to extract, transform, and load data from various sources into a database for analysis in Tableau. Understanding the business context and how data analysis and reporting contribute to business goals is important for creating relevant Tableau dashboards. Experience Utilizing: JIRA, ZEPHYR, Microsoft Word, PowerPoint, Excel, Teams, Share point. Strong communication skills    Desired Skills  Additional Key Information  Work must be performed from a US location and engaged resource must be video capable during work hours in the eastern US time zone. This position is on a long term/multi-year contract that includes the possibility for yearly performance-based bonuses. This should be a W-2 hire.", "Recruiter_First_Name": "Nikole", "Recruiter_Last_Name": "Detz", "Recruiter_Email_Address": "NDetz@m-inc.com", "Company_name": "Momentum Inc", "SetName": "EMMANUEL OJENIYI_11/30/2023_Momentum Inc_Tableau and Database Specialist", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "74", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "65", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "22", "Technical_InterviewCount": "6", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 13.0, "Job_Title_stringindexer_transform": 87.0, "Job_Description_stringindexer_transform": 100.0, "Recruiter_First_Name_stringindexer_transform": 77.0, "Recruiter_Last_Name_stringindexer_transform": 89.0, "Recruiter_Email_Address_stringindexer_transform": 73.0, "Company_name_stringindexer_transform": 103.0, "SetName_stringindexer_transform": 54.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 5.0, "AutoInterviewsCount_stringindexer_transform": 3.0, "AutoInterviewsDuration_stringindexer_transform": 47.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 16.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 22.0, "Technical_InterviewCount_stringindexer_transform": 6.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/28/2023", "NoofDays": -2, "LogInterviewID": 261, "QID": 2723, "Job_Title": "EIT Team Lead", "Job_Description": "ob Description:   BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.   Job Responsibilities   Managing the planning, scheduling and deployment of all hardware facilities and associated software for major or multiple sites. Trains, develops, and mentors staff by providing subject matter direction and guidance. Assigns, monitors, and reviews progress and accuracy of work.Provides staff management oversight including hiring, promoting, or making recommendations for staff.Conducts performance reviews and assessments, manages performance, engages in skills assessment, and promotes professional development of staff. Directing, motivating and developing staff, maximizing their individual contribution, professional growth and ability to function effectively with their colleagues as a team. Ensuring adherence to policies, plans, objectives, budgets and staffing allocations for the assigned site. Optimizes the utilization of resources and adheres to Departmental budgeting and fiscal responsibilities. Actively participates in project teams, manages and tracks project details, and provides leadership during periods of transition. Ensures compliance with corporate and industry standards, policies, procedures, and regulations.   Job Qualifications   Education   Bachelor's Degree in a Computer Sciences related field or equivalent work experience   Experience   5 years - Experience in Information Technology required   Skills\\Certifications   Knowledge of information technology concepts, methodology, terminology and standards. Demonstrated ability to interpret and translate technical and/or or complex concepts into information meaningful to project team members and/or business personnel. Strong interpersonal and organizational skills PC Skills required (Basic Microsoft Office and E-Mail) Adaptive to high pace and changing environment Must be able to communicate effectively with both technical and non-technical co-workers Must be willing to adjust schedule to perform maintenance and upgrades outside of business hours and be part of an on-call rotation.   Job Specific Requirements:    Working knowledge with regards to End User Experience (Business user experience) Prior experience with Agile is preferred.   Preferred Skills:   Number of Openings Available:   1   Worker Type:   Employee   Worker Sub-Type:   Employee   Company:   BCBST BlueCross BlueShield of Tennessee, Inc.   Applying for this job indicates your acknowledgement and understanding of the following statements:   BCBST is an Equal Opportunity employer (EEO), and all employees and applicants will be entitled to equal employment opportunities when employment decisions are made. BCBST will take affirmative action to recruit, hire, train and promote individuals in all job classifications without regard to race, religion, color, age, sex, national origin, citizenship, pregnancy, veteran status, sexual orientation, physical or mental disability, gender identity, or any other characteristic protected by applicable law.   Further information regarding BCBST's EEO Policies/Notices may be found by reviewing the following page:   BCBST's EEO Policies/Notices   BlueCross BlueShield of Tennessee is not accepting unsolicited assistance from search firms for this employment opportunity. All resumes submitted by search firms to any employee at BlueCross BlueShield of Tennessee via-email, the Internet or any other method without a valid, written Direct Placement Agreement in place for this position from BlueCross BlueShield of Tennessee HR/Talent Acquisition will not be considered. No fee will be paid in the event the applicant is hired by BlueCross BlueShield of Tennessee as a result of the referral or through other means.    All applicants will be advised that BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.", "Recruiter_First_Name": "Shirudkar", "Recruiter_Last_Name": "Dipti", "Recruiter_Email_Address": "Dipti_Shirudkar@bcbst.com", "Company_name": "BlueCross BlueShield of Tennessee", "SetName": "EMMANUEL OJENIYI_11/28/2023_BlueCross BlueShield of Tennessee_EIT Team Lead", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 4", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 4", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 4", "InterviewDate_stringindexer_transform": 27.0, "Job_Title_stringindexer_transform": 25.0, "Job_Description_stringindexer_transform": 7.0, "Recruiter_First_Name_stringindexer_transform": 60.0, "Recruiter_Last_Name_stringindexer_transform": 88.0, "Recruiter_Email_Address_stringindexer_transform": 60.0, "Company_name_stringindexer_transform": 27.0, "SetName_stringindexer_transform": 65.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 2.0, "InterviewType_stringindexer_transform": 3.0, "Preparationscore_stringindexer_transform": 7.0, "AutoInterviewsCount_stringindexer_transform": 4.0, "AutoInterviewsDuration_stringindexer_transform": 2.0, "MentorInterviewsCount_stringindexer_transform": 4.0, "MentorInterviewsDuration_stringindexer_transform": 2.0, "Mentor_stringindexer_transform": 11.0, "Applicant_stringindexer_transform": 14.0, "Recruiter_InterviewCount_stringindexer_transform": 8.0, "Technical_InterviewCount_stringindexer_transform": 8.0, "InterviewScore_stringindexer_transform": 2.0}, {"InterviewDate": "11/28/2023", "NoofDays": -2, "LogInterviewID": 281, "QID": 2734, "Job_Title": "BI Developer", "Job_Description": "\"Position: BI Developer Hours: 8-5pm EST Location: Remote - EST time zone   Local healthcare client in Atlanta, GA is looking to bring on a resource to the BI team to assist with day-to-day analysis and project/data development. They are seeking a high performer with the ability to hit the ground running and maintain a \"\"we vs me\"\" mentality with other team members.   Requirement:  Minimum 5 years of experience in the following: Strong SQL experience Strong Power BI experience Enterprise Database Reporting Analytical Thinker Business facing skillsets Report optimization Metric Insights experience is a plus Must be a team player - we vs me mentality   Responsibilities:   Ensures all projects and data developed is value-adding and provides actionable insights.  Building new data tables", "Recruiter_First_Name": " and making adjustments to existing tables. Ability to find a way to be able to look at data to see how it will change reporting. Ability to understand a business problem and work through various legacy systems.  Ability to communicate clearly and efficiently with internal business members\"", "Recruiter_Last_Name": "Henry", "Recruiter_Email_Address": "Russell", "Company_name": "hrussell@medasource.com", "SetName": "Medasource", "CandidateID": "OLUKAYODE AKINRIMISI_11/28/2023_Medasource_BI Developer", "SurveyResponse": "31661", "InterviewType": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "Preparationscore": " engaging interviewer", "AutoInterviewsCount": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsDuration": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "MentorInterviewsCount": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "Mentor": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Applicant": "     \"\"HandlingChallengingQuestions\"\": 5", "Recruiter_InterviewCount": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Technical_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "InterviewScore": "     \"\"InterviewerEngagement\"\": 5", "InterviewDate_stringindexer_transform": 27.0, "Job_Title_stringindexer_transform": 3.0, "Job_Description_stringindexer_transform": 31.0, "Recruiter_First_Name_stringindexer_transform": 83.0, "Recruiter_Last_Name_stringindexer_transform": 32.0, "Recruiter_Email_Address_stringindexer_transform": 108.0, "Company_name_stringindexer_transform": 63.0, "SetName_stringindexer_transform": 97.0, "CandidateID_stringindexer_transform": 20.0, "SurveyResponse_stringindexer_transform": 4.0, "InterviewType_stringindexer_transform": 4.0, "Preparationscore_stringindexer_transform": 10.0, "AutoInterviewsCount_stringindexer_transform": 9.0, "AutoInterviewsDuration_stringindexer_transform": 21.0, "MentorInterviewsCount_stringindexer_transform": 12.0, "MentorInterviewsDuration_stringindexer_transform": 12.0, "Mentor_stringindexer_transform": 16.0, "Applicant_stringindexer_transform": 22.0, "Recruiter_InterviewCount_stringindexer_transform": 26.0, "Technical_InterviewCount_stringindexer_transform": 11.0, "InterviewScore_stringindexer_transform": 7.0}, {"InterviewDate": "11/24/2023", "NoofDays": -6, "LogInterviewID": 215, "QID": 2688, "Job_Title": "Data Warehouse Specialist", "Job_Description": "https://www.indeed.com/viewjob?jk=bbe2a3fe0476f181&tk=1h5a6oa4dh5hp801&from=serp&vjs=3  The Role  We are looking for an experienced and energetic leader to join the team as a Data Warehouse Specialist. As a Data Warehouse Specialist, you will play a critical role in developing data warehouses for our clients. You will be responsible for conducting assessments, developing strategies, and providing expert guidance to enhance their data governance.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  Collaborate with clients to understand their business requirements and design effective data warehouse solutions. Develop and implement data warehouse architecture, data models, schemas, and structures. Design and implement efficient Extract, Transform, and Load (ETL) processes to populate and update data warehouses. Ensure data quality and integrity by establishing appropriate data validation and cleansing procedures. Optimize data warehouse performance through indexing, partitioning, and other performance tuning techniques. Implement effective backup, recovery, and security measures for data warehouses. Evaluate existing data frameworks and identify opportunities for improvement. Conduct in-depth data analysis to identify data quality issues, inconsistencies, and gaps. Recommend and implement enhancements to data frameworks to meet client requirements. Collaborate with cross-functional teams to define data governance policies, standards, and best practices. Conduct regular audits to ensure compliance with data governance guidelines. Participate in project planning and scoping activities, providing technical expertise on data warehouse solutions. Demonstrate expertise in data modeling, dimensional modeling, and data warehouse design principles. Proficiently use SQL, ETL tools, and programming languages to extract, transform, and load data. Utilize data visualization tools to create meaningful reports and dashboards for clients. Stay up to date with the latest trends, tools, and technologies in data warehousing and business intelligence. Qualifications  Bachelor's degree in Computer Science, Information Systems, or a related field. Relevant certifications (e.g., AWS) are highly desirable. Proven experience working on data warehouse projects, including data modeling, ETL development, and performance optimization. Strong understanding of database concepts and proficiency in SQL. Experience with data warehousing tools and technologies (e.g., Snowflake, Amazon Redshift, Microsoft Azure SQL Data Warehouse) Proficiency in at least one ETL tool (e.g., Informatica, Talend, SSIS). Familiarity with data governance principles and best practices. Excellent problem-solving and analytical skills. Strong communication and interpersonal skills to effectively collaborate with clients and team members. Ability to manage multiple projects and prioritize tasks effectively. Professionalism and client-oriented mindset, with the ability to establish trust and maintain confidentiality. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "Recruiter_First_Name": "Laurine", "Recruiter_Last_Name": "Lachica", "Recruiter_Email_Address": "laurine.lachica@modaliconsulting.com", "Company_name": "Modali Consulting", "SetName": "Feven Asmelash_11/24/2023_Modali Consulting_Data Warehouse Specialist", "CandidateID": "39112", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Ayodele Adepoju", "Applicant": "Feven Asmelash", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 60.0, "Job_Title_stringindexer_transform": 30.0, "Job_Description_stringindexer_transform": 80.0, "Recruiter_First_Name_stringindexer_transform": 13.0, "Recruiter_Last_Name_stringindexer_transform": 24.0, "Recruiter_Email_Address_stringindexer_transform": 12.0, "Company_name_stringindexer_transform": 14.0, "SetName_stringindexer_transform": 18.0, "CandidateID_stringindexer_transform": 15.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 14.0, "Applicant_stringindexer_transform": 16.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/21/2023", "NoofDays": -9, "LogInterviewID": 227, "QID": 2698, "Job_Title": "SQL Developer", "Job_Description": "https://www.indeed.com/viewjob?jk=dd7d5cb7585219aa&tk=1hepmokcejm4n800&from=serp&vjs=3&applied=1&from=smart-apply", "Recruiter_First_Name": "Steven", "Recruiter_Last_Name": "Penn", "Recruiter_Email_Address": "Steven.Penn@ideaentity.com", "Company_name": "Idea Entity", "SetName": "OLUKAYODE AKINRIMISI_11/21/2023_Idea Entity_SQL Developer", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 31.0, "Job_Title_stringindexer_transform": 4.0, "Job_Description_stringindexer_transform": 11.0, "Recruiter_First_Name_stringindexer_transform": 24.0, "Recruiter_Last_Name_stringindexer_transform": 11.0, "Recruiter_Email_Address_stringindexer_transform": 25.0, "Company_name_stringindexer_transform": 31.0, "SetName_stringindexer_transform": 112.0, "CandidateID_stringindexer_transform": 3.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 9.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 5.0, "Applicant_stringindexer_transform": 2.0, "Recruiter_InterviewCount_stringindexer_transform": 7.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "11/21/2023", "NoofDays": -9, "LogInterviewID": 254, "QID": 2722, "Job_Title": "Business Intelligence Developer", "Job_Description": "Competencies  Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience  3+ years\u2019 experience with Integration Services (SSIS)  5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions  Technical documentation skills Self-motivated and directed, with keen attention to detail  Experience with data management Good written and oral communications   Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data  Create ETL processes to load database structures  Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Recruiter_First_Name": "Tony", "Recruiter_Last_Name": "Guzman", "Recruiter_Email_Address": "tguzman@uslegalsupport.com", "Company_name": "U.S. Legal Support", "SetName": "OLUKAYODE AKINRIMISI_11/21/2023_U.S. Legal Support_Business Intelligence Developer", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 31.0, "Job_Title_stringindexer_transform": 0.0, "Job_Description_stringindexer_transform": 120.0, "Recruiter_First_Name_stringindexer_transform": 25.0, "Recruiter_Last_Name_stringindexer_transform": 9.0, "Recruiter_Email_Address_stringindexer_transform": 10.0, "Company_name_stringindexer_transform": 88.0, "SetName_stringindexer_transform": 62.0, "CandidateID_stringindexer_transform": 3.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 2.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 7.0, "Applicant_stringindexer_transform": 2.0, "Recruiter_InterviewCount_stringindexer_transform": 7.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "11/20/2023", "NoofDays": -10, "LogInterviewID": 248, "QID": 2717, "Job_Title": "Business Intelligence Lead Developer", "Job_Description": "Key Responsibilities:  Develop and optimize SQL queries for data extraction and analysis. Collaborate with business stakeholders to gather and understand reporting requirements. Create visually compelling and insightful reports using Looker. Field daily report requests from multiple Backoffice teams to meet the needs of customers. Conducting and troubleshooting reports and data models. Comprehend and work with Key Performance Indicators (KPIs) and metrics.  Qualifications:  A minimum of 10 years of experience in report writing or as a business analyst. Proficiency in SQL query development (queries, stored procedures, functions) and data analysis. Familiarity with SQL Server databases and data warehousing. Proven experience with one or more of the following reporting tools: Looker, Business Objects, Power BI, or Tableau. Strong understanding of KPIs and metrics. Exhibit adaptability and a quick learning curve to efficiently contribute to projects.  Knowledge of Snowflake Datawarehouse query development is a plus.", "Recruiter_First_Name": "Jessica", "Recruiter_Last_Name": "Toub", "Recruiter_Email_Address": "jtoub@nutrisystem.com", "Company_name": "Nutrisystem Inc", "SetName": "Shahad Jawad_11/20/2023_Nutrisystem Inc_Business Intelligence Lead Developer", "CandidateID": "38744", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "908", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "AMINAT OKERINDE", "Applicant": "Shahad Jawad", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 15.0, "Job_Title_stringindexer_transform": 58.0, "Job_Description_stringindexer_transform": 131.0, "Recruiter_First_Name_stringindexer_transform": 80.0, "Recruiter_Last_Name_stringindexer_transform": 49.0, "Recruiter_Email_Address_stringindexer_transform": 96.0, "Company_name_stringindexer_transform": 41.0, "SetName_stringindexer_transform": 88.0, "CandidateID_stringindexer_transform": 11.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 10.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 9.0, "Applicant_stringindexer_transform": 12.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/20/2023", "NoofDays": -10, "LogInterviewID": 224, "QID": 2695, "Job_Title": "Business Development Specialist", "Job_Description": "Earn $100K+ annually \u2026 as a Sideline\u2014no need to quit your day job. Part-time or full-time.    Pay for Performance, 1099 compensation.    The Ideal Candidate:    Self-motivator who routinely sets and exceeds their own goals. If you're goal-oriented and self-motivated, you'll thrive here. Proven track record of relationship-building and influencing. Exceptional relationship-building skills.    Position Overview:    Pay for Performance, 1099 compensation \u2013 residual monthly income paid for the client's life (average 10+ years!). This position requires no quotas and no caps on earnings. Work alongside your current position or business. Sideline, Part-time or Full-time. Training and ongoing support provided.   General Responsibilities:    Identify opportunities in our cost-saving services with prospects and new clients, building them into long-term relationships. Serve as a liaison between prospective clients and Business Development Director/SME.   Requirements:     Current or former Business Professional, Executive, B2B Sales Rep, Finance Executive, CFO, COO, or Controller. Ability to lead conversations with prospects and clients. Must have 10+ years of business experience working with decision-makers. Strong communication and interpersonal skills. Positive and results-driven. Ability to work well independently and with others.   About Us:    Aspire Partners offers B2B solutions with front-end timing and at no cost or investment to prospective companies. It's a win-win for clients. Current inflationary conditions make our services more relevant and in demand for all sectors. Companies desperately need our help. Our solutions can help companies thrive during these uncertain times by solving efficiency issues and adding to their bottom line.   Every business needs to reach peak profitability and efficiency. Handling account payables, reducing expenses, and attracting and retaining good employees is vital to the success of every business. We create operational efficiencies and actual cost savings for companies of all sizes and industries without switching vendors or current, established relationships with company vendors or service providers.", "Recruiter_First_Name": "David", "Recruiter_Last_Name": "MacKillop", "Recruiter_Email_Address": "dmacKillop@aspirepartnersusa.com", "Company_name": "Aspire Partners", "SetName": "Stephanie Anne Lim_11/21/2023_Aspire Partners_Business Development Specialist", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 4", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 2", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 1", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 3", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 15.0, "Job_Title_stringindexer_transform": 66.0, "Job_Description_stringindexer_transform": 99.0, "Recruiter_First_Name_stringindexer_transform": 2.0, "Recruiter_Last_Name_stringindexer_transform": 60.0, "Recruiter_Email_Address_stringindexer_transform": 30.0, "Company_name_stringindexer_transform": 96.0, "SetName_stringindexer_transform": 49.0, "CandidateID_stringindexer_transform": 3.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 5.0, "MentorInterviewsDuration_stringindexer_transform": 13.0, "Mentor_stringindexer_transform": 7.0, "Applicant_stringindexer_transform": 19.0, "Recruiter_InterviewCount_stringindexer_transform": 19.0, "Technical_InterviewCount_stringindexer_transform": 9.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "11/20/2023", "NoofDays": -10, "LogInterviewID": 263, "QID": 2725, "Job_Title": "Business Intelligence Developer", "Job_Description": "Job Description Summary:  The Business Intelligence Developer is responsible for developing, implementing and supporting reporting and business intelligence solutions to meet the information needs of the organization. The Business Intelligence Developer supports one or more business units in preparing analysis and reporting to drive the business while ensuring accuracy and consistency. Must be able to work with multiple teams and business units simultaneously and thrive in fast-paced, dynamic environment. Must demonstrate the eagerness and ability to learn and must work well in a team environment.   Competencies   Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience 3+ years\u2019 experience with Integration Services (SSIS) 5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions Technical documentation skills Self-motivated and directed, with keen attention to detail Experience with data management Good written and oral communications  Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data Create ETL processes to load database structures Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Recruiter_First_Name": "Tony", "Recruiter_Last_Name": "Guzman", "Recruiter_Email_Address": "tguzman@uslegalsupport.com", "Company_name": "USLegalSupport", "SetName": "OLUKAYODE AKINRIMISI_11/20/2023_USLegalSupport_Business Intelligence Developer", "CandidateID": "31661", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 15.0, "Job_Title_stringindexer_transform": 0.0, "Job_Description_stringindexer_transform": 93.0, "Recruiter_First_Name_stringindexer_transform": 25.0, "Recruiter_Last_Name_stringindexer_transform": 9.0, "Recruiter_Email_Address_stringindexer_transform": 10.0, "Company_name_stringindexer_transform": 79.0, "SetName_stringindexer_transform": 84.0, "CandidateID_stringindexer_transform": 3.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 6.0, "Recruiter_InterviewCount_stringindexer_transform": 5.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/18/2023", "NoofDays": -12, "LogInterviewID": 229, "QID": 2700, "Job_Title": "siness intelligence developer", "Job_Description": "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI RAYUS is committed to delivering clinical excellence in communities across the U.S., driven by our passion for and superior service to referring providers and patients. RAYUS Radiology is built on our brilliant medicine, brilliant team, brilliant technology and services - all to provide the highest level of patient\u00a0care\u00a0possible.", "Recruiter_First_Name": "prashant", "Recruiter_Last_Name": "Tolia", "Recruiter_Email_Address": "prashant.tolia@RAYUSradiology.com", "Company_name": "siness intelligence developer", "SetName": "Shahad Jawad_11/18/2023_siness intelligence developer_siness intelligence developer", "CandidateID": "38744", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "823", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "1157", "Mentor": "AMINAT OKERINDE", "Applicant": "Shahad Jawad", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 29.0, "Job_Title_stringindexer_transform": 34.0, "Job_Description_stringindexer_transform": 125.0, "Recruiter_First_Name_stringindexer_transform": 49.0, "Recruiter_Last_Name_stringindexer_transform": 40.0, "Recruiter_Email_Address_stringindexer_transform": 109.0, "Company_name_stringindexer_transform": 43.0, "SetName_stringindexer_transform": 90.0, "CandidateID_stringindexer_transform": 11.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 3.0, "AutoInterviewsDuration_stringindexer_transform": 31.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 21.0, "Mentor_stringindexer_transform": 9.0, "Applicant_stringindexer_transform": 12.0, "Recruiter_InterviewCount_stringindexer_transform": 10.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/18/2023", "NoofDays": -12, "LogInterviewID": 230, "QID": 2701, "Job_Title": "business intelligence developer", "Job_Description": "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI", "Recruiter_First_Name": "parshant", "Recruiter_Last_Name": "tolia", "Recruiter_Email_Address": "parshant.tolia@RADYUSradiology.com", "Company_name": "Rayus radiology", "SetName": "Shahad Jawad_11/18/2023_Rayus radiology_business intelligence developer", "CandidateID": "38744", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "11", "Mentor": "AMINAT OKERINDE", "Applicant": "Shahad Jawad", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 29.0, "Job_Title_stringindexer_transform": 26.0, "Job_Description_stringindexer_transform": 96.0, "Recruiter_First_Name_stringindexer_transform": 72.0, "Recruiter_Last_Name_stringindexer_transform": 68.0, "Recruiter_Email_Address_stringindexer_transform": 39.0, "Company_name_stringindexer_transform": 28.0, "SetName_stringindexer_transform": 36.0, "CandidateID_stringindexer_transform": 11.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 6.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 4.0, "Mentor_stringindexer_transform": 9.0, "Applicant_stringindexer_transform": 12.0, "Recruiter_InterviewCount_stringindexer_transform": 10.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/17/2023", "NoofDays": -13, "LogInterviewID": 246, "QID": 2715, "Job_Title": "Systems Analyst", "Job_Description": "Bachelor\u2019s Degree in Computer Science, Engineering, Management Information Systems, or a related field Five years of related experience in application administration and support, including experience utilizing SQL and related SQL management tools (SSMS, SSAS, SSIS and SSRS) Skills Required Knowledge of computer system capabilities, business processes and workflow Experience with enterprise applications and understanding of database driven applications Experience with SQL scripting Strong understanding of the software development life cycle Excellent communication skills, both written and verbal, including the ability to bridge functional and technical resources by communicating effectively with individuals of varying systems expertise and business needs Proven problem solving and analytical thinking and ability to approach problems logically and systematically Ability to maintain good customer relations with clients and external vendors and partners Essential Functions  Builds ad hoc queries, reports and business processes using standard Blackbaud CRM features/functionality      Builds custom business process and data integrations using SQL Supports system users with issues, new requests and system upgrades Collaborates with team members and individuals across the Development and Alumni Relations division to develop best practices, re-usable objects and effective documentation Analyzes and documents user needs, existing and new policies, processes, procedures and operational methods to consider possible improvements to new and existing systems Utilizes elicitation techniques to understand business processes and translate into system requirements and/or development of systems solutions Defines and documents business requirements, technical specifications and test cases for system developments May include the writing of all or a portion of functional and technical specifications Coordinates with business and technology teams, ascertaining system requirements, such as program functions, output requirements, input data acquisition, and system techniques and controls Problem solves in areas such as system design, input/output requirements and procedural flow between departments and/or business systems Performs configuration of enterprise application software Performs testing of new systems, upgrades and patching of existing systems Plans, conducts and documents results of testing Performs all other duties as assigned Additional Functions  Has frequent contact with division staff and other university offices Open office environment Many hours spent in front of a computer Evening/weekend and on call work as required to meet project deadlines and/or maintain system availability Preferences  Six or more years of related experience in application software support Programming experience utilizing SQL and related SQL tools, and report development tools using SSRS, PowerBI and/or Tableau Experience developing business intelligence solutions Experience building SSIS (SQL Server Integration Services) packages Experience with project management methodologies Experience with REST APIs Experience with alumni/development database systems, preferably Blackbaud CRM Experience in non-profit or higher education setting Thorough understanding and working knowledge of alumni relations and/or fundraising Skills Excellent organizational skills Strong attention to detail High levels of overall organization, accuracy and time management Goal oriented with the ability to prioritize a heavy workload Willingness to take charge of assignments and follow through with minimal supervision Ability to work with high level of confidentiality Proficiency in Microsoft Office Suite", "Recruiter_First_Name": "Toni", "Recruiter_Last_Name": "Parker", "Recruiter_Email_Address": "Toni.Parker@rice.edu", "Company_name": "Rice University", "SetName": "OLUKAYODE AKINRIMISI_11/17/2023_Rice University_Systems Analyst", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 42.0, "Job_Title_stringindexer_transform": 52.0, "Job_Description_stringindexer_transform": 40.0, "Recruiter_First_Name_stringindexer_transform": 54.0, "Recruiter_Last_Name_stringindexer_transform": 35.0, "Recruiter_Email_Address_stringindexer_transform": 67.0, "Company_name_stringindexer_transform": 98.0, "SetName_stringindexer_transform": 27.0, "CandidateID_stringindexer_transform": 3.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 2.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 7.0, "Applicant_stringindexer_transform": 2.0, "Recruiter_InterviewCount_stringindexer_transform": 7.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "11/15/2023", "NoofDays": -15, "LogInterviewID": 247, "QID": 2716, "Job_Title": "Data Engineer", "Job_Description": "DATA ENGINEER  In every office around the world, HH Global offers an entrepreneurial culture that sets ambitious goals and looks beyond the status quo.  At HH Global , we reward sharp, unconventional thinkers who are motivated to create their own success. Our winning culture draws from employees who step up to the challenge of solving tough problems and making a difference. We dream big, so our clients can dream bigger.  Responsibilities   Document new reporting features or bugs from both internal and external users   Coordinate testing of reports with users   Manage an accurate and visible task and project list and meet regularly for input on prioritization.   Analyzes data, identifies trends and outliers, and recommends solutions when appropriate.   Coordinate with team members overseas   Create and maintain system protocols by writing and updating procedures; this includes documentation and writing SQL stored procedures.   Generate standard or custom reports summarizing business, financial, or economic data for review by executives, managers, clients, and other stakeholders. This will involve using T-SQL, SSIS, SSRS, and other report writing tools.   Willingness to learn new reporting technologies such as Microsoft Power BI, Tableau, or Qlikview   Participate in physical and virtual meetings as required to facilitate functional requirement gathering and report development.   Maintain or update business intelligence tools, databases, dashboards, systems, or methods   Assist with project management activities by identifying project milestones, phases, and elements; tracking activities, resolving problems, and publishing progress reports.   Manage timely flow of business intelligence information to users.   Requirements   Must be legally authorized to work in the United States without needing current or future employer sponsorship.   Bachelor\u2019s degree in a business or technology related discipline   2 + Years work experience   Working knowledge of SQL   Microsoft Business Intelligence Suite (SSRS, SSIS, SSAS)   Experience with Azure cloud environment: Azure SQL Database, Azure Data Factory   Strong Microsoft Excel skills related to data analysis and manipulation   Proven ability to document and prioritize issues raised by others   Ability to prioritize tasks and directly support the department managers.   Good troubleshooting and error isolation skills.   Ability to work independently on assigned tasks as well as to accept direction on given assignments.   Must be able to interact and communicate with individuals at all levels of the organization.   Your resume will be reviewed by a member of our Recruiting team and we\u2019ll reach out to you directly if there\u2019s a fit. We\u2019re using video conferencing software (Microsoft Teams) to conduct our interviews, but all interviews will be live with a member of our Recruiting or Hiring teams.  Equal Employment Opportunity Employer: HH Global is an equal opportunity employer and all qualified applicants will receive consideration for employment without regard to race, color, religion, sex, national origin, disability status, protected veteran status, sexual orientation, gender, gender identity and gender expression, or any other characteristic protected by law.", "Recruiter_First_Name": "Amanda", "Recruiter_Last_Name": "Filian", "Recruiter_Email_Address": "jdefaehsz@jobvite.com", "Company_name": "HH Global", "SetName": "Mary Gathogo_11/15/2023_HH Global_Data Engineer", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "16", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 18.0, "Job_Title_stringindexer_transform": 2.0, "Job_Description_stringindexer_transform": 91.0, "Recruiter_First_Name_stringindexer_transform": 20.0, "Recruiter_Last_Name_stringindexer_transform": 69.0, "Recruiter_Email_Address_stringindexer_transform": 37.0, "Company_name_stringindexer_transform": 55.0, "SetName_stringindexer_transform": 106.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 14.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/15/2023", "NoofDays": -15, "LogInterviewID": 231, "QID": 2702, "Job_Title": "Sr Engineer, Data Management and Analytics role!", "Job_Description": "Professional who expertly designs, creates, and implements Self-Service BI data models. Plan, implement and oversee comprehensive BI delivery strategy. Design, build and deploy EPIC reporting solutions (Clarity, Caboodle, RWB, Radar, Metrics) Innovator, adept at conceptualizing and developing marketable tools that cater to the needs and demands of multiple clients. Build relationships with the business users, understand how data can solve business problems, and formulate business requirements for the BI tools. Work with data warehouse System Analyst and Engineering team to implement data schema to accommodate new analytics requirements. Manage meta data for BI models, reports, and dashboards (author, usage, data source) Create technical and functional documentation and provide training for BI tools.", "Recruiter_First_Name": "Heather", "Recruiter_Last_Name": "McGinnis", "Recruiter_Email_Address": "heather.mcginnis@pacden.com", "Company_name": "Pacific Dental Services", "SetName": "Talq Tera_11/15/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics role!", "CandidateID": "39119", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "60", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "94", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "9", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 18.0, "Job_Title_stringindexer_transform": 84.0, "Job_Description_stringindexer_transform": 15.0, "Recruiter_First_Name_stringindexer_transform": 18.0, "Recruiter_Last_Name_stringindexer_transform": 18.0, "Recruiter_Email_Address_stringindexer_transform": 7.0, "Company_name_stringindexer_transform": 6.0, "SetName_stringindexer_transform": 21.0, "CandidateID_stringindexer_transform": 4.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 5.0, "AutoInterviewsCount_stringindexer_transform": 5.0, "AutoInterviewsDuration_stringindexer_transform": 30.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 11.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 3.0, "Recruiter_InterviewCount_stringindexer_transform": 12.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/14/2023", "NoofDays": -16, "LogInterviewID": 232, "QID": 2703, "Job_Title": "Sr Engineer, Data Management and Analytics", "Job_Description": "https://www.indeed.com/viewjob?jk=57bafe6006d3d2ad&tk=1hdr8h4cejr51801&from=serp&vjs=3", "Recruiter_First_Name": "Heather", "Recruiter_Last_Name": "McGinnis", "Recruiter_Email_Address": "heather.mcginnis@pacden.com", "Company_name": "Pacific Dental Services", "SetName": "Talq Tera_11/14/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics", "CandidateID": "39119", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "8", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 50.0, "Job_Title_stringindexer_transform": 70.0, "Job_Description_stringindexer_transform": 10.0, "Recruiter_First_Name_stringindexer_transform": 18.0, "Recruiter_Last_Name_stringindexer_transform": 18.0, "Recruiter_Email_Address_stringindexer_transform": 7.0, "Company_name_stringindexer_transform": 6.0, "SetName_stringindexer_transform": 71.0, "CandidateID_stringindexer_transform": 4.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 3.0, "Recruiter_InterviewCount_stringindexer_transform": 11.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/13/2023", "NoofDays": -17, "LogInterviewID": 202, "QID": 2676, "Job_Title": "Associate Consultant, Data Analyst", "Job_Description": "The Role  We're seeking a seasoned and dynamic professional to join us as an Associate Consultant, Data Analytics. In this role, you'll be instrumental in delivering projects to our clients. You'll be responsible for analyzing, strategizing, implementing measures, and offering expert guidance to enhance our clients' operational resilience.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  \u2022  Conduct in-depth data analysis to identify trends, patterns, and insights that can inform client strategies and recommendations.  \u2022  Collaborate closely with clients to understand their business objectives and tailor data-driven solutions that address their specific needs.  \u2022  Create visually compelling and easy-to-understand data visualizations, dashboards, and reports to effectively communicate findings to both technical and non-technical stakeholders.  \u2022  Apply statistical techniques and predictive modeling to uncover correlations and forecast potential outcomes, enhancing the accuracy of strategic planning.  \u2022  Ensure the quality, accuracy, and reliability of data by conducting data cleaning, validation, and preprocessing procedures.  \u2022  Present analytical findings and recommendations to clients in a clear and concise manner, demonstrating the value of data-driven decision-making.  \u2022  Leverage cutting-edge analytics tools and technologies to optimize data analysis processes and streamline workflows.  \u2022  Collaborate with cross-functional teams to tackle complex business problems, utilizing your data expertise to drive innovative solutions.  \u2022  Stay up-to-date with the latest trends and advancements in data analytics, bringing new ideas and best practices to the team.  \u2022  Assist in project planning, timeline management, and resource allocation to ensure the successful execution of data analytics initiatives.  Qualifications  Bachelor's or Master's degree in a related field (e.g., Data Science, Statistics, Business Analytics). Proficiency in data analysis tools such as Python, R, or SQL. Experience with data visualization tools like Tableau, Power BI, or similar. Strong analytical thinking and problem-solving skills. Excellent communication and presentation abilities. Ability to work collaboratively in a team-oriented environment. Prior consulting or client-facing experience is a plus. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "Recruiter_First_Name": "Laurine", "Recruiter_Last_Name": "Lachica", "Recruiter_Email_Address": "laurine.lachica@modaliconsulting.com", "Company_name": "Modali Consulting", "SetName": "EMMANUEL OJENIYI_11/13/2023_Modali Consulting_Associate Consultant, Data Analyst", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 36.0, "Job_Title_stringindexer_transform": 71.0, "Job_Description_stringindexer_transform": 39.0, "Recruiter_First_Name_stringindexer_transform": 13.0, "Recruiter_Last_Name_stringindexer_transform": 24.0, "Recruiter_Email_Address_stringindexer_transform": 12.0, "Company_name_stringindexer_transform": 14.0, "SetName_stringindexer_transform": 13.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 3.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 13.0, "Applicant_stringindexer_transform": 2.0, "Recruiter_InterviewCount_stringindexer_transform": 6.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "11/13/2023", "NoofDays": -17, "LogInterviewID": 238, "QID": 2709, "Job_Title": "Technical Data Analyst (Remote)", "Job_Description": "https://ds-llc.com/technicaldataanalyst", "Recruiter_First_Name": "Abby", "Recruiter_Last_Name": "Tumang", "Recruiter_Email_Address": "atumang@ds-llc.com", "Company_name": "Digital Strategy LLC", "SetName": "EMMANUEL OJENIYI_11/13/2023_Digital Strategy LLC_Technical Data Analyst (Remote)", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "20", "Technical_InterviewCount": "6", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 36.0, "Job_Title_stringindexer_transform": 80.0, "Job_Description_stringindexer_transform": 76.0, "Recruiter_First_Name_stringindexer_transform": 95.0, "Recruiter_Last_Name_stringindexer_transform": 102.0, "Recruiter_Email_Address_stringindexer_transform": 87.0, "Company_name_stringindexer_transform": 71.0, "SetName_stringindexer_transform": 42.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 29.0, "Technical_InterviewCount_stringindexer_transform": 6.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/12/2023", "NoofDays": -18, "LogInterviewID": 228, "QID": 2699, "Job_Title": "SQL Developer", "Job_Description": "Designing and maintaining SQL Server Database architecture as well as ensuring their optimal performance, availability, and security. Optimizing SQL Server Database performance, including query tuning, indexing, and statics maintenance. Creating complex parameterized (declare) T-SQL script, as well as using T-SQ: scripts and queries for business intelligence reporting. Writing optimized complex SQL queries for integration with other applications. Performing multipart sub-queries and joining the table indexing and maintenance (clustered and non-clustered). Creating user defined functions, views, and stored procedures. Working with intricate recursive queries, i.e., Common table expressions (CTE), table variables. Developing, configuring, and deploying SSIS packages. Implementing and enforcing database security measures, including access controls, encryption, auditing, updating, merging, deleting, and inserting the databases. Creating and using stored procedures and creating over clauses with or without partitioning. Effective partnership with development teams to design data management and governance protocols, manage the information lifecycle, design infrastructure, and data integration controls.", "Recruiter_First_Name": "Steven", "Recruiter_Last_Name": "Penn", "Recruiter_Email_Address": "Steven.Penn@ideaentity.com", "Company_name": "IDEA ENTITY", "SetName": "OLUKAYODE AKINRIMISI_11/12/2023_IDEA ENTITY_SQL Developer", "CandidateID": "31661", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "1331", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 56.0, "Job_Title_stringindexer_transform": 4.0, "Job_Description_stringindexer_transform": 82.0, "Recruiter_First_Name_stringindexer_transform": 24.0, "Recruiter_Last_Name_stringindexer_transform": 11.0, "Recruiter_Email_Address_stringindexer_transform": 25.0, "Company_name_stringindexer_transform": 26.0, "SetName_stringindexer_transform": 43.0, "CandidateID_stringindexer_transform": 3.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 3.0, "AutoInterviewsDuration_stringindexer_transform": 25.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 6.0, "Recruiter_InterviewCount_stringindexer_transform": 4.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/11/2023", "NoofDays": -19, "LogInterviewID": 221, "QID": 2693, "Job_Title": "Business Data Analyst", "Job_Description": "Job Summary:  Join HonestMed, a fast-growing ecommerce company in the medical supply space, as a Data Analyst. Utilize your analytical prowess to enhance our online retail business's performance. Your primary responsibilities will include monitoring key performance indicators, such as website traffic, conversion rates, and sales, identifying growth opportunities, optimizing website designs, implementing marketing campaigns, and maintaining comprehensive business intelligence reporting to drive HonestMed's success.  Essential Functions and Key Responsibilities:  Identify, ingest, and clean critical data sources for modeling and reporting. Design and manage dashboards and reports for marketing and business teams. Provide actionable metrics, insights, and recommendations on consumer analytics and marketing campaigns. Lead projects leveraging data analytics to address complex business issues. Narrate the customer and service story through BI tools and timely reporting. Become the company's data expert, deeply understanding the data landscape across customer journeys. Promote data-literacy and accelerate data knowledge among colleagues and customers. Foster a team-oriented and inclusive work environment. Collaborate effectively with all organizational levels and stakeholders. Be on-site in Oceanside, CA Perform additional duties as required. Knowledge Skills and Abilities:  Minimum of 3 years in data analytics, focused on consumer, retail, and marketing data. Expertise in creating dynamic, data-driven dashboards, preferably in Tableau. Proficiency in consumer analytics, marketing analytics, and forecasting. Demonstrated ability to apply data and analytics to problem-solving. Experience in effectively presenting complex results to all organization levels. Outstanding leadership, communication, interpersonal, and presentation skills. Ability to foster positive working relationships within and outside the company. Required Education and Experience:  Bachelor's degree or relevant combination of education and experience. Strong proficiency in SQL, Python, and Excel. Experience in building data pipelines is a plus. Minimum 5 years of e-Commerce experience preferred. Strong data visualization skills with dashboard building expertise in Tableau or Power BI.", "Recruiter_First_Name": "Kevin", "Recruiter_Last_Name": "Thomas", "Recruiter_Email_Address": "Kevin.Thomas@honestmed.com", "Company_name": "Honest-Medical", "SetName": "Calvine  Cheptoo _11/11/2023_Honest-Medical_Business Data Analyst", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 4", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 4", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 5", "InterviewDate_stringindexer_transform": 65.0, "Job_Title_stringindexer_transform": 13.0, "Job_Description_stringindexer_transform": 119.0, "Recruiter_First_Name_stringindexer_transform": 96.0, "Recruiter_Last_Name_stringindexer_transform": 99.0, "Recruiter_Email_Address_stringindexer_transform": 94.0, "Company_name_stringindexer_transform": 53.0, "SetName_stringindexer_transform": 31.0, "CandidateID_stringindexer_transform": 2.0, "SurveyResponse_stringindexer_transform": 2.0, "InterviewType_stringindexer_transform": 3.0, "Preparationscore_stringindexer_transform": 7.0, "AutoInterviewsCount_stringindexer_transform": 4.0, "AutoInterviewsDuration_stringindexer_transform": 3.0, "MentorInterviewsCount_stringindexer_transform": 4.0, "MentorInterviewsDuration_stringindexer_transform": 2.0, "Mentor_stringindexer_transform": 11.0, "Applicant_stringindexer_transform": 14.0, "Recruiter_InterviewCount_stringindexer_transform": 8.0, "Technical_InterviewCount_stringindexer_transform": 8.0, "InterviewScore_stringindexer_transform": 5.0}, {"InterviewDate": "11/10/2023", "NoofDays": -20, "LogInterviewID": 220, "QID": 2692, "Job_Title": "Data Engineer/ETL Developer", "Job_Description": "Must-haves   - 5+ years of experience developing ETL database in a SQL Server Environment  - Strong knowledge of Data Warehousing methodology and ETL best practices  - Experience with SSIS and SSAS  - .Net experience (doing translations and storing them for later use)  - Database experience - knowing what is dirty data, how to move data, clustered and non-clustered indexing  - .Net experience (doing translations and storing them for later use). - Strong communication (verbal & written) - being able to communicate issues in a timely manner - API experience   Plusses   - DBA background  - OLAP cube development  - HTML experience - Power BI experience   Day-to-Day  Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.  This role is hybrid (up to 2-3 days onsite on some weeks) and a typical work week is Monday-Friday, 8am-5pm.", "Recruiter_First_Name": "Nathan", "Recruiter_Last_Name": "Seiler", "Recruiter_Email_Address": "Nathan.Seiler@insightglobal.com", "Company_name": "Insight Global", "SetName": "Rio Rochelle Florague_11/10/2023_Insight Global_Data Engineer/ETL Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "18", "Technical_InterviewCount": "6", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 48.0, "Job_Title_stringindexer_transform": 76.0, "Job_Description_stringindexer_transform": 50.0, "Recruiter_First_Name_stringindexer_transform": 100.0, "Recruiter_Last_Name_stringindexer_transform": 98.0, "Recruiter_Email_Address_stringindexer_transform": 49.0, "Company_name_stringindexer_transform": 0.0, "SetName_stringindexer_transform": 114.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 17.0, "Technical_InterviewCount_stringindexer_transform": 6.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/9/2023", "NoofDays": -21, "LogInterviewID": 223, "QID": 2694, "Job_Title": "Tableau Data Analyst", "Job_Description": "SaaS solution provider located in the Cayman Islands is searching for a (Senior) Tableau Data Analyst to work remotely from anywhere in the United States.  Candidate will join their team and be responsible for designing, developing and maintaining the Tableau dashboards and reports.     About:  This company has extensive experience in operating world-class data centers hosting SaaS solutions.  They are a 20-year-old company with a solid client base focused on building long term client relationships and world class solutions.  They have a business model for long term loyalty with their staff and clients.     Candidate will work remotely from a home office and on occasion be required to work outside of regular business hours and share on-call duties with other members on the Application Support team.  Candidate will be given the opportunity to travel and work in a Caribbean lifestyle for one week each year when they visit the company\u2019s headquarters and data centers in the Cayman Islands.  Over time is expected in this position.     Note:  Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers. Job Requirements Education:  College Degree in Computer Science, Information Systems or related field.    Technical Skills & Abilities:  Three (3)+ years proven experience as a Tableau Developer or similar role - required Proficient in Tableau Desktop and Tableau Server Strong understanding of data visualization principles and best practices Experience with data modeling, data integration, and ETL processes Strong knowledge of SQL for data manipulation and querying; extensive experience writing functions and scripts    Responsibilities:  Develop and maintain Tableau dashboards and reports to support business analytics needs Collaborate with stakeholders to gather requirements and understand business objectives Design and implement data visualizations using Tableau best practices Create complex calculations, parameters, and filters to support data analysis Optimize Tableau performance and troubleshoot issues as needed Conduct data analysis and provide insights to drive business decision-making Stay up-to-date with Tableau features and functionalities to ensure effective utilization Soft Skills:  Excellent problem-solving skills and attention to detail Strong communication and collaboration abilities Fluent in the English language Additional Information Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers.", "Recruiter_First_Name": "Marie", "Recruiter_Last_Name": "Mikelson", "Recruiter_Email_Address": "marie.mikelson@profoundjobs.com", "Company_name": "1 of 36 ProFound Staffing", "SetName": "Robelyn Florague_11/09/2023_1 of 36 ProFound Staffing_Tableau Data Analyst", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "18", "Technical_InterviewCount": "5", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 63.0, "Job_Title_stringindexer_transform": 65.0, "Job_Description_stringindexer_transform": 64.0, "Recruiter_First_Name_stringindexer_transform": 53.0, "Recruiter_Last_Name_stringindexer_transform": 38.0, "Recruiter_Email_Address_stringindexer_transform": 81.0, "Company_name_stringindexer_transform": 56.0, "SetName_stringindexer_transform": 79.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 17.0, "Technical_InterviewCount_stringindexer_transform": 7.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/8/2023", "NoofDays": -22, "LogInterviewID": 216, "QID": 2689, "Job_Title": "BI Data Engineer", "Job_Description": "Publishing.com has helped thousands of normal everyday people to become successful self-published authors. And along the way, we also became one the most successful companies in the US (  Want to be at the forefront of the AI revolution? Join us! We are building the most comprehensive AI-powered self-publishing platform and you get to join us at ground zero. Instead of just teaching people how to create successful books, we are going to help them do it.  About you:  You are a data engineer with strong analytical skills and hands-on experience with modern data warehousing and business intelligence solutions. You know how to use code and no-code to ingest data from various sources, how to interpret data and translate it into business insight, and how to prepare reports and dashboards that are easy to understand and digest.  And you have a great attitude!  About this role:  As our first data engineer, you will have the opportunity to make important contributions to various aspects of our data platform. Your main responsibilities are:  Build a highly scalable data warehouse Propose, design, and implement data ingestion pipelines (ELT/ETL) Maintain our local and cloud data platforms Understand and interpret business intelligence requirements and translate them into technical solutions Build business analytics and dashboards to address sales and marketing needs  Required skills:  Strong problem solving skills Strong communication skills Strong SQL skills Expert in using data warehousing solutions such as BigQuery, Snowflake, or Databricks Experience with data ingestion services such as Fivetran, Matilion, Segment, or similar Experience with Google Sheets Experience with business analytics for marketing and sales Strong programming skills in JavaScript and Python Experience with HubSpot Experience with Git Experience with agile development Experience working with marketing and sales teams Strong sense of ownership  Preferred Skills:  Experience with Google Clouds Experience building CI/CD pipelines Experience with AWS, Azure, or GCP Experience with Terraform or other IaC solutions Experience with DevOps and SRE best practices", "Recruiter_First_Name": "Olivia", "Recruiter_Last_Name": "Dandapa", "Recruiter_Email_Address": "olivia.d@publishing.com", "Company_name": "Publishing.com", "SetName": "AYODEJI OLAWOYE_11/08/2023_Publishing.com_BI Data Engineer", "CandidateID": "33898", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1703", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "3", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 20.0, "Job_Title_stringindexer_transform": 83.0, "Job_Description_stringindexer_transform": 57.0, "Recruiter_First_Name_stringindexer_transform": 69.0, "Recruiter_Last_Name_stringindexer_transform": 37.0, "Recruiter_Email_Address_stringindexer_transform": 28.0, "Company_name_stringindexer_transform": 105.0, "SetName_stringindexer_transform": 39.0, "CandidateID_stringindexer_transform": 5.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 49.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 2.0, "Applicant_stringindexer_transform": 4.0, "Recruiter_InterviewCount_stringindexer_transform": 5.0, "Technical_InterviewCount_stringindexer_transform": 5.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/8/2023", "NoofDays": -22, "LogInterviewID": 217, "QID": 2690, "Job_Title": "Data Analyst", "Job_Description": "Description  Robert Half is currently working with a client seeking a Data Analyst. The Data Analyst will be responsible for the preparation of financial reports that serve as summary information for managers. The Data Analyst will be analyzing a variety of data types and reporting on that information. This Data Analyst position is for someone who is deadline driven and highly analytical.  What you get to do every single day   Call out relevant insights from compiled analytical reports  Organize, manipulate, and extract data in response to management requests  Create and share key decision-making data for market assessments, forecasting and further investigation  Complete data mining projects- Analyze corporate reports in order to create financial reports  Requirements   Complete competence in data management and manipulation  Ability to work independently with minimal oversight  BS/BA in Accounting, finance, or economics  Skilled in spreadsheet and reporting applications, including V-lookups, pivot tables, and queries  Strong communication skills and able to receive criticism well  Critical thinking and problem-solving skills are a must, as well as great attention to detail  Understanding of a variety of data models  5+ years of experience in financial planning and analysis, data analysis or similar role  Robert Half is the world\u2019s first and largest specialized talent solutions firm that connects highly qualified job seekers to opportunities at great companies. We offer contract, temporary and permanent placement solutions for finance and accounting, technology, marketing and creative, legal, and administrative and customer support roles.  Robert Half works to put you in the best position to succeed. We provide access to top jobs, competitive compensation and benefits, and free online training. Stay on top of every opportunity - whenever you choose - even on the go.  All applicants applying for U.S. job openings must be legally authorized to work in the United States. Benefits are available to contract/temporary professionals, including medical, vision, dental, and life and disability insurance. Hired contract/temporary professionals are also eligible to enroll in our company 401(k) plan. Visit", "Recruiter_First_Name": "Lauren", "Recruiter_Last_Name": "Etherton", "Recruiter_Email_Address": "Lauren.Etherton@roberthalf.com", "Company_name": "Robert Half", "SetName": "Yama Touray_11/08/2023_Robert Half_Data Analyst", "CandidateID": "37640", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 5", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 5", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 4", "InterviewDate_stringindexer_transform": 20.0, "Job_Title_stringindexer_transform": 9.0, "Job_Description_stringindexer_transform": 48.0, "Recruiter_First_Name_stringindexer_transform": 14.0, "Recruiter_Last_Name_stringindexer_transform": 71.0, "Recruiter_Email_Address_stringindexer_transform": 65.0, "Company_name_stringindexer_transform": 61.0, "SetName_stringindexer_transform": 108.0, "CandidateID_stringindexer_transform": 7.0, "SurveyResponse_stringindexer_transform": 2.0, "InterviewType_stringindexer_transform": 3.0, "Preparationscore_stringindexer_transform": 7.0, "AutoInterviewsCount_stringindexer_transform": 4.0, "AutoInterviewsDuration_stringindexer_transform": 3.0, "MentorInterviewsCount_stringindexer_transform": 4.0, "MentorInterviewsDuration_stringindexer_transform": 15.0, "Mentor_stringindexer_transform": 11.0, "Applicant_stringindexer_transform": 21.0, "Recruiter_InterviewCount_stringindexer_transform": 8.0, "Technical_InterviewCount_stringindexer_transform": 8.0, "InterviewScore_stringindexer_transform": 2.0}, {"InterviewDate": "11/7/2023", "NoofDays": -23, "LogInterviewID": 214, "QID": 2687, "Job_Title": "Senior Data Base Developer/Data Modeler", "Job_Description": "A remote position position opened for candidates in the USA; What you will do  Design and develop database solutions using SQL Server; Create and maintain data models, database schema, and data dictionaries; Implement Service Broker queue concepts; Provide solutions to other groups and work collaboratively with cross-functional teams; Discuss pros and cons of potential solutions and make recommendations based on business needs; Perform troubleshooting and debugging of database issues; Maintain database performance by identifying and resolving production and application development Must haves  7+ years of experience in data modeling, database development, and database design; Strong experience with SQL server; Work with Control-m jobs scheduling and Jenkins; Knowledge of Service Broker queue concepts and their implementation; Ability to create database schemas, data models, and data dictionaries; Ability to work well in a team-oriented, collaborative environment; Excellent communication and interpersonal skills.", "Recruiter_First_Name": "Shreya", "Recruiter_Last_Name": "Nandi", "Recruiter_Email_Address": "shreya.nandi@agileengine.com", "Company_name": "Agile Engine", "SetName": "Mary Gathogo_11/08/2023_Agile Engine_Senior Data Base Developer/Data Modeler", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "8", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "15", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 57.0, "Job_Title_stringindexer_transform": 63.0, "Job_Description_stringindexer_transform": 6.0, "Recruiter_First_Name_stringindexer_transform": 52.0, "Recruiter_Last_Name_stringindexer_transform": 87.0, "Recruiter_Email_Address_stringindexer_transform": 40.0, "Company_name_stringindexer_transform": 60.0, "SetName_stringindexer_transform": 41.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 6.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 7.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 21.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/3/2023", "NoofDays": -27, "LogInterviewID": 213, "QID": 2686, "Job_Title": "Sr Business/Data Analyst", "Job_Description": "Comprehend Greenhouse Gas regulatory requirements and translate them into business requirements and data objectives  Transform available data into actionable business intelligence to inform and recommend tactical and strategic Greenhouse Gas approaches  Use and manage existing date forecasting tools to generate GHG forecasts and actionable recommendations  Extend forecasting processes and methods to wider marketing and sales forecasting needs  Assimilate, aggregate, and query data to provide recommendations based on statistical analysis  Monitor data integrity and notify appropriate personnel of data impairments  Develop solutions for automating complex repeatable queries that normalize and cleanse data  Synthesize data into actionable content, and communicate findings back to the business  Become a subject matter expert on improving data, processes, and methodologies to identify inefficiencies and recommend improvements  Ensure that consistent documentation is developed and maintained to easily replicate and improve processes related to data and data analysis  Engage in creating quality metrics, reports, KPIs and Dashboards  Consult with business teams on project requirement gathering and communicating the appropriate selection, utilization, and interpretation of advanced statistical methodologies used in projects  Support GHG operational processes as needed  Effectively communicate and present to both technical and non-technical employees on advanced analytics", "Recruiter_First_Name": "Christopher", "Recruiter_Last_Name": "Hill", "Recruiter_Email_Address": "careers@paccarparts.com", "Company_name": "Paccar Parts", "SetName": "Jane Mwangi_11/03/2023_Paccar Parts_Sr Business/Data Analyst", "CandidateID": "38690", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "62.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "827", "MentorInterviewsCount": "2", "MentorInterviewsDuration": "1847", "Mentor": "Leslie Boye", "Applicant": "Jane Mwangi", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 35.0, "Job_Title_stringindexer_transform": 73.0, "Job_Description_stringindexer_transform": 49.0, "Recruiter_First_Name_stringindexer_transform": 47.0, "Recruiter_Last_Name_stringindexer_transform": 41.0, "Recruiter_Email_Address_stringindexer_transform": 93.0, "Company_name_stringindexer_transform": 99.0, "SetName_stringindexer_transform": 37.0, "CandidateID_stringindexer_transform": 12.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 8.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 33.0, "MentorInterviewsCount_stringindexer_transform": 7.0, "MentorInterviewsDuration_stringindexer_transform": 23.0, "Mentor_stringindexer_transform": 10.0, "Applicant_stringindexer_transform": 13.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/3/2023", "NoofDays": -27, "LogInterviewID": 210, "QID": 2683, "Job_Title": "Database Administrator", "Job_Description": "About the job StrideCare, a healthcare multi-specialty physician group, is currently seeking a highly skilled and experienced Database Architect and Data Analyst to join our dynamic team. The ideal candidate will possess expertise in ETL processes, and Power BI, and have prior experience in the medical field.  Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.", "Recruiter_First_Name": "Rocky and Tracy", "Recruiter_Last_Name": "Massey and Miller", "Recruiter_Email_Address": "<Tracy.Miller@stridecare.com>, <rocky.massey@stridecare.com>", "Company_name": "StrideCare", "SetName": "AYODEJI OLAWOYE_11/03/2023_StrideCare_Database Administrator", "CandidateID": "33898", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 35.0, "Job_Title_stringindexer_transform": 86.0, "Job_Description_stringindexer_transform": 103.0, "Recruiter_First_Name_stringindexer_transform": 33.0, "Recruiter_Last_Name_stringindexer_transform": 39.0, "Recruiter_Email_Address_stringindexer_transform": 38.0, "Company_name_stringindexer_transform": 19.0, "SetName_stringindexer_transform": 11.0, "CandidateID_stringindexer_transform": 5.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 2.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 7.0, "Applicant_stringindexer_transform": 2.0, "Recruiter_InterviewCount_stringindexer_transform": 7.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 212, "QID": 2685, "Job_Title": "DATABASE ADMINISTRATOR", "Job_Description": "Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.   Qualifications And Education Requirements   Bachelor's or Master's degree in Computer Science, Information Systems, Data Science, or a related field.   Must be local or able to work Hybrid in Dallas, TX   Proven experience as a Database Architect, Data Analyst, or a similar role.   Strong proficiency in designing and managing relational databases (e.g., SQL Server, Oracle, MySQL).   Expertise in ETL processes, data integration, and transformation techniques.   In-depth knowledge of NetSuite, including configuration, customization, and integration capabilities.   Proficiency in data analysis and visualization tools such as Power BI, Tableau, or similar platforms.   Familiarity with medical data management, healthcare industry regulations, and terminology.   Strong analytical and problem-solving skills with the ability to extract insights from complex datasets.   Excellent communication and collaboration skills to effectively work with cross-functional teams and stakeholders.   Attention to detail, with the ability to prioritize tasks and manage multiple projects simultaneously.   StrideCare Offers a Total Rewards Benefits Package That Includes   Major medical insurance   Dental and vision   401k   Long- and short-term disability   Corporate outings   Fun and casual corporate environment   PTO   Paid holidays   No weekends, evenings, nights, or holidays (paid holidays)   Excellent work - life balance (Monday - Friday work schedules)   Employee Assistance Program and more!", "Recruiter_First_Name": "Tracy", "Recruiter_Last_Name": "Miller", "Recruiter_Email_Address": "Tracy.Miller@stridecare.com", "Company_name": "StrideCare", "SetName": "AYODEJI OLAWOYE_11/02/2023_StrideCare_DATABASE ADMINISTRATOR", "CandidateID": "33898", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1690", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "3", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 6.0, "Job_Title_stringindexer_transform": 88.0, "Job_Description_stringindexer_transform": 102.0, "Recruiter_First_Name_stringindexer_transform": 89.0, "Recruiter_Last_Name_stringindexer_transform": 80.0, "Recruiter_Email_Address_stringindexer_transform": 78.0, "Company_name_stringindexer_transform": 19.0, "SetName_stringindexer_transform": 122.0, "CandidateID_stringindexer_transform": 5.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 5.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 2.0, "Applicant_stringindexer_transform": 4.0, "Recruiter_InterviewCount_stringindexer_transform": 4.0, "Technical_InterviewCount_stringindexer_transform": 5.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 204, "QID": 2678, "Job_Title": "Power BI and Power Apps Developer", "Job_Description": "Design and develop interactive Power BI reports and dashboards. Extract, transform, and load (ETL) data from various sources into Power BI. Collaborate with business users to gather requirements and translate them into effective visualizations. Develop custom applications using Power Apps to streamline business processes. Integrate Power Apps with other Microsoft 365 applications and services. Create canvas and model-driven apps that meet the organization's needs. Design and implement data models to support reporting and analytics requirements. Perform data analysis to identify trends, patterns, and insights. Automate repetitive tasks and workflows using Power Automate (Flow). Ensure seamless integration between Power BI, Power Apps, and other Microsoft 365 tools. Collaborate with cross-functional teams to understand business requirements and provide technical solutions. Train end-users on how to use Power BI reports and Power Apps applications effectively.", "Recruiter_First_Name": "Kyle", "Recruiter_Last_Name": "Skelton", "Recruiter_Email_Address": "kyle.skelton@msg.clrco.com", "Company_name": "Atlas Technologies, Inc.", "SetName": "Avworo  OGHENEKEVWE _11/02/2023_Atlas Technologies, Inc._Power BI and Power Apps Developer", "CandidateID": "38457", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "31.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "72", "MentorInterviewsCount": "2", "MentorInterviewsDuration": "674", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 6.0, "Job_Title_stringindexer_transform": 41.0, "Job_Description_stringindexer_transform": 97.0, "Recruiter_First_Name_stringindexer_transform": 44.0, "Recruiter_Last_Name_stringindexer_transform": 57.0, "Recruiter_Email_Address_stringindexer_transform": 95.0, "Company_name_stringindexer_transform": 93.0, "SetName_stringindexer_transform": 82.0, "CandidateID_stringindexer_transform": 9.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 14.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 17.0, "MentorInterviewsCount_stringindexer_transform": 7.0, "MentorInterviewsDuration_stringindexer_transform": 8.0, "Mentor_stringindexer_transform": 8.0, "Applicant_stringindexer_transform": 9.0, "Recruiter_InterviewCount_stringindexer_transform": 4.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 209, "QID": 2682, "Job_Title": "Solution Assessment Consultant", "Job_Description": "Apeiron Sumus is looking for a Solution Assessment Consultant to join our team in United States. This person will lead the successful execution of a variety of projects from start to finish.  The ideal candidate is a self-starter with excellent time-management and problem-solving abilities who thrives in fast-paced environments. Someone with high energy, a curiosity about the industry, and tenacity and has previous Microsoft Technology sales experience. This person will bring new ideas, have a deep passion for the role and create ways to attain new accounts.  Responsibilities:  Assessment Implementation -\u202fTrusted advisor to consult on effective plan deployment and new opportunity developments. Able to qualify solution assessment opportunities, handover to Technical team for execution and position partners in the overall sales process.  Customer Engagement - Receives the nomination and engagement with the customer may begin through contact to secure acceptance of the Letter of Engagement and orchestrates project delivery under a remote assistance model.  Orchestrate Assessment process - Manage and execute the activities required to perform a Solution Assessment in each account. Starts the data collection phase, executed under a tele-assisted model that includes remote installation, configuration, and execution of discovery tools, data collection, troubleshooting, data analysis, and the creation of the deliverable for the Solution Assessment.  Report Information and Migration Handover - Shares and fine tunes the report information with Microsoft Team and Designated Migration Partner prior to presenting the team\u2019s Insights & Recommendations to the customer. Hand-offs the Assessment to a designated Migration Partner and Microsoft Field Team to act on the Migration Plan and Drive Consumption.  Partner and Supplier Relationship Management - Recommends Solution Assessment Partner (in case of partner delivered assessments) and coordinates end-to-end engagement with Partner  Professional and Technical competencies:  Hands-on experience with multiple sales techniques  Experience with Microsoft Office and CRM software  Familiarity with MS Cloud and PowerBI  Understanding of sales performance metrics Strong written and verbal communication skills  Attention to detail, data analysis, and analytical skills  Integrate consulting on Microsoft solutions and offerings in support of organizations\u2019 business needs Work with IT systems in support of collecting data  Self-Direction and a focus on quality, apply independent judgment to accomplish objectives   Desirable Certifications:  Microsoft Certified | Azure Fundamentals | AZ-900 Microsoft 365 Certified | Fundamentals | MS-900 Microsoft Certified | Dynamics 365 Fundamentals (CRM) | MB-910  Personal Profile:  Required languages: English Educational level: Bachelor\u2019s degree Special conditions or requirements: Open to work on a global environment with different cultures and languages This is a remote position", "Recruiter_First_Name": "Nydia Valenzuela", "Recruiter_Last_Name": "Salazar", "Recruiter_Email_Address": "v-nydiav@microsoft.com", "Company_name": "Apeiron Sumus LLC", "SetName": "Feven Asmelash_11/02/2023_Apeiron Sumus LLC_Solution Assessment Consultant", "CandidateID": "39112", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Ayodele Adepoju", "Applicant": "Feven Asmelash", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 6.0, "Job_Title_stringindexer_transform": 46.0, "Job_Description_stringindexer_transform": 72.0, "Recruiter_First_Name_stringindexer_transform": 43.0, "Recruiter_Last_Name_stringindexer_transform": 45.0, "Recruiter_Email_Address_stringindexer_transform": 102.0, "Company_name_stringindexer_transform": 70.0, "SetName_stringindexer_transform": 80.0, "CandidateID_stringindexer_transform": 15.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 14.0, "Applicant_stringindexer_transform": 16.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 205, "QID": 2679, "Job_Title": "Database Developer", "Job_Description": "Graphic Business Solutions (GBS) is currently seeking a talented Database Developer with two or more years\u2019 proven SQL Server experience to join our growing software development team.  A successful candidate for this position will have a strong background in developing and maintaining world-class data solutions using Microsoft SQL Server technologies. The candidate will have advanced T-SQL skills with a strong ability to work independently on a wide range of business-enhancing data projects. Equally important to these specific technology skills are excellent written and verbal communication skills both with the team and external teams, the ability to multi-task, the ability to translate business requirements to database requirements, the ability adapt quickly to new environments and using creativity to solve difficult problems as a key member of the software development team.  Essential responsibilities and characteristics of this position include the following:  Develop and organize SQL Server objects, such as Stored Procedures, Functions, Views, Tables, SSIS packages, etc., that support automation efforts Co-develop SQL-based solutions for an e-commerce environment Generate and deliver solutions that provide business intelligence to stakeholders Collaborate with other database developers in the software development team on complex data projects Exhibit an understanding of fundamental database design principles Ability to prioritize and manage multiple concurrent tasks and projects Ability to collaborate in a small and productive development team Motivated self-starter with the ability to learn and adapt to new technologies Passion for working with technology and excitement for creating high-quality products Rigorous attention to detail and focus on the quality of deliverables Excellent verbal and written communication skills Dedication and an appetite for learning new technologies and furthering professional growth Solid analytical and problem-solving skills Requirements:  Minimum Required Qualifications:  Must have 5 or more years\u2019 worth of experience and deep knowledge of:  MSSQL Server 2019 or higher Advanced T-SQL skillset Knowledge of MS SQL Server performance tuning, and the design and implementation of a high-availability database architecture. ETL, SSIS, SSRS SSMS and Visual Studio GIT and version control Familiarity with MS development technologies, C#, ASP.NET and web technologies, HTML, Javascript, CSS, XML etc. highly desirable. Additional Preferred Qualifications:  Tableau Experience with reporting and business intelligence systems Exposure and understanding of Agile Methodologies Proficient with all aspects of the Software Development Lifecycle Excellence in debugging practices Comfortable with GIT and deployments Expert-level proficiency in Excel Desired Education:  Associate's degree or above in Computer Science, Information Systems, Business Administration or related field Work Hours:  Typically, Monday through Friday, 8:30 am to 5:00 pm with the flexibility to meet business demands as needed. This position does not require travel.", "Recruiter_First_Name": "Bobby", "Recruiter_Last_Name": "Shreckengost", "Recruiter_Email_Address": "bobby@markful.com", "Company_name": "Markful", "SetName": "Calvine  Cheptoo _11/02/2023_Markful_Database Developer", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 4", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 3", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 2", "InterviewDate_stringindexer_transform": 6.0, "Job_Title_stringindexer_transform": 37.0, "Job_Description_stringindexer_transform": 37.0, "Recruiter_First_Name_stringindexer_transform": 79.0, "Recruiter_Last_Name_stringindexer_transform": 58.0, "Recruiter_Email_Address_stringindexer_transform": 92.0, "Company_name_stringindexer_transform": 73.0, "SetName_stringindexer_transform": 98.0, "CandidateID_stringindexer_transform": 2.0, "SurveyResponse_stringindexer_transform": 3.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 2.0, "MentorInterviewsDuration_stringindexer_transform": 3.0, "Mentor_stringindexer_transform": 5.0, "Applicant_stringindexer_transform": 25.0, "Recruiter_InterviewCount_stringindexer_transform": 16.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 4.0}, {"InterviewDate": "11/1/2023", "NoofDays": -29, "LogInterviewID": 203, "QID": 2677, "Job_Title": "Senior Report Developer", "Job_Description": "Title: Senior Report Developer Location: Remote - Anywhere USA As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company. This position will focus on delivery of solutions inside our Data Management/Analytics business unit. Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Recruiter_First_Name": "Tim", "Recruiter_Last_Name": "Strandberg", "Recruiter_Email_Address": "Tim.Strandberg@datavail.com", "Company_name": "Datavail", "SetName": "EMMANUEL OJENIYI_11/01/2023_Datavail_Senior Report Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "2058", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "16", "Technical_InterviewCount": "5", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 28.0, "Job_Title_stringindexer_transform": 33.0, "Job_Description_stringindexer_transform": 65.0, "Recruiter_First_Name_stringindexer_transform": 27.0, "Recruiter_Last_Name_stringindexer_transform": 7.0, "Recruiter_Email_Address_stringindexer_transform": 14.0, "Company_name_stringindexer_transform": 24.0, "SetName_stringindexer_transform": 117.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 5.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 17.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 14.0, "Technical_InterviewCount_stringindexer_transform": 7.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "11/1/2023", "NoofDays": -29, "LogInterviewID": 208, "QID": 2681, "Job_Title": "BI Developer", "Job_Description": "Job: BI Developer  Location: Woodlands, TX  Duration: 6 Month contract-to-perm     Job Description *  The BI Developer will be responsible for the design and development of data models that support enterprise analytical reporting and dashboard solutions. This position will work closely with business users and executives to gather, define, and translate business requirements into BI solutions. The applicant must have excellent collaboration skills with the ability to communicate concepts and solutions effectively and clearly. This position will also play a key technical role requiring expert level skills in the design, development and implementation of data warehousing and BI solutions. This person needs to be located in the Houston, TX area to attend in person meetings (about once every other month) to collaborate on team meetings.", "Recruiter_First_Name": "Ray", "Recruiter_Last_Name": "Andrzejewski", "Recruiter_Email_Address": "Ray.Andrzejewski@insightglobal.com", "Company_name": "Insight Global", "SetName": "EMMANUEL OJENIYI_11/01/2023_Insight Global_BI Developer", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 4", "InterviewDate_stringindexer_transform": 28.0, "Job_Title_stringindexer_transform": 3.0, "Job_Description_stringindexer_transform": 21.0, "Recruiter_First_Name_stringindexer_transform": 41.0, "Recruiter_Last_Name_stringindexer_transform": 73.0, "Recruiter_Email_Address_stringindexer_transform": 76.0, "Company_name_stringindexer_transform": 0.0, "SetName_stringindexer_transform": 110.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 3.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 13.0, "Applicant_stringindexer_transform": 2.0, "Recruiter_InterviewCount_stringindexer_transform": 6.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 3.0}, {"InterviewDate": "10/31/2023", "NoofDays": -30, "LogInterviewID": 207, "QID": 2680, "Job_Title": "Business Intelligence Developer (BI)", "Job_Description": "\"Responsibilities Job Description Job Description  The Business Intelligence (BI) Developer is responsible for the design, creation, and maintenance of sustainable reporting solutions to support data-driven decisions by the client.  Drives significant analytic initiatives in support of business strategies.  Develops an understanding of business processes and operational tools in order to create meaningful reporting designs.  Responsible for the analysis of business data needs and develops the required data modeling.  Designs and develops creative and interactive data visualizations.  Partners with business leaders across the organization to support and implement high-quality, data-driven solutions.  Assists IT with collecting and storing operational data from source systems.  Stays current on all processes, techniques, tools, and industry best practices to ensure the client is at the forefront of Business Intelligence solutions.  REQUIRED QUALIFICATIONS  3-5 years of Business Intelligence experience  3-5 years of Data Analytics, Dashboarding, Reporting, or Analysis experience  Bachelor\u2019s Degree in Data Science, Business, or related field  JOB FUNCTIONS AND RESPONSIBILITIES  Partner with business leaders and SMEs to understand reporting and analytics needs within their functions.  Gather, document, and analyze business reporting and communications requirements from stakeholders  Map business requirements to source data structures and develop data models from data located within multiple data stores utilizing data solutions such as SQL or Snowflake  Design, build, and maintain dashboards visualizations using BI applications such as Tableau  Ensure dashboards are creatively designed and tell a story behind the data.  Analyze report data for accuracy and report on potential quality errors  Participate in peer review process to ensure all reports are accurate prior to distribution  Partner with business owners to prioritize projects to ensure the most important items are being successfully addressed.  Partner with IT to identify and store required data sets.  Provide ongoing analytics expertise and insights into data trends across the operational segments.  Lead and facilitate dashboard demonstration and educational sessions  Provide ad-hoc data analysis and support to business functions.  REQUIRED COMPETENCIES  Healthcare experience  Advanced skills in data applications such as Power BI, ETL, Tableau (some knowledge) and SQL (some knowledge)  Ability to display complex quantitative data in a simple, intuitive format to present findings in a clear manner  Creativity in designing data visualizations  Strong understanding of data structures that ease the generation of reliable data  Strong analytical skills with some moderate project management knowledge  Proficient Data mining and normalization skills  How to Apply:  If you are a results-driven professional with the qualifications and experience required for this role, we invite you to apply by responding to this portal or send your resume to careers@StoneLaurel.com with the subject line \"\"BI Developer.\"\" We look forward to welcoming a dedicated and strategic thinker to our team.  Company Description  StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "Recruiter_First_Name": " NC", "Recruiter_Last_Name": " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.  While our engagements have taken us around the globe", "Recruiter_Email_Address": " working with some of the largest Fortune 500 companies", "Company_name": " our focus has always been on being the best", "SetName": " not the biggest.  We believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "CandidateID": " client focus", "SurveyResponse": " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.  Company Description StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "InterviewType": " NC", "Preparationscore": " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.\\r\\n\\r\\nWhile our engagements have taken us around the globe", "AutoInterviewsCount": " working with some of the largest Fortune 500 companies", "AutoInterviewsDuration": " our focus has always been on being the best", "MentorInterviewsCount": " not the biggest.\\r\\n\\r\\nWe believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "MentorInterviewsDuration": " client focus", "Mentor": " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.\"", "Applicant": "George", "Recruiter_InterviewCount": "Williams", "Technical_InterviewCount": "gwilliams@stonelaurel.com", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 54.0, "Job_Title_stringindexer_transform": 78.0, "Job_Description_stringindexer_transform": 118.0, "Recruiter_First_Name_stringindexer_transform": 56.0, "Recruiter_Last_Name_stringindexer_transform": 56.0, "Recruiter_Email_Address_stringindexer_transform": 88.0, "Company_name_stringindexer_transform": 46.0, "SetName_stringindexer_transform": 111.0, "CandidateID_stringindexer_transform": 19.0, "SurveyResponse_stringindexer_transform": 6.0, "InterviewType_stringindexer_transform": 6.0, "Preparationscore_stringindexer_transform": 16.0, "AutoInterviewsCount_stringindexer_transform": 8.0, "AutoInterviewsDuration_stringindexer_transform": 14.0, "MentorInterviewsCount_stringindexer_transform": 11.0, "MentorInterviewsDuration_stringindexer_transform": 19.0, "Mentor_stringindexer_transform": 19.0, "Applicant_stringindexer_transform": 23.0, "Recruiter_InterviewCount_stringindexer_transform": 31.0, "Technical_InterviewCount_stringindexer_transform": 13.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/26/2023", "NoofDays": -35, "LogInterviewID": 200, "QID": 2674, "Job_Title": "Sr. Consultant, Power BI Analyst", "Job_Description": "Technossus, a leading software solutions and technology consulting company, is seeking a qualified and experienced Sr. Consultant, Power BI Analyst to join our team. As a Sr. Consultant, Power BI Analyst, you will be responsible for developing interactive and insightful dashboards and reports to help our clients make better-informed business decisions. At Technossus, we value our commitment to delivering cutting-edge solutions, and our Sr. Consultant, Power BI Analyst is a key player in ensuring our clients receive exceptional value and quality every time.  Location: Full time onsite in Long Beach 5 days a week   Responsibilities Collaborate with stakeholders and team members to understand their business intelligence needs and translate them into data visualizations that provide actionable insights. Develop interactive dashboards and reports in Power BI to track business performance and identify trends. Analyze and interpret data to provide recommendations that enhance decision-making processes. Design and implement data models and data architecture to support the management and analysis of large data sets. Identify and resolve data quality and integration issues. Share best practices with the team to increase knowledge and optimize processes. Stay up-to-date with the latest Business Intelligence trends and technologies. Requirements  Proven experience in developing high-quality dashboards and reports in Power BI. Understanding of Data Warehouse design and architecture. Strong business acumen and the ability to translate business requirements into technical solutions. Excellent communication and presentation skills. 5+ years of working experience as BI Analyst and a bachelor's degree in engineering, computer science, commerce degree or equivalent 5+ Years of Power BI experience with DAX and Power Query Strong/excellent SQL Skills including PL/SQL Benefits  Our job titles may span more than one career level. The starting base pay for this role is between $110,000.00 and $140,000.00. The actual base pay is dependent upon many factors, such as: training, transferable skills, work experience, business needs, and market demands. The base pay range is subject to change and may be modified in the future. This role may also be eligible for bonus and benefits.  Benefits:  Medical, Dental, Vision, 401k Match Health Savings & Flexible Spending Account Health Care FSA Dependent Day Care FSA Company paid life, AD&D, & LTD insurance Flexible PTO policy Continued training to level up your skills Supplemental benefits available: Accident Insurance Critical Illness Insurance Hospital Indemnity Employee Assistance Program Physical Demands:  While performing the duties of this job, the employee routinely is required to sit; walk; talk and hear; use hands to keyboard, finger, handle, and feel; stoop, kneel, crouch, twist, reach, and stretch. Speaking and hearing ability sufficient to communicate in person, over telephone, and/or video conference.  The ability to stand, walk, and sit in a computer chair for long periods of time. The ability to see and respond to dangerous situations. Speaking and hearing ability sufficient to communicate in person, over telephone and/or video conferences. Sufficient hand, arm, and finger dexterity to operate a computer keyboard and other office equipment. Emotional Demands:  While performing the duties of this role the employee is required to maintain a professional and positive attitude with clients and colleagues. Frequent deep thinking and interactions with multiple stakeholders and clients. Ability to utilize knowledge and experience to problem solve, make quick decisions, and interpret proposals publicly or in group setting.  Ability to problem solve Able to make quick decisions Frequent deep thinking Communicate clearly with coworkers Lead and direct a team Articulate objectives and expectations clearly Speak publicly Interpret data", "Recruiter_First_Name": "Julie", "Recruiter_Last_Name": "Antifave", "Recruiter_Email_Address": "Julie.Antifave@technossus.com", "Company_name": "Technossus", "SetName": "Calvine  Cheptoo _10/26/2023_Technossus_Sr. Consultant, Power BI Analyst", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 3", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 3", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 21.0, "Job_Title_stringindexer_transform": 75.0, "Job_Description_stringindexer_transform": 60.0, "Recruiter_First_Name_stringindexer_transform": 81.0, "Recruiter_Last_Name_stringindexer_transform": 53.0, "Recruiter_Email_Address_stringindexer_transform": 29.0, "Company_name_stringindexer_transform": 90.0, "SetName_stringindexer_transform": 34.0, "CandidateID_stringindexer_transform": 2.0, "SurveyResponse_stringindexer_transform": 3.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 6.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 13.0, "Applicant_stringindexer_transform": 18.0, "Recruiter_InterviewCount_stringindexer_transform": 6.0, "Technical_InterviewCount_stringindexer_transform": 9.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "10/26/2023", "NoofDays": -35, "LogInterviewID": 201, "QID": 2675, "Job_Title": "Power BI Developer", "Job_Description": "POSITION: POWER BI DEVELOPER/ANALYST \u2013 W2 ONLY LOCATION: REMOTE TYPE: DIRECT HIRE Are you a problem-solver with a passion for data analysis and visualization? Our direct client, a leader in the global travel industry including being well known in global travel analytics, is seeking a Business Intelligence (BI) Developer/Analyst to join their leading-edge team. In this role, you&#39;ll bring your expert Power BI development skills, data analytics, SQL knowledge, and understanding of relational databases, working with valued clients in the corporate travel industry. You&#39;ll be at the forefront of their analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for their client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. This is also a great opportunity to work for a Microsoft Power BI Partner! Responsibilities: \uf0b7 Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client&#39;s needs. \uf0b7 Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. \uf0b7 SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. \uf0b7 Client Relationship Management: Work directly with a specific, valued main client, understanding their needs, and presenting your findings in a clear and persuasive manner. Qualifications: \uf0b7 Bachelor&#39;s Degree in Information Systems, Computer Science, Business Administration, or a related field. \uf0b7 Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. \uf0b7 Solid experience in SQL and working with relational databases. \uf0b7 Excellent analytical skills with the ability to dissect large amounts of data. \uf0b7 Strong communication skills and the ability to effectively convey complex information. \uf0b7 Experience in the corporate travel industry is a plus.", "Recruiter_First_Name": "Suzy", "Recruiter_Last_Name": "Carlson", "Recruiter_Email_Address": "scarlson@entelli.com", "Company_name": "Entelli", "SetName": "Mary Gathogo_10/26/2023_Entelli_Power BI Developer", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 21.0, "Job_Title_stringindexer_transform": 1.0, "Job_Description_stringindexer_transform": 32.0, "Recruiter_First_Name_stringindexer_transform": 101.0, "Recruiter_Last_Name_stringindexer_transform": 44.0, "Recruiter_Email_Address_stringindexer_transform": 105.0, "Company_name_stringindexer_transform": 77.0, "SetName_stringindexer_transform": 33.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 3.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 5.0, "Applicant_stringindexer_transform": 2.0, "Recruiter_InterviewCount_stringindexer_transform": 6.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "10/25/2023", "NoofDays": -36, "LogInterviewID": 197, "QID": 2671, "Job_Title": "Data Engineer", "Job_Description": "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.   This position is remote. We are unable to offer work sponsorship for this role.    We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.   Your impact:   Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company\u2019s product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform.", "Recruiter_First_Name": "Aaron", "Recruiter_Last_Name": "Talbert", "Recruiter_Email_Address": "aaron.talbert@buyersedgeplatform.com", "Company_name": "ArrowStream", "SetName": "Yama Touray_10/25/2023_ArrowStream_Data Engineer", "CandidateID": "37640", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 68.0, "Job_Title_stringindexer_transform": 2.0, "Job_Description_stringindexer_transform": 114.0, "Recruiter_First_Name_stringindexer_transform": 15.0, "Recruiter_Last_Name_stringindexer_transform": 10.0, "Recruiter_Email_Address_stringindexer_transform": 24.0, "Company_name_stringindexer_transform": 18.0, "SetName_stringindexer_transform": 35.0, "CandidateID_stringindexer_transform": 7.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 3.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 5.0, "Applicant_stringindexer_transform": 2.0, "Recruiter_InterviewCount_stringindexer_transform": 7.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "10/24/2023", "NoofDays": -37, "LogInterviewID": 198, "QID": 2672, "Job_Title": "Business Intelligence Developer", "Job_Description": "Primarily responsible for the data warehouse ETL framework and architecture Partner and align with business leaders and stakeholders to understand the business needs and address them using the many variations of visualizers PowerBI has to offer Provide training, guidance, and support to users Build & modify a solid data infrastructure, to include underpinning enterprise scale BI analytics / reporting platform, add / create new data models and integrate new data as needed Monitor analytics and metrics results Interact with internal clients to evaluate performance, availability and to collaborate on ways to improve the platform / reporting data Identify and act upon data infrastructure needs, data warehouse design, infrastructure maintenance and investment areas Manage infrastructure projects from beginning to end, including ideation, execution, socialization, and stakeholder management Ensure data integrity and compliance with any and all data security policies Translate business requirements into technical documentation Debug, monitor and troubleshoot BI Solution in development and production environments Conduct and participate in code walkthroughs and document technical design Follow the release cycles and implement on-time delivery of bug fixes, change requests and enhancements Other Duties as assigned", "Recruiter_First_Name": "Luca", "Recruiter_Last_Name": "Talone", "Recruiter_Email_Address": "luca.talone@niceforyou.com", "Company_name": "NICE North America LLC", "SetName": "Talq Tera_10/24/2023_NICE North America LLC_Business Intelligence Developer", "CandidateID": "39119", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying", "InterviewType": " with excellent question clarity", "Preparationscore": " engaging interviewer", "AutoInterviewsCount": " and relevant technical aspects. Strong performance in showcasing skills and qualifications", "AutoInterviewsDuration": " though a challenge in recruiter miscommunication. Positive sentiment in open-ended responses", "MentorInterviewsCount": " but some neutrality in additional feedback.\"\"", "MentorInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "Mentor": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Applicant": "     \"\"HandlingChallengingQuestions\"\": 3", "Recruiter_InterviewCount": "     \"\"LikelihoodToRecommendCompany\"\": 3", "Technical_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 3", "InterviewScore": "     \"\"InterviewerEngagement\"\": 3", "InterviewDate_stringindexer_transform": 46.0, "Job_Title_stringindexer_transform": 0.0, "Job_Description_stringindexer_transform": 1.0, "Recruiter_First_Name_stringindexer_transform": 8.0, "Recruiter_Last_Name_stringindexer_transform": 17.0, "Recruiter_Email_Address_stringindexer_transform": 15.0, "Company_name_stringindexer_transform": 29.0, "SetName_stringindexer_transform": 10.0, "CandidateID_stringindexer_transform": 4.0, "SurveyResponse_stringindexer_transform": 5.0, "InterviewType_stringindexer_transform": 7.0, "Preparationscore_stringindexer_transform": 10.0, "AutoInterviewsCount_stringindexer_transform": 11.0, "AutoInterviewsDuration_stringindexer_transform": 32.0, "MentorInterviewsCount_stringindexer_transform": 8.0, "MentorInterviewsDuration_stringindexer_transform": 24.0, "Mentor_stringindexer_transform": 16.0, "Applicant_stringindexer_transform": 28.0, "Recruiter_InterviewCount_stringindexer_transform": 30.0, "Technical_InterviewCount_stringindexer_transform": 12.0, "InterviewScore_stringindexer_transform": 8.0}, {"InterviewDate": "10/21/2023", "NoofDays": -40, "LogInterviewID": 195, "QID": 2669, "Job_Title": "Senior BI Developer", "Job_Description": "Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.", "Recruiter_First_Name": "Patrick", "Recruiter_Last_Name": "Gallagher", "Recruiter_Email_Address": "Patrick.Gallagher@msg.paycomonline.com", "Company_name": "Cedar Gate Technologies Recruiter", "SetName": "EMMANUEL OJENIYI_10/21/2023_Cedar Gate Technologies Recruiter_Senior BI Developer", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 4", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 4", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 4", "InterviewDate_stringindexer_transform": 62.0, "Job_Title_stringindexer_transform": 19.0, "Job_Description_stringindexer_transform": 28.0, "Recruiter_First_Name_stringindexer_transform": 21.0, "Recruiter_Last_Name_stringindexer_transform": 19.0, "Recruiter_Email_Address_stringindexer_transform": 51.0, "Company_name_stringindexer_transform": 50.0, "SetName_stringindexer_transform": 130.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 2.0, "InterviewType_stringindexer_transform": 3.0, "Preparationscore_stringindexer_transform": 7.0, "AutoInterviewsCount_stringindexer_transform": 4.0, "AutoInterviewsDuration_stringindexer_transform": 2.0, "MentorInterviewsCount_stringindexer_transform": 4.0, "MentorInterviewsDuration_stringindexer_transform": 2.0, "Mentor_stringindexer_transform": 11.0, "Applicant_stringindexer_transform": 14.0, "Recruiter_InterviewCount_stringindexer_transform": 8.0, "Technical_InterviewCount_stringindexer_transform": 8.0, "InterviewScore_stringindexer_transform": 2.0}, {"InterviewDate": "10/20/2023", "NoofDays": -41, "LogInterviewID": 196, "QID": 2670, "Job_Title": "Senior BI Developer", "Job_Description": "Position Summary  Reasons you will want this position:  Cedar Gate Technologies is a rapidly growing company with limitless career growth and advancement for top performers Our culture appreciates and rewards creative ideas, especially those that achieve better outcomes for everyone Interact regularly with our executives and senior leadership. Gain valuable work experience with the leader in healthcare technology for value-based care Work in a highly productive environment with a Remote Hybrid work schedule, including a focus on work-life balance. Summary  Cedar Gate Technologies is looking to hire a hard-working and organized Senior BI Developer to be responsible for the upkeep and development of reports and dashboards to support business performance monitoring and decision-making. In this role, you will build and maintain designs for generating reports on financial and market intelligence, collaborate with internal department leaders and global resources to understand business needs, and successfully communicate project results and challenges. You will be part of a talented team that demonstrates superb technical competency, delivering mission-critical reporting infrastructure and ensuring the highest levels of performance and security.   Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.  Job Location: Hybrid Remote in our office in Houston, TX, but also considering Fully Remote within the USA   Required Experience / Qualifications  5 years of experience performing SQL-based data analysis 2 years of experience building friendly end-user reports and dashboards in SSRS, Power BI, or Tableau. Ability to work well under pressure by efficiently prioritizing and managing multiple tasks to meet performance expectations and deadlines. Superior customer service skills with demonstrated experience of this on the resume. Excellent written and verbal communication skills in English. Consistently presents a professional, businesslike image to the public, especially in front of clients, visitors, and internal leadership. BS/BA in a related field to Management Information Systems, Healthcare Management, or Computer Science/Engineering. Demonstrate strong critical thinking and analytical skills. Excellent interpersonal and observational skills in order to assess trainee\u2019s understanding and progress. Possess a positive attitude and a willingness to learn from everyone at all levels of experience. Self-motivated and team-oriented.", "Recruiter_First_Name": "Patrick", "Recruiter_Last_Name": "Gallagher", "Recruiter_Email_Address": "patrick.gallagher@cedargate.com", "Company_name": "Cedar Gate Technologies", "SetName": "EMMANUEL OJENIYI_10/20/2023_Cedar Gate Technologies_Senior BI Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "14", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 53.0, "Job_Title_stringindexer_transform": 19.0, "Job_Description_stringindexer_transform": 14.0, "Recruiter_First_Name_stringindexer_transform": 21.0, "Recruiter_Last_Name_stringindexer_transform": 19.0, "Recruiter_Email_Address_stringindexer_transform": 75.0, "Company_name_stringindexer_transform": 89.0, "SetName_stringindexer_transform": 109.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 28.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/18/2023", "NoofDays": -43, "LogInterviewID": 186, "QID": 2662, "Job_Title": "Senior Reports Developer", "Job_Description": "Title: Senior Report Developer  Location: Remote - Anywhere USA  As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company.  This position will focus on delivery of solutions inside our Data Management/Analytics business unit.  Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Recruiter_First_Name": "Tim", "Recruiter_Last_Name": "Strandberg", "Recruiter_Email_Address": "Tim.Strandberg@datavail.com", "Company_name": "Datavail", "SetName": "EMMANUEL OJENIYI_10/18/2023_Datavail_Senior Reports Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "13", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 7.0, "Job_Title_stringindexer_transform": 62.0, "Job_Description_stringindexer_transform": 17.0, "Recruiter_First_Name_stringindexer_transform": 27.0, "Recruiter_Last_Name_stringindexer_transform": 7.0, "Recruiter_Email_Address_stringindexer_transform": 14.0, "Company_name_stringindexer_transform": 24.0, "SetName_stringindexer_transform": 58.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 23.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/18/2023", "NoofDays": -43, "LogInterviewID": 180, "QID": 2657, "Job_Title": "Business Intelligence Report Analyst", "Job_Description": "Position Overview The Talent Business Intelligence (BI) Reporting Analyst works within Talent & Program Delivery to provide expertise in data analysis, business intelligence tools, and learning and development measurement principles to contribute to the ongoing improvement of employee performance and skills within the organization. This individual will design, develop, and validate dashboards, alerts, and reports that measure business performance across Talent & Delivery programs for management purposes. Ensures information is easily available to users for direct consumption. Conducts analyses of functional business processes and participates in the development of business cases in the support of continuous improvement programs and the implementation of enabling technologies. This individual provides leadership in facilitating information gathering, structured documentation and presentation of findings to all levels of management. This role enhances program effectiveness and enables sound business decisions by providing insights and data which are accurate, relevant, and reliable. Primary Responsibilities To perform this job successfully, an individual must be able to perform each essential duty satisfactorily. The requirements listed below are representative of the knowledge, skill, and/or ability required. Reasonable accommodations may be made to enable individuals with disabilities to perform the essential functions.  Collect and organize data from various sources, including learning management systems (LMS), employee performance training records, surveys, and other relevant systems. Define and track key performance indicators (KPIs) related to learning and development, such as training completion rates, learner engagement, skill acquisition, and business impact. Interprets & analyzes operational metrics in order to create meaningful dashboards & reporting related to Talent & Program Delivery initiatives. Design, build and deploy BI solutions Works with subject matter experts, especially within various departments across the enterprise, to understand business KPIs and resulting outcomes, defining requirements for data integration, reporting, analysis, and descriptive, predictive, and prescriptive business intelligence solution options. Builds and updates process control measurements and changes existing reports and dashboards as needed Increases the usage practices around objective performance data in day-to-day management activities Other duties as assigned Education and Experience  The minimum education, experience, skills and certifications/training required to successfully perform the job:  Bachelor\u2019s degree in business, computer science, information systems or equivalent work experience Minimum 4 years\u2019 experience Oracle BI, SAP Business Objects etc. Knowledge of Data Warehouse platforms Knowledge of languages such as Python, R, Scala, SQL, etc. Experience working with multidimensional data sets/databases such as SQL, Salesforce, JSON, etc. Strong MS Office skills, especially with Power BI and Excel Understanding of report writing required Experience with Lean Six Sigma preferred", "Recruiter_First_Name": "Elisa", "Recruiter_Last_Name": "Wingate", "Recruiter_Email_Address": "EWingate@paylocity.com", "Company_name": "Paylocity", "SetName": "Calvine  Cheptoo _10/18/2023_Paylocity_Business Intelligence Report Analyst", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 1", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 1", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 3", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 2", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 7.0, "Job_Title_stringindexer_transform": 35.0, "Job_Description_stringindexer_transform": 107.0, "Recruiter_First_Name_stringindexer_transform": 42.0, "Recruiter_Last_Name_stringindexer_transform": 74.0, "Recruiter_Email_Address_stringindexer_transform": 32.0, "Company_name_stringindexer_transform": 33.0, "SetName_stringindexer_transform": 107.0, "CandidateID_stringindexer_transform": 2.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 6.0, "MentorInterviewsDuration_stringindexer_transform": 3.0, "Mentor_stringindexer_transform": 15.0, "Applicant_stringindexer_transform": 26.0, "Recruiter_InterviewCount_stringindexer_transform": 16.0, "Technical_InterviewCount_stringindexer_transform": 10.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "10/18/2023", "NoofDays": -43, "LogInterviewID": 193, "QID": 2668, "Job_Title": "Data Engineer", "Job_Description": "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.  This position is remote. We are unable to offer work sponsorship for this role.  We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.  Your impact:  Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company's product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform. About you:  Microsoft SQL Server solutions DB Architecture Stored Procedure SSIS Performance Tuning Enterprise Analytics Toolsets Examples: MicroStrategy, Power BI, Tableau, Looker Python Scripting Agile Development Process Jira 3+ years hands-on experience in developing and architecture of large-scale, multi-tenant, real-time, customer-facing data platforms using relational and non-relational database platforms and micro-services architecture patterns. 3+ years hands-on experience in developing Microsoft SQL Server solutions including DB architecture, stored procedure, SSIS and performance tuning. 1+ years hands-on experience in designing and developing enterprise analytics reports and dashboards that are deployed into a customer-facing analytics reporting platform. 1+ years hands-on experience with enterprise analytics back-end components including schema, analytics engine and web layer to support a customer-facing analytics reporting platform. 1+ years hands-on experience with REST API, Python scripting experience is a plus. Significant experience collaborating with individuals in product development and engineering roles to envision and deliver a customer-facing analytics report platform. Experience in delivering an agile environment and understand how to maximize results from sprints, releases and road maps. Experience in creating a variety of architecture and business artifacts to communicate all aspects of a proposed solution to a diverse audience comprised of technical and business team members. Experience in designing and leading experiments or proofs of concept which increase team knowledge and bring about effective technical and business decisions. Keep up with industry trends, enjoy teaching yourself new technology, and enjoy talking about different technical problems and their solutions. Courage to debate with colleagues and drive out the best solution for the organization, not just your solution. One or more industry certifications in a relevant data architecture or engineering topic area.", "Recruiter_First_Name": "Aaron", "Recruiter_Last_Name": "Talbert", "Recruiter_Email_Address": "aaron.talbert@buyersedgeplatform.com", "Company_name": "ArrowStream", "SetName": "Yama Touray_10/18/2023_ArrowStream_Data Engineer", "CandidateID": "37640", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "6", "AutoInterviewsDuration": "425", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 7.0, "Job_Title_stringindexer_transform": 2.0, "Job_Description_stringindexer_transform": 84.0, "Recruiter_First_Name_stringindexer_transform": 15.0, "Recruiter_Last_Name_stringindexer_transform": 10.0, "Recruiter_Email_Address_stringindexer_transform": 24.0, "Company_name_stringindexer_transform": 18.0, "SetName_stringindexer_transform": 46.0, "CandidateID_stringindexer_transform": 7.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 4.0, "AutoInterviewsCount_stringindexer_transform": 7.0, "AutoInterviewsDuration_stringindexer_transform": 8.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 6.0, "Applicant_stringindexer_transform": 8.0, "Recruiter_InterviewCount_stringindexer_transform": 4.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/17/2023", "NoofDays": -44, "LogInterviewID": 189, "QID": 2665, "Job_Title": "Navy ERP Level III Data Analyst", "Job_Description": "NavAide is on the lookout for dedicated professionals committed to supporting the Navy's strategic alignment in enhancing the FM workforce, standardizing business processes, and leveraging data analytics. Specifically, this role will engage deeply in the Navy ERP data migration initiative and facilitate close collaboration with FM&C and Government clients. If you thrive in dynamic, challenging settings and have a penchant for pioneering change and innovation, then this opportunity might just be your next great leap.  Duties & Responsibilities:  Work in tandem with FM&C and Government clients, understanding data migration needs, and aligning them with the strategic aspirations of the ASN FM&C. Lead and oversee the creation and deployment of a Program Management Plan, touching crucial facets like organizational structure, transition plan, risk management, and performance metrics. Steer data health assessments and migration processes including, but not limited to, data mapping, post-migration data validation, and business transition. Oversee financial reconciliation, DDRS reporting, and user acceptance testing. Be at the forefront of organizational change management by crafting strategies and conducting change readiness assessments. Play a pivotal role in training strategy development, execution, and user management to ensure a smooth and hitch-free data migration process. Provide unwavering leadership to subordinate teams, making sure of strict adherence to financial standards and guidance. Knowledge, Skills & Abilities:  Demonstrable expertise in IT development, database management, and data analytics. Excellent communication, negotiation, and problem-solving acumen. Strong alignment with NavAide's ethos and guiding principles. Proficiency in tools and languages such as SQL, Python, and R, along with familiarity with data visualization tools like Tableau and Power BI. In-depth understanding of Navy ERP migration or related large-scale data migration projects. Education & Experience:  A Bachelor's Degree from an accredited institution in a field relevant to the role. Between 6-15+ years of work experience, with a preference for those who have engaged with State or Federal Government agencies or sizable corporations. While not mandatory, certifications or exposure to the Department of Navy Financial Management & Systems would be an added advantage.", "Recruiter_First_Name": "Lauren", "Recruiter_Last_Name": "Poynter", "Recruiter_Email_Address": "candidate-5eba678d684f@navaide.breezy-mail.com", "Company_name": "NavAide", "SetName": "Calvine  Cheptoo _10/17/2023_NavAide_Navy ERP Level III Data Analyst", "CandidateID": "38532", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "195", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 17.0, "Job_Title_stringindexer_transform": 39.0, "Job_Description_stringindexer_transform": 8.0, "Recruiter_First_Name_stringindexer_transform": 14.0, "Recruiter_Last_Name_stringindexer_transform": 33.0, "Recruiter_Email_Address_stringindexer_transform": 104.0, "Company_name_stringindexer_transform": 75.0, "SetName_stringindexer_transform": 24.0, "CandidateID_stringindexer_transform": 2.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 3.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 35.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 4.0, "Applicant_stringindexer_transform": 7.0, "Recruiter_InterviewCount_stringindexer_transform": 4.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/17/2023", "NoofDays": -44, "LogInterviewID": 192, "QID": 2667, "Job_Title": "ETL Developer", "Job_Description": "Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.", "Recruiter_First_Name": "Paige", "Recruiter_Last_Name": "Bucher", "Recruiter_Email_Address": "Paige.Bucher@insightglobal.com", "Company_name": "Insight Global", "SetName": "EMMANUEL OJENIYI_10/17/2023_Insight Global_ETL Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "12", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 17.0, "Job_Title_stringindexer_transform": 14.0, "Job_Description_stringindexer_transform": 87.0, "Recruiter_First_Name_stringindexer_transform": 97.0, "Recruiter_Last_Name_stringindexer_transform": 95.0, "Recruiter_Email_Address_stringindexer_transform": 98.0, "Company_name_stringindexer_transform": 0.0, "SetName_stringindexer_transform": 19.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 18.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/14/2023", "NoofDays": -47, "LogInterviewID": 175, "QID": 2652, "Job_Title": "Power BI Reporting Specialist", "Job_Description": "This is the job\u2026. Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026. 3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026. Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "Recruiter_First_Name": "Kelly", "Recruiter_Last_Name": "Dye", "Recruiter_Email_Address": "kdye@acronym.com", "Company_name": "Acronym", "SetName": "Mary Gathogo_10/14/2023_Acronym_Power BI Reporting Specialist", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 44.0, "Job_Title_stringindexer_transform": 15.0, "Job_Description_stringindexer_transform": 58.0, "Recruiter_First_Name_stringindexer_transform": 3.0, "Recruiter_Last_Name_stringindexer_transform": 3.0, "Recruiter_Email_Address_stringindexer_transform": 1.0, "Company_name_stringindexer_transform": 35.0, "SetName_stringindexer_transform": 131.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 2.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 5.0, "Applicant_stringindexer_transform": 2.0, "Recruiter_InterviewCount_stringindexer_transform": 6.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "10/13/2023", "NoofDays": -48, "LogInterviewID": 187, "QID": 2663, "Job_Title": "Product BI Analyst", "Job_Description": "About the job ABOUT US Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards! ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable. Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns. With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement. THE ROLE The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting. We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements. You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units. KEY TASKS & RESPONSIBILITIES Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Liz", "Recruiter_Last_Name": "Ostrander", "Recruiter_Email_Address": "lizostrander@auctiontechnologygroup.com", "Company_name": "Auction Technology Group", "SetName": "JORUM MWANGI_10/13/2023_Auction Technology Group_Product BI Analyst", "CandidateID": "37975", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "AMINAT OKERINDE", "Applicant": "JORUM MWANGI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 40.0, "Job_Title_stringindexer_transform": 5.0, "Job_Description_stringindexer_transform": 4.0, "Recruiter_First_Name_stringindexer_transform": 0.0, "Recruiter_Last_Name_stringindexer_transform": 4.0, "Recruiter_Email_Address_stringindexer_transform": 4.0, "Company_name_stringindexer_transform": 25.0, "SetName_stringindexer_transform": 77.0, "CandidateID_stringindexer_transform": 13.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 9.0, "Applicant_stringindexer_transform": 17.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/13/2023", "NoofDays": -48, "LogInterviewID": 179, "QID": 2656, "Job_Title": "BI Developer", "Job_Description": "No description details", "Recruiter_First_Name": "Brittany", "Recruiter_Last_Name": "Butler", "Recruiter_Email_Address": "bbutler@tetratec.com", "Company_name": "TETRA Technologies", "SetName": "EMMANUEL OJENIYI_10/13/2023_TETRA Technologies_BI Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "11", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 40.0, "Job_Title_stringindexer_transform": 3.0, "Job_Description_stringindexer_transform": 3.0, "Recruiter_First_Name_stringindexer_transform": 82.0, "Recruiter_Last_Name_stringindexer_transform": 67.0, "Recruiter_Email_Address_stringindexer_transform": 82.0, "Company_name_stringindexer_transform": 34.0, "SetName_stringindexer_transform": 52.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 13.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/12/2023", "NoofDays": -49, "LogInterviewID": 182, "QID": 2659, "Job_Title": "Senior Business Analyst Data Visualization", "Job_Description": "Senior Analyst \u2013 Business Strategy and Data Visualization  Incredible well-established, high growth Texas based company is looking for a to join their San Antonio team! Company offers challenge, is team-oriented, has a great work/life balance and a career path! This Company is recognized for its customer service focus and single digit turnover!  The Senior Analyst is responsible for analyzing data and presenting insightful recommendations and findings!  Essential Functions:  \u00b7 Informs marketing strategy by analyzing marketing campaign effectiveness and ROI, sharing insights about response rates across channels and audiences with Marketing Managers  \u00b7 Perform analysis and creates insight that inform sales and marketing decisions in operations, sales, marketing, and support groups.  \u00b7 Presents valuable insightful information and recommends actionable items.  \u00b7 Downloads data from multiple systems and reporting databases, develops and disseminates reports to end users.  \u00b7 Responds to data requests from management and performs basic reporting.  \u00b7 Develops and executes complex reports and custom queries.  \u00b7 Prepares technical reports by collecting, analyzing, and summarizing information and trends from various systems.  \u00b7 Maintains databases for the collection, analysis, and dissemination of operational data throughout the company.  \u00b7 Entry, extraction, and ad-hoc reporting from various systems to support business objectives and the needs of the department.  \u00b7 Provides report training to applicable departments/roles.  \u00b7 Creates and provides opportunity and market share reports and analysis using all applicable business reporting databases.  Qualifications:  \u00b7 High school diploma or equivalent required; BA/BS, preferred.  \u00b7 A minimum of three years of work-related experience required.  \u00b7 Strong knowledge of data analytics and applicable reporting tools  \u00b7 Strong analytical and database management skills  \u00b7 Strong working knowledge and/or experience including but not limited to DBS, Tableau, Alteryx, WMS, Salesforce, MS Dynamics and Outlook  \u00b7 Ability to identify problems and to review related information to develop and evaluate options and implement solutions.  \u00b7 Consulting and influencing abilities.  \u00b7 Excellent interpersonal and customer service skills  \u00b7 Creative ability to understand the implications of new information for both current and future problem-solving and decision-making.  \u00b7 Ability to train and motivate others.  \u00b7 Outgoing personality  #IND1  Job Type: Full-time  Pay: $81,000.00 - $88,000.00 per year  Benefits:  401(k) 401(k) matching Dental insurance Flexible spending account Health insurance Health savings account Paid time off Parental leave Professional development assistance Tuition reimbursement Vision insurance Schedule:  Monday to Friday Work Location: Hybrid remote in Irving, TX 75062", "Recruiter_First_Name": "Vanessa", "Recruiter_Last_Name": "Burk", "Recruiter_Email_Address": "vanessa@zarecruiting.com", "Company_name": "Z & A Recruiting", "SetName": "LILIAN NJERI_10/12/2023_Z & A Recruiting_Senior Business Analyst Data Visualization", "CandidateID": "37295", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "5", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 19.0, "Job_Title_stringindexer_transform": 69.0, "Job_Description_stringindexer_transform": 34.0, "Recruiter_First_Name_stringindexer_transform": 67.0, "Recruiter_Last_Name_stringindexer_transform": 103.0, "Recruiter_Email_Address_stringindexer_transform": 63.0, "Company_name_stringindexer_transform": 91.0, "SetName_stringindexer_transform": 57.0, "CandidateID_stringindexer_transform": 6.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 3.0, "Applicant_stringindexer_transform": 5.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 7.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/12/2023", "NoofDays": -49, "LogInterviewID": 181, "QID": 2658, "Job_Title": "Business Intelligence Developer", "Job_Description": "Primarily responsible for the data warehouse ETL framework and architecture Partner and align with business leaders and stakeholders to understand the business needs and address them using the many variations of visualizers PowerBI has to offer Provide training, guidance, and support to users Build & modify a solid data infrastructure, to include underpinning enterprise scale BI analytics / reporting platform, add / create new data models and integrate new data as needed Monitor analytics and metrics results Interact with internal clients to evaluate performance, availability and to collaborate on ways to improve the platform / reporting data Identify and act upon data infrastructure needs, data warehouse design, infrastructure maintenance and investment areas Manage infrastructure projects from beginning to end, including ideation, execution, socialization, and stakeholder management Ensure data integrity and compliance with any and all data security policies Translate business requirements into technical documentation Debug, monitor and troubleshoot BI Solution in development and production environments Conduct and participate in code walkthroughs and document technical design Follow the release cycles and implement on-time delivery of bug fixes, change requests and enhancements Other Duties as assigned", "Recruiter_First_Name": "Luca", "Recruiter_Last_Name": "Talone", "Recruiter_Email_Address": "luca.talone@niceforyou.com", "Company_name": "Nice North America", "SetName": "Talq Tera_10/13/2023_Nice North America_Business Intelligence Developer", "CandidateID": "39119", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "4", "AutoInterviewsDuration": "75", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 19.0, "Job_Title_stringindexer_transform": 0.0, "Job_Description_stringindexer_transform": 1.0, "Recruiter_First_Name_stringindexer_transform": 8.0, "Recruiter_Last_Name_stringindexer_transform": 17.0, "Recruiter_Email_Address_stringindexer_transform": 15.0, "Company_name_stringindexer_transform": 108.0, "SetName_stringindexer_transform": 28.0, "CandidateID_stringindexer_transform": 4.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 3.0, "AutoInterviewsCount_stringindexer_transform": 6.0, "AutoInterviewsDuration_stringindexer_transform": 34.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 3.0, "Recruiter_InterviewCount_stringindexer_transform": 9.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/11/2023", "NoofDays": -50, "LogInterviewID": 155, "QID": 2632, "Job_Title": "Data Developer 2", "Job_Description": "5+ years SQL Development  Role Experience with SSIS and SSRS Looking for local to the Woodlands(greater Houston area).  Available for hybrid-remote work, but not looking to hire anyone remote that isn\u2019t local.  Basically if they are too far away that can\u2019t ask them to come into the office tomorrow, then they are too far away.  SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.   SQL Server Developer III Qualifications  Ideally 5- 7 years\u2019 experience in a SQL Server development role required. Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. 2+ years of experience monitoring database performance and tuning to maximize efficiency required. SQL Server Integration and Reporting Services experience required. High School Diploma or equivalent required. Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.", "Recruiter_First_Name": "Thomas", "Recruiter_Last_Name": "Johnson", "Recruiter_Email_Address": "ThomasJ@woodforest.com", "Company_name": "Procom - Woodforest National Bank", "SetName": "OLUKAYODE AKINRIMISI_10/11/2023_Procom - Woodforest National Bank_Data Developer 2", "CandidateID": "31661", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "6", "AutoInterviewsDuration": "468", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 24.0, "Job_Title_stringindexer_transform": 36.0, "Job_Description_stringindexer_transform": 66.0, "Recruiter_First_Name_stringindexer_transform": 32.0, "Recruiter_Last_Name_stringindexer_transform": 15.0, "Recruiter_Email_Address_stringindexer_transform": 79.0, "Company_name_stringindexer_transform": 78.0, "SetName_stringindexer_transform": 17.0, "CandidateID_stringindexer_transform": 3.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 4.0, "AutoInterviewsCount_stringindexer_transform": 7.0, "AutoInterviewsDuration_stringindexer_transform": 46.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 6.0, "Recruiter_InterviewCount_stringindexer_transform": 3.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/11/2023", "NoofDays": -50, "LogInterviewID": 178, "QID": 2655, "Job_Title": "Business Intelligence Analyst II", "Job_Description": "Overview:Shift4 (NYSE: FOUR) is boldly redefining commerce by simplifying complex payments ecosystems across the world. As the leader in commerce-enabling technology, Shift4 powers billions of transactions annually for hundreds of thousands of businesses in virtually every industry. For more information, visit www.shift4.com. We are looking for a Business Intelligence Analyst (BA) with a Data Mapping Focus to join our Information Technology Group. As a BIA, you will be understanding business operations and gather, analyze and identify data from their sources to map to target databases and reports of the Business Intelligence solution to ensure the flow of information and data to the entire organization. The position requires at least 3 years of prior experience as a Business Intelligence Analyst within Data Mapping. We are looking for individuals that are extremely self-sufficient, available to work flexible hours and hold themselves to the highest standards of professionalism. Responsibilities:  Responsible for the BI Data Mapping, which includes analyzing business requirements from stakeholders, identifying location of necessary data from technical systems, and defining transformations to meet target needs. Create and maintain documents of needed BI Data Mapping. Conduct source data profiling for anomalies and information summaries. Interpret data from a business perspective to aid in the modeling of the data targets such as business intelligence reports or an enterprise data warehouse. Supports the strategy for how data will be documented, handled, stored and processed to support the requirements from across all business units. Provides support for the ETL and BI developers for all data related analysis, questions and issues. Maintain accountability of Data Mapping using our Software Development Life Cycle (SDLC). Contribute to and enforce the use of the Business Intelligence solution. Support key metrics and shared goals that determine success for a particular area. Qualifications:  3-5+ years of experience in business intelligence analysis surrounding system knowledge and data mapping. Advanced experience of technical systems from both the application and data repository points of view. Advanced experience in SQL proficiency (T-SQL, MySQL, and PostgreSQL). Advanced experience in extracting, transforming and mining of data. Advanced experience with BI tools such as Tableau and ETL tools like SSIS. Advanced experience working with various data sources such as AWS Redshift, Postgres, SQL Server, Amazon Athena, Excel, Flat Files, etc. Advanced experience working with large data sets from sources such as AWS Redshift, Postgres, SQL Server, etc. Experience working with an Enterprise Data Warehouse and Dimensional Databases is a plus. Advanced experience of the SDLC and how BIA processes fit into KANBAN and Scrum Frameworks. Experience with Jira and Confluence is a plus. Ability to prioritize multiple tasks and easily adjust to changing priorities. Ability to identify problems, initiate solutions, and effectively collaborate and communicate with team members. Have excellent verbal and written communication skills. Location: Remote  Location: 2202 N. Irving Street, Allentown, PA 18109  Job Type: Full-time  Experience:  SQL: 3 years (Required) Oracle: 3 years (Preferred) finding, understand and working with data in a variety of databases/files: 3 years (Required) understanding the business process of systems: 3 years (Required) data mapping: 3 years (Required) documentation of data mapping (reports): 3 years (Required) writing queries and simple database view: 3 years (Required) Microsoft Excel: 3 years (Required)", "Recruiter_First_Name": "Rita", "Recruiter_Last_Name": "Varga", "Recruiter_Email_Address": "rita.varga@shift4.com", "Company_name": "Shift4 Payments", "SetName": "Mary Gathogo_10/11/2023_Shift4 Payments_Business Intelligence Analyst II", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 1", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 2", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 2", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 3", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 2", "InterviewDate_stringindexer_transform": 24.0, "Job_Title_stringindexer_transform": 67.0, "Job_Description_stringindexer_transform": 108.0, "Recruiter_First_Name_stringindexer_transform": 39.0, "Recruiter_Last_Name_stringindexer_transform": 78.0, "Recruiter_Email_Address_stringindexer_transform": 64.0, "Company_name_stringindexer_transform": 57.0, "SetName_stringindexer_transform": 64.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 3.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 5.0, "MentorInterviewsDuration_stringindexer_transform": 3.0, "Mentor_stringindexer_transform": 15.0, "Applicant_stringindexer_transform": 19.0, "Recruiter_InterviewCount_stringindexer_transform": 25.0, "Technical_InterviewCount_stringindexer_transform": 9.0, "InterviewScore_stringindexer_transform": 4.0}, {"InterviewDate": "10/10/2023", "NoofDays": -51, "LogInterviewID": 177, "QID": 2654, "Job_Title": "Product BI Analyst", "Job_Description": "About the job ABOUT US Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards! ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable. Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns. With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement. THE ROLE The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting. We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements. You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units. KEY TASKS & RESPONSIBILITIES Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Liz", "Recruiter_Last_Name": "Ostrander", "Recruiter_Email_Address": "lizostrander@auctiontechnologygroup.com", "Company_name": "ATG (Auction Technology Group)", "SetName": "Nadege Nguemo Mbouyo_10/10/2023_ATG (Auction Technology Group)_Product BI Analyst", "CandidateID": "34701", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 70.0, "Job_Title_stringindexer_transform": 5.0, "Job_Description_stringindexer_transform": 4.0, "Recruiter_First_Name_stringindexer_transform": 0.0, "Recruiter_Last_Name_stringindexer_transform": 4.0, "Recruiter_Email_Address_stringindexer_transform": 4.0, "Company_name_stringindexer_transform": 12.0, "SetName_stringindexer_transform": 40.0, "CandidateID_stringindexer_transform": 8.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 10.0, "Recruiter_InterviewCount_stringindexer_transform": 9.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/9/2023", "NoofDays": -52, "LogInterviewID": 176, "QID": 2653, "Job_Title": "Product BI Analyst", "Job_Description": "About the job ABOUT US  Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards!   ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable.   Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns.     With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement.   THE ROLE  The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting.   We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements.   You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units.   KEY TASKS & RESPONSIBILITIES   Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Liz", "Recruiter_Last_Name": "Ostrander", "Recruiter_Email_Address": "lizostrander@auctiontechnologygroup.com", "Company_name": "Auction Technology Group", "SetName": "Nadege Nguemo Mbouyo_10/09/2023_Auction Technology Group_Product BI Analyst", "CandidateID": "34701", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 2", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 3", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 2", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 4", "InterviewDate_stringindexer_transform": 49.0, "Job_Title_stringindexer_transform": 5.0, "Job_Description_stringindexer_transform": 24.0, "Recruiter_First_Name_stringindexer_transform": 0.0, "Recruiter_Last_Name_stringindexer_transform": 4.0, "Recruiter_Email_Address_stringindexer_transform": 4.0, "Company_name_stringindexer_transform": 25.0, "SetName_stringindexer_transform": 85.0, "CandidateID_stringindexer_transform": 8.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 5.0, "MentorInterviewsDuration_stringindexer_transform": 27.0, "Mentor_stringindexer_transform": 13.0, "Applicant_stringindexer_transform": 18.0, "Recruiter_InterviewCount_stringindexer_transform": 6.0, "Technical_InterviewCount_stringindexer_transform": 10.0, "InterviewScore_stringindexer_transform": 3.0}, {"InterviewDate": "10/8/2023", "NoofDays": -53, "LogInterviewID": 172, "QID": 2649, "Job_Title": "Product BI Analyst", "Job_Description": "Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Matea", "Recruiter_Last_Name": "Jerkovic", "Recruiter_Email_Address": "mateajerkovic@auctiontechnologygroup.com", "Company_name": "ATG (Auction Technology Group)", "SetName": "Nadege Nguemo Mbouyo_10/08/2023_ATG (Auction Technology Group)_Product BI Analyst", "CandidateID": "34701", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 51.0, "Job_Title_stringindexer_transform": 5.0, "Job_Description_stringindexer_transform": 9.0, "Recruiter_First_Name_stringindexer_transform": 48.0, "Recruiter_Last_Name_stringindexer_transform": 55.0, "Recruiter_Email_Address_stringindexer_transform": 48.0, "Company_name_stringindexer_transform": 12.0, "SetName_stringindexer_transform": 83.0, "CandidateID_stringindexer_transform": 8.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 10.0, "Recruiter_InterviewCount_stringindexer_transform": 3.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 162, "QID": 2639, "Job_Title": "Data Developer II", "Job_Description": "SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.", "Recruiter_First_Name": "Milind", "Recruiter_Last_Name": "Sethi", "Recruiter_Email_Address": "milinds@procomservices.com", "Company_name": "Woodforest National Bank", "SetName": "OLUKAYODE AKINRIMISI_10/07/2023_Woodforest National Bank_Data Developer II", "CandidateID": "31661", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "997", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 0.0, "Job_Title_stringindexer_transform": 16.0, "Job_Description_stringindexer_transform": 106.0, "Recruiter_First_Name_stringindexer_transform": 26.0, "Recruiter_Last_Name_stringindexer_transform": 20.0, "Recruiter_Email_Address_stringindexer_transform": 8.0, "Company_name_stringindexer_transform": 5.0, "SetName_stringindexer_transform": 3.0, "CandidateID_stringindexer_transform": 3.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 6.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 6.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 171, "QID": 2648, "Job_Title": "Data Developer II", "Job_Description": "The Data Developer II will be responsible for developing, supporting, and enhancing database programs and reports using the SQL platform. This senior position typically handles projects of a more complex nature and serves as a resource to junior team members.  Key Responsibilities: \u00b7  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. \u00b7  Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. \u00b7  Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. \u00b7  Monitors database performance and tunes to maximize efficiency. \u00b7  Develops new and enhances existing database objects and packages to advance functionality and automation of systems.  Competencies Required: \u00b7  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. \u00b7  Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. \u00b7  Self-starter with the ability to work independently while supporting a team environment. \u00b7  Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. \u00b7  Flexibility to provide after hours and weekend support on occasion to support business needs. \u00b7  Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. \u00b7  Proficient with database performance monitoring and tuning to maximize efficiency. \u00b7  Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems. Qualifications   Minimum Qualifications/Experience: \u00b7  5-7 years\u2019 experience in a SQL Server development role required.    \u00b7  Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. \u00b7  2+ years of experience monitoring database performance and tuning to maximize efficiency required. \u00b7  SQL Server Integration and Reporting Services experience required.  Formal Education & Certification: \u00b7  High School Diploma or equivalent required. \u00b7  Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.  Work Status: \u00b7  Full-Time.  Supervisory Responsibility: \u00b7  None.  Travel: \u00b7  No travel expected.  Working Conditions: \u00b7  Conditions involve lifting no more than ten pounds, sitting most of the time, but may involve walking, moving, or standing for brief periods, and occasionally lifting and carrying articles like files, ledgers, folders, etc.", "Recruiter_First_Name": "Milind", "Recruiter_Last_Name": "Sethi", "Recruiter_Email_Address": "milinds@procomservices.com", "Company_name": "Woodforest National Bank", "SetName": "OLUKAYODE AKINRIMISI_10/07/2023_Woodforest National Bank_Data Developer II", "CandidateID": "31661", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 0.0, "Job_Title_stringindexer_transform": 16.0, "Job_Description_stringindexer_transform": 132.0, "Recruiter_First_Name_stringindexer_transform": 26.0, "Recruiter_Last_Name_stringindexer_transform": 20.0, "Recruiter_Email_Address_stringindexer_transform": 8.0, "Company_name_stringindexer_transform": 5.0, "SetName_stringindexer_transform": 3.0, "CandidateID_stringindexer_transform": 3.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 6.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 166, "QID": 2643, "Job_Title": "Senior IT Business System Analyst", "Job_Description": "Summary  Under general supervision, this position will involve reviewing, researching, analyzing, monitoring, and manipulating school and business-related data within many database systems, implementing information delivery improvements, ensuring data accuracy, and creating daily, weekly, and quarterly reports and dashboards, including support ticketing processes.   Essential Functions  Demonstrates expert proficiency in the design, development, and implementation of data, reporting and database technologies and tools, Consults with businesses to resolve complex data issues Champions\u2019 efforts to extend existing data architecture to ensure new and existing user demands and application requirements are met on an ongoing basis Advise database design/code through in-depth understanding of business needs/functionalities and provides expertise in devising, negotiating, and defending database schema and data models Consults with database administration and client areas and provides solutions in resolving complex issues during the translation to a physical database design Provides knowledge and expertise of enterprise data to assist Spartan functional groups in the creation and definition of internal and external dashboards, reports, and KPIs Provides direction and guidance on reports and visualizations and ensures recommendations are aligned with user needs and capabilities Uses expertise to evaluate market trends and provide input into the selection of tools and any necessary changes to the company\u2019s data management, reporting and visualization environment Serve as a mentor to other data analyst within IT and throughout organization Accomplishes engineering and organization mission by completing related results as needed  Knowledge / Skills:  Experience in consultative requirements elicitation, design and building of data management, reporting, and visualization solutions Motivated and able to quickly learn new technologies and tools 5+ years report and analysis development experience Experience scripting in TSQL and other database technologies Experience in SSRS or equivalent technologies Experience with PowerBI, Tableau or equivalent technologies (Power BI development/design experience is a plus) Ability to develop, design and solution specifications Demonstrated record of perusing and applying new advancements in information technology to solving business problems related to data management, reporting, and data visualization Must be a self-starter with effective oral and written communication skills. Must also be customer-service oriented and an experienced problem solver who seeks assistance when necessary Education and Work Experience  High School diploma or GED required Bachelor\u2019s degree preferred in computer science or related discipline, or equivalent work experience required 5 to 7 years\u2019 experience directly related to duties and responsibilities specified", "Recruiter_First_Name": "Preeti", "Recruiter_Last_Name": "Singh", "Recruiter_Email_Address": "PREETI.SINGH@msg.paycomonline.com", "Company_name": "Spartan College", "SetName": "Talq Tera_10/07/2023_Spartan College_Senior IT Business System Analyst", "CandidateID": "39119", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 0.0, "Job_Title_stringindexer_transform": 60.0, "Job_Description_stringindexer_transform": 33.0, "Recruiter_First_Name_stringindexer_transform": 45.0, "Recruiter_Last_Name_stringindexer_transform": 106.0, "Recruiter_Email_Address_stringindexer_transform": 41.0, "Company_name_stringindexer_transform": 84.0, "SetName_stringindexer_transform": 76.0, "CandidateID_stringindexer_transform": 4.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 3.0, "Recruiter_InterviewCount_stringindexer_transform": 4.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 169, "QID": 2646, "Job_Title": "Power BI Specialist", "Job_Description": "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "Recruiter_First_Name": "Kelly", "Recruiter_Last_Name": "Dye", "Recruiter_Email_Address": "kdye@acronym.com", "Company_name": "Acronym US", "SetName": "Mary Gathogo_10/07/2023_Acronym US_Power BI Specialist", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "136", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "11", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 0.0, "Job_Title_stringindexer_transform": 38.0, "Job_Description_stringindexer_transform": 68.0, "Recruiter_First_Name_stringindexer_transform": 3.0, "Recruiter_Last_Name_stringindexer_transform": 3.0, "Recruiter_Email_Address_stringindexer_transform": 1.0, "Company_name_stringindexer_transform": 17.0, "SetName_stringindexer_transform": 38.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 6.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 28.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 13.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 165, "QID": 2642, "Job_Title": "Sr Data Analyst", "Job_Description": "Sr Data Analyst Partnered with a client who simplifies shipping logistics for merchants and warehouses, offering customized API solutions that streamline the shipping process and make logistics a seamless and stress- free experience. Position Overview: As a Senior Data Analyst, you will play a key role in providing valuable insights and supporting data- driven decision-making processes. You will work closely with cross-functional teams to analyze complex data sets, identify trends, and help drive business growth. The ideal candidate will have a minimum of 5 years of experience in data analysis, strong proficiency in VBA, and advanced MS Excel skills.  Key Responsibilities: \uf0b7 Perform in-depth data analysis to identify trends, patterns, and insights. \uf0b7 Create and maintain complex Excel models using VBA to automate repetitive tasks and streamline processes. \uf0b7 Create macros that can be changed easily in a fast-changing environment. \uf0b7 Provide recommendations for process improvements based on data analysis. \uf0b7 Stay updated on industry trends and best practices in data analysis. \uf0b7 Mentor and provide guidance to junior analysts when necessary. Qualifications: \uf0b7 Bachelor&#39;s degree in a related field (e.g., Statistics, Mathematics, Computer Science). \uf0b7 Minimum of 5 years of experience as a Data Analyst. \uf0b7 Proficiency in VBA for Excel automation is a must. \uf0b7 Advanced skills in Microsoft Excel, including pivot tables, complex formulas, and data visualization. \uf0b7 Strong analytical and problem-solving skills. \uf0b7 Excellent communication and teamwork abilities. \uf0b7 Ability to prioritize and multi-task. \uf0b7 Attention to detail and high level of accuracy. \uf0b7 Experience with data visualization tools (e.g., Tableau, Power BI). \uf0b7 Knowledge of shipping, logistics, or eCommerce industry is not mandatory, but a plus. \uf0b7 Fluency in Mandarin is not mandatory, a plus.", "Recruiter_First_Name": "Lisa", "Recruiter_Last_Name": "Choe", "Recruiter_Email_Address": "lchoe@ledgent.com", "Company_name": "Ledgent Technology", "SetName": "Calvine  Cheptoo _10/07/2023_Ledgent Technology_Sr Data Analyst", "CandidateID": "38532", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "251", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "6", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 0.0, "Job_Title_stringindexer_transform": 27.0, "Job_Description_stringindexer_transform": 69.0, "Recruiter_First_Name_stringindexer_transform": 92.0, "Recruiter_Last_Name_stringindexer_transform": 96.0, "Recruiter_Email_Address_stringindexer_transform": 42.0, "Company_name_stringindexer_transform": 30.0, "SetName_stringindexer_transform": 101.0, "CandidateID_stringindexer_transform": 2.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 5.0, "AutoInterviewsCount_stringindexer_transform": 3.0, "AutoInterviewsDuration_stringindexer_transform": 43.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 20.0, "Mentor_stringindexer_transform": 4.0, "Applicant_stringindexer_transform": 7.0, "Recruiter_InterviewCount_stringindexer_transform": 3.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 170, "QID": 2647, "Job_Title": "Business Intelligence Analyst", "Job_Description": "Role Summary  This role\u2019s objectives are to develop reports in Power BI that meet our clients\u2019 expectations. We anticipate this will require consequential expertise in working with Power BI, which includes DAX programming.   Duties and Responsibilities  Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.    Qualifications and Skills  Demonstrable expertise in working with Power BI, including DAX programming. Please note that having experience is insufficient. Succeeding in this role requires demonstrable expertise building sophisticated Power BI dashboards and interfaces.  Experience successfully engaging with clients to develop user-facing reports. Excellent verbal and written communication skills. Experience with other BI tools, notably Tableau, is strongly desired, but not required.    Why Abett?   Opportunity to join a high-growth, venture backed software company, with a clear and important mission.  Competitive market salary and equity options. Flexible hours/scheduling. Work remotely. Fully paid health, dental and vision benefits available. Unlimited PTO.", "Recruiter_First_Name": "Kate", "Recruiter_Last_Name": "Lofgren", "Recruiter_Email_Address": "kate@abett.com", "Company_name": "Abett", "SetName": "Avworo  OGHENEKEVWE _10/07/2023_Abett_Business Intelligence Analyst", "CandidateID": "38457", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "21", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "46", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 0.0, "Job_Title_stringindexer_transform": 18.0, "Job_Description_stringindexer_transform": 22.0, "Recruiter_First_Name_stringindexer_transform": 10.0, "Recruiter_Last_Name_stringindexer_transform": 27.0, "Recruiter_Email_Address_stringindexer_transform": 26.0, "Company_name_stringindexer_transform": 10.0, "SetName_stringindexer_transform": 5.0, "CandidateID_stringindexer_transform": 9.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 5.0, "AutoInterviewsCount_stringindexer_transform": 3.0, "AutoInterviewsDuration_stringindexer_transform": 20.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 5.0, "Mentor_stringindexer_transform": 8.0, "Applicant_stringindexer_transform": 9.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 173, "QID": 2650, "Job_Title": "Business Intelligence Analyst", "Job_Description": "Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.", "Recruiter_First_Name": "Kate", "Recruiter_Last_Name": "Lofgren", "Recruiter_Email_Address": "kate@abett.com", "Company_name": "Abett", "SetName": "Avworo  OGHENEKEVWE _10/07/2023_Abett_Business Intelligence Analyst", "CandidateID": "38457", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "43.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "869", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "60", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 0.0, "Job_Title_stringindexer_transform": 18.0, "Job_Description_stringindexer_transform": 43.0, "Recruiter_First_Name_stringindexer_transform": 10.0, "Recruiter_Last_Name_stringindexer_transform": 27.0, "Recruiter_Email_Address_stringindexer_transform": 26.0, "Company_name_stringindexer_transform": 10.0, "SetName_stringindexer_transform": 5.0, "CandidateID_stringindexer_transform": 9.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 9.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 9.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 22.0, "Mentor_stringindexer_transform": 8.0, "Applicant_stringindexer_transform": 9.0, "Recruiter_InterviewCount_stringindexer_transform": 3.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/6/2023", "NoofDays": -55, "LogInterviewID": 164, "QID": 2641, "Job_Title": "Power BI Reporting Specialist", "Job_Description": "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus) The annual base salary for this role ranges from $80,000 - $90,000. Starting pay will be based on several factors and commensurate with qualifications, experience, and work location.  Benefits/Perks:  Unlimited Paid Time Off Program Great benefit plans: Medical, Dental, Vision, FSA, Pre-tax Transit, Short Term Disability, Life Insurance, 401k AcronymCares Matching Gifts program for employee donations DE&I Employee Resource Groups", "Recruiter_First_Name": "Kelly", "Recruiter_Last_Name": "Dye", "Recruiter_Email_Address": "kdye@acronym.com", "Company_name": "Acronym US", "SetName": "Mary Gathogo_10/06/2023_Acronym US_Power BI Reporting Specialist", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 39.0, "Job_Title_stringindexer_transform": 15.0, "Job_Description_stringindexer_transform": 74.0, "Recruiter_First_Name_stringindexer_transform": 3.0, "Recruiter_Last_Name_stringindexer_transform": 3.0, "Recruiter_Email_Address_stringindexer_transform": 1.0, "Company_name_stringindexer_transform": 17.0, "SetName_stringindexer_transform": 123.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 2.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 7.0, "Applicant_stringindexer_transform": 2.0, "Recruiter_InterviewCount_stringindexer_transform": 7.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "10/6/2023", "NoofDays": -55, "LogInterviewID": 157, "QID": 2634, "Job_Title": "Sr. Data Analyst", "Job_Description": "Job Responsibilities  \u00b7 Collaborate closely with cross-functional teams in engineering, supply chain, and production to identify key performance metrics and indicators.  \u00b7 Design, develop, and implement comprehensive Power BI dashboards and reports that provide actionable insights for program management and decision-making.  \u00b7 Utilize DAX language to create advanced calculations, measures, and transformations to ensure accurate representation of metrics in reports.  \u00b7 Build and maintain complex data models with a keen focus on establishing accurate and efficient table relationships, enabling seamless data flow and analysis.  \u00b7 Analyze large datasets to extract valuable insights, identify trends, and present findings in a clear and concise manner.  \u00b7 Work closely with stakeholders to understand their data needs and translate requirements into effective data visualizations.  \u00b7 Lead the development of data-driven solutions that enhance program efficiency, quality, and overall performance.  \u00b7 Establish data quality standards and procedures to ensure accuracy, consistency, and reliability of metrics.  \u00b7 Stay current with industry trends, best practices, and advancements in data visualization, DAX language, and program management techniques.  Education/Experience  \u00b7 Bachelor's degree in a relevant field such as Engineering, Supply Chain Management, Business Analytics, or a related discipline. Master's degree is a plus.  \u00b7 Proven experience (5+ years) in utilizing Power BI for data visualization and creating advanced dashboards and reports.  \u00b7 Demonstrated expertise in setting up and managing metrics for complex programs within engineering, supply chain, or production environments.  \u00b7 Proficiency in the DAX language is essential, with the ability to create complex calculations and measures.  \u00b7 Strong aptitude for establishing and optimizing table relationships to ensure accurate data modeling.  \u00b7 Excellent analytical skills and the ability to transform raw data into meaningful insights.  \u00b7 Effective communication skills to collaborate with technical and non-technical stakeholders.  \u00b7 Experience in data manipulation, transformation, and cleaning for accurate analysis.  \u00b7 Detail-oriented mindset with a commitment to data accuracy and quality.  \u00b7 Ability to work independently, prioritize tasks, and manage multiple projects simultaneously.  \u00b7 Familiarity with engineering, supply chain, or production processes is a plus.  \u00b7 Certifications in Power BI and relevant data analysis fields are valuable.", "Recruiter_First_Name": "Luis", "Recruiter_Last_Name": "Cruz", "Recruiter_Email_Address": "lcruz@mammoth777.com", "Company_name": "Mammoth Freighters", "SetName": "LILIAN NJERI_10/06/2023_Mammoth Freighters_Sr. Data Analyst", "CandidateID": "37295", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "62.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1696", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "46", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "5", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 39.0, "Job_Title_stringindexer_transform": 50.0, "Job_Description_stringindexer_transform": 124.0, "Recruiter_First_Name_stringindexer_transform": 70.0, "Recruiter_Last_Name_stringindexer_transform": 82.0, "Recruiter_Email_Address_stringindexer_transform": 69.0, "Company_name_stringindexer_transform": 83.0, "SetName_stringindexer_transform": 55.0, "CandidateID_stringindexer_transform": 6.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 8.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 22.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 5.0, "Mentor_stringindexer_transform": 3.0, "Applicant_stringindexer_transform": 5.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 7.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/4/2023", "NoofDays": -57, "LogInterviewID": 159, "QID": 2636, "Job_Title": "Data Analyst II", "Job_Description": "EKN Engineering is a fast-growing civil engineering and technology consulting company located in Irvine, CA. We are looking for a Data Analyst II to join us on our quest to further invent and innovate.  As a Data Analyst II, you will liaise with both internal and external stakeholders to anticipate their needs and help foster a data-led culture. You should be able to work with both technical and non-technical teams to define and measure key business metrics and use them in insightful reports. The successful candidate will turn data into information, information into insight, and insight into business decisions.  Responsibilities  Interpret data, analyze results, and identify opportunities for new reporting. Validate data by continually reviewing both reports and data sources for accuracy and consistency. Create and maintain reports and dashboards in Microsoft Excel and Power BI. Administer and improve the data management system, including deployment pipelines. Establish KPI's to measure the effectiveness of business decisions. Create presentations and reports based on recommendations and findings. Work with management to prioritize business and information needs. Requirements  Proficiency with Microsoft Excel. Intermediate-level proficiency using SQL or similar query language. Exceptional problem-solving, technical, and analytical skills. Bachelors' degree in Data Analytics, Mathematics, Statistics, or related field. Experience with Microsoft Power BI or Tableau or similar data visualization software. Competence managing various aspects of a data pipeline, including data validation, data management, data analysis and data visualization. &nbsp;", "Recruiter_First_Name": "Fiona", "Recruiter_Last_Name": "Connor", "Recruiter_Email_Address": "fconnor@eknengineering.com", "Company_name": "EKN Engineering", "SetName": "Calvine  Cheptoo _10/04/2023_EKN Engineering_Data Analyst II", "CandidateID": "38532", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "341", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 34.0, "Job_Title_stringindexer_transform": 28.0, "Job_Description_stringindexer_transform": 128.0, "Recruiter_First_Name_stringindexer_transform": 85.0, "Recruiter_Last_Name_stringindexer_transform": 76.0, "Recruiter_Email_Address_stringindexer_transform": 62.0, "Company_name_stringindexer_transform": 48.0, "SetName_stringindexer_transform": 14.0, "CandidateID_stringindexer_transform": 2.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 4.0, "AutoInterviewsCount_stringindexer_transform": 3.0, "AutoInterviewsDuration_stringindexer_transform": 16.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 4.0, "Applicant_stringindexer_transform": 7.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/4/2023", "NoofDays": -57, "LogInterviewID": 163, "QID": 2640, "Job_Title": "Business Intelligence Developer", "Job_Description": "No description details", "Recruiter_First_Name": "Amanda", "Recruiter_Last_Name": "Austin", "Recruiter_Email_Address": "aaustin@brooksource.com", "Company_name": "Brooksource", "SetName": "EMMANUEL OJENIYI_10/04/2023_Brooksource_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "12.5", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "479", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "10", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 34.0, "Job_Title_stringindexer_transform": 0.0, "Job_Description_stringindexer_transform": 3.0, "Recruiter_First_Name_stringindexer_transform": 20.0, "Recruiter_Last_Name_stringindexer_transform": 62.0, "Recruiter_Email_Address_stringindexer_transform": 84.0, "Company_name_stringindexer_transform": 76.0, "SetName_stringindexer_transform": 136.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 13.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 18.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 15.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "10/3/2023", "NoofDays": -58, "LogInterviewID": 158, "QID": 2635, "Job_Title": "Power BI Reports Developer", "Job_Description": "\"Description: Leading with our people, Digital Consultants' mission is to deliver the highest level of professional solutions while being a trusted partner and advisor to our customers. With a culture of practicality, opportunity, and creativity we remain dedicated to being honest, trustworthy, respectful, and ethical in everything we do. We are a certified SBA 8(a) small-disadvantaged business that supports multiple IT customers within the Federal, civilian, and private sectors. Digital Consultants also offers our employees growth opportunities, competitive wages, and a full benefits package. Our founding principles, Fairness and Common Sense make working here more than a job, it is the Digital family.  Digital Consultants is seeking a Power BI Reports Developer to join our team! As the Power BI Reports Developer, you will be designing ETL processes and working directly with developers, testers, and other roles active to translate product roadmap features into well-defined product requirements including features, user stories, and acceptance test criteria.  Duties to include:  Maintain and support data analytics platforms Develop and update relevant technical documentation Collaborate directly with analysts and end users to integrate systems and create effective reports Develop and execute database queries and conduct analyses as needed Maintain status updates for all assigned ad hoc report requests Knowledge of SQL queries, SQL Server Reporting Services (SSRS), and MS SQL Server An expert that understands the Power BI platform and its tools very well. Takes complete responsibility for the development and administration of BI tools including transforming raw data into valuable and meaningful insights in the form of appealing dashboards and reports. Recreating existing reports from the current platform into Power BI.\"\" Build complex dimensional data models and reports from the bottom up Audit existing Power BI efforts with a focus on improvement Visualize compelling data stories on the report canvas Produce KPIs with user-friendly display dashboards Collaborate with client's data team Familiarity with data warehouse design (e.g. dimensional modeling) and data mining Requirements: Active DOD Secret Clearance IAT level II Certification: GSEC", "Recruiter_First_Name": " Security+CE", "Recruiter_Last_Name": " or", "Recruiter_Email_Address": " SSCP Power BI Data Analyst or associate degree in a related field 5+ Power BI specific focus Experience w/ DevOps Framework Experience visualizing data in Power BI Desktop and Power BI Service Extensive experience with building dashboards and custom reports in Power BI Strong analytical orientation and problem-solving skills Focusing on backend work with very large and intricate data models to create high-performing dashboards and paginated reports Rebuild existing SAP Business Intelligence-based reports", "Company_name": " utilizing PowerBi dashboards Design effective BI data models Evaluate and improve existing BI systems\"", "SetName": "Rufus", "CandidateID": "Benhur", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Digital Consultants, LLC", "Preparationscore": "Avworo  OGHENEKEVWE _10/03/2023_Digital Consultants, LLC_Power BI Reports Developer", "AutoInterviewsCount": "38457", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "Recruiter", "MentorInterviewsDuration": "18.75", "Mentor": "0", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1490", "InterviewScore": "Sowmya Attur", "InterviewDate_stringindexer_transform": 22.0, "Job_Title_stringindexer_transform": 24.0, "Job_Description_stringindexer_transform": 117.0, "Recruiter_First_Name_stringindexer_transform": 94.0, "Recruiter_Last_Name_stringindexer_transform": 104.0, "Recruiter_Email_Address_stringindexer_transform": 36.0, "Company_name_stringindexer_transform": 65.0, "SetName_stringindexer_transform": 124.0, "CandidateID_stringindexer_transform": 21.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 5.0, "Preparationscore_stringindexer_transform": 15.0, "AutoInterviewsCount_stringindexer_transform": 10.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 10.0, "MentorInterviewsDuration_stringindexer_transform": 10.0, "Mentor_stringindexer_transform": 18.0, "Applicant_stringindexer_transform": 8.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 14.0, "InterviewScore_stringindexer_transform": 6.0}, {"InterviewDate": "10/3/2023", "NoofDays": -58, "LogInterviewID": 151, "QID": 2629, "Job_Title": "Data Visualization Manager", "Job_Description": "Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms", "Recruiter_First_Name": "Kaylee", "Recruiter_Last_Name": "Pearson", "Recruiter_Email_Address": "kpearson@theshipyard.com", "Company_name": "The Shipyard", "SetName": "Talq Tera_10/03/2023_The Shipyard_Data Visualization Manager", "CandidateID": "39119", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "3990", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 22.0, "Job_Title_stringindexer_transform": 10.0, "Job_Description_stringindexer_transform": 63.0, "Recruiter_First_Name_stringindexer_transform": 6.0, "Recruiter_Last_Name_stringindexer_transform": 8.0, "Recruiter_Email_Address_stringindexer_transform": 3.0, "Company_name_stringindexer_transform": 3.0, "SetName_stringindexer_transform": 69.0, "CandidateID_stringindexer_transform": 4.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 5.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 6.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 3.0, "Recruiter_InterviewCount_stringindexer_transform": 3.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/26/2023", "NoofDays": -65, "LogInterviewID": 147, "QID": 2625, "Job_Title": "Business intelligence Analyst 2", "Job_Description": "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred 5-7 years experience is preferred Basic knowledge of programming languages in order to comprehend reading code and basic functions. Ability to create business solutions that increase competitive advantage. Ability to exercise good judgment in selecting methods and techniques for obtaining solutions. Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines. Ability to solve technical problems/ processes and understand complex details. Ability to increase operating efficiency by producing high quality technical solutions. A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level. Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must.", "Recruiter_First_Name": "Jeevana", "Recruiter_Last_Name": "Adusumilli", "Recruiter_Email_Address": "n/a", "Company_name": "Microsoft", "SetName": "ANNE NDUNGU_09/26/2023_Microsoft_Business intelligence Analyst 2", "CandidateID": "37048", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "43.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "778", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "63", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "3", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 61.0, "Job_Title_stringindexer_transform": 23.0, "Job_Description_stringindexer_transform": 136.0, "Recruiter_First_Name_stringindexer_transform": 9.0, "Recruiter_Last_Name_stringindexer_transform": 26.0, "Recruiter_Email_Address_stringindexer_transform": 23.0, "Company_name_stringindexer_transform": 21.0, "SetName_stringindexer_transform": 118.0, "CandidateID_stringindexer_transform": 10.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 9.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 40.0, "MentorInterviewsCount_stringindexer_transform": 1.0, "MentorInterviewsDuration_stringindexer_transform": 25.0, "Mentor_stringindexer_transform": 12.0, "Applicant_stringindexer_transform": 11.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 5.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/24/2023", "NoofDays": -67, "LogInterviewID": 144, "QID": 2622, "Job_Title": "Business intelligence Analyst 2", "Job_Description": "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred  5-7 years experience is preferred   Basic knowledge of programming languages in order to comprehend reading code and basic functions.   Ability to create business solutions that increase competitive advantage.   Ability to exercise good judgment in selecting methods and techniques for obtaining solutions.   Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines.   Ability to solve technical problems/ processes and understand complex details.   Ability to increase operating efficiency by producing high quality technical solutions.   A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level.   Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must.", "Recruiter_First_Name": "Jeevana", "Recruiter_Last_Name": "Adusumilli", "Recruiter_Email_Address": "n/a", "Company_name": "Microsoft", "SetName": "ANNE NDUNGU_09/24/2023_Microsoft_Business intelligence Analyst 2", "CandidateID": "37048", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "37.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "791", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 16.0, "Job_Title_stringindexer_transform": 23.0, "Job_Description_stringindexer_transform": 13.0, "Recruiter_First_Name_stringindexer_transform": 9.0, "Recruiter_Last_Name_stringindexer_transform": 26.0, "Recruiter_Email_Address_stringindexer_transform": 23.0, "Company_name_stringindexer_transform": 21.0, "SetName_stringindexer_transform": 92.0, "CandidateID_stringindexer_transform": 10.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 4.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 38.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 12.0, "Applicant_stringindexer_transform": 11.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/24/2023", "NoofDays": -67, "LogInterviewID": 146, "QID": 2624, "Job_Title": "power BI Developer", "Job_Description": "- Open to W-2 candidates - Building Power BI dashboards - Some sort of risk environment (Could be cyber/operations/etc..) OR another financial institution", "Recruiter_First_Name": "Wendy", "Recruiter_Last_Name": "Rociles", "Recruiter_Email_Address": "jobs@edward.com", "Company_name": "Edward Jones", "SetName": "Nadege Nguemo Mbouyo_09/24/2023_Edward Jones_power BI Developer", "CandidateID": "34701", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "346", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 16.0, "Job_Title_stringindexer_transform": 31.0, "Job_Description_stringindexer_transform": 77.0, "Recruiter_First_Name_stringindexer_transform": 68.0, "Recruiter_Last_Name_stringindexer_transform": 50.0, "Recruiter_Email_Address_stringindexer_transform": 106.0, "Company_name_stringindexer_transform": 87.0, "SetName_stringindexer_transform": 50.0, "CandidateID_stringindexer_transform": 8.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 4.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 11.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 10.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/21/2023", "NoofDays": -70, "LogInterviewID": 136, "QID": 2617, "Job_Title": "Lead SQL Developer", "Job_Description": "Job Description  This person will be responsible for maintaining the quality and direction of data solutions in support of our Finance team.  The role requires knowledge of database development tools and services, with an emphasis on SSAS.  Qualifications  Experience Required: 7 \u2013 10 Years Education Required: Bachelors Degree Minimum seven (7+) years experience in a multi-disciplined IT environment with strong expertise in data analysis, data modeling, data governance and involvement in enterprise architecture Minimum of five (5+) years experience, hands-on, data profiling and performance tuning databases and data marts with Oracle and / or SQL Server Experience with performance improvement using Azure and/or on-premise Microsoft technologies Experience taking a leading role in architecting, designing and developing solutions exceeding business expectations Knowledge of interpreting business processes and requirements and translating them into logical and physical data models adhering to documented standards and best practices Excellent problem solving and communication skills with experience in interacting with business and technical teams at all levels Responsibilities  This person will be ultimately responsible for performing the data analysis and profiling necessary to provide direction, standards, and implementation of data management solutions associated with data ingestion, transformation, integration, and analytics Engage in full stack Microsoft BI development activities to deploy usable and measurable projects meeting business needs leveraging tools such as SSIS, SSAS, stored procedures and Power BI Write complex Stored procedures to harmonize data sets for reporting Setup dimensional/tabular data models Setup and deploy row/object level security Develop and publish Power BI reports Provide input and implement solutions to drive the continuous improvement of the development and support teams Participate in data integration, business intelligence (BI), and enterprise information management programs by rationalizing data processing to support reuse", "Recruiter_First_Name": "Sarah", "Recruiter_Last_Name": "Weigel", "Recruiter_Email_Address": "sarah.weigel@gravityitresources.com", "Company_name": "Gravity IT Resources", "SetName": "OLUKAYODE AKINRIMISI_09/21/2023_Gravity IT Resources_Lead SQL Developer", "CandidateID": "31661", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 12.0, "Job_Title_stringindexer_transform": 32.0, "Job_Description_stringindexer_transform": 101.0, "Recruiter_First_Name_stringindexer_transform": 58.0, "Recruiter_Last_Name_stringindexer_transform": 81.0, "Recruiter_Email_Address_stringindexer_transform": 99.0, "Company_name_stringindexer_transform": 45.0, "SetName_stringindexer_transform": 51.0, "CandidateID_stringindexer_transform": 3.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 6.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/21/2023", "NoofDays": -70, "LogInterviewID": 137, "QID": 2618, "Job_Title": "BI Developer/Analyst", "Job_Description": "With minimal supervision, completes the technical design, build, testing, and documentation of Power BI reports based on on-premises and SaaS data sources. The role is within a large and complex ERP implementation project and will primarily support the PMO in creating reporting solutions for project KPI tracking as well as data analysis and validation to support project activities.  * Education:-  bachelor\u2019s degree or equivalent experience is required  * Experience:- Minimum of four (4) to six (6) years of progressive, relevant information technology experience", "Recruiter_First_Name": "Bharath", "Recruiter_Last_Name": "Amudala", "Recruiter_Email_Address": "bharath.amudala@peopletech.com", "Company_name": "People tech group", "SetName": "ANNE NDUNGU_09/21/2023_People tech group_BI Developer/Analyst", "CandidateID": "37048", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1793", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 12.0, "Job_Title_stringindexer_transform": 40.0, "Job_Description_stringindexer_transform": 110.0, "Recruiter_First_Name_stringindexer_transform": 34.0, "Recruiter_Last_Name_stringindexer_transform": 105.0, "Recruiter_Email_Address_stringindexer_transform": 45.0, "Company_name_stringindexer_transform": 51.0, "SetName_stringindexer_transform": 96.0, "CandidateID_stringindexer_transform": 10.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 45.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 12.0, "Applicant_stringindexer_transform": 11.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/21/2023", "NoofDays": -70, "LogInterviewID": 134, "QID": 2615, "Job_Title": "Senior Developer (Tableau + ETL)", "Job_Description": "Immediate Hire \u2013 Senior Developer (Tableau + ETL) - Irving, TX  (DAY 1 ONSITE) Hybrid    Role: Senior Developer (Tableau + ETL)  Location: Irving, TX  (DAY 1 ONSITE) Hybrid  Duration: Fulltime     Required skills (technical & professional) : \u2022       8+ years of overall IT experience. \u2022       4+ years\u2019 experience working with Tableau with ETL experience. \u2022       You will work closely with customers, product owners and dev team to ensure requirements and business objectives are translated into working technical designs \u2022       Drive end-to-end design, development and implementation of complex solutions, often using new technologies \u2022       Design and develop Tableau reports and dashboards that will yield actionable insights that present the answers to business questions \u2022       Code and modify SQL/ETL based on dashboard requirements \u2022       Run ad-hoc analysis for Product and Business Managers using standard query languages and operationalize for repeatable use via Tableau reporting suite", "Recruiter_First_Name": "Thomas", "Recruiter_Last_Name": "Martin", "Recruiter_Email_Address": "thomas@itbtalent.com", "Company_name": "Tech M/Citi Bank", "SetName": "EMMANUEL OJENIYI_09/21/2023_Tech M/Citi Bank_Senior Developer (Tableau + ETL)", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "9", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 12.0, "Job_Title_stringindexer_transform": 72.0, "Job_Description_stringindexer_transform": 104.0, "Recruiter_First_Name_stringindexer_transform": 32.0, "Recruiter_Last_Name_stringindexer_transform": 97.0, "Recruiter_Email_Address_stringindexer_transform": 85.0, "Company_name_stringindexer_transform": 72.0, "SetName_stringindexer_transform": 86.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 12.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/20/2023", "NoofDays": -71, "LogInterviewID": 133, "QID": 2614, "Job_Title": "Power BI and Reporting Analyst", "Job_Description": "We are looking for a savvy Power BI and Reporting Analyst, with previous experience in the retail energy space, to join our growing team of enterprise data and analytics experts. The hire will be responsible for advancing our reporting and analytics footprint. The ideal candidate is an experienced BI Analyst who enjoys optimizing data reporting processes and driving insights.  ESSENTIAL SKILLS AND EXPERIENCE Successful job applicants will be able to perform these functions. Reasonable accommodations will be made to enable individuals with disabilities to perform essential functions. \u2022 5+ years of experience in a related role. \u2022 3+ years of experience using Microsoft PowerBI. \u2022 2+ years of experience working in the retail energy space. \u2022 Advanced working SQL knowledge and experience working with relational databases, query authoring (SQL) as well as working familiarity with a variety\u00a0of\u00a0databases.", "Recruiter_First_Name": "Anthony", "Recruiter_Last_Name": "Hathaway", "Recruiter_Email_Address": "ahathaway@wiredhivetech.com", "Company_name": "Wired Hive", "SetName": "OLUKAYODE AKINRIMISI_09/20/2023_Wired Hive_Power BI and Reporting Analyst", "CandidateID": "31661", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 64.0, "Job_Title_stringindexer_transform": 55.0, "Job_Description_stringindexer_transform": 70.0, "Recruiter_First_Name_stringindexer_transform": 55.0, "Recruiter_Last_Name_stringindexer_transform": 70.0, "Recruiter_Email_Address_stringindexer_transform": 80.0, "Company_name_stringindexer_transform": 58.0, "SetName_stringindexer_transform": 126.0, "CandidateID_stringindexer_transform": 3.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 6.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/18/2023", "NoofDays": -73, "LogInterviewID": 127, "QID": 2608, "Job_Title": "Business Data Analyst", "Job_Description": "LivePerson (NASDAQ: LPSN) is a global leader in trustworthy and equal AI for business. Hundreds of the world's leading brands \u2014 including HSBC, Chipotle, and Virgin Media \u2014 use our Conversational Cloud platform to engage with millions of consumers safely and responsibly. We power a billion conversational interactions every month, providing a uniquely rich data set and safety tools to unlock the power of Generative AI and Large Language Models for better business outcomes.  At LivePerson, we foster an inclusive workplace culture that encourages meaningful connection, collaboration, and innovation. Every mind is invited to ask questions and actively seek new ways to achieve success and reach their full potential. We operate as one with a growth mindset. This means spotting opportunities, solving ambiguities and seeking effective solutions to challenges that make things better.   Overview:  Reporting to the Director of Data, Models, and Decisions (DMD), the successful candidate has an opportunity to join an innovative data science and engineering team that's operationalizing data across the organization. We see model-driven processes and workflows as a means to reduce uncertainty, reveal opportunity, and generate operational leverage that collectively create a new dimension of competitive advantage and lay the foundation for new revenue streams.  You will: Apply cutting-edge data visualization techniques to reveal actionable insights to business users Solve challenging data problems through in-depth analysis of many systems Apply statistical analysis to summarize data and forecast trends Participate in Data Requirement Gathering, Data Preparation and devise proper Data Interpretation Ensure data is maintained in our platform and all systems with best quality, always considering automation and scalability of your solutions Evangelize our products and train others on Data Visualization and presentation techniques, enabling them to create dashboards and reports themselves  You have: Demonstrated ability to uncover insights and relationships across numerous datasets 5+ years of experience analyzing data and creating dashboards and reports (Looker / PowerBI / Tableau / Metabase) 5+ years of experience interpreting and writing advanced SQL 2+ years of experience in Python and good working knowledge of pandas and matplotlib Bachelor's degree in Computer Science, Statistics, or another quantitative field Ability to work closely with teammates in a highly collaborative environment and simultaneously be a self-starter with strong individual contributions Excellent communication and presentation skills  Benefits: The salary range for this role will be between $88,000 to $120,000 Final compensation will be determined by a variety of factors, including, but not limited to, your location, skills, experience, education, and/or certifications. During the phone screening, the recruiter will provide the location-specific salary range for this role. Regardless of your personal situation or where you are in the world, LivePerson offers comprehensive and great benefits programs to meet your needs:  Health: medical, dental, vision and wellbeing. Time away: Public holidays and discretionary PTO package for flexible days off with manager approval. Financial: 401K, ESPP, Basic life and AD&D insurance, long-term and short-term disability Family: parental leave, maternity support, fertility services. Development: tuition reimbursement, native AI learning. Additional: 24/7 access to professional counselors, voluntary insurance coverage, exclusive perks and discounts. #LI-Remote", "Recruiter_First_Name": "Dan", "Recruiter_Last_Name": "Ashburn", "Recruiter_Email_Address": "dashburn@liveperson.com", "Company_name": "LivePerson", "SetName": "LILIAN NJERI_09/18/2023_LivePerson_Business Data Analyst", "CandidateID": "37295", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1788", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 47.0, "Job_Title_stringindexer_transform": 13.0, "Job_Description_stringindexer_transform": 137.0, "Recruiter_First_Name_stringindexer_transform": 51.0, "Recruiter_Last_Name_stringindexer_transform": 75.0, "Recruiter_Email_Address_stringindexer_transform": 52.0, "Company_name_stringindexer_transform": 59.0, "SetName_stringindexer_transform": 23.0, "CandidateID_stringindexer_transform": 6.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 50.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 3.0, "Applicant_stringindexer_transform": 5.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/15/2023", "NoofDays": -76, "LogInterviewID": 126, "QID": 2607, "Job_Title": "Business Intelligence Developer", "Job_Description": "What you\u2019ll do as the BI Analyst:   Help elevate the Operations and Technology teams by diving deep into data, exploring opportunities for gaining insight and extracting value from the data, and finally, contributing actively to the dashboarding and reporting needs within the company. Act as SME for Snapsheet\u2019s analysis data model, supporting customers and in-house users in finding the information they need for reporting. Collaborate with development and product to provide schema modeling recommendations  Assist in validating launch data from new product releases  Build and maintain documentation on the products you\u2019re building   What we are looking for in a BI Analyst: B.S. or higher degree in related fields 4+ years of experience as a BI analyst (or related role) Proficiency in leveraging SQL to build reports  Experience in building, maintaining, and managing reports & dashboards using data visualization tools (i.e. Tableau, Qlik, Sisense) Self-starter mentality  Nice to haves: Previous experience with AI or ML is a plus  Previous experience pulling metrics or analytics for an operations department/organization", "Recruiter_First_Name": "Kyrsa", "Recruiter_Last_Name": "Galyan", "Recruiter_Email_Address": "kyrsa.galyan@snapsheet.me", "Company_name": "Snapsheet", "SetName": "Mary Gathogo_09/15/2023_Snapsheet_Business Intelligence Developer", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "9", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 32.0, "Job_Title_stringindexer_transform": 0.0, "Job_Description_stringindexer_transform": 23.0, "Recruiter_First_Name_stringindexer_transform": 38.0, "Recruiter_Last_Name_stringindexer_transform": 94.0, "Recruiter_Email_Address_stringindexer_transform": 101.0, "Company_name_stringindexer_transform": 47.0, "SetName_stringindexer_transform": 119.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 12.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/15/2023", "NoofDays": -76, "LogInterviewID": 129, "QID": 2610, "Job_Title": "Tableau Administrator", "Job_Description": "Responsible for impact analysis, identifying common BI patterns, L3 support queries, and more.", "Recruiter_First_Name": "Yolanda", "Recruiter_Last_Name": "Rountree", "Recruiter_Email_Address": "Lesli.Martinez-Torres@ey.com", "Company_name": "Ernst & Young, LLP", "SetName": "EMMANUEL OJENIYI_09/15/2023_Ernst & Young, LLP_Tableau Administrator", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "8", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 32.0, "Job_Title_stringindexer_transform": 47.0, "Job_Description_stringindexer_transform": 79.0, "Recruiter_First_Name_stringindexer_transform": 98.0, "Recruiter_Last_Name_stringindexer_transform": 72.0, "Recruiter_Email_Address_stringindexer_transform": 50.0, "Company_name_stringindexer_transform": 101.0, "SetName_stringindexer_transform": 134.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 11.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/14/2023", "NoofDays": -77, "LogInterviewID": 122, "QID": 2603, "Job_Title": "Tableau Developer", "Job_Description": "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:   At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Recruiter_First_Name": "David", "Recruiter_Last_Name": "Dalrymple", "Recruiter_Email_Address": "david.dalrymple@cibr.com", "Company_name": "CIBR Warriors - BSA", "SetName": "EMMANUEL OJENIYI_09/14/2023_CIBR Warriors - BSA_Tableau Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "3", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 9.0, "Job_Title_stringindexer_transform": 8.0, "Job_Description_stringindexer_transform": 90.0, "Recruiter_First_Name_stringindexer_transform": 2.0, "Recruiter_Last_Name_stringindexer_transform": 1.0, "Recruiter_Email_Address_stringindexer_transform": 5.0, "Company_name_stringindexer_transform": 81.0, "SetName_stringindexer_transform": 68.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 5.0, "Technical_InterviewCount_stringindexer_transform": 5.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/14/2023", "NoofDays": -77, "LogInterviewID": 123, "QID": 2604, "Job_Title": "Tableau developers", "Job_Description": "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions. The successful candidates will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.   Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. Degree in computer science, information systems, or related field or 10 years comparable experience in above PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Recruiter_First_Name": "Dave", "Recruiter_Last_Name": "Dalrymple", "Recruiter_Email_Address": "david.dalrymple@cibr.com", "Company_name": "Bridgesecurityadvisors", "SetName": "EMMANUEL OJENIYI_09/14/2023_Bridgesecurityadvisors_Tableau developers", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "71", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 9.0, "Job_Title_stringindexer_transform": 43.0, "Job_Description_stringindexer_transform": 67.0, "Recruiter_First_Name_stringindexer_transform": 88.0, "Recruiter_Last_Name_stringindexer_transform": 1.0, "Recruiter_Email_Address_stringindexer_transform": 5.0, "Company_name_stringindexer_transform": 64.0, "SetName_stringindexer_transform": 59.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 3.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 4.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 5.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/14/2023", "NoofDays": -77, "LogInterviewID": 120, "QID": 2601, "Job_Title": "Data Engineer - Consultant/Senior", "Job_Description": "DATA ENGINEER \u2013 CONSULTANT/SENIOR  Lotis Blue Consulting is a growth advisory that helps clients grow and transform their organization to achieve their business goals. We apply expertise in behavioral and data science to set business and go-to-market strategy and then improve organization alignment to enable effective execution. We are looking for data and analytics-savvy professionals to join our Chicago-based team of consultants who have proven Data Engineering expertise and experience working with other data analysts and project resources. This role is client-facing and will be a fully-fledged member of the client service project team helping us to identify, understand and solve complex problems.  PRIMARY RESPONSIBILITIES Work with the Lotis Blue team to develop hypotheses that explain business problems or opportunities, and then create the analytical work plan to test them Create and manage highly structured data requests that acquire the right information in the right format to execute on the analytical work plan Serve as lead point of contact with the client and be accountable for all matters related to data acquisition, cleaning, integration, management, transformation, interpretation, and analytics Work with Power BI or Tableau to present and visualize new insights or reveal complex relationships between variables in a clear, accurate, and compelling manner that supports evolving ideation Lead discussions internally around the relationship between different data elements to add to the Lotis Blue team\u2019s knowledge, awareness, clarity, and depth in addressing the client situation and potential solutions Develop and provide meaningful insights and relevant points-of-view on complex concepts directly to clients through simple, plainspoken materials Contribute to leading-edge thinking that deepens the Firm\u2019s capabilities in data science and engineering and differentiates Lotis Blue in the market QUALIFICATIONS & EXPERIENCES Bachelor\u2019s degree in computer science, mathematics, engineering or related field At least two years of experience working on an analytics or data science team Experience communicating directly with clients and addressing business problems through analytics Passion for learning and track record of keeping up to date on technologies, platforms, and tools Some travel may be required REQUIRED KNOWLEDGE, SKILLS & CAPABILITIES Business acumen Teamwork and collaboration Critical thinking and ideation Project management Experience with and capability to execute on: Production databases (e.g., SQL Server, MongoDB) and related administrative tools (e.g., SQL Management Studio, Navicat) Python (preferable) or R Business Intelligence tools (e.g., Power BI, Tableau) PREFERRED KNOWLEDGE, SKILLS & CAPABILITIES Working knowledge of Azure Experience managing databases in the cloud (as well as AWS) Working knowledge of data transformation tools (e.g., Alteryx) Experience operationalizing data pipelines to support analytics in a production environment Coursework or qualification in Machine Learning Experience applying ML techniques in real world business scenarios", "Recruiter_First_Name": "Andrew", "Recruiter_Last_Name": "Harris", "Recruiter_Email_Address": "aharris@lbconsulting.com", "Company_name": "Lotis Blue Consulting, LLC", "SetName": "Mary Gathogo_09/14/2023_Lotis Blue Consulting, LLC_Data Engineer - Consultant/Senior", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "8", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 9.0, "Job_Title_stringindexer_transform": 61.0, "Job_Description_stringindexer_transform": 56.0, "Recruiter_First_Name_stringindexer_transform": 46.0, "Recruiter_Last_Name_stringindexer_transform": 86.0, "Recruiter_Email_Address_stringindexer_transform": 86.0, "Company_name_stringindexer_transform": 104.0, "SetName_stringindexer_transform": 29.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 11.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/13/2023", "NoofDays": -78, "LogInterviewID": 125, "QID": 2606, "Job_Title": "Associate BI Developer", "Job_Description": "Salary in the $60-80K range + 10-20% bonus.  Here's some info on the need - MUST have  at least one year of experience with SQL, ETL, SSRS, and Power BI experience (data modeling, data viz, dashboarding, ad hoc reporting).  Seeking an Associate Business Intelligence (BI) Developer to contribute to the creation of BI solutions, transforming raw data into valuable insights.   Key Responsibilities:  \u2022   Assess requests for data interfaces, perform data profiling, and determine optimal methods for request fulfillment  \u2022    Translate diverse business requirements into precise technical specifications  \u2022     Construct data models to support data visualizations, interactive dashboards, and ad hoc data inquiries  \u2022    Engage in collaborative efforts with fellow developers and end-users as requests progress through their life cycle  \u2022     Conduct unit testing and quality assurance assessments on data models and reports  \u2022   Produce, review, interpret, and troubleshoot intricate code while adhering to established standards  \u2022   Investigate and resolve unforeseen work items, communicating findings promptly to the team and end users  \u2022    Evaluate and enhance our existing BI system   Essential Qualifications:  \u2022    Minimum of 1 year of experience in BI development  \u2022     Proficiency in SQL, SSRS, Excel, and Power BI  \u2022    Familiarity with relational databases, with a preference for understanding SQL Server Database Management Systems (RDBMS) principles  \u2022    Proficient in ETL processes and skilled in implementing data transformations using SQL and Power BI  \u2022     Basic knowledge of source control is advantageous", "Recruiter_First_Name": "Shaun", "Recruiter_Last_Name": "Fitzgerald", "Recruiter_Email_Address": "shaun.fitzgerald@jobot.com", "Company_name": "Jobot", "SetName": "Calvine  Cheptoo _09/13/2023_Jobot_Associate BI Developer", "CandidateID": "38532", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1346", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 59.0, "Job_Title_stringindexer_transform": 51.0, "Job_Description_stringindexer_transform": 75.0, "Recruiter_First_Name_stringindexer_transform": 71.0, "Recruiter_Last_Name_stringindexer_transform": 54.0, "Recruiter_Email_Address_stringindexer_transform": 35.0, "Company_name_stringindexer_transform": 37.0, "SetName_stringindexer_transform": 30.0, "CandidateID_stringindexer_transform": 2.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 13.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 4.0, "Applicant_stringindexer_transform": 7.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/12/2023", "NoofDays": -79, "LogInterviewID": 119, "QID": 2600, "Job_Title": "Tableau Developer", "Job_Description": "This contract is W2 ONLY, no C2C.   The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Recruiter_First_Name": "David", "Recruiter_Last_Name": "Dalrymple", "Recruiter_Email_Address": "david.dalrymple@cibr.com", "Company_name": "CIBR Warriors", "SetName": "EMMANUEL OJENIYI_09/12/2023_CIBR Warriors_Tableau Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "3", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 10.0, "Job_Title_stringindexer_transform": 8.0, "Job_Description_stringindexer_transform": 133.0, "Recruiter_First_Name_stringindexer_transform": 2.0, "Recruiter_Last_Name_stringindexer_transform": 1.0, "Recruiter_Email_Address_stringindexer_transform": 5.0, "Company_name_stringindexer_transform": 54.0, "SetName_stringindexer_transform": 63.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 9.0, "Technical_InterviewCount_stringindexer_transform": 5.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/12/2023", "NoofDays": -79, "LogInterviewID": 116, "QID": 2597, "Job_Title": "Senior BI Architect", "Job_Description": "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Recruiter_First_Name": "Colleen", "Recruiter_Last_Name": "Murray", "Recruiter_Email_Address": "cmurray@acgme.org", "Company_name": "ACGME", "SetName": "Mary Gathogo_09/12/2023_ACGME_Senior BI Architect", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "3", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 10.0, "Job_Title_stringindexer_transform": 7.0, "Job_Description_stringindexer_transform": 95.0, "Recruiter_First_Name_stringindexer_transform": 5.0, "Recruiter_Last_Name_stringindexer_transform": 5.0, "Recruiter_Email_Address_stringindexer_transform": 0.0, "Company_name_stringindexer_transform": 4.0, "SetName_stringindexer_transform": 2.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 5.0, "Technical_InterviewCount_stringindexer_transform": 5.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/12/2023", "NoofDays": -79, "LogInterviewID": 117, "QID": 2598, "Job_Title": "Senior BI Architect", "Job_Description": "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions. ESSENTIAL FUNCTIONS AND RESPONSIBILITIES Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned. SUPERVISORY RESPONSIBILITY Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management. QUALIFICATIONS Minimum Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems. REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.", "Recruiter_First_Name": "Colleen", "Recruiter_Last_Name": "Murray", "Recruiter_Email_Address": "cmurray@acgme.org", "Company_name": "ACGME", "SetName": "Mary Gathogo_09/12/2023_ACGME_Senior BI Architect", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "282", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 10.0, "Job_Title_stringindexer_transform": 7.0, "Job_Description_stringindexer_transform": 61.0, "Recruiter_First_Name_stringindexer_transform": 5.0, "Recruiter_Last_Name_stringindexer_transform": 5.0, "Recruiter_Email_Address_stringindexer_transform": 0.0, "Company_name_stringindexer_transform": 4.0, "SetName_stringindexer_transform": 2.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 3.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 39.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 5.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/11/2023", "NoofDays": -80, "LogInterviewID": 118, "QID": 2599, "Job_Title": "Data Integration Engineer", "Job_Description": "Insight Global is looking for a junior data integration engineer to join one of our clients in Midlothian VA. The role is hybrid on-site, 3 days per week. The engineer will be apart of the business systems solutions team. The ideal candidate would be responsible for coordinating and processing requests for SQL data integration work, validate requirements, identify system needs, recommend solutions, and work with other team members to develop end to end solutions.  This candidate would work with business lines and the data team to identify data sources, create data flow diagrams and document the processes.  Additional Responsibilities Include:  -Develop complex data structures and workflows to support processes utilizing MS SQL, custom integration tools and other resources.  -Stay informed of ways the organization uses data and makes recommendations as needed to improve efficiencies.  -Monitors and troubleshoot jobs and data issues.  -Coordinate integration changes as source systems are modified.", "Recruiter_First_Name": "Virginia", "Recruiter_Last_Name": "Griffith", "Recruiter_Email_Address": "Virginia.Griffith@insightglobal.com", "Company_name": "Insight Global", "SetName": "Avworo  OGHENEKEVWE _09/10/2023_Insight Global_Data Integration Engineer", "CandidateID": "38457", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 67.0, "Job_Title_stringindexer_transform": 49.0, "Job_Description_stringindexer_transform": 42.0, "Recruiter_First_Name_stringindexer_transform": 64.0, "Recruiter_Last_Name_stringindexer_transform": 65.0, "Recruiter_Email_Address_stringindexer_transform": 83.0, "Company_name_stringindexer_transform": 0.0, "SetName_stringindexer_transform": 100.0, "CandidateID_stringindexer_transform": 9.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 8.0, "Applicant_stringindexer_transform": 9.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/10/2023", "NoofDays": -81, "LogInterviewID": 114, "QID": 2595, "Job_Title": "SQL Developer", "Job_Description": "Required Skills and Experience *  5-7 years of experience in a SQL Development role 3+ years of experience using SSIS/SSRS for automated data imports and hands-on report/parameter creation. 3+ years creating queries within Visual Studio Experience creating stored procedures and views within SQL in a work environment Experience working with Microsoft Server 2012 or newer .NET experience- C# or VB.NET ETL Development experience     Nice to Have Skills and Experience  Experience utilizing Healthcare Information Systems and Databases Bachelor's Degree in computer science or any related field     Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "Recruiter_First_Name": "Brendan", "Recruiter_Last_Name": "Barker", "Recruiter_Email_Address": "Brendan.Barker@insightglobal.com", "Company_name": "Community First Health Plans", "SetName": "AYODEJI OLAWOYE_09/10/2023_Community First Health Plans_SQL Developer", "CandidateID": "33898", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "3", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 66.0, "Job_Title_stringindexer_transform": 4.0, "Job_Description_stringindexer_transform": 20.0, "Recruiter_First_Name_stringindexer_transform": 17.0, "Recruiter_Last_Name_stringindexer_transform": 25.0, "Recruiter_Email_Address_stringindexer_transform": 6.0, "Company_name_stringindexer_transform": 11.0, "SetName_stringindexer_transform": 91.0, "CandidateID_stringindexer_transform": 5.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 2.0, "Applicant_stringindexer_transform": 4.0, "Recruiter_InterviewCount_stringindexer_transform": 3.0, "Technical_InterviewCount_stringindexer_transform": 5.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/8/2023", "NoofDays": -83, "LogInterviewID": 110, "QID": 2592, "Job_Title": "Business Intelligence Developer", "Job_Description": "Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.", "Recruiter_First_Name": "Daniela", "Recruiter_Last_Name": "Aguayo", "Recruiter_Email_Address": "Daniela.Aguayo@scipax.com", "Company_name": "Spalding Consulting", "SetName": "EMMANUEL OJENIYI_09/08/2023_Spalding Consulting_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "3", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 25.0, "Job_Title_stringindexer_transform": 0.0, "Job_Description_stringindexer_transform": 18.0, "Recruiter_First_Name_stringindexer_transform": 1.0, "Recruiter_Last_Name_stringindexer_transform": 2.0, "Recruiter_Email_Address_stringindexer_transform": 2.0, "Company_name_stringindexer_transform": 2.0, "SetName_stringindexer_transform": 89.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 4.0, "Technical_InterviewCount_stringindexer_transform": 5.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/8/2023", "NoofDays": -83, "LogInterviewID": 107, "QID": 2589, "Job_Title": "BI Reporting", "Job_Description": "As a Business Solution Architect, you will\u2026 lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design. Lead the Functional team. Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "Recruiter_First_Name": "Dana", "Recruiter_Last_Name": "Turner", "Recruiter_Email_Address": "Dana.Turner@itineris.net", "Company_name": "Itineris", "SetName": "LILIAN NJERI_09/07/2023_Itineris_BI Reporting", "CandidateID": "37295", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "4", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 25.0, "Job_Title_stringindexer_transform": 29.0, "Job_Description_stringindexer_transform": 29.0, "Recruiter_First_Name_stringindexer_transform": 22.0, "Recruiter_Last_Name_stringindexer_transform": 14.0, "Recruiter_Email_Address_stringindexer_transform": 13.0, "Company_name_stringindexer_transform": 38.0, "SetName_stringindexer_transform": 94.0, "CandidateID_stringindexer_transform": 6.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 3.0, "Applicant_stringindexer_transform": 5.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 3.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 103, "QID": 2585, "Job_Title": "Power Platform Developer", "Job_Description": "Responsibilities:  \u00b7 Experience Developing, deploying, and supporting SharePoint, Teams, Power Platform and SPFx applications.  \u00b7 Strong technical knowledge with Power Platform tools including Power Automate (Flow), Power Apps, Power BI, DataVerse.  \u00b7 Experience with enterprise level canvas applications utilizing Power Platform tools  \u00b7 Knowledge of Power Automate Technical REST & SOAP protocols  Desired Technical Skills:  Strong technical knowledge with Power Platform tools such as Power Automate (Flow), Power Apps, Power BI, DataVerse. Proven experience developing enterprise level applications utilizing Power Platform tools Strong experience with SharePoint administration, workflows, and development. Strong Microsoft Power Platform development experience Web development experience including, JavaScript, SQL ,XML, and CSS Design/implementation experience in the Microsoft Power Platform \u2013 MS PowerApps, Power Automate, and PowerBI. Experience :  Bachelor\u2019s in computer science, Information Systems or related field OR 4+ years of relevant work experience 3+ years of experience Developing and administrating enterprise applications Experience on teams with emphasis on development within Microsoft SharePoint environments Experience implementing and/or administrating IT service support management tools Strong interpersonal skills, oral and written communications across all levels of an organization", "Recruiter_First_Name": "Ram", "Recruiter_Last_Name": "V", "Recruiter_Email_Address": "ram@pavetalent.com", "Company_name": "Pave Talent", "SetName": "Mary Gathogo_09/07/2023_Pave Talent_Power Platform Developer", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 3.0, "Job_Title_stringindexer_transform": 57.0, "Job_Description_stringindexer_transform": 52.0, "Recruiter_First_Name_stringindexer_transform": 99.0, "Recruiter_Last_Name_stringindexer_transform": 66.0, "Recruiter_Email_Address_stringindexer_transform": 103.0, "Company_name_stringindexer_transform": 95.0, "SetName_stringindexer_transform": 128.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 9.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 111, "QID": 2593, "Job_Title": "Senior BI Architect", "Job_Description": "JOB OVERVIEW  Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Recruiter_First_Name": "Colleen", "Recruiter_Last_Name": "Murray", "Recruiter_Email_Address": "cmurray@acgme.org", "Company_name": "ACGME", "SetName": "Mary Gathogo_09/07/2023_ACGME_Senior BI Architect", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 3.0, "Job_Title_stringindexer_transform": 7.0, "Job_Description_stringindexer_transform": 122.0, "Recruiter_First_Name_stringindexer_transform": 5.0, "Recruiter_Last_Name_stringindexer_transform": 5.0, "Recruiter_Email_Address_stringindexer_transform": 0.0, "Company_name_stringindexer_transform": 4.0, "SetName_stringindexer_transform": 125.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 5.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 100, "QID": 2583, "Job_Title": "Tableau Cloud", "Job_Description": "Tableau Opportunity Hi Emmanuel, I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak. Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently. Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Recruiter_First_Name": "Nicole", "Recruiter_Last_Name": "Mcneill", "Recruiter_Email_Address": "nicole.mcneill@unifyconsulting.com", "Company_name": "Unify Consukting", "SetName": "EMMANUEL OJENIYI_09/06/2023_Unify Consukting_Tableau Cloud", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 3.0, "Job_Title_stringindexer_transform": 59.0, "Job_Description_stringindexer_transform": 115.0, "Recruiter_First_Name_stringindexer_transform": 23.0, "Recruiter_Last_Name_stringindexer_transform": 61.0, "Recruiter_Email_Address_stringindexer_transform": 20.0, "Company_name_stringindexer_transform": 68.0, "SetName_stringindexer_transform": 7.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 3.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 109, "QID": 2591, "Job_Title": "Business Intelligence Developer", "Job_Description": "Spalding Consulting, Inc. is seeking a Business Intelligence Developer in Lexington Park, MD -Remote.  Spalding Consulting, Inc. is a professional services company delivering cutting-edge solutions to the Department of Defense since 2001. Our expert-level solutions include software development, information technology, program management, financial management and business intelligence services. Spalding Consulting offers competitive compensation, career development, flexible work schedules and excellent benefits.  Position Type: Full-Time Work Location: This is a remote position (see on-site requirements below).  **On-Site Requirements: On-boarding will require 1-2 visits to Patuxent River, MD for candidates that are local to the area. Candidates out of state will be onboarded virtually. Training will be virtual and telework maximized/permitted to the greatest extent possible, however for local candidates, training/tasking may require on-site work a few hours per week. Future on-site/telework requirements/schedules may change as additional client direction is received.      Essential Functions: Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.   Qualifications and Experience:  Required: At least 5 years of experience developing software programs using any language At least 2 years\u2019 experience of developing solutions to support an ETL process Experience with Oracle, SQL, or Teradata databases Experience with working on a team of at least 5 developers Experience with understanding and modifying data models  Desired: Development experience using Tableau or Qlik Experience using Atlassian Jira Experience making REST API calls Experience in an Agile development environment   Security Clearance: Must be eligible to obtain a Secret clearance. Requirements to obtain a clearance include US Citizenship, security investigation, etc.", "Recruiter_First_Name": "Daniela", "Recruiter_Last_Name": "Aguayo", "Recruiter_Email_Address": "Daniela.Aguayo@scipax.com", "Company_name": "Spalding Consulting", "SetName": "EMMANUEL OJENIYI_09/07/2023_Spalding Consulting_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 3.0, "Job_Title_stringindexer_transform": 0.0, "Job_Description_stringindexer_transform": 71.0, "Recruiter_First_Name_stringindexer_transform": 1.0, "Recruiter_Last_Name_stringindexer_transform": 2.0, "Recruiter_Email_Address_stringindexer_transform": 2.0, "Company_name_stringindexer_transform": 2.0, "SetName_stringindexer_transform": 116.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 4.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 106, "QID": 2588, "Job_Title": "Data Engineer", "Job_Description": "JOB DESCRIPTION & DETAILS     Day to day:  Insight Global is seeking a Data Engineer to support a local insurance company headquartered in Richmond, VA. This engineer will be responsible for enterprise data integration and reporting, as well as building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies. This candidate will be required to go onsite 2 days a week in the Richmond, VA area.     Responsibilities:  Assembling large, complex sets of data that meet non-functional and functional business requirements. Identifying, designing, and implementing internal process improvements including re-designing infrastructure for greater scalability, optimizing data delivery, and automating manual processes Building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies Building analytical tools to utilize the data pipeline, providing actionable insight into key business performance metrics including operational efficiency and customer acquisition Working with stakeholders including data, design, product and executive teams and assisting them with data-related technical issues Working with stakeholders including the Executive, Product, Data and Design teams to support their data infrastructure needs while assisting with data-related technical issues    Must Haves:  3-5+ years of experience as a Data Engineer Experience with MS SQL Server Platform (SSIS, SSRS & SSAS) Experience in data warehousing and ETL development (T-SQL, PLSQL, and/or SQL scripts) Experience working with intelligence products and data analytics tools (e.g. PowerBI, Tableau) Ability to compute, analyze and interpret complex and disparate data to produce relevant and consumable reports, dashboards, etc.", "Recruiter_First_Name": "Meg", "Recruiter_Last_Name": "Allen", "Recruiter_Email_Address": "Meg.Allen@insightglobal.com", "Company_name": "Randstad Federal", "SetName": "Avworo  OGHENEKEVWE _09/06/2023_Randstad Federal_Data Engineer", "CandidateID": "38457", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 3.0, "Job_Title_stringindexer_transform": 2.0, "Job_Description_stringindexer_transform": 134.0, "Recruiter_First_Name_stringindexer_transform": 90.0, "Recruiter_Last_Name_stringindexer_transform": 63.0, "Recruiter_Email_Address_stringindexer_transform": 61.0, "Company_name_stringindexer_transform": 20.0, "SetName_stringindexer_transform": 61.0, "CandidateID_stringindexer_transform": 9.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 8.0, "Applicant_stringindexer_transform": 9.0, "Recruiter_InterviewCount_stringindexer_transform": 10.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/5/2023", "NoofDays": -86, "LogInterviewID": 104, "QID": 2586, "Job_Title": "Senior SQL Database Administrator", "Job_Description": "Kelsey-Seybold Clinic, a Houston tradition in patient-centered care, is a multispecialty clinic with 40+ locations and comprises more than 700 physicians providing primary and specialty care collaboratively.  With more than 65 different clinical and non-clinical specialties, you can design a career path at Kelsey-Seybold Clinic to grow your future in a new direction.  Works collaboratively as a senior member of the Business Intelligence & Reporting team under the direction of KSC Application Technology Leadership. Supports, develops, and maintains SQL database environments and related technology. Acts as a team member on multi-team projects and uses advanced skill sets to develop, test, troubleshoot, and support database-related projects and associated solutions/applications. Acts as a mentor to others learning essential and advanced SQL-related skills.  Requirements include:  Bachelor\u2019s degree in a technical area or equivalent work experience 6 years experience in SQL database administration Flexibility and the ability to adapt to change. Proven communication, presentation, analytical, problem-solving, technical, and writing skills. MS SQL Server Administration MS SQL Transact SQL Programming (T-SQL) MS SQL Data Transformation Services (DTS) and SQL Server Integration Services (SSIS) programming. Performance Tuning of Hardware & MS SQL Server. MS SQL Server Analysis Services (SSAS) MS SQL Server Reporting Services (SSRS) Demonstrates an advanced understanding of the following: Database modeling/normalization Indexing strategies and maintenance Backup and recovery models Clustering and high availability Preferences include:  MCDBA MCTS MCITP Vendor Certified SQL Administrator Other database-related certification/s Why Kelsey-Seybold Clinic?  Medical, Vision, and Dental Tuition Reimbursement Company Matching 401K Employee Reward and Recognition Program Paid time off for vacation, sick, and holidays Employee Assistance Program Continuing Medical Education allowance If you want a satisfying career and a rich, rewarding personal life, don t choose between them.  Achieve them both at Kelsey-Seybold Clinic.  Kelsey-Seybold Clinic strives to provide equal opportunity employment without regard to race, color, religion, age, national origin, sex, gender, sexual orientation, gender identity/expression, genetic information, disability, veteran status, or any other basis protected by organizational policy or by federal, state, or local laws unless such distinction is required by law. Kelsey-Seybold is a VEVRAA Federal Contractor and desires priority referrals of protected veterans.  Job Type: Full-time  Pay: $110,090.00 - $136,995.00 per year  Benefits:  401(k) Dental insurance Flexible schedule Health insurance Life insurance Paid time off Professional development assistance Retirement plan Tuition reimbursement Vision insurance Schedule:  Monday to Friday Education:  Bachelor's (Preferred) Experience:  Database administration: 6 years (Preferred) Microsoft SQL Server: 6 years (Preferred) License/Certification:  Texas Driver's license (Preferred) Work Location: In person", "Recruiter_First_Name": "Cassie", "Recruiter_Last_Name": "Smith", "Recruiter_Email_Address": "cassiesmithboz6b_p3y@indeedemail.com", "Company_name": "Kelsey-Seybold Clinic", "SetName": "EMMANUEL OJENIYI_09/04/2023_Kelsey-Seybold Clinic_Senior SQL Database Administrator", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 41.0, "Job_Title_stringindexer_transform": 64.0, "Job_Description_stringindexer_transform": 121.0, "Recruiter_First_Name_stringindexer_transform": 103.0, "Recruiter_Last_Name_stringindexer_transform": 51.0, "Recruiter_Email_Address_stringindexer_transform": 55.0, "Company_name_stringindexer_transform": 52.0, "SetName_stringindexer_transform": 99.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 3.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/5/2023", "NoofDays": -86, "LogInterviewID": 97, "QID": 2580, "Job_Title": "Tableau Developer (Business Intelligence)", "Job_Description": "Responsibilities Work closely with Data integration team to stage data for the reporting requirement Build rich visualization dashboards using tableau , SSRS and other relevant technologies Perform report administration & user access provisioning activities for optimized performance Support business team for self-service and ad-hoc activities Set standards for reporting & BI functions; design templates which are scalable, repeatable, and simple Work with business teams to understand their unique business and technical requirements for tools and analytics Lead the requirement gathering, design and development of reporting solution using various tools e.g Tableau, MS SSRS for all different types of reporting for all LOB. Lead the development of Master Reporting Inventory as part of Data Governance initiatives. Effective collaboration with multiple levels of end users including data stewards, leadership and management, executive and other end users. Led the reporting design and architecture and work closely with infrastructure to meet the needs of the business Work with other technical staff, such as networking to ensure connectivity, compatibility, and scalability of reporting platform & systems Support ongoing monitoring, automation and refinement of reporting solutions Work with management to identify and resolve reporting related issues Participate in process reviews and enhancements. Participate in design and delivery of cubes, dashboards and various self-service business intelligence solutions. Maintains a high degree of business functional knowledge and current automated technologies and tools. All other duties assigned", "Recruiter_First_Name": "Edward", "Recruiter_Last_Name": "Alonzo", "Recruiter_Email_Address": "not sure", "Company_name": "AltaMed", "SetName": "JORUM MWANGI_09/05/2023_AltaMed_Tableau Developer (Business Intelligence)", "CandidateID": "37975", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "568", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "AMINAT OKERINDE", "Applicant": "JORUM MWANGI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 41.0, "Job_Title_stringindexer_transform": 85.0, "Job_Description_stringindexer_transform": 116.0, "Recruiter_First_Name_stringindexer_transform": 19.0, "Recruiter_Last_Name_stringindexer_transform": 23.0, "Recruiter_Email_Address_stringindexer_transform": 100.0, "Company_name_stringindexer_transform": 16.0, "SetName_stringindexer_transform": 48.0, "CandidateID_stringindexer_transform": 13.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 4.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 28.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 9.0, "Applicant_stringindexer_transform": 17.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "9/1/2023", "NoofDays": -90, "LogInterviewID": 95, "QID": 2578, "Job_Title": "Sr. Architect, Power BI", "Job_Description": "Requirements  Bachelor\u2019s Degree desired in Computer Science, Information Technology, or related field Minimum of 5 years of experience with database design and Architecture, at least 2 years with Azure technologies, and previous Consulting experience Expert knowledge of Data Management, Business Intelligence and Analytics concepts including: Data Movement (ETL/ELT) Data Warehousing (Designing and Implementing, Azure SQL, Synapse) Azure Storage Technologies (Data Lake, Blob Storage) Data Governance (including Data Quality and Profiling, Master Data Management, and Metadata Management) Business Intelligence, including Reporting and Visualizations (Key Performance Indicators (KPI), and Scorecards) Predictive, Prescription, and Descriptive Analytics Expert knowledge of Microsoft Azure technologies: SQL Server on premises plus cloud supported versions) Azure Data Factory (including ARM templates) Azure Synapse, Cosmos DB Azure Data Lake/Azure Blob Storage Power BI for reporting and analytics Databricks Azure DevOps (including building Stories and tasks, and using development pipelines and ARM templates for publishing code) Eagerness to contribute in a team-oriented environment Excellent communication (written and oral) and interpersonal skills for both technical and non-technical teams Passionate about learning new technologies Analytical approach to problem-solving; ability to use technology to solve business problems Ability to work in a fast-paced environment   Additional Preferred Experience:  Analytics and Data Science tools, technologies, and techniques (R, Python, algorithms, Azure ML Studio/Services) Custom Visualizations in Microsoft Power BI using D3 and jQuery Azure Infrastructure architecture and design Knowledge and experience using Azure DevOps for source control, project deployment and project management", "Recruiter_First_Name": "Sue", "Recruiter_Last_Name": "Lieblang", "Recruiter_Email_Address": "slieblang@3cloudsolutions.com", "Company_name": "3Cloud", "SetName": "Mary Gathogo_09/01/2023_3Cloud_Sr. Architect, Power BI", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 52.0, "Job_Title_stringindexer_transform": 48.0, "Job_Description_stringindexer_transform": 94.0, "Recruiter_First_Name_stringindexer_transform": 40.0, "Recruiter_Last_Name_stringindexer_transform": 84.0, "Recruiter_Email_Address_stringindexer_transform": 97.0, "Company_name_stringindexer_transform": 39.0, "SetName_stringindexer_transform": 127.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 4.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/31/2023", "NoofDays": -91, "LogInterviewID": 94, "QID": 2577, "Job_Title": "Business Intelligence Developer", "Job_Description": "Responsible for the design, development and maintenance of informational dashboards, data and report development. KPIs and dashboards according to semi-monthly / monthly cycle reporting. Coordinate forecasting exercise and planning resources. Analyze activity performance on providing reports, timelines, and analysis such as month-by-month hourly resource time utilization and unit costing, analysis on trends. Developing and providing accurate reporting tools for organization in relation with Programs and Indirect budgets. Interfacing with project teams to ensure consistent reporting of project performance, scope and accurate project forecasting. Conduct cost/benefit analysis and develop business case. Put in place all actions needed regarding continuous improvement and processes. A demonstrable experience in producing high quality and detailed written documents. Other duties as assigned or required.", "Recruiter_First_Name": "Daniela", "Recruiter_Last_Name": "Aguayo", "Recruiter_Email_Address": "Daniela.Aguayo@scipax.com", "Company_name": "Spalding Consulting", "SetName": "EMMANUEL OJENIYI_08/31/2023_Spalding Consulting_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 14.0, "Job_Title_stringindexer_transform": 0.0, "Job_Description_stringindexer_transform": 127.0, "Recruiter_First_Name_stringindexer_transform": 1.0, "Recruiter_Last_Name_stringindexer_transform": 2.0, "Recruiter_Email_Address_stringindexer_transform": 2.0, "Company_name_stringindexer_transform": 2.0, "SetName_stringindexer_transform": 44.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/31/2023", "NoofDays": -91, "LogInterviewID": 93, "QID": 2576, "Job_Title": "Data Specialist", "Job_Description": "Data Specialist", "Recruiter_First_Name": "Sharon", "Recruiter_Last_Name": "Flanagan", "Recruiter_Email_Address": "SFlanagan@compia.global", "Company_name": "CompTIA", "SetName": "abebe woldeargay_08/31/2023_CompTIA_Data Specialist", "CandidateID": "37077", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewDate_stringindexer_transform": 14.0, "Job_Title_stringindexer_transform": 79.0, "Job_Description_stringindexer_transform": 123.0, "Recruiter_First_Name_stringindexer_transform": 37.0, "Recruiter_Last_Name_stringindexer_transform": 52.0, "Recruiter_Email_Address_stringindexer_transform": 90.0, "Company_name_stringindexer_transform": 80.0, "SetName_stringindexer_transform": 0.0, "CandidateID_stringindexer_transform": 18.0, "SurveyResponse_stringindexer_transform": 1.0, "InterviewType_stringindexer_transform": 2.0, "Preparationscore_stringindexer_transform": 1.0, "AutoInterviewsCount_stringindexer_transform": 2.0, "AutoInterviewsDuration_stringindexer_transform": 1.0, "MentorInterviewsCount_stringindexer_transform": 2.0, "MentorInterviewsDuration_stringindexer_transform": 1.0, "Mentor_stringindexer_transform": 5.0, "Applicant_stringindexer_transform": 2.0, "Recruiter_InterviewCount_stringindexer_transform": 6.0, "Technical_InterviewCount_stringindexer_transform": 4.0, "InterviewScore_stringindexer_transform": 1.0}, {"InterviewDate": "8/31/2023", "NoofDays": -91, "LogInterviewID": 92, "QID": 2575, "Job_Title": "Power BI Developer", "Job_Description": "Power BI Developer Position The Power BI Developer will be responsible for designing, developing, and maintaining interactive data visualizations and reports using the Power BI platform. To be successful in this role, the Power BI Developer will collaborate with stakeholders and business analysts to understand requirements and translate them into effective and visually appealing dashboards and reports. Your expertise in Power BI and data visualization will play a crucial role in helping our organization make informed decisions based on data-driven insights.", "Recruiter_First_Name": "Samuel", "Recruiter_Last_Name": "JOHNSON", "Recruiter_Email_Address": "linkedin.com/in/samjohnson2010", "Company_name": "ESP IT", "SetName": "Altish Asfaw_08/31/2023_ESP IT_Power BI Developer", "CandidateID": "37423", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "1196", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Leslie Boye", "Applicant": "Altish Asfaw", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 14.0, "Job_Title_stringindexer_transform": 1.0, "Job_Description_stringindexer_transform": 0.0, "Recruiter_First_Name_stringindexer_transform": 29.0, "Recruiter_Last_Name_stringindexer_transform": 107.0, "Recruiter_Email_Address_stringindexer_transform": 34.0, "Company_name_stringindexer_transform": 7.0, "SetName_stringindexer_transform": 121.0, "CandidateID_stringindexer_transform": 14.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 5.0, "AutoInterviewsDuration_stringindexer_transform": 29.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 10.0, "Applicant_stringindexer_transform": 15.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/30/2023", "NoofDays": -92, "LogInterviewID": 96, "QID": 2579, "Job_Title": "SQL Developer", "Job_Description": "Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "Recruiter_First_Name": "Brendan", "Recruiter_Last_Name": "Barker", "Recruiter_Email_Address": "Brendan.Barker@insightglobal.com", "Company_name": "Community First Health Plans", "SetName": "AYODEJI OLAWOYE_08/30/2023_Community First Health Plans_SQL Developer", "CandidateID": "33898", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "37.5", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "392", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "3", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 11.0, "Job_Title_stringindexer_transform": 4.0, "Job_Description_stringindexer_transform": 55.0, "Recruiter_First_Name_stringindexer_transform": 17.0, "Recruiter_Last_Name_stringindexer_transform": 25.0, "Recruiter_Email_Address_stringindexer_transform": 6.0, "Company_name_stringindexer_transform": 11.0, "SetName_stringindexer_transform": 32.0, "CandidateID_stringindexer_transform": 5.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 4.0, "AutoInterviewsCount_stringindexer_transform": 3.0, "AutoInterviewsDuration_stringindexer_transform": 12.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 2.0, "Applicant_stringindexer_transform": 4.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 5.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/30/2023", "NoofDays": -92, "LogInterviewID": 98, "QID": 2581, "Job_Title": "Data Governance Analyst", "Job_Description": "The Data Governance Management Office (DGMO) is responsible for the development, implementation, and continuous improvement of an enterprise data governance framework that will increase coordination and consistency across enterprise domains, establish a shared, cross-functional understanding of critical data assets and concepts, and improve AltaMed\u2019s ability to make data-informed decisions using quality, trusted data & insights.   The Data Governance (DG) Analyst is responsible for facilitating and managing data governance initiatives, including the development of data standards, policies and procedures, and working with stakeholders from across the organization to promote and implement data governance best practices (data classification, data lineage, lifecycle management). This role will convene cross-functional groups to understand and document data requirements, data flows, and data use. In addition, the DG Analyst will help define and execute toward the implementation of an enterprise data governance roadmap, collaborating with data & analytics technical teams to bridge business objectives to analytical products & solutions.   To be successful in this role, individuals must have a blend of business acumen, a problem-solving attitude, data governance and data management knowledge, and a strong ability to communicate effectively with both technical and non-technical stakeholders. Other critical success factors include: comfort with ambiguity, curiosity and willingness to learn new subject matter, and an ability to build relationships with a focus on partnership. This role will support cross-functional teams with analysis and measurement of key data governance inputs, and requires some proficiency with data analysis and data quality measurement techniques.   Responsibilities   Contribute to and facilitate the creation of policies, standards, and documents on topics such as: data governance, data stewardship, master data management, data quality management. Build and maintain data governance collateral to centralize, coordinate, and share DGMO content with a wide array of enterprise stakeholders. Work with key business and technical stakeholders to create, manage, and curate an enterprise business glossary, data dictionary, and data catalog. Capture and share detailed formal documents, such as governance meeting minutes for operational, tactical, strategic, and executive audiences. Implement change control & change management processes and tools, and resolve enterprise data governance issues. Develop and socialize data maps to ensure transparency in the lineage and flow of data within and outside of the organization. Define and drive tactical roadmaps for enterprise data governance adoption, including socialization, stakeholder buy-in, operating model implementation, and data governance training. Work with other data & analytics teams to develop, promote, and monitor adherence to data quality standards. Develop, maintain, and socialize data inventory tools and methods to support data asset documentation & governance. Work with key stakeholders to define, monitor, and share data governance key performance, quality, and adherence metrics. Perform other duties as assigned.   Qualifications   Bachelor\u2019s degree in information technology, business, public health, mathematics, finance, or a related field, with appropriate professional and technical experience required. Minimum of 4 years of experience in data management, data analytics, product management, or consulting, or other relevant work experience required. Experience with project management techniques, such as cross-functional project coordination & delivery, work plan development, requirements gathering is required. Prior professional experience working within a healthcare environment (payer, provider, vendor) required. Proven ability to facilitate effective meetings and work sessions across various levels of staff and leadership required. Prior experience with data governance tools and platforms highly preferred. Previous experience in health care analytics, data strategy, business strategy, or clinical administration preferred. Prior experience with product management & agile delivery principles (Scaled Agile - SAFe) preferred. Show less  Seniority level Entry level Employment type Full-time Job function Information Technology Industries Wellness and Fitness Services", "Recruiter_First_Name": "Edward", "Recruiter_Last_Name": "Alonzo", "Recruiter_Email_Address": "ealonzo@altamed.org", "Company_name": "AltaMed", "SetName": "Betty Asmerom_08/30/2023_AltaMed_Data Governance Analyst", "CandidateID": "35551", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Saher Maiber", "Applicant": "Betty Asmerom", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 11.0, "Job_Title_stringindexer_transform": 45.0, "Job_Description_stringindexer_transform": 41.0, "Recruiter_First_Name_stringindexer_transform": 19.0, "Recruiter_Last_Name_stringindexer_transform": 23.0, "Recruiter_Email_Address_stringindexer_transform": 71.0, "Company_name_stringindexer_transform": 16.0, "SetName_stringindexer_transform": 120.0, "CandidateID_stringindexer_transform": 22.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 20.0, "Applicant_stringindexer_transform": 24.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/30/2023", "NoofDays": -92, "LogInterviewID": 87, "QID": 2570, "Job_Title": "Data Engineer", "Job_Description": "5+ years of experience working with SQL/Azure SQL/T-SQL. proficiency with at least one RDBMS like SQL Server DB, Oracle, MySQL, Postgres is must. Understanding of modern cloud data platforms like Azure or Snowflake is preferred but not required. Understanding of ETL and data warehousing concepts, coupled with hands-on experience of at least one ETL tool like SSIS, Azure Data Factory, Talend, Informatica. Knowledge of Power BI, DAX, or Tableau or SSRS. Adapt at conveying insights through data, assisting partners in identifying what matters and what steps they can take to help their business. Devotion to the QA process, conducting QA testing, and adept troubleshooting While AI or ML experience is preferred, it is not obligatory. Awareness of modern-day storage, compute, serverless, and orchestration services offered by cloud platform such as Azure, AWS, GCP. Experience with task automation, configuration, and alerts via PowerShell, Azure Data Factory, Databricks, SQL Agent, Data Pipelines. Working knowledge of Python and/or Spark (preferred but not required). Understanding of data modeling is desired but not mandatory. Advanced knowledge of performance monitoring and optimization. Be able to analyze system resource utilization, bottlenecks, and plan platform capacity sizing (activity monitors, traces, query tuning, optimizers, etc.) Capability to quickly adapt to new projects, systems, and technology tools. Must reside in Southern California. Some of the systems we work with are: Yardi (multiple modules including Voyager, Deal Manager), SQL databases and DW, Smartsheet, HubSpot, various 3rd party data sources.", "Recruiter_First_Name": "Drake", "Recruiter_Last_Name": "Van Ness", "Recruiter_Email_Address": "dvanness@rexfordindustrial.com", "Company_name": "Rexford Industrial", "SetName": "Talq Tera_08/30/2023_Rexford Industrial_Data Engineer", "CandidateID": "39119", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "326", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 11.0, "Job_Title_stringindexer_transform": 2.0, "Job_Description_stringindexer_transform": 111.0, "Recruiter_First_Name_stringindexer_transform": 66.0, "Recruiter_Last_Name_stringindexer_transform": 30.0, "Recruiter_Email_Address_stringindexer_transform": 89.0, "Company_name_stringindexer_transform": 82.0, "SetName_stringindexer_transform": 26.0, "CandidateID_stringindexer_transform": 4.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 4.0, "AutoInterviewsCount_stringindexer_transform": 5.0, "AutoInterviewsDuration_stringindexer_transform": 36.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 3.0, "Recruiter_InterviewCount_stringindexer_transform": 3.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/29/2023", "NoofDays": -93, "LogInterviewID": 78, "QID": 2561, "Job_Title": "Embedded BI Data Visualisation Specialist SIBU510", "Job_Description": "Analyze and Define Raw Data Visualizing and developing BI solutions (Dashboards, Scorecards, Analytic reports) Implement best practices to ensure dashboard design consistency for the best user experience Design and test analytics platform code. Data Preparation (Predictive & Restrictive) Enhance and Streamline data collection process Custom Analysis Long term research and prediction Using statistical techniques, collect and analyse data from the clients internal databases and systems and convert it to actionable intelligence; Lead the design of comprehensive data, intelligence and value proposition tools; Identify and communicate trends within complex datasets to stakeholders across the business, including the top problems that need to be solved and how to solve them proactively; Use internal data analytics tools to develop data dashboards that can be accessed by corporate security partners and senior stakeholders on demand; Improve standard operating procedures (SOPs) for implementing databases and data collection systems Plan, research and draft a range of tailored reports to deliver actionable insight for internal clients, including periodic reports (monthly, quarterly, bi-annual, etc.) and bespoke briefs with minimal supervision; Maintain clear and coherent communication, both verbal and written, to understand data needs and report results; Display creative thinking and consulting skills Identify gaps in crucial data, information and intelligence, and submit plans to fill them; Conduct briefings as needed for a variety of levels of customers as requested (via phone, video conference, in-person briefing, or industry conference); Establish and maintain professional relationships with internal stakeholders across the client business", "Recruiter_First_Name": "Alexandra", "Recruiter_Last_Name": "Adams", "Recruiter_Email_Address": "Alexandra.Adams@sibylline.co.uk", "Company_name": "Sibylline", "SetName": "Adib Kazi_08/29/2023_Sibylline_Embedded BI Data Visualisation Specialist SIBU510", "CandidateID": "38944", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "71", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "Adib Kazi", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 26.0, "Job_Title_stringindexer_transform": 81.0, "Job_Description_stringindexer_transform": 38.0, "Recruiter_First_Name_stringindexer_transform": 86.0, "Recruiter_Last_Name_stringindexer_transform": 43.0, "Recruiter_Email_Address_stringindexer_transform": 27.0, "Company_name_stringindexer_transform": 49.0, "SetName_stringindexer_transform": 53.0, "CandidateID_stringindexer_transform": 16.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 3.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 4.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 3.0, "Applicant_stringindexer_transform": 20.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/29/2023", "NoofDays": -93, "LogInterviewID": 91, "QID": 2574, "Job_Title": "Business Intelligence Architect", "Job_Description": "Responsibilities:   Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis.   With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables.   Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS.   Research and propose opportunities for data acquisition and new uses for existing data.   Code, test, and document new or modified data systems to create robust and scalable applications for analytics.   Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables.   In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions.   Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts.   Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI.   Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices.   Collaborate with Quality Assurance team to ensure valid and proper deliverables.   Support business decisions with ad-hoc analysis as needed.   Participate in rotation of after-hours support.   Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates.   Research new technologies for implementation by the team for producing cutting-edge solutions.   Cultivate business relationships with stakeholders.   May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.   Required:   Bachelor\u2019s degree in a related discipline (Computer Science, Information Systems Management, Engineering, or similar) or equivalent work experience.   Advanced knowledge of Microsoft\u2019s SQL Server, SSRS, SSIS, and SSAS.   Knowledgeable with Power BI, preferably with an on-premises environment.   Intermediate SQL Query, ETL, and Data Architecture experience.   Advanced Knowledge and ability in writing complex T-SQL code.   Ability to quickly identify and troubleshoot problematic SQL code.   Ability to design tables, data marts, and/or databases to suit reporting needs.   Knowledge of data mapping, database design, and data warehouse concepts.   Introductory experience with SQL Database Administration.   Knowledge using Jira, Bitbucket, GitKraken, and/or SourceTree with a good understanding of Git.   Desire and ability to learn emerging technologies and methodologies.   Ability to interpret report requests and requirements in order to build appropriate automated solutions.   Ability to work with shifting deadlines in a fast-paced environment.   Strong computer skills, including Microsoft Office (Access, Excel, Word, & Outlook).   Strong attention to detail, interpersonal skills, and notation skills.", "Recruiter_First_Name": "Jordan", "Recruiter_Last_Name": "Abraham", "Recruiter_Email_Address": "jabraham@marinerfinance.com", "Company_name": "Mariner Finance", "SetName": "Yama Touray_08/29/2023_Mariner Finance_Business Intelligence Architect", "CandidateID": "37640", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 26.0, "Job_Title_stringindexer_transform": 17.0, "Job_Description_stringindexer_transform": 88.0, "Recruiter_First_Name_stringindexer_transform": 7.0, "Recruiter_Last_Name_stringindexer_transform": 6.0, "Recruiter_Email_Address_stringindexer_transform": 17.0, "Company_name_stringindexer_transform": 44.0, "SetName_stringindexer_transform": 47.0, "CandidateID_stringindexer_transform": 7.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 6.0, "Applicant_stringindexer_transform": 8.0, "Recruiter_InterviewCount_stringindexer_transform": 3.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 86, "QID": 2569, "Job_Title": "Data Analyst", "Job_Description": "Expected they will be able to:  \u2022\tCreating and developing actionable interactive reports and dashboards using statistical and business intelligence tools such as PowerBI \u2022\tConducting exploratory data analysis to identify areas for improvement and generate insights into products and services \u2022\tConsulting with stakeholders using human centered design approaches to understand the need for data products and to identify a potential solution. \u2022\tTranslating customer requirements for data products (datasets, reports, dashboards) into data solutions; creating calculated measures, columns, relationships, etc \u2022\tAnalyzing source systems and designing new data structures for high-volume, complex data. \u2022\tAccessing, transforming, cleansing, and testing data products using programming languages such as M, DAX, Python, R, and SQL. \u2022\tDesigning data visualization strategies that make large or complex datasets more understandable, accessible, and usable. \u2022\tDeveloping wireframes or prototypes of potential user experiences to share with stakeholder to collect feedback. \u2022\tCommunicating (orally and in written form) analytical results displayed through data visualizations to diverse stakeholder groups. General requirements:  \u2022\tTier 4-High Risk Public Trust Clearance \u2022\tIdeally 5 years of experience using business intelligence tools e.g. Power BI, to develop interactive data visualizations and reports. \u2022\tExperience using languages (e.g. DAX, M, Python, R, SQL) to structure and analyze data. \u2022\tKnowledge of data architecture and modelling, including relational databases.", "Recruiter_First_Name": "Jason", "Recruiter_Last_Name": "Dryer", "Recruiter_Email_Address": "jason.dryer@randstadusa.com", "Company_name": "Randstad federal", "SetName": "Yama Touray_08/28/2023_Randstad federal_Data Analyst", "CandidateID": "37640", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1037", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 5.0, "Job_Title_stringindexer_transform": 9.0, "Job_Description_stringindexer_transform": 62.0, "Recruiter_First_Name_stringindexer_transform": 16.0, "Recruiter_Last_Name_stringindexer_transform": 21.0, "Recruiter_Email_Address_stringindexer_transform": 11.0, "Company_name_stringindexer_transform": 42.0, "SetName_stringindexer_transform": 95.0, "CandidateID_stringindexer_transform": 7.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 27.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 6.0, "Applicant_stringindexer_transform": 8.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 88, "QID": 2571, "Job_Title": "Power BI Developer", "Job_Description": "Power BI Developer Position The Power BI Developer will be responsible for designing, developing, and maintaining interactive data visualizations and reports using the Power BI platform. To be successful in this role, the Power BI Developer will collaborate with stakeholders and business analysts to understand requirements and translate them into effective and visually appealing dashboards and reports. Your expertise in Power BI and data visualization will play a crucial role in helping our organization make informed decisions based on data-driven insights.", "Recruiter_First_Name": "Samuel", "Recruiter_Last_Name": "Johnson", "Recruiter_Email_Address": "inmail-hit-reply@linkedin.com", "Company_name": "ESP IT", "SetName": "Altish Asfaw_08/28/2023_ESP IT_Power BI Developer", "CandidateID": "37423", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "237", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Leslie Boye", "Applicant": "Altish Asfaw", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 5.0, "Job_Title_stringindexer_transform": 1.0, "Job_Description_stringindexer_transform": 0.0, "Recruiter_First_Name_stringindexer_transform": 29.0, "Recruiter_Last_Name_stringindexer_transform": 15.0, "Recruiter_Email_Address_stringindexer_transform": 31.0, "Company_name_stringindexer_transform": 7.0, "SetName_stringindexer_transform": 60.0, "CandidateID_stringindexer_transform": 14.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 3.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 19.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 10.0, "Applicant_stringindexer_transform": 15.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 84, "QID": 2567, "Job_Title": "Business Intelligence Analyst-Power BI", "Job_Description": "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed Position Requirements  Education and Certifications Required \u2022\tBachelor\u2019s Degree in Business Analytics, Management Information Systems or, Business Computer Information Systems \u2022\tCBIP Certification a Plus Experience Required \u2022\t5 + years as a Business Intelligence Analyst, Business Analyst, Systems Support Analyst or Application Support Analyst \u2022\tExperience in Power BI developing reports and dashboards \u2022\tExperience in Business Objects Designer for creating and maintaining universes, WEBI, Derived tables, @functions and schemas \u2022\tUse of Business Objects to access data from a variety of sources \u2022\tPrior business systems analysis experience \u2022\tDrive RCA (root cause analysis) activities \u2022\tWorking experience in server and PC environments and skilled in navigating in a distributed server architecture Experience Preferred \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Recruiter_First_Name": "Wesley", "Recruiter_Last_Name": "Mercer", "Recruiter_Email_Address": "wesley.mercer@matrixres.com", "Company_name": "CoServ", "SetName": "LILIAN NJERI_08/28/2023_CoServ_Business Intelligence Analyst-Power BI", "CandidateID": "37295", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1514", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 5.0, "Job_Title_stringindexer_transform": 22.0, "Job_Description_stringindexer_transform": 53.0, "Recruiter_First_Name_stringindexer_transform": 59.0, "Recruiter_Last_Name_stringindexer_transform": 100.0, "Recruiter_Email_Address_stringindexer_transform": 19.0, "Company_name_stringindexer_transform": 15.0, "SetName_stringindexer_transform": 4.0, "CandidateID_stringindexer_transform": 6.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 48.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 3.0, "Applicant_stringindexer_transform": 5.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 89, "QID": 2572, "Job_Title": "Business Intelligence Analyst-Power BI", "Job_Description": "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed    Experience Preferred  \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Recruiter_First_Name": "Chris", "Recruiter_Last_Name": "Cave", "Recruiter_Email_Address": "wesley.mercer@matrixres.com", "Company_name": "CoServ", "SetName": "LILIAN NJERI_08/28/2023_CoServ_Business Intelligence Analyst-Power BI", "CandidateID": "37295", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "3", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 5.0, "Job_Title_stringindexer_transform": 22.0, "Job_Description_stringindexer_transform": 109.0, "Recruiter_First_Name_stringindexer_transform": 63.0, "Recruiter_Last_Name_stringindexer_transform": 83.0, "Recruiter_Email_Address_stringindexer_transform": 19.0, "Company_name_stringindexer_transform": 15.0, "SetName_stringindexer_transform": 4.0, "CandidateID_stringindexer_transform": 6.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 3.0, "Applicant_stringindexer_transform": 5.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 5.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/27/2023", "NoofDays": -95, "LogInterviewID": 90, "QID": 2573, "Job_Title": "Data Analytics", "Job_Description": "Data Analytics role", "Recruiter_First_Name": "Jason", "Recruiter_Last_Name": "Dryer", "Recruiter_Email_Address": "jason.dryer@randstadusa.com", "Company_name": "Randstad Federal", "SetName": "Yama Touray_08/27/2023_Randstad Federal_Data Analytics", "CandidateID": "37640", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "1069", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 45.0, "Job_Title_stringindexer_transform": 6.0, "Job_Description_stringindexer_transform": 126.0, "Recruiter_First_Name_stringindexer_transform": 16.0, "Recruiter_Last_Name_stringindexer_transform": 21.0, "Recruiter_Email_Address_stringindexer_transform": 11.0, "Company_name_stringindexer_transform": 20.0, "SetName_stringindexer_transform": 12.0, "CandidateID_stringindexer_transform": 7.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 2.0, "AutoInterviewsCount_stringindexer_transform": 3.0, "AutoInterviewsDuration_stringindexer_transform": 26.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 6.0, "Applicant_stringindexer_transform": 8.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/26/2023", "NoofDays": -96, "LogInterviewID": 85, "QID": 2568, "Job_Title": "Data Analytics", "Job_Description": "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.  Key Responsibilities:  Data Visualization Design: Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques. Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels. Data Analysis and Insight Generation: Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization. Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization. Data Quality and Governance: Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams. Implement data quality checks and validation processes to maintain the integrity of visualized data. Stakeholder Management and Collaboration: Engage with various departments and business leaders to gather requirements and understand their data needs. Collaborate with stakeholders to refine visualization designs and align them with business objectives. Data Strategy and Technology: Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities. Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.", "Recruiter_First_Name": "Ashley", "Recruiter_Last_Name": "Selki", "Recruiter_Email_Address": "https://www.linkedin.com/in/ashley-selki/.", "Company_name": "Lexipol LLC", "SetName": "AYODEJI OLAWOYE_08/26/2023_Lexipol LLC_Data Analytics", "CandidateID": "33898", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 58.0, "Job_Title_stringindexer_transform": 6.0, "Job_Description_stringindexer_transform": 2.0, "Recruiter_First_Name_stringindexer_transform": 61.0, "Recruiter_Last_Name_stringindexer_transform": 90.0, "Recruiter_Email_Address_stringindexer_transform": 33.0, "Company_name_stringindexer_transform": 13.0, "SetName_stringindexer_transform": 135.0, "CandidateID_stringindexer_transform": 5.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 2.0, "Applicant_stringindexer_transform": 4.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 79, "QID": 2562, "Job_Title": "IT Data Specialist", "Job_Description": "JOB SUMMARY  At Houston Methodist, the IT Data Specialist is responsible for supporting an enterprise wide business intelligence and analytics framework that will provide the organization with solutions for effective decision-making. This position utilizes critical thinking, attention to detail, and effective communication skills and collaborates effectively with teams to consult with business area leads to generate solution recommendations. The IT Data Specialist plays a technical role on multiple projects and communicates effectively with technical and non-technical audiences. The position utilizes technical expertise in Business Intelligence architecture, design and implementation with experience in business, healthcare and technology projects. The incumbent will be actively involved in supporting, developing and advancing Houston Methodist\u2019s Analytics applications. The IT Data Specialist will use tools such as Microsoft SQL Server, Microsoft SQL Server Reporting Services, Microsoft SQL Server Integration Services, and Tableau to design and implement innovative approaches to data collection, analysis, interpretation and presentation to support planning and decision-making at all levels of the organization and assist in managing data as a corporate strategic resource.     Primary Job Responsibilities  Communicates (oral and written) effectively with customers, vendors, colleagues, and management about services, contact information, system availability, and information. Assists the business analysts to elicit requirements to document. technical and design specifications for package solutions, and/or software development. Assists with user education of business intelligence applications and helps ensure access to data with the goal of reduced reliance on technical specialists in order to obtain data. Develops Analytics Solutions including the data marts, Tableau data sources, reports and dashboards that support operational and strategic decision making. Identifies required source system data and develops ETL processes that move data from source systems into the data warehouse and data marts. Participates in resolving major system outages, disaster management and change control and provides technical or on call support for Analytics applications. Installs, configures, and deploys Analytics tools including as Microsoft SQL Server, and Tableau. Ensures all reported data and information are accurate, consistent, relevant and timely. Practices good time management, good assessment in professional decision making, and management reporting skills.", "Recruiter_First_Name": "Akshay", "Recruiter_Last_Name": "Kumar", "Recruiter_Email_Address": "akshay.kumar@Experis.com", "Company_name": "Houston Methodist", "SetName": "EMMANUEL OJENIYI_08/25/2023_Houston Methodist_IT Data Specialist", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "70", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 2.0, "Job_Title_stringindexer_transform": 44.0, "Job_Description_stringindexer_transform": 30.0, "Recruiter_First_Name_stringindexer_transform": 102.0, "Recruiter_Last_Name_stringindexer_transform": 47.0, "Recruiter_Email_Address_stringindexer_transform": 44.0, "Company_name_stringindexer_transform": 69.0, "SetName_stringindexer_transform": 105.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 3.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 37.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 80, "QID": 2563, "Job_Title": "Tableau Cloud opportunity with Unify Consulting", "Job_Description": "Tableau Opportunity Hi Emmanuel,  I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak.  Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently.  Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Recruiter_First_Name": "Nicole", "Recruiter_Last_Name": "Mcneil", "Recruiter_Email_Address": "nicole.mcneill@unifyconsulting.com", "Company_name": "unifyconsulting.com", "SetName": "EMMANUEL OJENIYI_08/25/2023_unifyconsulting.com_Tableau Cloud opportunity with Unify Consulting", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 2.0, "Job_Title_stringindexer_transform": 42.0, "Job_Description_stringindexer_transform": 135.0, "Recruiter_First_Name_stringindexer_transform": 23.0, "Recruiter_Last_Name_stringindexer_transform": 59.0, "Recruiter_Email_Address_stringindexer_transform": 20.0, "Company_name_stringindexer_transform": 102.0, "SetName_stringindexer_transform": 67.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 82, "QID": 2565, "Job_Title": "Power BI Developer", "Job_Description": "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.   Key Responsibilities:   Data Visualization Design:  Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques.  Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels.  Data Analysis and Insight Generation:  Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization.  Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization.  Data Quality and Governance:  Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams.  Implement data quality checks and validation processes to maintain the integrity of visualized data.  Stakeholder Management and Collaboration:  Engage with various departments and business leaders to gather requirements and understand their data needs.  Collaborate with stakeholders to refine visualization designs and align them with business objectives.  Data Strategy and Technology:  Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities.  Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.  Qualifications and Requirements  Bachelor's or Master's degree in Data Science, Data Visualization, Computer Science, or comparable experience.  Proven experience (typically 5+ years) in data visualization, with a track record of creating impactful visualizations.  Strong proficiency in data visualization tools such as Power BI, Tableau, or other industry-leading platforms.  Solid understanding of data analysis and data interpretation techniques to support the creation of meaningful visualizations.  Demonstrated ability to translate complex data concepts into clear and visually appealing presentations.  Strong communication and collaboration skills to work effectively with cross-functional teams and stakeholders.  Analytical mindset with a passion for discovering insights through data visualization.", "Recruiter_First_Name": "Annie", "Recruiter_Last_Name": "Daub", "Recruiter_Email_Address": "adaub@lexipol.com", "Company_name": "LEXIPOL", "SetName": "LILIAN NJERI_08/25/2023_LEXIPOL_Power BI Developer", "CandidateID": "37295", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 2.0, "Job_Title_stringindexer_transform": 1.0, "Job_Description_stringindexer_transform": 59.0, "Recruiter_First_Name_stringindexer_transform": 31.0, "Recruiter_Last_Name_stringindexer_transform": 28.0, "Recruiter_Email_Address_stringindexer_transform": 74.0, "Company_name_stringindexer_transform": 110.0, "SetName_stringindexer_transform": 129.0, "CandidateID_stringindexer_transform": 6.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 3.0, "Applicant_stringindexer_transform": 5.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 83, "QID": 2566, "Job_Title": "Power BI Developer", "Job_Description": "As a Business Solution Architect, you will\u2026  lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design.   Lead the Functional team.  Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "Recruiter_First_Name": "Dana", "Recruiter_Last_Name": "Turner", "Recruiter_Email_Address": "Dana.Turner@itineris.net", "Company_name": "Itineries", "SetName": "LILIAN NJERI_08/25/2023_Itineries_Power BI Developer", "CandidateID": "37295", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1891", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 2.0, "Job_Title_stringindexer_transform": 1.0, "Job_Description_stringindexer_transform": 113.0, "Recruiter_First_Name_stringindexer_transform": 22.0, "Recruiter_Last_Name_stringindexer_transform": 14.0, "Recruiter_Email_Address_stringindexer_transform": 13.0, "Company_name_stringindexer_transform": 109.0, "SetName_stringindexer_transform": 87.0, "CandidateID_stringindexer_transform": 6.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 12.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 24.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 3.0, "Applicant_stringindexer_transform": 5.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 81, "QID": 2564, "Job_Title": "Sr. Data Engineer", "Job_Description": "Essential Functions/ Responsibilities: The demands described here are representative of those that must be met by an employee to successfully perform the essential functions of this job. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Lead technical design, implementation, and problem resolution Partner cross-functionally to define and complete well-structured user stories Maintain, evolve and adhere to a maturing data governance policy Maintain and evolve a rapidly growing and robust data model containing vital customer information Design and implement reliable ETL solutions from a variety of data sources (APIs, Proprietary DB, No-SQL ) Provide best in class business analytics in the form of web-based reports and dashboards Define Data Engineering project feature delivery timelines and risks Provide mitigation options to solve for blockers and technical risks as they arise Identify technical debt, and communicate plans to manage it responsibly Provide mentoring as needed to team members Required Skills/Abilities: The requirements listed below are representative of the knowledge, skills, and/or abilities required to perform each essential duty satisfactorily. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Desire and passion to learn from like-minded, experienced, data-obsessed team members A strong sense of ownership, pride and commitment to quality Mastery of Microsoft Power BI Mastery of Business Intelligence data visualization tools Mastery of RDBMS (MSSQL) and/or NoSQL database technologies (MongoDB, Cosmos DB) Experience with cloud-based and/or on premises data warehousing (Azure preferred) Experience with Power BI Embedded Analytics Experience with Agile software development principles A track record of teamwork through high quality and timely Data Engineering projects Benefits you will receive:  Opportunity to work on an exciting and highly visible project at SEAM Group Participation in a fast-growing company Opportunity to learn new technologies and expand your skillset Flexible time off Flexible work hours Collaborative and embracing culture Comprehensive healthcare plan that includes access to health, dental, vision, disability, and life insurance at group rates 8 Paid Holidays Company 401k matching program Educational Reimbursement up to $1,000/year", "Recruiter_First_Name": "Laney", "Recruiter_Last_Name": "Nulph", "Recruiter_Email_Address": "recruiting.echo.ac72a5fdd54642d79b800c8a75a2c01f@echo.newtonsoftware.com", "Company_name": "SEAM Group", "SetName": "Mary Gathogo_08/25/2023_SEAM Group_Sr. Data Engineer", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 2.0, "Job_Title_stringindexer_transform": 82.0, "Job_Description_stringindexer_transform": 112.0, "Recruiter_First_Name_stringindexer_transform": 75.0, "Recruiter_Last_Name_stringindexer_transform": 91.0, "Recruiter_Email_Address_stringindexer_transform": 68.0, "Company_name_stringindexer_transform": 74.0, "SetName_stringindexer_transform": 103.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 3.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/23/2023", "NoofDays": -99, "LogInterviewID": 73, "QID": 2556, "Job_Title": "Data Visualization Manager", "Job_Description": "-Own data needs for clients and internal teams -Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports -Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools -Manage the retrieval, compiling, and formatting of large volumes of data -Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. -Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support -Learn new technologies as they evolve, and understand their impact to systems -Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously -Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals -Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities -Present and clearly articulate solution options to key stakeholders -Be a go-to resource with thorough understanding of data structures for various ad platforms", "Recruiter_First_Name": "Kaylee", "Recruiter_Last_Name": "Pearson", "Recruiter_Email_Address": "kpearson@theshipyard.com", "Company_name": "The Shipyard", "SetName": "Talq Tera_08/23/2023_The Shipyard_Data Visualization Manager", "CandidateID": "39119", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 33.0, "Job_Title_stringindexer_transform": 10.0, "Job_Description_stringindexer_transform": 89.0, "Recruiter_First_Name_stringindexer_transform": 6.0, "Recruiter_Last_Name_stringindexer_transform": 8.0, "Recruiter_Email_Address_stringindexer_transform": 3.0, "Company_name_stringindexer_transform": 3.0, "SetName_stringindexer_transform": 75.0, "CandidateID_stringindexer_transform": 4.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 3.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/23/2023", "NoofDays": -99, "LogInterviewID": 77, "QID": 2560, "Job_Title": "Data Analytics", "Job_Description": "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.  Key Responsibilities:  Data Visualization Design: Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques. Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels. Data Analysis and Insight Generation: Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization. Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization. Data Quality and Governance: Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams. Implement data quality checks and validation processes to maintain the integrity of visualized data. Stakeholder Management and Collaboration: Engage with various departments and business leaders to gather requirements and understand their data needs. Collaborate with stakeholders to refine visualization designs and align them with business objectives. Data Strategy and Technology: Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities. Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.", "Recruiter_First_Name": "Annie", "Recruiter_Last_Name": "Daub", "Recruiter_Email_Address": "<adaub@lexipol.com>", "Company_name": "Lexipol LLC", "SetName": "AYODEJI OLAWOYE_08/23/2023_Lexipol LLC_Data Analytics", "CandidateID": "33898", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "65", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 33.0, "Job_Title_stringindexer_transform": 6.0, "Job_Description_stringindexer_transform": 2.0, "Recruiter_First_Name_stringindexer_transform": 31.0, "Recruiter_Last_Name_stringindexer_transform": 28.0, "Recruiter_Email_Address_stringindexer_transform": 43.0, "Company_name_stringindexer_transform": 13.0, "SetName_stringindexer_transform": 78.0, "CandidateID_stringindexer_transform": 5.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 3.0, "AutoInterviewsCount_stringindexer_transform": 1.0, "AutoInterviewsDuration_stringindexer_transform": 23.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 2.0, "Applicant_stringindexer_transform": 4.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/22/2023", "NoofDays": -100, "LogInterviewID": 74, "QID": 2557, "Job_Title": "Data Engineer", "Job_Description": "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. In addition to supporting extensions to the data warehouse design, this role will design and develop ETL required to onboard new types of business data. Finally, this role will also provide support for Analytics assignments as needed.  Responsibilities  Display sense of ownership over assigned work, requiring minimal direction and driving to completion in a sometimes fuzzy and uncharted environment. Designing and building new data pipelines that support business requirements. Work with IT and other business partners to support the evolution of the enterprise data architecture. Work with IT to build new ETLs to take data from various operational systems and extend existing data warehouse data model for analytics and reporting. Continually improve ongoing reporting and analysis processes, automating or simplifying self-service support for business constituents. Support the development of the company BI infrastructure, including the construction of scalable analytic solutions, and on-premises reporting tools. Utilize Power BI development to build scalable reporting models to serve BI reporting needs. Demonstrate the ability to gather requirements, extract and manipulate data residing in multiple disparate databases, and articulate solutions to support the business. Design, develop, and maintain performant data models in Power BI utilizing best practices. Serve as a subject matter expert for all data warehouse and enterprise systems Use new or existing technologies to produce analytics solutions (in the form of excel spreadsheets, dashboards, etc.). Work with IT and Analytics team to architect and build data pipelines to optimize for performance, data quality, scalability, ease of future development, and cost. Gather requirements, assess gaps and build roadmaps to help the analytics driven organization achieve its goals. Develop data-related Proof of Concepts in order to demonstrate feasibility and value to Symmetry business constituents. Qualifications / Requirements  Bachelor\u2019s degree in Information Systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+years\u2019 experience with advanced SQL concepts and writing SQL statements (SQL Server or similar). Prefer 2 years\u2019 experience with Microsoft BI Suite, PowerBI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Knowledge of the software development lifecycle, agile methodologies, and structured software development methodologies. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data At least 5 years of work experience", "Recruiter_First_Name": "Capri", "Recruiter_Last_Name": "Talley", "Recruiter_Email_Address": "capri.talley@symmetrylending.com", "Company_name": "Symmetry Lending", "SetName": "Calvine  Cheptoo _08/22/2023_Symmetry Lending_Data Engineer", "CandidateID": "38532", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "283", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 37.0, "Job_Title_stringindexer_transform": 2.0, "Job_Description_stringindexer_transform": 46.0, "Recruiter_First_Name_stringindexer_transform": 12.0, "Recruiter_Last_Name_stringindexer_transform": 22.0, "Recruiter_Email_Address_stringindexer_transform": 16.0, "Company_name_stringindexer_transform": 1.0, "SetName_stringindexer_transform": 132.0, "CandidateID_stringindexer_transform": 2.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 3.0, "AutoInterviewsCount_stringindexer_transform": 3.0, "AutoInterviewsDuration_stringindexer_transform": 42.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 4.0, "Applicant_stringindexer_transform": 7.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/22/2023", "NoofDays": -100, "LogInterviewID": 72, "QID": 2555, "Job_Title": "Data Analyst", "Job_Description": "Develop and maintain databases by acquiring data from primary and secondary sources. Build scripts and implement tools that will make the data evaluation process more flexible or scalable across datasets and platforms. Escalate and manage internal and external incident tickets through company\u2019s ticketing system. Work closely with project managers to understand and maintain focus on their analytics needs, including critical metrics and KPIs, and deliver actionable insights to relevant decision-makers. Provide after-hours or weekend support when necessary to perform high-risk or planned downtime of IT systems for upgrades and maintenance. Evaluate internal systems for efficiency, problems, and inaccuracies, and develop and maintain protocols for handling, processing, and cleaning data. Assist with the creation, deployment and maintenance of new datasets and reports that can be used to review and improve company goals across departments.", "Recruiter_First_Name": "Matthew", "Recruiter_Last_Name": "Pickering", "Recruiter_Email_Address": "matthew.pickering@msg.clrco.com", "Company_name": "Northwest Cascade Inc.", "SetName": "ANNE NDUNGU_08/22/2023_Northwest Cascade Inc._Data Analyst", "CandidateID": "37048", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "4", "AutoInterviewsDuration": "524", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 37.0, "Job_Title_stringindexer_transform": 9.0, "Job_Description_stringindexer_transform": 98.0, "Recruiter_First_Name_stringindexer_transform": 62.0, "Recruiter_Last_Name_stringindexer_transform": 36.0, "Recruiter_Email_Address_stringindexer_transform": 77.0, "Company_name_stringindexer_transform": 94.0, "SetName_stringindexer_transform": 25.0, "CandidateID_stringindexer_transform": 10.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 4.0, "AutoInterviewsCount_stringindexer_transform": 6.0, "AutoInterviewsDuration_stringindexer_transform": 44.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 12.0, "Applicant_stringindexer_transform": 11.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/21/2023", "NoofDays": -101, "LogInterviewID": 75, "QID": 2558, "Job_Title": "Business Intelligence Developer", "Job_Description": "In Addition, You  Have an entrepreneurial streak Are self-motivated and driven Just get things done Roll with the punches when the unexpected happens or if the team needs to pivot direction Are passionate Have strong report visualization and data design intuition Pay attention to user feedback Thrive in an environment of open feedback/brainstorming/sharing Are a team player and people like working with you Are intellectually curious and always wanting to learn more Interested in creating a culture driven by metrics and experimentation   The Business Intelligence Developer will Design, implement, and maintain Dashboards, visualizations, and supporting data analysis layers. Additionally, he/she will design and develop visualization solutions against data warehouses, data marts, and cubes. This position will coordinate with other team members and managers to translate business needs into technical solutions and provide technical assistance to users pulling data from our self-service environment. The Business Intelligence Developer will troubleshoot issues in cubes and database objects (procedures \u2013 as they relate to surfacing data) to identify and solve problems with data accuracy and performance.   Education/Licensing Requirements   High School Diploma or equivalent. Bachelor\u2019s degree in a computer-related field or equivalent experience. Master\u2019s degree in a computer-related field is a plus.   Experience Requirements   Minimum 5 years of experience in MS BI tools (SSRS, SSAS, Power BI)  5+ years of relevant experience in report development, data science, business analytics, business intelligence, or comparable data engineering role, including data warehousing and business intelligence tools, techniques, and technology Minimum of 2 years of experience in Power BI Knowledge of SQL to write complex, highly-optimized queries across large volumes of data Successful work experience in MS SQL programming, database design, data warehouse design, query performance tuning, and writing stored procedures. Knowledge of ETL and data warehouse concepts and processes Experience with Tableau or an equivalent reporting tool to create impactful reports, visualizations, and interactive dashboards Understanding of data models Creativity to determine the best solution for a real-world problem with quantitative data Experience supporting a multi-database environment. Excellent understanding of OLTP and OLAP systems. Knowledge of best practices and software development process   Essential Skills/Experience   Fluently speak, read, and write English. Good verbal and written communication skills. Proven ability to prioritize and multi-task. SQL programming, server integration, and reporting  Curiosity and passion for data, visualization, and solving problems Creativity to determine the best solution for a real-world problem with quantitative data Experience with reporting, descriptive statistics, probability, and cleaning big datasets Willingness to question the validity, accuracy of data, and assumptions Enjoyment from collaborating with others in a team environment Eagerness to learn in a fast-paced environment Knowledge of medical data a plus   Essential Characteristics   Self-directed and organized. Discrete/ability to maintain confidentiality. Team player. Detail-oriented. Sense of urgency. Customer service orientation. Drive and self-reliance Ability to work under pressure. Ability to work well independently. Ability to take direction.   Essential Job Responsibilities   Evaluate and monitor databases to resolve performance issues. Develop, deploy, maintain and debug SSIS packages. Develop, test, and maintain MS SQL Server databases. Work with Business Analysts to aid in the design of the system. Investigate and resolve problems of data accuracy and availability Participate in integral testing to identify problems early. Perform error and stress scenarios. Participate in design and code reviews. Identify architectural issues and propose alternative solutions. Install upgrades and patches to existing databases. Develop and maintain data warehouse documentation.   Additional Job Responsibilities   Maintains a neat, orderly work area.  Performs other incidental and related duties as required. Actively demonstrates teamwork at all times. Ability to work overtime.", "Recruiter_First_Name": "Scott Bostic", "Recruiter_Last_Name": "Stafford", "Recruiter_Email_Address": "sbostic-stafford@signifyhealth.com", "Company_name": "Signify Health", "SetName": "Yama Touray_08/21/2023_Signify Health_Business Intelligence Developer", "CandidateID": "37640", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "736", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 8.0, "Job_Title_stringindexer_transform": 0.0, "Job_Description_stringindexer_transform": 130.0, "Recruiter_First_Name_stringindexer_transform": 76.0, "Recruiter_Last_Name_stringindexer_transform": 29.0, "Recruiter_Email_Address_stringindexer_transform": 53.0, "Company_name_stringindexer_transform": 107.0, "SetName_stringindexer_transform": 56.0, "CandidateID_stringindexer_transform": 7.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 4.0, "AutoInterviewsCount_stringindexer_transform": 5.0, "AutoInterviewsDuration_stringindexer_transform": 15.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 6.0, "Applicant_stringindexer_transform": 8.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/21/2023", "NoofDays": -101, "LogInterviewID": 66, "QID": 2549, "Job_Title": "Software Engineer", "Job_Description": "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices. What you have:   Required Knowledge, Skills and Abilities:   Hands-on experience working with modern ETL, BI tools & technology. Hands-on delivery experience in leading cloud data platforms: Snowflake, Azure Synapse. Extensive recent experience with SQL and SQL analytics: SQL Server, SSIS, SSRS, SSAS Hands-on experience implementing ETL pipelines using packaged tools: Attunity, Azure Data Factory Familiarity and experience with common BI and data exploration tools \u2013 Power BI, DAX Software development experience with C/C++ a definite plus. Scripting experience with Python, Ruby, Perl, Bash a definite plus. Perform data analysis required to troubleshoot data related issues and assist in the resolution of data issues. Strong organizational skills. Excellent written and oral communication skills. Business / Retail Operations background preferred.", "Recruiter_First_Name": "Lynda", "Recruiter_Last_Name": "Booth", "Recruiter_Email_Address": "lbooth@savers.com", "Company_name": "Savers", "SetName": "Mary Gathogo_08/21/2023_Savers_Software Engineer", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 8.0, "Job_Title_stringindexer_transform": 12.0, "Job_Description_stringindexer_transform": 26.0, "Recruiter_First_Name_stringindexer_transform": 11.0, "Recruiter_Last_Name_stringindexer_transform": 12.0, "Recruiter_Email_Address_stringindexer_transform": 21.0, "Company_name_stringindexer_transform": 9.0, "SetName_stringindexer_transform": 6.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/21/2023", "NoofDays": -101, "LogInterviewID": 70, "QID": 2553, "Job_Title": "Power BI Developer", "Job_Description": "Responsibilities: Consult with internal and external customers to collect BI requirements. Understand the customer\u2019s datasets. Correlate the datasets with the BI requirements. Create Power BI visualizations and edit existing reports. Publish and administrate Power BI Workspaces. Creation of staging databases and data warehouses for consumption by Power BI. Setup and administration of Power BI data connections.  Specific Skills Required:  Strong T-SQL skills. Knowledge of data warehousing products and techniques, including OLAP and/or SSAS. Experience in working with different departments and cross-functional teams, including customer interface and requirements gathering. Ability to manage multiple priorities and juggle customer demands. Exceptional problem-solving skills with the ability to leverage a wide variety of data and related tools to improve the efficiency of the organization. Strong communication, teamwork, and organizational skills. Solid relationship management and leadership skills and the ability to assume increasing responsibilities in a rapidly changing environment. Strong general technical aptitude.   Preferred Skills:  Additional software development skills, particularly in .NET are highly desirable  Education & Years of Experience:  Bachelor\u2019s degree preferred. Two-plus years\u2019 experience in BI. Proven expertise in creating Power BI visualizations, workspaces, datasets, DAX, database queries.", "Recruiter_First_Name": "Amy", "Recruiter_Last_Name": "Lambdin", "Recruiter_Email_Address": "allambdin@cshco.com", "Company_name": "Clarke Schaefer Hacket", "SetName": "Mary Gathogo_08/21/2023_Clarke Schaefer Hacket_Power BI Developer", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "2", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 8.0, "Job_Title_stringindexer_transform": 1.0, "Job_Description_stringindexer_transform": 86.0, "Recruiter_First_Name_stringindexer_transform": 65.0, "Recruiter_Last_Name_stringindexer_transform": 79.0, "Recruiter_Email_Address_stringindexer_transform": 47.0, "Company_name_stringindexer_transform": 32.0, "SetName_stringindexer_transform": 133.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 2.0, "Technical_InterviewCount_stringindexer_transform": 2.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 65, "QID": 2548, "Job_Title": "Power BI Developer/Analyst (Corporate Travel)", "Job_Description": "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995. Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel! About The Opportunity Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry. You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. Key Responsibilities Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs. Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner. Experience & Qualifications Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field. Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. Solid experience in SQL and working with relational databases. Excellent analytical skills with the ability to dissect large amounts of data. Strong communication skills and the ability to effectively convey complex information. Experience in the corporate travel industry is a plus.", "Recruiter_First_Name": "Andrea", "Recruiter_Last_Name": "Grimes", "Recruiter_Email_Address": "andrea.grimes@us.flightcentre.com", "Company_name": "Flight Center Travel Group (FCTG)", "SetName": "Mary Gathogo_08/17/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 4.0, "Job_Title_stringindexer_transform": 21.0, "Job_Description_stringindexer_transform": 83.0, "Recruiter_First_Name_stringindexer_transform": 30.0, "Recruiter_Last_Name_stringindexer_transform": 13.0, "Recruiter_Email_Address_stringindexer_transform": 9.0, "Company_name_stringindexer_transform": 22.0, "SetName_stringindexer_transform": 15.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 51, "QID": 0, "Job_Title": "Application Specialist", "Job_Description": "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites up to 50% of the time Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Recruiter_First_Name": "Malyssa", "Recruiter_Last_Name": "Daletski", "Recruiter_Email_Address": "Malyssa.Daletski@hirschbach.com", "Company_name": "Hirschbach Motor Lines", "SetName": "abebe woldeargay_08/31/2023_CompTIA_Data Specialist", "CandidateID": "33898", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 4.0, "Job_Title_stringindexer_transform": 11.0, "Job_Description_stringindexer_transform": 73.0, "Recruiter_First_Name_stringindexer_transform": 4.0, "Recruiter_Last_Name_stringindexer_transform": 0.0, "Recruiter_Email_Address_stringindexer_transform": 18.0, "Company_name_stringindexer_transform": 67.0, "SetName_stringindexer_transform": 0.0, "CandidateID_stringindexer_transform": 5.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 2.0, "Applicant_stringindexer_transform": 4.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 67, "QID": 2550, "Job_Title": "Software Engineer, Business Intelligence", "Job_Description": "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices.", "Recruiter_First_Name": "Sandeep", "Recruiter_Last_Name": "Joshi", "Recruiter_Email_Address": "https://www.linkedin.com/in/sandeep-joshi-450a796/", "Company_name": "Savers/Value Village", "SetName": "AYODEJI OLAWOYE_08/17/2023_Savers/Value Village_Software Engineer, Business Intelligence", "CandidateID": "33898", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 4.0, "Job_Title_stringindexer_transform": 54.0, "Job_Description_stringindexer_transform": 36.0, "Recruiter_First_Name_stringindexer_transform": 93.0, "Recruiter_Last_Name_stringindexer_transform": 77.0, "Recruiter_Email_Address_stringindexer_transform": 91.0, "Company_name_stringindexer_transform": 97.0, "SetName_stringindexer_transform": 102.0, "CandidateID_stringindexer_transform": 5.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 2.0, "Applicant_stringindexer_transform": 4.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 62, "QID": 2545, "Job_Title": "Tableau Developer", "Job_Description": "Design and Develop Tableau reports and dashboards \u2022 Provide operational support for existing Tableau reports/dashboards \u2022 Provide subject matter expertise for designing of Tableau workbooks \u2022 Participate in analysis, design, development, testing, deployment and support of dashboards and reports \u2022 Perform impact analysis and validation of existing production reports and universes after application and database upgrade \u2022 Interface with business analysts and/or users to clarify requirements. Work closely with the different business groups to cater to their reporting and dashboard needs. \u2022 Troubleshoot dashboard and report problems independently, determining the root cause and fixing the problem. \u2022 Understand reporting database schema/model, identify joins/tables, and perform data analysis. \u2022 Experience building complex dashboards using Tableau \u2022 Implement industry BI standards and best practices \u2022 Proactively identify problems/issues/risks and provide solutions \u2022 Develop report & dashboards using Business Objects and Tableau and Provide status updates on regular basis and be committed to aggressive delivery timelines", "Recruiter_First_Name": "Sofiia", "Recruiter_Last_Name": "Lievina", "Recruiter_Email_Address": "Sofiia.Lievina@dxc.com", "Company_name": "Luxoft", "SetName": "EMMANUEL OJENIYI_08/17/2023_Luxoft_Tableau Developer", "CandidateID": "37165", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 4.0, "Job_Title_stringindexer_transform": 8.0, "Job_Description_stringindexer_transform": 12.0, "Recruiter_First_Name_stringindexer_transform": 35.0, "Recruiter_Last_Name_stringindexer_transform": 92.0, "Recruiter_Email_Address_stringindexer_transform": 107.0, "Company_name_stringindexer_transform": 92.0, "SetName_stringindexer_transform": 16.0, "CandidateID_stringindexer_transform": 0.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 0.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/16/2023", "NoofDays": -106, "LogInterviewID": 64, "QID": 2547, "Job_Title": "Software Engineer", "Job_Description": "The team members in our stores are made up of different backgrounds, experiences, and perspectives, all with something special to contribute. Our Rethink Reuse business model of purchasing, reselling and recycling gives the community a smart way to shop and keeps 700 million pounds of used goods from landfills each year.  We also help more than 100 non-profit organizations by purchasing donated goods from them, which provides a source of revenue to help support their vital community programs and services.", "Recruiter_First_Name": "Lynda", "Recruiter_Last_Name": "Booth", "Recruiter_Email_Address": "lbooth@savers.com", "Company_name": "Savers", "SetName": "AYODEJI OLAWOYE_08/16/2023_Savers_Software Engineer", "CandidateID": "33898", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 38.0, "Job_Title_stringindexer_transform": 12.0, "Job_Description_stringindexer_transform": 35.0, "Recruiter_First_Name_stringindexer_transform": 11.0, "Recruiter_Last_Name_stringindexer_transform": 12.0, "Recruiter_Email_Address_stringindexer_transform": 21.0, "Company_name_stringindexer_transform": 9.0, "SetName_stringindexer_transform": 22.0, "CandidateID_stringindexer_transform": 5.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 2.0, "Applicant_stringindexer_transform": 4.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/16/2023", "NoofDays": -106, "LogInterviewID": 69, "QID": 2552, "Job_Title": "BI Developer", "Job_Description": "Proven experience as a BI Developer with expertise in Tableau, SQL, and Tableau Prep. Strong proficiency in SQL for data manipulation and analysis. Experience in designing and developing interactive dashboards and reports using Tableau. Proficiency in at least one programming language like R, Python, or PostgreSQL.", "Recruiter_First_Name": "Lhuana", "Recruiter_Last_Name": "Silva", "Recruiter_Email_Address": "jobs@primusglobal.com", "Company_name": "PRIMUS Global Services", "SetName": "Nadege Nguemo Mbouyo_08/16/2023_PRIMUS Global Services_BI Developer", "CandidateID": "34701", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 38.0, "Job_Title_stringindexer_transform": 3.0, "Job_Description_stringindexer_transform": 5.0, "Recruiter_First_Name_stringindexer_transform": 84.0, "Recruiter_Last_Name_stringindexer_transform": 48.0, "Recruiter_Email_Address_stringindexer_transform": 70.0, "Company_name_stringindexer_transform": 100.0, "SetName_stringindexer_transform": 45.0, "CandidateID_stringindexer_transform": 8.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 10.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 68, "QID": 2551, "Job_Title": "Business Intelligence Architect", "Job_Description": "Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis. With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables. Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS. Research and propose opportunities for data acquisition and new uses for existing data. Code, test, and document new or modified data systems to create robust and scalable applications for analytics. Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables. In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions. Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts. Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI. Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices. Collaborate with Quality Assurance team to ensure valid and proper deliverables. Support business decisions with ad-hoc analysis as needed. Participate in rotation of after-hours support. Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates. Research new technologies for implementation by the team for producing cutting-edge solutions. Cultivate business relationships with stakeholders. May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.", "Recruiter_First_Name": "Jordan", "Recruiter_Last_Name": "Abraham", "Recruiter_Email_Address": "jabraham@marinerfinance.com", "Company_name": "MARINER FINANCE", "SetName": "Nadege Nguemo Mbouyo_08/15/2023_MARINER FINANCE_Business Intelligence Architect", "CandidateID": "34701", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 1.0, "Job_Title_stringindexer_transform": 17.0, "Job_Description_stringindexer_transform": 25.0, "Recruiter_First_Name_stringindexer_transform": 7.0, "Recruiter_Last_Name_stringindexer_transform": 6.0, "Recruiter_Email_Address_stringindexer_transform": 17.0, "Company_name_stringindexer_transform": 36.0, "SetName_stringindexer_transform": 115.0, "CandidateID_stringindexer_transform": 8.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 10.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 42, "QID": 2526, "Job_Title": "Application Specialist", "Job_Description": "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Recruiter_First_Name": "Malyssa", "Recruiter_Last_Name": "Daletski", "Recruiter_Email_Address": "recruiting+226318872@applytojob.com", "Company_name": "Hirschbach", "SetName": "Talq Tera_08/15/2023_Hirschbach_Application Specialist", "CandidateID": "39119", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 1.0, "Job_Title_stringindexer_transform": 11.0, "Job_Description_stringindexer_transform": 78.0, "Recruiter_First_Name_stringindexer_transform": 4.0, "Recruiter_Last_Name_stringindexer_transform": 0.0, "Recruiter_Email_Address_stringindexer_transform": 54.0, "Company_name_stringindexer_transform": 8.0, "SetName_stringindexer_transform": 1.0, "CandidateID_stringindexer_transform": 4.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 3.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 43, "QID": 2527, "Job_Title": "Application Specialist", "Job_Description": "Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Recruiter_First_Name": "Malyssa", "Recruiter_Last_Name": "Daletski", "Recruiter_Email_Address": "Malyssa.Daletski@hirschbach.com", "Company_name": "Hirschbach", "SetName": "Talq Tera_08/15/2023_Hirschbach_Application Specialist", "CandidateID": "39119", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 1.0, "Job_Title_stringindexer_transform": 11.0, "Job_Description_stringindexer_transform": 92.0, "Recruiter_First_Name_stringindexer_transform": 4.0, "Recruiter_Last_Name_stringindexer_transform": 0.0, "Recruiter_Email_Address_stringindexer_transform": 18.0, "Company_name_stringindexer_transform": 8.0, "SetName_stringindexer_transform": 1.0, "CandidateID_stringindexer_transform": 4.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 0.0, "Applicant_stringindexer_transform": 3.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 58, "QID": 2541, "Job_Title": "Power BI Developer/Analyst (Corporate Travel)", "Job_Description": "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL  Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995.  Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel!  About The Opportunity  Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry.  You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies.  Key Responsibilities  Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs.  Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations.  SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives.  Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner.  Experience & Qualifications  Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field.  Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI.  Solid experience in SQL and working with relational databases.  Excellent analytical skills with the ability to dissect large amounts of data.  Strong communication skills and the ability to effectively convey complex information.  Experience in the corporate travel industry is a plus.", "Recruiter_First_Name": "Andrea", "Recruiter_Last_Name": "Grimes", "Recruiter_Email_Address": "andrea.grimes@us.flightcentre.com", "Company_name": "Flight Center Travel Group (FCTG)", "SetName": "Mary Gathogo_08/15/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 1.0, "Job_Title_stringindexer_transform": 21.0, "Job_Description_stringindexer_transform": 54.0, "Recruiter_First_Name_stringindexer_transform": 30.0, "Recruiter_Last_Name_stringindexer_transform": 13.0, "Recruiter_Email_Address_stringindexer_transform": 9.0, "Company_name_stringindexer_transform": 22.0, "SetName_stringindexer_transform": 93.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 59, "QID": 2542, "Job_Title": "Power BI Developer", "Job_Description": "Power BI Developer Hybrid Remote - 3x per week onsite Based in Rosemont IL Direct hire   At Medix, we are dedicated to creating opportunities for talent in Information Technology. Our dedicated recruiters offer a personalized service to make sure we truly understand your employment needs. We are currently seeking a hybrid remote Power BI Developer with one of our technology clients due growth. This is a direct hire opportunity. Partner with Medix, and you will experience the multiple benefits our company has to offer. We will hold a personal consultation with you to understand your skills and aspirations! Our placement services provide flexibility to accommodate your schedule and needs. We offer competitive compensation packages including full health, dental and vision insurance, 401k and PTO.  Power BI Developer  Job Responsibilities: Reports development Working with Power BI and other individuals across the data team to assist in the pulling of data from SQL and creating visualizations and dashboard for their application and software They will have a smaller team they meet with, but for the most part they will be operating on their own Need to have strong analytical skills and be able to adapt quickly Develop operational reports Build automated reports and dashboards with the help of Power BI and other reporting tools Understand business requirements to set functional specifications for reporting applications Be experienced in tools and systems on MS SQL Server BI Stack, including SSRS and TSQL, Power Query, MDX, PowerBI, and DAX Be able to quickly shape data into reporting and analytics solutions   Power BI Developer  Requirements:  As an Power BI Developer, this individual must be highly motivated, able to multitask and able to work in a fast paced IT environment. Qualified candidates must be able to self direct while working with others.  Other requirements of the role include:  4 years of Power BI experience (including dashboard creation and supporting end users on their visualization needs) Strong SQL experience  Strong understanding of BI functions and tools including SSRS, Power Query, and DAX Any fundamental database knowledge and relational database design  SSIS and SSRS knowledge", "Recruiter_First_Name": "Kylie", "Recruiter_Last_Name": "Hegemier", "Recruiter_Email_Address": "kylie.hegemier@medixteam.com", "Company_name": "Medix Technology", "SetName": "Mary Gathogo_08/15/2023_Medix Technology_Power BI Developer", "CandidateID": "36877", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 1.0, "Job_Title_stringindexer_transform": 1.0, "Job_Description_stringindexer_transform": 19.0, "Recruiter_First_Name_stringindexer_transform": 57.0, "Recruiter_Last_Name_stringindexer_transform": 64.0, "Recruiter_Email_Address_stringindexer_transform": 59.0, "Company_name_stringindexer_transform": 85.0, "SetName_stringindexer_transform": 8.0, "CandidateID_stringindexer_transform": 1.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 1.0, "Applicant_stringindexer_transform": 1.0, "Recruiter_InterviewCount_stringindexer_transform": 1.0, "Technical_InterviewCount_stringindexer_transform": 0.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 52, "QID": 2535, "Job_Title": "Data Visualization Manager", "Job_Description": "WHAT YOU\u2019LL DO  Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms WHAT YOU\u2019LL BRING  Bachelor's Degree in Data Analysis, Data Development, Marketing Data & Analytics, or related field and/or 3-5 years equivalent work experience in Data Developer or similar Data & Analytics Role Proficiency in SQL Experience with BI and Analytics Tools Experience building and supporting high-performance data models, visualizations, and KPIs for key initiatives Experience with data storytelling, data science, or data strategy Knowledge of data modeling and entity relationships Ability to write code with clean documentation Strong entrepreneurial drive Strong verbal and written communication skills and a collaborative, problem-solving mindset Customer/client service experience (internal and/or external audiences) Strong critical thinking, problem solving and analytical skills Strong verbal and written communication skills Proven experience in implementing innovations that drive business goals led from user feedback and experience NOT REQUIRED, BUT PREFERRED  Marketing, media, & advertising knowledge, including digital and traditional channels Experience with tools that support data engineering such as Looker, Fivetran, AWS, DBT Experience with data warehousing architecture and data modeling", "Recruiter_First_Name": "Pearson", "Recruiter_Last_Name": "Kaylee", "Recruiter_Email_Address": "kpearson@theshipyard.com", "Company_name": "The Shipyard", "SetName": "Calvine  Cheptoo _08/15/2023_The Shipyard_Data Visualization Manager", "CandidateID": "38532", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "144", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 1.0, "Job_Title_stringindexer_transform": 10.0, "Job_Description_stringindexer_transform": 51.0, "Recruiter_First_Name_stringindexer_transform": 36.0, "Recruiter_Last_Name_stringindexer_transform": 31.0, "Recruiter_Email_Address_stringindexer_transform": 3.0, "Company_name_stringindexer_transform": 3.0, "SetName_stringindexer_transform": 104.0, "CandidateID_stringindexer_transform": 2.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 0.0, "Preparationscore_stringindexer_transform": 3.0, "AutoInterviewsCount_stringindexer_transform": 3.0, "AutoInterviewsDuration_stringindexer_transform": 18.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 4.0, "Applicant_stringindexer_transform": 7.0, "Recruiter_InterviewCount_stringindexer_transform": 0.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}, {"InterviewDate": "8/11/2023", "NoofDays": -111, "LogInterviewID": 53, "QID": 2536, "Job_Title": "Power BI / SSRS Developer", "Job_Description": "Job Description The Power BI / SSRS Developer\u2019s primary responsibility is to design, create and/or support data reporting systems and solutions for the Symmetry Lending organization. Systems include but are not limited to loan originations system, loan servicing system, data warehouse, company intranet, homegrown automation applications, and various partner interfaces. Additional responsibilities include analysis, design, and maintenance of departmental, financial, investor and regulatory reports. Qualifications / Requirements Experience working in the financial industry, ideally banking, lending, or similar as a Power BI and SSRS. Experience as a business analyst or quality assurance analyst is a major plus. 5+ years database design and development experience with MS SQL server technologies (SSRS and SSMS) with Data transformation / ETL and Power Query engine experience. 4+ years' experience with Power BI Desktop, Power Query, DAX (Data Analysis Expressions) language, data modeling, and visualizations. Strong analytical and data modeling skills with the ability to gather and analyze data from various sources, design effective data models, and create relationships between different data tables. Strong understanding of visualization with the ability to create compelling and interactive visualizations with an eye for design. A deep understanding of best practices for creating meaningful charts and graphs, and the ability to effectively communicate data insights to stakeholders. Collaborate with other analysts and developers to integrate Power BI solutions with other data sources and applications. Collaborate with key stakeholders across the organization to identify business requirements for reporting, dashboards, and visualizations. Experience writing complex and optimized SQL queries. Experience with SDLC and Agile processes. Strong verbal, written, and technical analysis skills. Responsibilities Work closely with business users and stakeholders to analyze and define business requirements. Create and provide time sensitive ad-hoc report/data requests. Participate in defining and adhering to best practices, standards and procedures as defined by Symmetry IT. Work closely with Quality Assurance to ensure accurate and compliant data implementations. Create various document artifacts including business requirements and technical design documents. Comply with company policies and procedures, security and regulatory requirements, and investor guidelines. Ensures all applicable internal NPI policies and procedures are followed, and confidentiality of borrower information is maintained. Any combination of following are strong pluses but not strictly required: You have a solid foundation in data analysis and an attention to detail which you use to understand business requirements and translate them into effective report designs. Your strong analytical skills will help you identify trends, patterns, and insights from the data. You have data warehouse design and/or some software development experience. You have a good understanding of data visualization principles and the ability to present data in a meaningful way. You are a continuous learner with a willingness to learn and stay updated with the latest trends, tools, and best practices.", "Recruiter_First_Name": "Talley", "Recruiter_Last_Name": "Capri", "Recruiter_Email_Address": "hrsymmetrylending4_eja@indeedemail.com", "Company_name": "Symmetry Lending", "SetName": "Calvine  Cheptoo _08/11/2023_Symmetry Lending_Power BI / SSRS Developer", "CandidateID": "38532", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "1", "InterviewScore": "StoneLaurel", "InterviewDate_stringindexer_transform": 55.0, "Job_Title_stringindexer_transform": 77.0, "Job_Description_stringindexer_transform": 105.0, "Recruiter_First_Name_stringindexer_transform": 78.0, "Recruiter_Last_Name_stringindexer_transform": 46.0, "Recruiter_Email_Address_stringindexer_transform": 56.0, "Company_name_stringindexer_transform": 1.0, "SetName_stringindexer_transform": 113.0, "CandidateID_stringindexer_transform": 2.0, "SurveyResponse_stringindexer_transform": 0.0, "InterviewType_stringindexer_transform": 1.0, "Preparationscore_stringindexer_transform": 0.0, "AutoInterviewsCount_stringindexer_transform": 0.0, "AutoInterviewsDuration_stringindexer_transform": 0.0, "MentorInterviewsCount_stringindexer_transform": 0.0, "MentorInterviewsDuration_stringindexer_transform": 0.0, "Mentor_stringindexer_transform": 4.0, "Applicant_stringindexer_transform": 7.0, "Recruiter_InterviewCount_stringindexer_transform": 10.0, "Technical_InterviewCount_stringindexer_transform": 1.0, "InterviewScore_stringindexer_transform": 0.0}], "FE": [{"transformationsData": [{"feature_label": "InterviewDate", "transformation_label": "String Indexer"}], "feature": "InterviewDate", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "10/10/2023", "max": "9/8/2023", "missing": "0", "distinct": "71"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "InterviewDate"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "NoofDays", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "143", "mean": "-58.34", "stddev": "34.75", "min": "-111", "max": "6", "missing": "0"}, "updatedLabel": "NoofDays"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "LogInterviewID", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "143", "mean": "155.01", "stddev": "67.12", "min": "42", "max": "288", "missing": "0"}, "updatedLabel": "LogInterviewID"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "QID", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "143", "mean": "2614.15", "stddev": "228.25", "min": "0", "max": "2745", "missing": "0"}, "updatedLabel": "QID"}, {"transformationsData": [{"feature_label": "Job_Title", "transformation_label": "String Indexer"}], "feature": "Job_Title", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "Analytics Consultant", "max": "siness intelligence developer", "missing": "0", "distinct": "89"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Job_Title"}, {"transformationsData": [{"feature_label": "Job_Description", "transformation_label": "String Indexer"}], "feature": "Job_Description", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "\"Description: Leading with our people, Digital Consultants' mission is to deliver the highest level of professional solutions while being a trusted partner and advisor to our customers. With a culture of practicality, opportunity, and creativity we remain dedicated to being honest, trustworthy, respectful, and ethical in everything we do. We are a certified SBA 8(a) small-disadvantaged business that supports multiple IT customers within the Federal, civilian, and private sectors. Digital Consultants also offers our employees growth opportunities, competitive wages, and a full benefits package. Our founding principles, Fairness and Common Sense make working here more than a job, it is the Digital family.  Digital Consultants is seeking a Power BI Reports Developer to join our team! As the Power BI Reports Developer, you will be designing ETL processes and working directly with developers, testers, and other roles active to translate product roadmap features into well-defined product requirements including features, user stories, and acceptance test criteria.  Duties to include:  Maintain and support data analytics platforms Develop and update relevant technical documentation Collaborate directly with analysts and end users to integrate systems and create effective reports Develop and execute database queries and conduct analyses as needed Maintain status updates for all assigned ad hoc report requests Knowledge of SQL queries, SQL Server Reporting Services (SSRS), and MS SQL Server An expert that understands the Power BI platform and its tools very well. Takes complete responsibility for the development and administration of BI tools including transforming raw data into valuable and meaningful insights in the form of appealing dashboards and reports. Recreating existing reports from the current platform into Power BI.\"\" Build complex dimensional data models and reports from the bottom up Audit existing Power BI efforts with a focus on improvement Visualize compelling data stories on the report canvas Produce KPIs with user-friendly display dashboards Collaborate with client's data team Familiarity with data warehouse design (e.g. dimensional modeling) and data mining Requirements: Active DOD Secret Clearance IAT level II Certification: GSEC", "max": "ob Description:   BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.   Job Responsibilities   Managing the planning, scheduling and deployment of all hardware facilities and associated software for major or multiple sites. Trains, develops, and mentors staff by providing subject matter direction and guidance. Assigns, monitors, and reviews progress and accuracy of work.Provides staff management oversight including hiring, promoting, or making recommendations for staff.Conducts performance reviews and assessments, manages performance, engages in skills assessment, and promotes professional development of staff. Directing, motivating and developing staff, maximizing their individual contribution, professional growth and ability to function effectively with their colleagues as a team. Ensuring adherence to policies, plans, objectives, budgets and staffing allocations for the assigned site. Optimizes the utilization of resources and adheres to Departmental budgeting and fiscal responsibilities. Actively participates in project teams, manages and tracks project details, and provides leadership during periods of transition. Ensures compliance with corporate and industry standards, policies, procedures, and regulations.   Job Qualifications   Education   Bachelor's Degree in a Computer Sciences related field or equivalent work experience   Experience   5 years - Experience in Information Technology required   Skills\\Certifications   Knowledge of information technology concepts, methodology, terminology and standards. Demonstrated ability to interpret and translate technical and/or or complex concepts into information meaningful to project team members and/or business personnel. Strong interpersonal and organizational skills PC Skills required (Basic Microsoft Office and E-Mail) Adaptive to high pace and changing environment Must be able to communicate effectively with both technical and non-technical co-workers Must be willing to adjust schedule to perform maintenance and upgrades outside of business hours and be part of an on-call rotation.   Job Specific Requirements:    Working knowledge with regards to End User Experience (Business user experience) Prior experience with Agile is preferred.   Preferred Skills:   Number of Openings Available:   1   Worker Type:   Employee   Worker Sub-Type:   Employee   Company:   BCBST BlueCross BlueShield of Tennessee, Inc.   Applying for this job indicates your acknowledgement and understanding of the following statements:   BCBST is an Equal Opportunity employer (EEO), and all employees and applicants will be entitled to equal employment opportunities when employment decisions are made. BCBST will take affirmative action to recruit, hire, train and promote individuals in all job classifications without regard to race, religion, color, age, sex, national origin, citizenship, pregnancy, veteran status, sexual orientation, physical or mental disability, gender identity, or any other characteristic protected by applicable law.   Further information regarding BCBST's EEO Policies/Notices may be found by reviewing the following page:   BCBST's EEO Policies/Notices   BlueCross BlueShield of Tennessee is not accepting unsolicited assistance from search firms for this employment opportunity. All resumes submitted by search firms to any employee at BlueCross BlueShield of Tennessee via-email, the Internet or any other method without a valid, written Direct Placement Agreement in place for this position from BlueCross BlueShield of Tennessee HR/Talent Acquisition will not be considered. No fee will be paid in the event the applicant is hired by BlueCross BlueShield of Tennessee as a result of the referral or through other means.    All applicants will be advised that BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.", "missing": "0", "distinct": "138"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Job_Description"}, {"transformationsData": [{"feature_label": "Recruiter_First_Name", "transformation_label": "String Indexer"}], "feature": "Recruiter_First_Name", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " NC", "max": "prashant", "missing": "0", "distinct": "104"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_First_Name"}, {"transformationsData": [{"feature_label": "Recruiter_Last_Name", "transformation_label": "String Indexer"}], "feature": "Recruiter_Last_Name", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " or", "max": "tolia", "missing": "0", "distinct": "108"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_Last_Name"}, {"transformationsData": [{"feature_label": "Recruiter_Email_Address", "transformation_label": "String Indexer"}], "feature": "Recruiter_Email_Address", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " SSCP Power BI Data Analyst or associate degree in a related field 5+ Power BI specific focus Experience w/ DevOps Framework Experience visualizing data in Power BI Desktop and Power BI Service Extensive experience with building dashboards and custom reports in Power BI Strong analytical orientation and problem-solving skills Focusing on backend work with very large and intricate data models to create high-performing dashboards and paginated reports Rebuild existing SAP Business Intelligence-based reports", "max": "wesley.mercer@matrixres.com", "missing": "0", "distinct": "110"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_Email_Address"}, {"transformationsData": [{"feature_label": "Company_name", "transformation_label": "String Indexer"}], "feature": "Company_name", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " our focus has always been on being the best", "max": "unifyconsulting.com", "missing": "0", "distinct": "111"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Company_name"}, {"transformationsData": [{"feature_label": "SetName", "transformation_label": "String Indexer"}], "feature": "SetName", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " not the biggest.  We believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "max": "abebe woldeargay_08/31/2023_CompTIA_Data Specialist", "missing": "0", "distinct": "138"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "SetName"}, {"transformationsData": [{"feature_label": "CandidateID", "transformation_label": "String Indexer"}], "feature": "CandidateID", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "36821.76", "stddev": "2032.31", "min": " client focus", "max": "OLUKAYODE AKINRIMISI_11/28/2023_Medasource_BI Developer", "missing": "0", "distinct": "23"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "CandidateID"}, {"transformationsData": [{"feature_label": "SurveyResponse", "transformation_label": "String Indexer"}], "feature": "SurveyResponse", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "31661.0", "stddev": "nan", "min": " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.  Company Description StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "max": "rufus.benhur@digitalconsultants.org", "missing": "0", "distinct": "8"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "SurveyResponse"}, {"transformationsData": [{"feature_label": "InterviewType", "transformation_label": "String Indexer"}], "feature": "InterviewType", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " NC", "max": "Technical", "missing": "0", "distinct": "8"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "InterviewType"}, {"transformationsData": [{"feature_label": "Preparationscore", "transformation_label": "String Indexer"}], "feature": "Preparationscore", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "16.68", "stddev": "22.91", "min": " and relevant technical aspects. Strong performance in algorithm design and data structures", "max": "Avworo  OGHENEKEVWE _10/03/2023_Digital Consultants, LLC_Power BI Reports Developer", "missing": "0", "distinct": "17"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Preparationscore"}, {"transformationsData": [{"feature_label": "AutoInterviewsCount", "transformation_label": "String Indexer"}], "feature": "AutoInterviewsCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "323.84", "stddev": "3525.29", "min": " and relevant technical aspects. Strong performance in algorithm design and data structures", "max": "6", "missing": "0", "distinct": "12"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "AutoInterviewsCount"}, {"transformationsData": [{"feature_label": "AutoInterviewsDuration", "transformation_label": "String Indexer"}], "feature": "AutoInterviewsDuration", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "743.87", "stddev": "610.7", "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "max": "NULL", "missing": "0", "distinct": "51"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "AutoInterviewsDuration"}, {"transformationsData": [{"feature_label": "MentorInterviewsCount", "transformation_label": "String Indexer"}], "feature": "MentorInterviewsCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "0.19", "stddev": "0.43", "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "max": "Recruiter", "missing": "0", "distinct": "13"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "MentorInterviewsCount"}, {"transformationsData": [{"feature_label": "MentorInterviewsDuration", "transformation_label": "String Indexer"}], "feature": "MentorInterviewsDuration", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "606.8", "stddev": "1035.23", "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "max": "NULL", "missing": "0", "distinct": "29"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "MentorInterviewsDuration"}, {"transformationsData": [{"feature_label": "Mentor", "transformation_label": "String Indexer"}], "feature": "Mentor", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "0.0", "stddev": "nan", "min": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "max": "Sowmya Attur", "missing": "0", "distinct": "21"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Mentor"}, {"transformationsData": [{"feature_label": "Applicant", "transformation_label": "String Indexer"}], "feature": "Applicant", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "     \"\"AlignmentWithExpectations\"\": 4", "max": "Yama Touray", "missing": "0", "distinct": "30"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Applicant"}, {"transformationsData": [{"feature_label": "Recruiter_InterviewCount", "transformation_label": "String Indexer"}], "feature": "Recruiter_InterviewCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "5.0", "stddev": "5.24", "min": "     \"\"AlignmentWithExpectations\"\": 1", "max": "Williams", "missing": "0", "distinct": "32"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_InterviewCount"}, {"transformationsData": [{"feature_label": "Technical_InterviewCount", "transformation_label": "String Indexer"}], "feature": "Technical_InterviewCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "14.31", "stddev": "136.43", "min": "     \"\"AlignmentWithExpectations\"\": 3", "max": "gwilliams@stonelaurel.com", "missing": "0", "distinct": "15"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Technical_InterviewCount"}, {"transformationsData": [{"feature_label": "InterviewScore", "transformation_label": "String Indexer"}], "feature": "InterviewScore", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "     \"\"InterviewerEngagement\"\": 3", "max": "StoneLaurel", "missing": "0", "distinct": "10"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "InterviewScore"}, {"feature": "InterviewDate_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "24.43", "stddev": "19.96", "min": "0.0", "max": "70.0", "missing": "0"}, "updatedLabel": "InterviewDate_stringindex..."}, {"feature": "Job_Title_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "29.93", "stddev": "27.56", "min": "0.0", "max": "88.0", "missing": "0"}, "updatedLabel": "Job_Title_stringindexer_t..."}, {"feature": "Job_Description_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "66.17", "stddev": "41.14", "min": "0.0", "max": "137.0", "missing": "0"}, "updatedLabel": "Job_Description_stringind..."}, {"feature": "Recruiter_First_Name_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "41.25", "stddev": "31.14", "min": "0.0", "max": "103.0", "missing": "0"}, "updatedLabel": "Recruiter_First_Name_stri..."}, {"feature": "Recruiter_Last_Name_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "43.35", "stddev": "32.84", "min": "0.0", "max": "107.0", "missing": "0"}, "updatedLabel": "Recruiter_Last_Name_strin..."}, {"feature": "Recruiter_Email_Address_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "44.48", "stddev": "33.67", "min": "0.0", "max": "109.0", "missing": "0"}, "updatedLabel": "Recruiter_Email_Address_s..."}, {"feature": "Company_name_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "45.03", "stddev": "34.12", "min": "0.0", "max": "110.0", "missing": "0"}, "updatedLabel": "Company_name_stringindexe..."}, {"feature": "SetName_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "65.25", "stddev": "41.02", "min": "0.0", "max": "136.0", "missing": "0"}, "updatedLabel": "SetName_stringindexer_tra..."}, {"feature": "CandidateID_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "4.85", "stddev": "5.06", "min": "0.0", "max": "22.0", "missing": "0"}, "updatedLabel": "CandidateID_stringindexer..."}, {"feature": "SurveyResponse_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "0.32", "stddev": "0.92", "min": "0.0", "max": "6.0", "missing": "0"}, "updatedLabel": "SurveyResponse_stringinde..."}, {"feature": "InterviewType_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "0.67", "stddev": "1.17", "min": "0.0", "max": "7.0", "missing": "0"}, "updatedLabel": "InterviewType_stringindex..."}, {"feature": "Preparationscore_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "2.41", "stddev": "3.42", "min": "0.0", "max": "16.0", "missing": "0"}, "updatedLabel": "Preparationscore_stringin..."}, {"feature": "AutoInterviewsCount_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "1.34", "stddev": "2.1", "min": "0.0", "max": "11.0", "missing": "0"}, "updatedLabel": "AutoInterviewsCount_strin..."}, {"feature": "AutoInterviewsDuration_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "9.09", "stddev": "14.81", "min": "0.0", "max": "50.0", "missing": "0"}, "updatedLabel": "AutoInterviewsDuration_st..."}, {"feature": "MentorInterviewsCount_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "1.06", "stddev": "2.29", "min": "0.0", "max": "12.0", "missing": "0"}, "updatedLabel": "MentorInterviewsCount_str..."}, {"feature": "MentorInterviewsDuration_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "3.05", "stddev": "6.75", "min": "0.0", "max": "28.0", "missing": "0"}, "updatedLabel": "MentorInterviewsDuration_..."}, {"feature": "Mentor_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "4.43", "stddev": "5.13", "min": "0.0", "max": "20.0", "missing": "0"}, "updatedLabel": "Mentor_stringindexer_tran..."}, {"feature": "Applicant_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "6.53", "stddev": "6.77", "min": "0.0", "max": "28.0", "missing": "0"}, "updatedLabel": "Applicant_stringindexer_t..."}, {"feature": "Recruiter_InterviewCount_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "6.35", "stddev": "7.49", "min": "0.0", "max": "31.0", "missing": "0"}, "updatedLabel": "Recruiter_InterviewCount_..."}, {"feature": "Technical_InterviewCount_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "2.8", "stddev": "3.0", "min": "0.0", "max": "14.0", "missing": "0"}, "updatedLabel": "Technical_InterviewCount_..."}, {"feature": "InterviewScore_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "0.41", "stddev": "1.26", "min": "0.0", "max": "8.0", "missing": "0"}, "updatedLabel": "InterviewScore_stringinde..."}], "samplecount": 143, "message": "Successfully executed", "status": 1, "userid": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "FEGraph": [{"values": {"label": ["11/7/2023", "9/21/2023", "9/10/2023", "10/14/2023", "10/8/2023", "11/8/2023", "9/18/2023", "9/14/2023", "9/8/2023", "9/13/2023", "9/11/2023", "8/27/2023", "8/26/2023", "10/20/2023", "12/5/2023", "12/4/2023", "10/24/2023", "10/31/2023", "10/12/2023", "10/25/2023", "8/16/2023", "9/12/2023", "8/23/2023", "10/9/2023", "9/1/2023", "11/13/2023", "10/3/2023", "10/26/2023", "8/31/2023", "12/6/2023", "10/7/2023", "11/24/2023", "9/7/2023", "12/1/2023", "8/15/2023", "11/11/2023", "9/20/2023", "10/17/2023", "9/15/2023", "9/24/2023", "11/21/2023", "10/6/2023", "11/18/2023", "11/10/2023", "10/13/2023", "10/21/2023", "11/14/2023", "10/11/2023", "11/1/2023", "9/26/2023", "11/9/2023", "11/28/2023", "10/10/2023", "11/17/2023", "8/21/2023", "8/22/2023", "9/5/2023", "8/11/2023", "11/15/2023", "8/25/2023", "11/2/2023", "10/4/2023", "8/29/2023", "11/30/2023", "8/30/2023", "11/20/2023", "11/3/2023", "11/12/2023", "8/28/2023", "10/18/2023", "8/17/2023"], "data": [1, 3, 1, 1, 1, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 3, 2, 1, 1, 2, 2, 2, 3, 1, 7, 1, 5, 2, 6, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2, 2, 1, 2, 5, 4, 2, 2, 3, 3, 3, 2, 1, 4, 3, 4]}, "label": "InterviewDate", "count": 71, "min": "10/10/2023", "max": "9/8/2023"}, {"values": {"label": ["-111.0 - -99.3", "-99.3 - -87.6", "-87.6 - -75.9", "-75.9 - -64.2", "-64.2 - -52.5", "-52.5 - -40.8", "-40.8 - -29.1", "-29.1 - -17.4", "-17.4 - -5.7", "-5.7 - 6"], "data": [18, 22, 20, 8, 14, 15, 6, 15, 14, 11]}, "label": "NoofDays", "count": 10, "min": -111.0, "max": 6}, {"values": {"label": ["42.0 - 66.6", "66.6 - 91.2", "91.2 - 115.8", "115.8 - 140.4", "140.4 - 165.0", "165.0 - 189.6", "189.6 - 214.2", "214.2 - 238.8", "238.8 - 263.4", "263.4 - 288"], "data": [11, 23, 16, 15, 11, 18, 19, 14, 6, 10]}, "label": "LogInterviewID", "count": 10, "min": 42.0, "max": 288}, {"values": {"label": ["0.0 - 274.5", "274.5 - 549.0", "549.0 - 823.5", "823.5 - 1098.0", "1098.0 - 1372.5", "1372.5 - 1647.0", "1647.0 - 1921.5", "1921.5 - 2196.0", "2196.0 - 2470.5", "2470.5 - 2745"], "data": [1, 0, 0, 0, 0, 0, 0, 0, 0, 142]}, "label": "QID", "count": 10, "min": 0.0, "max": 2745}, {"values": {"label": ["Tableau Cloud opportunity with Unify Consulting", "Clinical Data Analyst", "Senior BI Developer", "Business Intelligence Report Analyst", "Business Intelligence Analyst", "Lead SQL Developer", "Navy ERP Level III Data Analyst", "Power BI and Power Apps Developer", "Senior Business Analyst Data Visualization", "Data Specialist", "business intelligence developer", "Power BI Developer", "Product BI Analyst", "PowerBI Eng", "Data Engineer/ETL Developer", "Business Intelligence Analyst-Power BI", "Software Engineer, Business Intelligence", "BI Developer", "Senior SQL Database Administrator", "Senior Developer (Tableau + ETL)", "Embedded BI Data Visualisation Specialist SIBU510", "ETL Developer", "Business Intelligence Developer (BI)", "Tableau developers", "Tableau Developer (Business Intelligence)", "Senior Reports Developer", "Sr Engineer, Data Management and Analytics role!", "Solution Assessment Consultant", "BI Reporting", "siness intelligence developer", "Data Engineer - Consultant/Senior", "Data Analytics", "Power BI Reporting Specialist", "Business Development Specialist", "Business Intelligence Architect", "SQL Developer", "Business Intelligence Lead Developer", "Sr. Consultant, Power BI Analyst", "Senior IT Business System Analyst", "Business intelligence Analyst 2", "Application Specialist", "DATABASE ADMINISTRATOR", "Data Governance Analyst", "BI Developer/Analyst", "Data Warehouse Specialist", "Power BI Specialist", "Data Analyst II", "Business Intelligence Analyst II", "Associate BI Developer", "BI Data Engineer", "Database Administrator", "Business Intelligence Developer", "Systems Analyst", "Data Developer II", "Senior Analyst, IT Business Analyst", "Data Analyst", "Tableau Administrator", "Technical Data Analyst (Remote)", "Sr Engineer, Data Management and Analytics", "Power BI / SSRS Developer", "Tableau Data Analyst", "Tableau Developer", "IT Data Specialist", "Tableau Cloud", "Business Data Analyst", "Power BI and Reporting Analyst", "Power Platform Developer", "Senior BI Architect", "Data Visualization Manager", "Sr Data Analyst", "Database Developer", "Senior Report Developer", "Sr. Datawarehouse and BI Developer", "power BI Developer", "Sr. Data Engineer", "Sr. Architect, Power BI", "Data Integration Engineer", "Sr Business/Data Analyst", "Sr. Data Analyst", "Tableau and Database Specialist", "Software Engineer", "EIT Team Lead", "Data Developer 2", "Power BI Reports Developer", "Analytics Consultant", "Data Engineer", "Senior Data Base Developer/Data Modeler", "Power BI Developer/Analyst (Corporate Travel)", "Associate Consultant, Data Analyst"], "data": [1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 7, 4, 1, 1, 2, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 2, 4, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 2, 2, 3, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 6, 1, 2, 1]}, "label": "Job_Title", "count": 89, "min": "Analytics Consultant", "max": "siness intelligence developer"}, {"values": {"label": ["Professional who expertly designs, creates, and implements Self-Service BI data models. Plan, implement and oversee comprehensive BI delivery strategy. Design, build and deploy EPIC reporting solutions (Clarity, Caboodle, RWB, Radar, Metrics) Innovator, adept at conceptualizing and developing marketable tools that cater to the needs and demands of multiple clients. Build relationships with the business users, understand how data can solve business problems, and formulate business requirements for the BI tools. Work with data warehouse System Analyst and Engineering team to implement data schema to accommodate new analytics requirements. Manage meta data for BI models, reports, and dashboards (author, usage, data source) Create technical and functional documentation and provide training for BI tools.", "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites up to 50% of the time Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Key Responsibilities:  Develop and optimize SQL queries for data extraction and analysis. Collaborate with business stakeholders to gather and understand reporting requirements. Create visually compelling and insightful reports using Looker. Field daily report requests from multiple Backoffice teams to meet the needs of customers. Conducting and troubleshooting reports and data models. Comprehend and work with Key Performance Indicators (KPIs) and metrics.  Qualifications:  A minimum of 10 years of experience in report writing or as a business analyst. Proficiency in SQL query development (queries, stored procedures, functions) and data analysis. Familiarity with SQL Server databases and data warehousing. Proven experience with one or more of the following reporting tools: Looker, Business Objects, Power BI, or Tableau. Strong understanding of KPIs and metrics. Exhibit adaptability and a quick learning curve to efficiently contribute to projects.  Knowledge of Snowflake Datawarehouse query development is a plus.", "Job: BI Developer  Location: Woodlands, TX  Duration: 6 Month contract-to-perm     Job Description *  The BI Developer will be responsible for the design and development of data models that support enterprise analytical reporting and dashboard solutions. This position will work closely with business users and executives to gather, define, and translate business requirements into BI solutions. The applicant must have excellent collaboration skills with the ability to communicate concepts and solutions effectively and clearly. This position will also play a key technical role requiring expert level skills in the design, development and implementation of data warehousing and BI solutions. This person needs to be located in the Houston, TX area to attend in person meetings (about once every other month) to collaborate on team meetings.", "Essential Functions/ Responsibilities: The demands described here are representative of those that must be met by an employee to successfully perform the essential functions of this job. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Lead technical design, implementation, and problem resolution Partner cross-functionally to define and complete well-structured user stories Maintain, evolve and adhere to a maturing data governance policy Maintain and evolve a rapidly growing and robust data model containing vital customer information Design and implement reliable ETL solutions from a variety of data sources (APIs, Proprietary DB, No-SQL ) Provide best in class business analytics in the form of web-based reports and dashboards Define Data Engineering project feature delivery timelines and risks Provide mitigation options to solve for blockers and technical risks as they arise Identify technical debt, and communicate plans to manage it responsibly Provide mentoring as needed to team members Required Skills/Abilities: The requirements listed below are representative of the knowledge, skills, and/or abilities required to perform each essential duty satisfactorily. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Desire and passion to learn from like-minded, experienced, data-obsessed team members A strong sense of ownership, pride and commitment to quality Mastery of Microsoft Power BI Mastery of Business Intelligence data visualization tools Mastery of RDBMS (MSSQL) and/or NoSQL database technologies (MongoDB, Cosmos DB) Experience with cloud-based and/or on premises data warehousing (Azure preferred) Experience with Power BI Embedded Analytics Experience with Agile software development principles A track record of teamwork through high quality and timely Data Engineering projects Benefits you will receive:  Opportunity to work on an exciting and highly visible project at SEAM Group Participation in a fast-growing company Opportunity to learn new technologies and expand your skillset Flexible time off Flexible work hours Collaborative and embracing culture Comprehensive healthcare plan that includes access to health, dental, vision, disability, and life insurance at group rates 8 Paid Holidays Company 401k matching program Educational Reimbursement up to $1,000/year", "Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.", "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.   Key Responsibilities:   Data Visualization Design:  Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques.  Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels.  Data Analysis and Insight Generation:  Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization.  Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization.  Data Quality and Governance:  Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams.  Implement data quality checks and validation processes to maintain the integrity of visualized data.  Stakeholder Management and Collaboration:  Engage with various departments and business leaders to gather requirements and understand their data needs.  Collaborate with stakeholders to refine visualization designs and align them with business objectives.  Data Strategy and Technology:  Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities.  Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.  Qualifications and Requirements  Bachelor's or Master's degree in Data Science, Data Visualization, Computer Science, or comparable experience.  Proven experience (typically 5+ years) in data visualization, with a track record of creating impactful visualizations.  Strong proficiency in data visualization tools such as Power BI, Tableau, or other industry-leading platforms.  Solid understanding of data analysis and data interpretation techniques to support the creation of meaningful visualizations.  Demonstrated ability to translate complex data concepts into clear and visually appealing presentations.  Strong communication and collaboration skills to work effectively with cross-functional teams and stakeholders.  Analytical mindset with a passion for discovering insights through data visualization.", "https://ds-llc.com/technicaldataanalyst", "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "About the job StrideCare, a healthcare multi-specialty physician group, is currently seeking a highly skilled and experienced Database Architect and Data Analyst to join our dynamic team. The ideal candidate will possess expertise in ETL processes, and Power BI, and have prior experience in the medical field.  Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.", "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed    Experience Preferred  \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.", "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred 5-7 years experience is preferred Basic knowledge of programming languages in order to comprehend reading code and basic functions. Ability to create business solutions that increase competitive advantage. Ability to exercise good judgment in selecting methods and techniques for obtaining solutions. Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines. Ability to solve technical problems/ processes and understand complex details. Ability to increase operating efficiency by producing high quality technical solutions. A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level. Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must.", "DATA ENGINEER \u2013 CONSULTANT/SENIOR  Lotis Blue Consulting is a growth advisory that helps clients grow and transform their organization to achieve their business goals. We apply expertise in behavioral and data science to set business and go-to-market strategy and then improve organization alignment to enable effective execution. We are looking for data and analytics-savvy professionals to join our Chicago-based team of consultants who have proven Data Engineering expertise and experience working with other data analysts and project resources. This role is client-facing and will be a fully-fledged member of the client service project team helping us to identify, understand and solve complex problems.  PRIMARY RESPONSIBILITIES Work with the Lotis Blue team to develop hypotheses that explain business problems or opportunities, and then create the analytical work plan to test them Create and manage highly structured data requests that acquire the right information in the right format to execute on the analytical work plan Serve as lead point of contact with the client and be accountable for all matters related to data acquisition, cleaning, integration, management, transformation, interpretation, and analytics Work with Power BI or Tableau to present and visualize new insights or reveal complex relationships between variables in a clear, accurate, and compelling manner that supports evolving ideation Lead discussions internally around the relationship between different data elements to add to the Lotis Blue team\u2019s knowledge, awareness, clarity, and depth in addressing the client situation and potential solutions Develop and provide meaningful insights and relevant points-of-view on complex concepts directly to clients through simple, plainspoken materials Contribute to leading-edge thinking that deepens the Firm\u2019s capabilities in data science and engineering and differentiates Lotis Blue in the market QUALIFICATIONS & EXPERIENCES Bachelor\u2019s degree in computer science, mathematics, engineering or related field At least two years of experience working on an analytics or data science team Experience communicating directly with clients and addressing business problems through analytics Passion for learning and track record of keeping up to date on technologies, platforms, and tools Some travel may be required REQUIRED KNOWLEDGE, SKILLS & CAPABILITIES Business acumen Teamwork and collaboration Critical thinking and ideation Project management Experience with and capability to execute on: Production databases (e.g., SQL Server, MongoDB) and related administrative tools (e.g., SQL Management Studio, Navicat) Python (preferable) or R Business Intelligence tools (e.g., Power BI, Tableau) PREFERRED KNOWLEDGE, SKILLS & CAPABILITIES Working knowledge of Azure Experience managing databases in the cloud (as well as AWS) Working knowledge of data transformation tools (e.g., Alteryx) Experience operationalizing data pipelines to support analytics in a production environment Coursework or qualification in Machine Learning Experience applying ML techniques in real world business scenarios", "Position Summary Join our team as an Analytics Consultant and help drive our marketing, call center, claims, and retention initiatives to new heights! We're seeking a highly skilled individual with a focus on data analysis and advanced analytics to support our efforts across all business units.  As an Analytics Consultant, you'll be responsible for analyzing data, providing actionable insights, and making data-driven decisions that impact our company strategy efforts. With your expertise in data analysis and advanced analytics, you'll play a key role in optimizing our analytics capabilities for maximum impact and ROI. You'll collaborate closely cross-functionally to gather data, analyze trends, and uncover insights that support our business objectives. You\u2019ll support the broader business in performing deep dive analyses to drive business growth. Think of yourself as an internal consultant tasked with improving business processes utilizing data driven insights.  Located at our office in Naperville, our office environment is a key driver of our company culture and employee experience, so a regular in-office hybrid model (generally T-TH in-office and M & F remote) is required.  Responsibilities include but are not limited to: Utilizing advanced analytics approaches such as cohort analysis, risk analysis, and predictive modeling to inform decision-making and improve the customer experience across the organization. Collaborating with various teams to gather and analyze customer data and provide insights that support decision-making and improve overall business processes. Developing dashboards and visualizations to provide regular reporting and insights to support various teams within the company. Identifying incremental opportunities to improve business processes and drive growth by leveraging data to inform marketing and acquisition efforts. Utilizing data to inform company-wide strategies and initiatives that drive growth and efficiency. Providing thought leadership on analytics and identifying new and innovative ways to leverage data to drive business growth across the organization. We\u2019re Excited if This is You: 5+ years of experience in analytics and 3+ years in business intelligence roles In-depth technical knowledge in data modeling, SQL, and Python Strong understanding of business metrics and ability to drive growth. Proficiency in driving data-driven insights and informed business decision making. Demonstrated track record of delivering significant business impact through data analysis and implementation of insights. Strong communication and collaboration skills, with the ability to work effectively in a team environment. Proven track record of partnering with Analytics and Commercial Finance functions to drive improvements by way of analytical capabilities. Education Bachelor\u2019s degree  Computer Skills Needed to Perform this Job Proficiency in Microsoft and Google Suites Prior knowledge of SQL Understanding of ETL/Cloud Infrastructure Proficiency in Tableau, Looker, or other BI tool", "This is the job\u2026. Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026. 3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026. Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "JOB OVERVIEW  Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Senior Analyst \u2013 Business Strategy and Data Visualization  Incredible well-established, high growth Texas based company is looking for a to join their San Antonio team! Company offers challenge, is team-oriented, has a great work/life balance and a career path! This Company is recognized for its customer service focus and single digit turnover!  The Senior Analyst is responsible for analyzing data and presenting insightful recommendations and findings!  Essential Functions:  \u00b7 Informs marketing strategy by analyzing marketing campaign effectiveness and ROI, sharing insights about response rates across channels and audiences with Marketing Managers  \u00b7 Perform analysis and creates insight that inform sales and marketing decisions in operations, sales, marketing, and support groups.  \u00b7 Presents valuable insightful information and recommends actionable items.  \u00b7 Downloads data from multiple systems and reporting databases, develops and disseminates reports to end users.  \u00b7 Responds to data requests from management and performs basic reporting.  \u00b7 Develops and executes complex reports and custom queries.  \u00b7 Prepares technical reports by collecting, analyzing, and summarizing information and trends from various systems.  \u00b7 Maintains databases for the collection, analysis, and dissemination of operational data throughout the company.  \u00b7 Entry, extraction, and ad-hoc reporting from various systems to support business objectives and the needs of the department.  \u00b7 Provides report training to applicable departments/roles.  \u00b7 Creates and provides opportunity and market share reports and analysis using all applicable business reporting databases.  Qualifications:  \u00b7 High school diploma or equivalent required; BA/BS, preferred.  \u00b7 A minimum of three years of work-related experience required.  \u00b7 Strong knowledge of data analytics and applicable reporting tools  \u00b7 Strong analytical and database management skills  \u00b7 Strong working knowledge and/or experience including but not limited to DBS, Tableau, Alteryx, WMS, Salesforce, MS Dynamics and Outlook  \u00b7 Ability to identify problems and to review related information to develop and evaluate options and implement solutions.  \u00b7 Consulting and influencing abilities.  \u00b7 Excellent interpersonal and customer service skills  \u00b7 Creative ability to understand the implications of new information for both current and future problem-solving and decision-making.  \u00b7 Ability to train and motivate others.  \u00b7 Outgoing personality  #IND1  Job Type: Full-time  Pay: $81,000.00 - $88,000.00 per year  Benefits:  401(k) 401(k) matching Dental insurance Flexible spending account Health insurance Health savings account Paid time off Parental leave Professional development assistance Tuition reimbursement Vision insurance Schedule:  Monday to Friday Work Location: Hybrid remote in Irving, TX 75062", "Data Specialist", "Spalding Consulting, Inc. is seeking a Business Intelligence Developer in Lexington Park, MD -Remote.  Spalding Consulting, Inc. is a professional services company delivering cutting-edge solutions to the Department of Defense since 2001. Our expert-level solutions include software development, information technology, program management, financial management and business intelligence services. Spalding Consulting offers competitive compensation, career development, flexible work schedules and excellent benefits.  Position Type: Full-Time Work Location: This is a remote position (see on-site requirements below).  **On-Site Requirements: On-boarding will require 1-2 visits to Patuxent River, MD for candidates that are local to the area. Candidates out of state will be onboarded virtually. Training will be virtual and telework maximized/permitted to the greatest extent possible, however for local candidates, training/tasking may require on-site work a few hours per week. Future on-site/telework requirements/schedules may change as additional client direction is received.      Essential Functions: Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.   Qualifications and Experience:  Required: At least 5 years of experience developing software programs using any language At least 2 years\u2019 experience of developing solutions to support an ETL process Experience with Oracle, SQL, or Teradata databases Experience with working on a team of at least 5 developers Experience with understanding and modifying data models  Desired: Development experience using Tableau or Qlik Experience using Atlassian Jira Experience making REST API calls Experience in an Agile development environment   Security Clearance: Must be eligible to obtain a Secret clearance. Requirements to obtain a clearance include US Citizenship, security investigation, etc.", "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "Technossus, a leading software solutions and technology consulting company, is seeking a qualified and experienced Sr. Consultant, Power BI Analyst to join our team. As a Sr. Consultant, Power BI Analyst, you will be responsible for developing interactive and insightful dashboards and reports to help our clients make better-informed business decisions. At Technossus, we value our commitment to delivering cutting-edge solutions, and our Sr. Consultant, Power BI Analyst is a key player in ensuring our clients receive exceptional value and quality every time.  Location: Full time onsite in Long Beach 5 days a week   Responsibilities Collaborate with stakeholders and team members to understand their business intelligence needs and translate them into data visualizations that provide actionable insights. Develop interactive dashboards and reports in Power BI to track business performance and identify trends. Analyze and interpret data to provide recommendations that enhance decision-making processes. Design and implement data models and data architecture to support the management and analysis of large data sets. Identify and resolve data quality and integration issues. Share best practices with the team to increase knowledge and optimize processes. Stay up-to-date with the latest Business Intelligence trends and technologies. Requirements  Proven experience in developing high-quality dashboards and reports in Power BI. Understanding of Data Warehouse design and architecture. Strong business acumen and the ability to translate business requirements into technical solutions. Excellent communication and presentation skills. 5+ years of working experience as BI Analyst and a bachelor's degree in engineering, computer science, commerce degree or equivalent 5+ Years of Power BI experience with DAX and Power Query Strong/excellent SQL Skills including PL/SQL Benefits  Our job titles may span more than one career level. The starting base pay for this role is between $110,000.00 and $140,000.00. The actual base pay is dependent upon many factors, such as: training, transferable skills, work experience, business needs, and market demands. The base pay range is subject to change and may be modified in the future. This role may also be eligible for bonus and benefits.  Benefits:  Medical, Dental, Vision, 401k Match Health Savings & Flexible Spending Account Health Care FSA Dependent Day Care FSA Company paid life, AD&D, & LTD insurance Flexible PTO policy Continued training to level up your skills Supplemental benefits available: Accident Insurance Critical Illness Insurance Hospital Indemnity Employee Assistance Program Physical Demands:  While performing the duties of this job, the employee routinely is required to sit; walk; talk and hear; use hands to keyboard, finger, handle, and feel; stoop, kneel, crouch, twist, reach, and stretch. Speaking and hearing ability sufficient to communicate in person, over telephone, and/or video conference.  The ability to stand, walk, and sit in a computer chair for long periods of time. The ability to see and respond to dangerous situations. Speaking and hearing ability sufficient to communicate in person, over telephone and/or video conferences. Sufficient hand, arm, and finger dexterity to operate a computer keyboard and other office equipment. Emotional Demands:  While performing the duties of this role the employee is required to maintain a professional and positive attitude with clients and colleagues. Frequent deep thinking and interactions with multiple stakeholders and clients. Ability to utilize knowledge and experience to problem solve, make quick decisions, and interpret proposals publicly or in group setting.  Ability to problem solve Able to make quick decisions Frequent deep thinking Communicate clearly with coworkers Lead and direct a team Articulate objectives and expectations clearly Speak publicly Interpret data", "Position Overview The Talent Business Intelligence (BI) Reporting Analyst works within Talent & Program Delivery to provide expertise in data analysis, business intelligence tools, and learning and development measurement principles to contribute to the ongoing improvement of employee performance and skills within the organization. This individual will design, develop, and validate dashboards, alerts, and reports that measure business performance across Talent & Delivery programs for management purposes. Ensures information is easily available to users for direct consumption. Conducts analyses of functional business processes and participates in the development of business cases in the support of continuous improvement programs and the implementation of enabling technologies. This individual provides leadership in facilitating information gathering, structured documentation and presentation of findings to all levels of management. This role enhances program effectiveness and enables sound business decisions by providing insights and data which are accurate, relevant, and reliable. Primary Responsibilities To perform this job successfully, an individual must be able to perform each essential duty satisfactorily. The requirements listed below are representative of the knowledge, skill, and/or ability required. Reasonable accommodations may be made to enable individuals with disabilities to perform the essential functions.  Collect and organize data from various sources, including learning management systems (LMS), employee performance training records, surveys, and other relevant systems. Define and track key performance indicators (KPIs) related to learning and development, such as training completion rates, learner engagement, skill acquisition, and business impact. Interprets & analyzes operational metrics in order to create meaningful dashboards & reporting related to Talent & Program Delivery initiatives. Design, build and deploy BI solutions Works with subject matter experts, especially within various departments across the enterprise, to understand business KPIs and resulting outcomes, defining requirements for data integration, reporting, analysis, and descriptive, predictive, and prescriptive business intelligence solution options. Builds and updates process control measurements and changes existing reports and dashboards as needed Increases the usage practices around objective performance data in day-to-day management activities Other duties as assigned Education and Experience  The minimum education, experience, skills and certifications/training required to successfully perform the job:  Bachelor\u2019s degree in business, computer science, information systems or equivalent work experience Minimum 4 years\u2019 experience Oracle BI, SAP Business Objects etc. Knowledge of Data Warehouse platforms Knowledge of languages such as Python, R, Scala, SQL, etc. Experience working with multidimensional data sets/databases such as SQL, Salesforce, JSON, etc. Strong MS Office skills, especially with Power BI and Excel Understanding of report writing required Experience with Lean Six Sigma preferred", "This contract is W2 ONLY, no C2C.   The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. You will be responsible for extracting, transforming, and loading data from various sources into our data warehouse, ensuring the accuracy, reliability, and performance of our data pipelines. Additionally, this role will also provide support for Reporting and Analytics assignments as needed.  Key Responsibilities:  Data Extraction and Transformation: Design and develop ETL processes to extract data from multiple sources, transform it to meet business requirements, and ensure data quality and consistency. SQL Server Integration Services (SSIS): Create, optimize, and maintain SSIS packages to automate data workflows, including data cleansing, enrichment, and loading into target systems. Complex SQL Queries: Create and optimize complex SQL queries, stored procedures, and functions to extract, transform, and load data from various data sources. Business Requirements: Collaborate with cross-functional teams to gather business requirements and translate them into technical specifications for data integration and ETL solutions. Data Profiling and Analysis: Perform data profiling and analysis to identify data quality issues and propose appropriate solutions. Data Quality: Implement data cleansing, transformation, and validation rules to ensure the accuracy and consistency of data. Data Modeling: Collaborate with database administrators and data architects to design and maintain data models and database schemas. Managing Data Pipelines: Manage and maintain data pipelines, ensuring their reliability, performance, and scalability to meet business needs. Agile Methodology: Apply Agile methodologies to ensure that ETL processes align with Agile principles and practices, facilitating collaboration, and adaptability within the team. Software Development Life Cycle (SDLC): Demonstrate a strong understanding of the Software Development Life Cycle (SDLC) process, ensuring that testing activities are aligned with each phase of the SDLC, from requirements gathering to deployment. Documentation: Develop and maintain documentation, including data flow diagrams, data dictionaries, and technical specifications. Performance Optimization: Monitor and optimize the performance of SQL queries, ETL processes, and database systems to ensure efficient data processing and system reliability. Issue Resolution: Troubleshoot and resolve data-related issues, including data integration failures, data quality problems, and performance bottlenecks. Industry Trends: Stay up to date with industry trends and best practices in SQL development, ETL, and data integration technologies. Be part of an on-call rotation. Qualifications / Requirements  Bachelor\u2019s degree in information systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred. Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+ years\u2019 experience with advanced SQL and SSIS Prefer 2 years\u2019 experience with Microsoft BI Suite, Power BI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint and modeling tools such as ERStudio Prefer experience with other ETL tools such as AWS Glue, etc. Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization. Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused. Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data Python experience a plus Familiarity with API integrations About Symmetry  Symmetry Lending specializes in providing mortgage fulfillment services to include origination, servicing, and capital markets needs to various Lenders across the country with whom we partner. We have offices in Atlanta, GA, Eden Prairie, MN, Denver, CO, Orlando, FL, and Anaheim, CA, and we do business from coast to coast. We take great pride in building a diverse team of motivated professionals that contribute to an exciting work atmosphere. We provide a competitive benefits package including medical, dental, and vision plan options, paid time off, and more.", "As a Business Solution Architect, you will\u2026  lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design.   Lead the Functional team.  Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms", "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices. What you have:   Required Knowledge, Skills and Abilities:   Hands-on experience working with modern ETL, BI tools & technology. Hands-on delivery experience in leading cloud data platforms: Snowflake, Azure Synapse. Extensive recent experience with SQL and SQL analytics: SQL Server, SSIS, SSRS, SSAS Hands-on experience implementing ETL pipelines using packaged tools: Attunity, Azure Data Factory Familiarity and experience with common BI and data exploration tools \u2013 Power BI, DAX Software development experience with C/C++ a definite plus. Scripting experience with Python, Ruby, Perl, Bash a definite plus. Perform data analysis required to troubleshoot data related issues and assist in the resolution of data issues. Strong organizational skills. Excellent written and oral communication skills. Business / Retail Operations background preferred.", "LivePerson (NASDAQ: LPSN) is a global leader in trustworthy and equal AI for business. Hundreds of the world's leading brands \u2014 including HSBC, Chipotle, and Virgin Media \u2014 use our Conversational Cloud platform to engage with millions of consumers safely and responsibly. We power a billion conversational interactions every month, providing a uniquely rich data set and safety tools to unlock the power of Generative AI and Large Language Models for better business outcomes.  At LivePerson, we foster an inclusive workplace culture that encourages meaningful connection, collaboration, and innovation. Every mind is invited to ask questions and actively seek new ways to achieve success and reach their full potential. We operate as one with a growth mindset. This means spotting opportunities, solving ambiguities and seeking effective solutions to challenges that make things better.   Overview:  Reporting to the Director of Data, Models, and Decisions (DMD), the successful candidate has an opportunity to join an innovative data science and engineering team that's operationalizing data across the organization. We see model-driven processes and workflows as a means to reduce uncertainty, reveal opportunity, and generate operational leverage that collectively create a new dimension of competitive advantage and lay the foundation for new revenue streams.  You will: Apply cutting-edge data visualization techniques to reveal actionable insights to business users Solve challenging data problems through in-depth analysis of many systems Apply statistical analysis to summarize data and forecast trends Participate in Data Requirement Gathering, Data Preparation and devise proper Data Interpretation Ensure data is maintained in our platform and all systems with best quality, always considering automation and scalability of your solutions Evangelize our products and train others on Data Visualization and presentation techniques, enabling them to create dashboards and reports themselves  You have: Demonstrated ability to uncover insights and relationships across numerous datasets 5+ years of experience analyzing data and creating dashboards and reports (Looker / PowerBI / Tableau / Metabase) 5+ years of experience interpreting and writing advanced SQL 2+ years of experience in Python and good working knowledge of pandas and matplotlib Bachelor's degree in Computer Science, Statistics, or another quantitative field Ability to work closely with teammates in a highly collaborative environment and simultaneously be a self-starter with strong individual contributions Excellent communication and presentation skills  Benefits: The salary range for this role will be between $88,000 to $120,000 Final compensation will be determined by a variety of factors, including, but not limited to, your location, skills, experience, education, and/or certifications. During the phone screening, the recruiter will provide the location-specific salary range for this role. Regardless of your personal situation or where you are in the world, LivePerson offers comprehensive and great benefits programs to meet your needs:  Health: medical, dental, vision and wellbeing. Time away: Public holidays and discretionary PTO package for flexible days off with manager approval. Financial: 401K, ESPP, Basic life and AD&D insurance, long-term and short-term disability Family: parental leave, maternity support, fertility services. Development: tuition reimbursement, native AI learning. Additional: 24/7 access to professional counselors, voluntary insurance coverage, exclusive perks and discounts. #LI-Remote", "- Open to W-2 candidates - Building Power BI dashboards - Some sort of risk environment (Could be cyber/operations/etc..) OR another financial institution", "Design and develop interactive Power BI reports and dashboards. Extract, transform, and load (ETL) data from various sources into Power BI. Collaborate with business users to gather requirements and translate them into effective visualizations. Develop custom applications using Power Apps to streamline business processes. Integrate Power Apps with other Microsoft 365 applications and services. Create canvas and model-driven apps that meet the organization's needs. Design and implement data models to support reporting and analytics requirements. Perform data analysis to identify trends, patterns, and insights. Automate repetitive tasks and workflows using Power Automate (Flow). Ensure seamless integration between Power BI, Power Apps, and other Microsoft 365 tools. Collaborate with cross-functional teams to understand business requirements and provide technical solutions. Train end-users on how to use Power BI reports and Power Apps applications effectively.", "Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.   Qualifications And Education Requirements   Bachelor's or Master's degree in Computer Science, Information Systems, Data Science, or a related field.   Must be local or able to work Hybrid in Dallas, TX   Proven experience as a Database Architect, Data Analyst, or a similar role.   Strong proficiency in designing and managing relational databases (e.g., SQL Server, Oracle, MySQL).   Expertise in ETL processes, data integration, and transformation techniques.   In-depth knowledge of NetSuite, including configuration, customization, and integration capabilities.   Proficiency in data analysis and visualization tools such as Power BI, Tableau, or similar platforms.   Familiarity with medical data management, healthcare industry regulations, and terminology.   Strong analytical and problem-solving skills with the ability to extract insights from complex datasets.   Excellent communication and collaboration skills to effectively work with cross-functional teams and stakeholders.   Attention to detail, with the ability to prioritize tasks and manage multiple projects simultaneously.   StrideCare Offers a Total Rewards Benefits Package That Includes   Major medical insurance   Dental and vision   401k   Long- and short-term disability   Corporate outings   Fun and casual corporate environment   PTO   Paid holidays   No weekends, evenings, nights, or holidays (paid holidays)   Excellent work - life balance (Monday - Friday work schedules)   Employee Assistance Program and more!", "Responsibilities Work closely with Data integration team to stage data for the reporting requirement Build rich visualization dashboards using tableau , SSRS and other relevant technologies Perform report administration & user access provisioning activities for optimized performance Support business team for self-service and ad-hoc activities Set standards for reporting & BI functions; design templates which are scalable, repeatable, and simple Work with business teams to understand their unique business and technical requirements for tools and analytics Lead the requirement gathering, design and development of reporting solution using various tools e.g Tableau, MS SSRS for all different types of reporting for all LOB. Lead the development of Master Reporting Inventory as part of Data Governance initiatives. Effective collaboration with multiple levels of end users including data stewards, leadership and management, executive and other end users. Led the reporting design and architecture and work closely with infrastructure to meet the needs of the business Work with other technical staff, such as networking to ensure connectivity, compatibility, and scalability of reporting platform & systems Support ongoing monitoring, automation and refinement of reporting solutions Work with management to identify and resolve reporting related issues Participate in process reviews and enhancements. Participate in design and delivery of cubes, dashboards and various self-service business intelligence solutions. Maintains a high degree of business functional knowledge and current automated technologies and tools. All other duties assigned", "Hey Jane,  My name is Bradie, and I work with Brooksource, a National IT Services Company. I came across your profile and was extremely impressed with your PowerBI and SQL exposure paired with your business intelligence experience! That is exactly the kind of background our client is currently looking for.  Based on your experience, I have an awesome opportunity for you! I am reaching out to you today as an extension of our Fortune 24 Healthcare Insurance client, Centene Corporation.  We are currently seeking a mid-level Power BI Engineer to support the creation of analytics and visualization solutions tied to a suite of applications that encompass the following business functions: Fraud, Waste and Abuse, Claims processing and Quality Assurance. You will primarily support new application builds as well as improvements on existing applications.  What we are looking for: - 2-5 years professional experience creating/building data visualizations and dashboards - Strong experience with PowerBI and SQL queries -Exposure to Snowflake architecture mapping and creation preferred - Experience with Gitlab, Confluent Cloud, Kafka, or equivalent tools - High attitude/aptitude and ability to work in large data set environment  Additional Details: - 5+ month contract (potential to convert to FTE) - Fully remote schedule - W2 Only (no sponsorship provided)  I believe this opportunity could align great and would love the chance to speak with you further! Please let me know if you would be interested and when you would be available for a quick 10-minute phone call discussing the position further.  Looking forward to hearing back from you!  Bradie Schoemehl Senior Technical Recruiter", "Salary in the $60-80K range + 10-20% bonus.  Here's some info on the need - MUST have  at least one year of experience with SQL, ETL, SSRS, and Power BI experience (data modeling, data viz, dashboarding, ad hoc reporting).  Seeking an Associate Business Intelligence (BI) Developer to contribute to the creation of BI solutions, transforming raw data into valuable insights.   Key Responsibilities:  \u2022   Assess requests for data interfaces, perform data profiling, and determine optimal methods for request fulfillment  \u2022    Translate diverse business requirements into precise technical specifications  \u2022     Construct data models to support data visualizations, interactive dashboards, and ad hoc data inquiries  \u2022    Engage in collaborative efforts with fellow developers and end-users as requests progress through their life cycle  \u2022     Conduct unit testing and quality assurance assessments on data models and reports  \u2022   Produce, review, interpret, and troubleshoot intricate code while adhering to established standards  \u2022   Investigate and resolve unforeseen work items, communicating findings promptly to the team and end users  \u2022    Evaluate and enhance our existing BI system   Essential Qualifications:  \u2022    Minimum of 1 year of experience in BI development  \u2022     Proficiency in SQL, SSRS, Excel, and Power BI  \u2022    Familiarity with relational databases, with a preference for understanding SQL Server Database Management Systems (RDBMS) principles  \u2022    Proficient in ETL processes and skilled in implementing data transformations using SQL and Power BI  \u2022     Basic knowledge of source control is advantageous", "Description  Robert Half is currently working with a client seeking a Data Analyst. The Data Analyst will be responsible for the preparation of financial reports that serve as summary information for managers. The Data Analyst will be analyzing a variety of data types and reporting on that information. This Data Analyst position is for someone who is deadline driven and highly analytical.  What you get to do every single day   Call out relevant insights from compiled analytical reports  Organize, manipulate, and extract data in response to management requests  Create and share key decision-making data for market assessments, forecasting and further investigation  Complete data mining projects- Analyze corporate reports in order to create financial reports  Requirements   Complete competence in data management and manipulation  Ability to work independently with minimal oversight  BS/BA in Accounting, finance, or economics  Skilled in spreadsheet and reporting applications, including V-lookups, pivot tables, and queries  Strong communication skills and able to receive criticism well  Critical thinking and problem-solving skills are a must, as well as great attention to detail  Understanding of a variety of data models  5+ years of experience in financial planning and analysis, data analysis or similar role  Robert Half is the world\u2019s first and largest specialized talent solutions firm that connects highly qualified job seekers to opportunities at great companies. We offer contract, temporary and permanent placement solutions for finance and accounting, technology, marketing and creative, legal, and administrative and customer support roles.  Robert Half works to put you in the best position to succeed. We provide access to top jobs, competitive compensation and benefits, and free online training. Stay on top of every opportunity - whenever you choose - even on the go.  All applicants applying for U.S. job openings must be legally authorized to work in the United States. Benefits are available to contract/temporary professionals, including medical, vision, dental, and life and disability insurance. Hired contract/temporary professionals are also eligible to enroll in our company 401(k) plan. Visit", "NavAide is on the lookout for dedicated professionals committed to supporting the Navy's strategic alignment in enhancing the FM workforce, standardizing business processes, and leveraging data analytics. Specifically, this role will engage deeply in the Navy ERP data migration initiative and facilitate close collaboration with FM&C and Government clients. If you thrive in dynamic, challenging settings and have a penchant for pioneering change and innovation, then this opportunity might just be your next great leap.  Duties & Responsibilities:  Work in tandem with FM&C and Government clients, understanding data migration needs, and aligning them with the strategic aspirations of the ASN FM&C. Lead and oversee the creation and deployment of a Program Management Plan, touching crucial facets like organizational structure, transition plan, risk management, and performance metrics. Steer data health assessments and migration processes including, but not limited to, data mapping, post-migration data validation, and business transition. Oversee financial reconciliation, DDRS reporting, and user acceptance testing. Be at the forefront of organizational change management by crafting strategies and conducting change readiness assessments. Play a pivotal role in training strategy development, execution, and user management to ensure a smooth and hitch-free data migration process. Provide unwavering leadership to subordinate teams, making sure of strict adherence to financial standards and guidance. Knowledge, Skills & Abilities:  Demonstrable expertise in IT development, database management, and data analytics. Excellent communication, negotiation, and problem-solving acumen. Strong alignment with NavAide's ethos and guiding principles. Proficiency in tools and languages such as SQL, Python, and R, along with familiarity with data visualization tools like Tableau and Power BI. In-depth understanding of Navy ERP migration or related large-scale data migration projects. Education & Experience:  A Bachelor's Degree from an accredited institution in a field relevant to the role. Between 6-15+ years of work experience, with a preference for those who have engaged with State or Federal Government agencies or sizable corporations. While not mandatory, certifications or exposure to the Department of Navy Financial Management & Systems would be an added advantage.", "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com Job Description What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements. Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed", "Immediate Hire \u2013 Senior Developer (Tableau + ETL) - Irving, TX  (DAY 1 ONSITE) Hybrid    Role: Senior Developer (Tableau + ETL)  Location: Irving, TX  (DAY 1 ONSITE) Hybrid  Duration: Fulltime     Required skills (technical & professional) : \u2022       8+ years of overall IT experience. \u2022       4+ years\u2019 experience working with Tableau with ETL experience. \u2022       You will work closely with customers, product owners and dev team to ensure requirements and business objectives are translated into working technical designs \u2022       Drive end-to-end design, development and implementation of complex solutions, often using new technologies \u2022       Design and develop Tableau reports and dashboards that will yield actionable insights that present the answers to business questions \u2022       Code and modify SQL/ETL based on dashboard requirements \u2022       Run ad-hoc analysis for Product and Business Managers using standard query languages and operationalize for repeatable use via Tableau reporting suite", "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:   At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Sr Data Analyst Partnered with a client who simplifies shipping logistics for merchants and warehouses, offering customized API solutions that streamline the shipping process and make logistics a seamless and stress- free experience. Position Overview: As a Senior Data Analyst, you will play a key role in providing valuable insights and supporting data- driven decision-making processes. You will work closely with cross-functional teams to analyze complex data sets, identify trends, and help drive business growth. The ideal candidate will have a minimum of 5 years of experience in data analysis, strong proficiency in VBA, and advanced MS Excel skills.  Key Responsibilities: \uf0b7 Perform in-depth data analysis to identify trends, patterns, and insights. \uf0b7 Create and maintain complex Excel models using VBA to automate repetitive tasks and streamline processes. \uf0b7 Create macros that can be changed easily in a fast-changing environment. \uf0b7 Provide recommendations for process improvements based on data analysis. \uf0b7 Stay updated on industry trends and best practices in data analysis. \uf0b7 Mentor and provide guidance to junior analysts when necessary. Qualifications: \uf0b7 Bachelor&#39;s degree in a related field (e.g., Statistics, Mathematics, Computer Science). \uf0b7 Minimum of 5 years of experience as a Data Analyst. \uf0b7 Proficiency in VBA for Excel automation is a must. \uf0b7 Advanced skills in Microsoft Excel, including pivot tables, complex formulas, and data visualization. \uf0b7 Strong analytical and problem-solving skills. \uf0b7 Excellent communication and teamwork abilities. \uf0b7 Ability to prioritize and multi-task. \uf0b7 Attention to detail and high level of accuracy. \uf0b7 Experience with data visualization tools (e.g., Tableau, Power BI). \uf0b7 Knowledge of shipping, logistics, or eCommerce industry is not mandatory, but a plus. \uf0b7 Fluency in Mandarin is not mandatory, a plus.", "Design and Develop Tableau reports and dashboards \u2022 Provide operational support for existing Tableau reports/dashboards \u2022 Provide subject matter expertise for designing of Tableau workbooks \u2022 Participate in analysis, design, development, testing, deployment and support of dashboards and reports \u2022 Perform impact analysis and validation of existing production reports and universes after application and database upgrade \u2022 Interface with business analysts and/or users to clarify requirements. Work closely with the different business groups to cater to their reporting and dashboard needs. \u2022 Troubleshoot dashboard and report problems independently, determining the root cause and fixing the problem. \u2022 Understand reporting database schema/model, identify joins/tables, and perform data analysis. \u2022 Experience building complex dashboards using Tableau \u2022 Implement industry BI standards and best practices \u2022 Proactively identify problems/issues/risks and provide solutions \u2022 Develop report & dashboards using Business Objects and Tableau and Provide status updates on regular basis and be committed to aggressive delivery timelines", "WHAT YOU\u2019LL DO  Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms WHAT YOU\u2019LL BRING  Bachelor's Degree in Data Analysis, Data Development, Marketing Data & Analytics, or related field and/or 3-5 years equivalent work experience in Data Developer or similar Data & Analytics Role Proficiency in SQL Experience with BI and Analytics Tools Experience building and supporting high-performance data models, visualizations, and KPIs for key initiatives Experience with data storytelling, data science, or data strategy Knowledge of data modeling and entity relationships Ability to write code with clean documentation Strong entrepreneurial drive Strong verbal and written communication skills and a collaborative, problem-solving mindset Customer/client service experience (internal and/or external audiences) Strong critical thinking, problem solving and analytical skills Strong verbal and written communication skills Proven experience in implementing innovations that drive business goals led from user feedback and experience NOT REQUIRED, BUT PREFERRED  Marketing, media, & advertising knowledge, including digital and traditional channels Experience with tools that support data engineering such as Looker, Fivetran, AWS, DBT Experience with data warehousing architecture and data modeling", "Overview:Shift4 (NYSE: FOUR) is boldly redefining commerce by simplifying complex payments ecosystems across the world. As the leader in commerce-enabling technology, Shift4 powers billions of transactions annually for hundreds of thousands of businesses in virtually every industry. For more information, visit www.shift4.com. We are looking for a Business Intelligence Analyst (BA) with a Data Mapping Focus to join our Information Technology Group. As a BIA, you will be understanding business operations and gather, analyze and identify data from their sources to map to target databases and reports of the Business Intelligence solution to ensure the flow of information and data to the entire organization. The position requires at least 3 years of prior experience as a Business Intelligence Analyst within Data Mapping. We are looking for individuals that are extremely self-sufficient, available to work flexible hours and hold themselves to the highest standards of professionalism. Responsibilities:  Responsible for the BI Data Mapping, which includes analyzing business requirements from stakeholders, identifying location of necessary data from technical systems, and defining transformations to meet target needs. Create and maintain documents of needed BI Data Mapping. Conduct source data profiling for anomalies and information summaries. Interpret data from a business perspective to aid in the modeling of the data targets such as business intelligence reports or an enterprise data warehouse. Supports the strategy for how data will be documented, handled, stored and processed to support the requirements from across all business units. Provides support for the ETL and BI developers for all data related analysis, questions and issues. Maintain accountability of Data Mapping using our Software Development Life Cycle (SDLC). Contribute to and enforce the use of the Business Intelligence solution. Support key metrics and shared goals that determine success for a particular area. Qualifications:  3-5+ years of experience in business intelligence analysis surrounding system knowledge and data mapping. Advanced experience of technical systems from both the application and data repository points of view. Advanced experience in SQL proficiency (T-SQL, MySQL, and PostgreSQL). Advanced experience in extracting, transforming and mining of data. Advanced experience with BI tools such as Tableau and ETL tools like SSIS. Advanced experience working with various data sources such as AWS Redshift, Postgres, SQL Server, Amazon Athena, Excel, Flat Files, etc. Advanced experience working with large data sets from sources such as AWS Redshift, Postgres, SQL Server, etc. Experience working with an Enterprise Data Warehouse and Dimensional Databases is a plus. Advanced experience of the SDLC and how BIA processes fit into KANBAN and Scrum Frameworks. Experience with Jira and Confluence is a plus. Ability to prioritize multiple tasks and easily adjust to changing priorities. Ability to identify problems, initiate solutions, and effectively collaborate and communicate with team members. Have excellent verbal and written communication skills. Location: Remote  Location: 2202 N. Irving Street, Allentown, PA 18109  Job Type: Full-time  Experience:  SQL: 3 years (Required) Oracle: 3 years (Preferred) finding, understand and working with data in a variety of databases/files: 3 years (Required) understanding the business process of systems: 3 years (Required) data mapping: 3 years (Required) documentation of data mapping (reports): 3 years (Required) writing queries and simple database view: 3 years (Required) Microsoft Excel: 3 years (Required)", "Responsible for impact analysis, identifying common BI patterns, L3 support queries, and more.", "Responsible for the design, development and maintenance of informational dashboards, data and report development. KPIs and dashboards according to semi-monthly / monthly cycle reporting. Coordinate forecasting exercise and planning resources. Analyze activity performance on providing reports, timelines, and analysis such as month-by-month hourly resource time utilization and unit costing, analysis on trends. Developing and providing accurate reporting tools for organization in relation with Programs and Indirect budgets. Interfacing with project teams to ensure consistent reporting of project performance, scope and accurate project forecasting. Conduct cost/benefit analysis and develop business case. Put in place all actions needed regarding continuous improvement and processes. A demonstrable experience in producing high quality and detailed written documents. Other duties as assigned or required.", "Earn $100K+ annually \u2026 as a Sideline\u2014no need to quit your day job. Part-time or full-time.    Pay for Performance, 1099 compensation.    The Ideal Candidate:    Self-motivator who routinely sets and exceeds their own goals. If you're goal-oriented and self-motivated, you'll thrive here. Proven track record of relationship-building and influencing. Exceptional relationship-building skills.    Position Overview:    Pay for Performance, 1099 compensation \u2013 residual monthly income paid for the client's life (average 10+ years!). This position requires no quotas and no caps on earnings. Work alongside your current position or business. Sideline, Part-time or Full-time. Training and ongoing support provided.   General Responsibilities:    Identify opportunities in our cost-saving services with prospects and new clients, building them into long-term relationships. Serve as a liaison between prospective clients and Business Development Director/SME.   Requirements:     Current or former Business Professional, Executive, B2B Sales Rep, Finance Executive, CFO, COO, or Controller. Ability to lead conversations with prospects and clients. Must have 10+ years of business experience working with decision-makers. Strong communication and interpersonal skills. Positive and results-driven. Ability to work well independently and with others.   About Us:    Aspire Partners offers B2B solutions with front-end timing and at no cost or investment to prospective companies. It's a win-win for clients. Current inflationary conditions make our services more relevant and in demand for all sectors. Companies desperately need our help. Our solutions can help companies thrive during these uncertain times by solving efficiency issues and adding to their bottom line.   Every business needs to reach peak profitability and efficiency. Handling account payables, reducing expenses, and attracting and retaining good employees is vital to the success of every business. We create operational efficiencies and actual cost savings for companies of all sizes and industries without switching vendors or current, established relationships with company vendors or service providers.", "Job Summary:  Join HonestMed, a fast-growing ecommerce company in the medical supply space, as a Data Analyst. Utilize your analytical prowess to enhance our online retail business's performance. Your primary responsibilities will include monitoring key performance indicators, such as website traffic, conversion rates, and sales, identifying growth opportunities, optimizing website designs, implementing marketing campaigns, and maintaining comprehensive business intelligence reporting to drive HonestMed's success.  Essential Functions and Key Responsibilities:  Identify, ingest, and clean critical data sources for modeling and reporting. Design and manage dashboards and reports for marketing and business teams. Provide actionable metrics, insights, and recommendations on consumer analytics and marketing campaigns. Lead projects leveraging data analytics to address complex business issues. Narrate the customer and service story through BI tools and timely reporting. Become the company's data expert, deeply understanding the data landscape across customer journeys. Promote data-literacy and accelerate data knowledge among colleagues and customers. Foster a team-oriented and inclusive work environment. Collaborate effectively with all organizational levels and stakeholders. Be on-site in Oceanside, CA Perform additional duties as required. Knowledge Skills and Abilities:  Minimum of 3 years in data analytics, focused on consumer, retail, and marketing data. Expertise in creating dynamic, data-driven dashboards, preferably in Tableau. Proficiency in consumer analytics, marketing analytics, and forecasting. Demonstrated ability to apply data and analytics to problem-solving. Experience in effectively presenting complex results to all organization levels. Outstanding leadership, communication, interpersonal, and presentation skills. Ability to foster positive working relationships within and outside the company. Required Education and Experience:  Bachelor's degree or relevant combination of education and experience. Strong proficiency in SQL, Python, and Excel. Experience in building data pipelines is a plus. Minimum 5 years of e-Commerce experience preferred. Strong data visualization skills with dashboard building expertise in Tableau or Power BI.", "SaaS solution provider located in the Cayman Islands is searching for a (Senior) Tableau Data Analyst to work remotely from anywhere in the United States.  Candidate will join their team and be responsible for designing, developing and maintaining the Tableau dashboards and reports.     About:  This company has extensive experience in operating world-class data centers hosting SaaS solutions.  They are a 20-year-old company with a solid client base focused on building long term client relationships and world class solutions.  They have a business model for long term loyalty with their staff and clients.     Candidate will work remotely from a home office and on occasion be required to work outside of regular business hours and share on-call duties with other members on the Application Support team.  Candidate will be given the opportunity to travel and work in a Caribbean lifestyle for one week each year when they visit the company\u2019s headquarters and data centers in the Cayman Islands.  Over time is expected in this position.     Note:  Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers. Job Requirements Education:  College Degree in Computer Science, Information Systems or related field.    Technical Skills & Abilities:  Three (3)+ years proven experience as a Tableau Developer or similar role - required Proficient in Tableau Desktop and Tableau Server Strong understanding of data visualization principles and best practices Experience with data modeling, data integration, and ETL processes Strong knowledge of SQL for data manipulation and querying; extensive experience writing functions and scripts    Responsibilities:  Develop and maintain Tableau dashboards and reports to support business analytics needs Collaborate with stakeholders to gather requirements and understand business objectives Design and implement data visualizations using Tableau best practices Create complex calculations, parameters, and filters to support data analysis Optimize Tableau performance and troubleshoot issues as needed Conduct data analysis and provide insights to drive business decision-making Stay up-to-date with Tableau features and functionalities to ensure effective utilization Soft Skills:  Excellent problem-solving skills and attention to detail Strong communication and collaboration abilities Fluent in the English language Additional Information Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers.", "Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Bachelor\u2019s Degree in Computer Science, Engineering, Management Information Systems, or a related field Five years of related experience in application administration and support, including experience utilizing SQL and related SQL management tools (SSMS, SSAS, SSIS and SSRS) Skills Required Knowledge of computer system capabilities, business processes and workflow Experience with enterprise applications and understanding of database driven applications Experience with SQL scripting Strong understanding of the software development life cycle Excellent communication skills, both written and verbal, including the ability to bridge functional and technical resources by communicating effectively with individuals of varying systems expertise and business needs Proven problem solving and analytical thinking and ability to approach problems logically and systematically Ability to maintain good customer relations with clients and external vendors and partners Essential Functions  Builds ad hoc queries, reports and business processes using standard Blackbaud CRM features/functionality      Builds custom business process and data integrations using SQL Supports system users with issues, new requests and system upgrades Collaborates with team members and individuals across the Development and Alumni Relations division to develop best practices, re-usable objects and effective documentation Analyzes and documents user needs, existing and new policies, processes, procedures and operational methods to consider possible improvements to new and existing systems Utilizes elicitation techniques to understand business processes and translate into system requirements and/or development of systems solutions Defines and documents business requirements, technical specifications and test cases for system developments May include the writing of all or a portion of functional and technical specifications Coordinates with business and technology teams, ascertaining system requirements, such as program functions, output requirements, input data acquisition, and system techniques and controls Problem solves in areas such as system design, input/output requirements and procedural flow between departments and/or business systems Performs configuration of enterprise application software Performs testing of new systems, upgrades and patching of existing systems Plans, conducts and documents results of testing Performs all other duties as assigned Additional Functions  Has frequent contact with division staff and other university offices Open office environment Many hours spent in front of a computer Evening/weekend and on call work as required to meet project deadlines and/or maintain system availability Preferences  Six or more years of related experience in application software support Programming experience utilizing SQL and related SQL tools, and report development tools using SSRS, PowerBI and/or Tableau Experience developing business intelligence solutions Experience building SSIS (SQL Server Integration Services) packages Experience with project management methodologies Experience with REST APIs Experience with alumni/development database systems, preferably Blackbaud CRM Experience in non-profit or higher education setting Thorough understanding and working knowledge of alumni relations and/or fundraising Skills Excellent organizational skills Strong attention to detail High levels of overall organization, accuracy and time management Goal oriented with the ability to prioritize a heavy workload Willingness to take charge of assignments and follow through with minimal supervision Ability to work with high level of confidentiality Proficiency in Microsoft Office Suite", "https://www.indeed.com/viewjob?jk=57bafe6006d3d2ad&tk=1hdr8h4cejr51801&from=serp&vjs=3", "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.  This position is remote. We are unable to offer work sponsorship for this role.  We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.  Your impact:  Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company's product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform. About you:  Microsoft SQL Server solutions DB Architecture Stored Procedure SSIS Performance Tuning Enterprise Analytics Toolsets Examples: MicroStrategy, Power BI, Tableau, Looker Python Scripting Agile Development Process Jira 3+ years hands-on experience in developing and architecture of large-scale, multi-tenant, real-time, customer-facing data platforms using relational and non-relational database platforms and micro-services architecture patterns. 3+ years hands-on experience in developing Microsoft SQL Server solutions including DB architecture, stored procedure, SSIS and performance tuning. 1+ years hands-on experience in designing and developing enterprise analytics reports and dashboards that are deployed into a customer-facing analytics reporting platform. 1+ years hands-on experience with enterprise analytics back-end components including schema, analytics engine and web layer to support a customer-facing analytics reporting platform. 1+ years hands-on experience with REST API, Python scripting experience is a plus. Significant experience collaborating with individuals in product development and engineering roles to envision and deliver a customer-facing analytics report platform. Experience in delivering an agile environment and understand how to maximize results from sprints, releases and road maps. Experience in creating a variety of architecture and business artifacts to communicate all aspects of a proposed solution to a diverse audience comprised of technical and business team members. Experience in designing and leading experiments or proofs of concept which increase team knowledge and bring about effective technical and business decisions. Keep up with industry trends, enjoy teaching yourself new technology, and enjoy talking about different technical problems and their solutions. Courage to debate with colleagues and drive out the best solution for the organization, not just your solution. One or more industry certifications in a relevant data architecture or engineering topic area.", "The Data Governance Management Office (DGMO) is responsible for the development, implementation, and continuous improvement of an enterprise data governance framework that will increase coordination and consistency across enterprise domains, establish a shared, cross-functional understanding of critical data assets and concepts, and improve AltaMed\u2019s ability to make data-informed decisions using quality, trusted data & insights.   The Data Governance (DG) Analyst is responsible for facilitating and managing data governance initiatives, including the development of data standards, policies and procedures, and working with stakeholders from across the organization to promote and implement data governance best practices (data classification, data lineage, lifecycle management). This role will convene cross-functional groups to understand and document data requirements, data flows, and data use. In addition, the DG Analyst will help define and execute toward the implementation of an enterprise data governance roadmap, collaborating with data & analytics technical teams to bridge business objectives to analytical products & solutions.   To be successful in this role, individuals must have a blend of business acumen, a problem-solving attitude, data governance and data management knowledge, and a strong ability to communicate effectively with both technical and non-technical stakeholders. Other critical success factors include: comfort with ambiguity, curiosity and willingness to learn new subject matter, and an ability to build relationships with a focus on partnership. This role will support cross-functional teams with analysis and measurement of key data governance inputs, and requires some proficiency with data analysis and data quality measurement techniques.   Responsibilities   Contribute to and facilitate the creation of policies, standards, and documents on topics such as: data governance, data stewardship, master data management, data quality management. Build and maintain data governance collateral to centralize, coordinate, and share DGMO content with a wide array of enterprise stakeholders. Work with key business and technical stakeholders to create, manage, and curate an enterprise business glossary, data dictionary, and data catalog. Capture and share detailed formal documents, such as governance meeting minutes for operational, tactical, strategic, and executive audiences. Implement change control & change management processes and tools, and resolve enterprise data governance issues. Develop and socialize data maps to ensure transparency in the lineage and flow of data within and outside of the organization. Define and drive tactical roadmaps for enterprise data governance adoption, including socialization, stakeholder buy-in, operating model implementation, and data governance training. Work with other data & analytics teams to develop, promote, and monitor adherence to data quality standards. Develop, maintain, and socialize data inventory tools and methods to support data asset documentation & governance. Work with key stakeholders to define, monitor, and share data governance key performance, quality, and adherence metrics. Perform other duties as assigned.   Qualifications   Bachelor\u2019s degree in information technology, business, public health, mathematics, finance, or a related field, with appropriate professional and technical experience required. Minimum of 4 years of experience in data management, data analytics, product management, or consulting, or other relevant work experience required. Experience with project management techniques, such as cross-functional project coordination & delivery, work plan development, requirements gathering is required. Prior professional experience working within a healthcare environment (payer, provider, vendor) required. Proven ability to facilitate effective meetings and work sessions across various levels of staff and leadership required. Prior experience with data governance tools and platforms highly preferred. Previous experience in health care analytics, data strategy, business strategy, or clinical administration preferred. Prior experience with product management & agile delivery principles (Scaled Agile - SAFe) preferred. Show less  Seniority level Entry level Employment type Full-time Job function Information Technology Industries Wellness and Fitness Services", "No description details", "https://www.indeed.com/viewjob?jk=dd7d5cb7585219aa&tk=1hepmokcejm4n800&from=serp&vjs=3&applied=1&from=smart-apply", "Job Responsibilities  \u00b7 Collaborate closely with cross-functional teams in engineering, supply chain, and production to identify key performance metrics and indicators.  \u00b7 Design, develop, and implement comprehensive Power BI dashboards and reports that provide actionable insights for program management and decision-making.  \u00b7 Utilize DAX language to create advanced calculations, measures, and transformations to ensure accurate representation of metrics in reports.  \u00b7 Build and maintain complex data models with a keen focus on establishing accurate and efficient table relationships, enabling seamless data flow and analysis.  \u00b7 Analyze large datasets to extract valuable insights, identify trends, and present findings in a clear and concise manner.  \u00b7 Work closely with stakeholders to understand their data needs and translate requirements into effective data visualizations.  \u00b7 Lead the development of data-driven solutions that enhance program efficiency, quality, and overall performance.  \u00b7 Establish data quality standards and procedures to ensure accuracy, consistency, and reliability of metrics.  \u00b7 Stay current with industry trends, best practices, and advancements in data visualization, DAX language, and program management techniques.  Education/Experience  \u00b7 Bachelor's degree in a relevant field such as Engineering, Supply Chain Management, Business Analytics, or a related discipline. Master's degree is a plus.  \u00b7 Proven experience (5+ years) in utilizing Power BI for data visualization and creating advanced dashboards and reports.  \u00b7 Demonstrated expertise in setting up and managing metrics for complex programs within engineering, supply chain, or production environments.  \u00b7 Proficiency in the DAX language is essential, with the ability to create complex calculations and measures.  \u00b7 Strong aptitude for establishing and optimizing table relationships to ensure accurate data modeling.  \u00b7 Excellent analytical skills and the ability to transform raw data into meaningful insights.  \u00b7 Effective communication skills to collaborate with technical and non-technical stakeholders.  \u00b7 Experience in data manipulation, transformation, and cleaning for accurate analysis.  \u00b7 Detail-oriented mindset with a commitment to data accuracy and quality.  \u00b7 Ability to work independently, prioritize tasks, and manage multiple projects simultaneously.  \u00b7 Familiarity with engineering, supply chain, or production processes is a plus.  \u00b7 Certifications in Power BI and relevant data analysis fields are valuable.", "About the job ABOUT US  Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards!   ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable.   Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns.     With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement.   THE ROLE  The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting.   We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements.   You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units.   KEY TASKS & RESPONSIBILITIES   Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Responsibilities:  \u00b7 Experience Developing, deploying, and supporting SharePoint, Teams, Power Platform and SPFx applications.  \u00b7 Strong technical knowledge with Power Platform tools including Power Automate (Flow), Power Apps, Power BI, DataVerse.  \u00b7 Experience with enterprise level canvas applications utilizing Power Platform tools  \u00b7 Knowledge of Power Automate Technical REST & SOAP protocols  Desired Technical Skills:  Strong technical knowledge with Power Platform tools such as Power Automate (Flow), Power Apps, Power BI, DataVerse. Proven experience developing enterprise level applications utilizing Power Platform tools Strong experience with SharePoint administration, workflows, and development. Strong Microsoft Power Platform development experience Web development experience including, JavaScript, SQL ,XML, and CSS Design/implementation experience in the Microsoft Power Platform \u2013 MS PowerApps, Power Automate, and PowerBI. Experience :  Bachelor\u2019s in computer science, Information Systems or related field OR 4+ years of relevant work experience 3+ years of experience Developing and administrating enterprise applications Experience on teams with emphasis on development within Microsoft SharePoint environments Experience implementing and/or administrating IT service support management tools Strong interpersonal skills, oral and written communications across all levels of an organization", "JOB DESCRIPTION & DETAILS     Day to day:  Insight Global is seeking a Data Engineer to support a local insurance company headquartered in Richmond, VA. This engineer will be responsible for enterprise data integration and reporting, as well as building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies. This candidate will be required to go onsite 2 days a week in the Richmond, VA area.     Responsibilities:  Assembling large, complex sets of data that meet non-functional and functional business requirements. Identifying, designing, and implementing internal process improvements including re-designing infrastructure for greater scalability, optimizing data delivery, and automating manual processes Building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies Building analytical tools to utilize the data pipeline, providing actionable insight into key business performance metrics including operational efficiency and customer acquisition Working with stakeholders including data, design, product and executive teams and assisting them with data-related technical issues Working with stakeholders including the Executive, Product, Data and Design teams to support their data infrastructure needs while assisting with data-related technical issues    Must Haves:  3-5+ years of experience as a Data Engineer Experience with MS SQL Server Platform (SSIS, SSRS & SSAS) Experience in data warehousing and ETL development (T-SQL, PLSQL, and/or SQL scripts) Experience working with intelligence products and data analytics tools (e.g. PowerBI, Tableau) Ability to compute, analyze and interpret complex and disparate data to produce relevant and consumable reports, dashboards, etc.", "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI RAYUS is committed to delivering clinical excellence in communities across the U.S., driven by our passion for and superior service to referring providers and patients. RAYUS Radiology is built on our brilliant medicine, brilliant team, brilliant technology and services - all to provide the highest level of patient\u00a0care\u00a0possible.", "-Own data needs for clients and internal teams -Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports -Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools -Manage the retrieval, compiling, and formatting of large volumes of data -Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. -Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support -Learn new technologies as they evolve, and understand their impact to systems -Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously -Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals -Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities -Present and clearly articulate solution options to key stakeholders -Be a go-to resource with thorough understanding of data structures for various ad platforms", "Publishing.com has helped thousands of normal everyday people to become successful self-published authors. And along the way, we also became one the most successful companies in the US (  Want to be at the forefront of the AI revolution? Join us! We are building the most comprehensive AI-powered self-publishing platform and you get to join us at ground zero. Instead of just teaching people how to create successful books, we are going to help them do it.  About you:  You are a data engineer with strong analytical skills and hands-on experience with modern data warehousing and business intelligence solutions. You know how to use code and no-code to ingest data from various sources, how to interpret data and translate it into business insight, and how to prepare reports and dashboards that are easy to understand and digest.  And you have a great attitude!  About this role:  As our first data engineer, you will have the opportunity to make important contributions to various aspects of our data platform. Your main responsibilities are:  Build a highly scalable data warehouse Propose, design, and implement data ingestion pipelines (ELT/ETL) Maintain our local and cloud data platforms Understand and interpret business intelligence requirements and translate them into technical solutions Build business analytics and dashboards to address sales and marketing needs  Required skills:  Strong problem solving skills Strong communication skills Strong SQL skills Expert in using data warehousing solutions such as BigQuery, Snowflake, or Databricks Experience with data ingestion services such as Fivetran, Matilion, Segment, or similar Experience with Google Sheets Experience with business analytics for marketing and sales Strong programming skills in JavaScript and Python Experience with HubSpot Experience with Git Experience with agile development Experience working with marketing and sales teams Strong sense of ownership  Preferred Skills:  Experience with Google Clouds Experience building CI/CD pipelines Experience with AWS, Azure, or GCP Experience with Terraform or other IaC solutions Experience with DevOps and SRE best practices", "About the job Job Summary   The Business Intelligence Developer works independently, and collaboratively, to elicit requirements and create specifications. They then design, architect, and implement complex and visually compelling reporting and business intelligence (BI) solutions (data visualizations, extract-transform-load (ETL), ad hoc querying, etc.)   The individual in this position interfaces with various functional teams to support the BI solution delivery. They proactively identify needs or issues, develop strategies, and propose/implement technical and process solutions. The Senior BI Developer leads complex or specialized projects and will grow to become a subject matter expert with responsibility for mentoring and training all levels of BI developers as well business stakeholders   Essential Functions And Tasks   Responsible for designing and implementing BI solutions using the Microsoft BI Toolkit (SQL, SSIS, SSAS, SSRS, Power BI) to enable the analysis of data to support strategic initiatives and ongoing business requirements. Solutions include, but are not limited to, end-user reports, ad hoc requests, data visualizations, extract-transform-load (ETL) systems, master data management (MDM), and other BI Solutions   This position is expected to have a proactive approach and create the best solution to address business needs and current infrastructure. Care will be given to provide accurate data to fulfill the requirements of the developed solutions   Actively seeks opportunities to expand technical knowledge and capabilities   Work with the Development team to establish best patterns, practices, and standards as new technology arises   Participate in the out of hours support process   Performs special projects and other duties as assigned   Education And Experience Requirements   Bachelor\u2019s Degree in Computer Science, Information Technology, Data Science, Math, Finance, or a related field, or equivalent training   Two (2) to five (5) years of experience as a Business Intelligence Developer   At least three (3) years of progressively responsible experience building Data Warehouse and Business intelligence solutions. Experience using Microsoft Business Intelligence technologies: SSAS, SSIS, SSRS or similar technologies and database platforms such as Information Builder\u2019s WebFocus, SQL, Tableau, SAP, Power BI, or Oracle. Experience working with SQL queries and data processes   Certification in Lean, Six Sigma or other advanced performance improvement methodology, preferred   Knowledge, Skills, And Abilities   Knowledge and experience with SQL, SSIS, SSAS and SSRSs that support an Enterprise Data Warehouse environment   Ideal candidates will have hands-on experience with the full life cycle of Data warehouse design and development including logical and physical data modeling, mapping data elements from various data sources, and loading EDW objects including dimensions and fact tables   Candidates must have hands-on experience with gathering business requirements, documenting the reporting and analysis specifications, and designing technical architecture   Proven ability to answer technical questions   Strong knowledge and experience with healthcare reporting, Analytics, and Business reporting needs is a must   Excellent communication and client-facing skills   Ability to be flexible and work under high pressure in a complex environment   HealthCare/RCM/Financial systems is a major plus   Experience with large Health care EMRs is a plus   Understand and comply with company policies and procedures", "JOB SUMMARY  At Houston Methodist, the IT Data Specialist is responsible for supporting an enterprise wide business intelligence and analytics framework that will provide the organization with solutions for effective decision-making. This position utilizes critical thinking, attention to detail, and effective communication skills and collaborates effectively with teams to consult with business area leads to generate solution recommendations. The IT Data Specialist plays a technical role on multiple projects and communicates effectively with technical and non-technical audiences. The position utilizes technical expertise in Business Intelligence architecture, design and implementation with experience in business, healthcare and technology projects. The incumbent will be actively involved in supporting, developing and advancing Houston Methodist\u2019s Analytics applications. The IT Data Specialist will use tools such as Microsoft SQL Server, Microsoft SQL Server Reporting Services, Microsoft SQL Server Integration Services, and Tableau to design and implement innovative approaches to data collection, analysis, interpretation and presentation to support planning and decision-making at all levels of the organization and assist in managing data as a corporate strategic resource.     Primary Job Responsibilities  Communicates (oral and written) effectively with customers, vendors, colleagues, and management about services, contact information, system availability, and information. Assists the business analysts to elicit requirements to document. technical and design specifications for package solutions, and/or software development. Assists with user education of business intelligence applications and helps ensure access to data with the goal of reduced reliance on technical specialists in order to obtain data. Develops Analytics Solutions including the data marts, Tableau data sources, reports and dashboards that support operational and strategic decision making. Identifies required source system data and develops ETL processes that move data from source systems into the data warehouse and data marts. Participates in resolving major system outages, disaster management and change control and provides technical or on call support for Analytics applications. Installs, configures, and deploys Analytics tools including as Microsoft SQL Server, and Tableau. Ensures all reported data and information are accurate, consistent, relevant and timely. Practices good time management, good assessment in professional decision making, and management reporting skills.", "The Role  We're seeking a seasoned and dynamic professional to join us as an Associate Consultant, Data Analytics. In this role, you'll be instrumental in delivering projects to our clients. You'll be responsible for analyzing, strategizing, implementing measures, and offering expert guidance to enhance our clients' operational resilience.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  \u2022  Conduct in-depth data analysis to identify trends, patterns, and insights that can inform client strategies and recommendations.  \u2022  Collaborate closely with clients to understand their business objectives and tailor data-driven solutions that address their specific needs.  \u2022  Create visually compelling and easy-to-understand data visualizations, dashboards, and reports to effectively communicate findings to both technical and non-technical stakeholders.  \u2022  Apply statistical techniques and predictive modeling to uncover correlations and forecast potential outcomes, enhancing the accuracy of strategic planning.  \u2022  Ensure the quality, accuracy, and reliability of data by conducting data cleaning, validation, and preprocessing procedures.  \u2022  Present analytical findings and recommendations to clients in a clear and concise manner, demonstrating the value of data-driven decision-making.  \u2022  Leverage cutting-edge analytics tools and technologies to optimize data analysis processes and streamline workflows.  \u2022  Collaborate with cross-functional teams to tackle complex business problems, utilizing your data expertise to drive innovative solutions.  \u2022  Stay up-to-date with the latest trends and advancements in data analytics, bringing new ideas and best practices to the team.  \u2022  Assist in project planning, timeline management, and resource allocation to ensure the successful execution of data analytics initiatives.  Qualifications  Bachelor's or Master's degree in a related field (e.g., Data Science, Statistics, Business Analytics). Proficiency in data analysis tools such as Python, R, or SQL. Experience with data visualization tools like Tableau, Power BI, or similar. Strong analytical thinking and problem-solving skills. Excellent communication and presentation abilities. Ability to work collaboratively in a team-oriented environment. Prior consulting or client-facing experience is a plus. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "\"Responsibilities Job Description Job Description  The Business Intelligence (BI) Developer is responsible for the design, creation, and maintenance of sustainable reporting solutions to support data-driven decisions by the client.  Drives significant analytic initiatives in support of business strategies.  Develops an understanding of business processes and operational tools in order to create meaningful reporting designs.  Responsible for the analysis of business data needs and develops the required data modeling.  Designs and develops creative and interactive data visualizations.  Partners with business leaders across the organization to support and implement high-quality, data-driven solutions.  Assists IT with collecting and storing operational data from source systems.  Stays current on all processes, techniques, tools, and industry best practices to ensure the client is at the forefront of Business Intelligence solutions.  REQUIRED QUALIFICATIONS  3-5 years of Business Intelligence experience  3-5 years of Data Analytics, Dashboarding, Reporting, or Analysis experience  Bachelor\u2019s Degree in Data Science, Business, or related field  JOB FUNCTIONS AND RESPONSIBILITIES  Partner with business leaders and SMEs to understand reporting and analytics needs within their functions.  Gather, document, and analyze business reporting and communications requirements from stakeholders  Map business requirements to source data structures and develop data models from data located within multiple data stores utilizing data solutions such as SQL or Snowflake  Design, build, and maintain dashboards visualizations using BI applications such as Tableau  Ensure dashboards are creatively designed and tell a story behind the data.  Analyze report data for accuracy and report on potential quality errors  Participate in peer review process to ensure all reports are accurate prior to distribution  Partner with business owners to prioritize projects to ensure the most important items are being successfully addressed.  Partner with IT to identify and store required data sets.  Provide ongoing analytics expertise and insights into data trends across the operational segments.  Lead and facilitate dashboard demonstration and educational sessions  Provide ad-hoc data analysis and support to business functions.  REQUIRED COMPETENCIES  Healthcare experience  Advanced skills in data applications such as Power BI, ETL, Tableau (some knowledge) and SQL (some knowledge)  Ability to display complex quantitative data in a simple, intuitive format to present findings in a clear manner  Creativity in designing data visualizations  Strong understanding of data structures that ease the generation of reliable data  Strong analytical skills with some moderate project management knowledge  Proficient Data mining and normalization skills  How to Apply:  If you are a results-driven professional with the qualifications and experience required for this role, we invite you to apply by responding to this portal or send your resume to careers@StoneLaurel.com with the subject line \"\"BI Developer.\"\" We look forward to welcoming a dedicated and strategic thinker to our team.  Company Description  StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "Data Analytics role", "In Addition, You  Have an entrepreneurial streak Are self-motivated and driven Just get things done Roll with the punches when the unexpected happens or if the team needs to pivot direction Are passionate Have strong report visualization and data design intuition Pay attention to user feedback Thrive in an environment of open feedback/brainstorming/sharing Are a team player and people like working with you Are intellectually curious and always wanting to learn more Interested in creating a culture driven by metrics and experimentation   The Business Intelligence Developer will Design, implement, and maintain Dashboards, visualizations, and supporting data analysis layers. Additionally, he/she will design and develop visualization solutions against data warehouses, data marts, and cubes. This position will coordinate with other team members and managers to translate business needs into technical solutions and provide technical assistance to users pulling data from our self-service environment. The Business Intelligence Developer will troubleshoot issues in cubes and database objects (procedures \u2013 as they relate to surfacing data) to identify and solve problems with data accuracy and performance.   Education/Licensing Requirements   High School Diploma or equivalent. Bachelor\u2019s degree in a computer-related field or equivalent experience. Master\u2019s degree in a computer-related field is a plus.   Experience Requirements   Minimum 5 years of experience in MS BI tools (SSRS, SSAS, Power BI)  5+ years of relevant experience in report development, data science, business analytics, business intelligence, or comparable data engineering role, including data warehousing and business intelligence tools, techniques, and technology Minimum of 2 years of experience in Power BI Knowledge of SQL to write complex, highly-optimized queries across large volumes of data Successful work experience in MS SQL programming, database design, data warehouse design, query performance tuning, and writing stored procedures. Knowledge of ETL and data warehouse concepts and processes Experience with Tableau or an equivalent reporting tool to create impactful reports, visualizations, and interactive dashboards Understanding of data models Creativity to determine the best solution for a real-world problem with quantitative data Experience supporting a multi-database environment. Excellent understanding of OLTP and OLAP systems. Knowledge of best practices and software development process   Essential Skills/Experience   Fluently speak, read, and write English. Good verbal and written communication skills. Proven ability to prioritize and multi-task. SQL programming, server integration, and reporting  Curiosity and passion for data, visualization, and solving problems Creativity to determine the best solution for a real-world problem with quantitative data Experience with reporting, descriptive statistics, probability, and cleaning big datasets Willingness to question the validity, accuracy of data, and assumptions Enjoyment from collaborating with others in a team environment Eagerness to learn in a fast-paced environment Knowledge of medical data a plus   Essential Characteristics   Self-directed and organized. Discrete/ability to maintain confidentiality. Team player. Detail-oriented. Sense of urgency. Customer service orientation. Drive and self-reliance Ability to work under pressure. Ability to work well independently. Ability to take direction.   Essential Job Responsibilities   Evaluate and monitor databases to resolve performance issues. Develop, deploy, maintain and debug SSIS packages. Develop, test, and maintain MS SQL Server databases. Work with Business Analysts to aid in the design of the system. Investigate and resolve problems of data accuracy and availability Participate in integral testing to identify problems early. Perform error and stress scenarios. Participate in design and code reviews. Identify architectural issues and propose alternative solutions. Install upgrades and patches to existing databases. Develop and maintain data warehouse documentation.   Additional Job Responsibilities   Maintains a neat, orderly work area.  Performs other incidental and related duties as required. Actively demonstrates teamwork at all times. Ability to work overtime.", "https://www.indeed.com/viewjob?jk=bbe2a3fe0476f181&tk=1h5a6oa4dh5hp801&from=serp&vjs=3  The Role  We are looking for an experienced and energetic leader to join the team as a Data Warehouse Specialist. As a Data Warehouse Specialist, you will play a critical role in developing data warehouses for our clients. You will be responsible for conducting assessments, developing strategies, and providing expert guidance to enhance their data governance.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  Collaborate with clients to understand their business requirements and design effective data warehouse solutions. Develop and implement data warehouse architecture, data models, schemas, and structures. Design and implement efficient Extract, Transform, and Load (ETL) processes to populate and update data warehouses. Ensure data quality and integrity by establishing appropriate data validation and cleansing procedures. Optimize data warehouse performance through indexing, partitioning, and other performance tuning techniques. Implement effective backup, recovery, and security measures for data warehouses. Evaluate existing data frameworks and identify opportunities for improvement. Conduct in-depth data analysis to identify data quality issues, inconsistencies, and gaps. Recommend and implement enhancements to data frameworks to meet client requirements. Collaborate with cross-functional teams to define data governance policies, standards, and best practices. Conduct regular audits to ensure compliance with data governance guidelines. Participate in project planning and scoping activities, providing technical expertise on data warehouse solutions. Demonstrate expertise in data modeling, dimensional modeling, and data warehouse design principles. Proficiently use SQL, ETL tools, and programming languages to extract, transform, and load data. Utilize data visualization tools to create meaningful reports and dashboards for clients. Stay up to date with the latest trends, tools, and technologies in data warehousing and business intelligence. Qualifications  Bachelor's degree in Computer Science, Information Systems, or a related field. Relevant certifications (e.g., AWS) are highly desirable. Proven experience working on data warehouse projects, including data modeling, ETL development, and performance optimization. Strong understanding of database concepts and proficiency in SQL. Experience with data warehousing tools and technologies (e.g., Snowflake, Amazon Redshift, Microsoft Azure SQL Data Warehouse) Proficiency in at least one ETL tool (e.g., Informatica, Talend, SSIS). Familiarity with data governance principles and best practices. Excellent problem-solving and analytical skills. Strong communication and interpersonal skills to effectively collaborate with clients and team members. Ability to manage multiple projects and prioritize tasks effectively. Professionalism and client-oriented mindset, with the ability to establish trust and maintain confidentiality. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "The Data Developer II will be responsible for developing, supporting, and enhancing database programs and reports using the SQL platform. This senior position typically handles projects of a more complex nature and serves as a resource to junior team members.  Key Responsibilities: \u00b7  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. \u00b7  Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. \u00b7  Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. \u00b7  Monitors database performance and tunes to maximize efficiency. \u00b7  Develops new and enhances existing database objects and packages to advance functionality and automation of systems.  Competencies Required: \u00b7  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. \u00b7  Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. \u00b7  Self-starter with the ability to work independently while supporting a team environment. \u00b7  Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. \u00b7  Flexibility to provide after hours and weekend support on occasion to support business needs. \u00b7  Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. \u00b7  Proficient with database performance monitoring and tuning to maximize efficiency. \u00b7  Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems. Qualifications   Minimum Qualifications/Experience: \u00b7  5-7 years\u2019 experience in a SQL Server development role required.    \u00b7  Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. \u00b7  2+ years of experience monitoring database performance and tuning to maximize efficiency required. \u00b7  SQL Server Integration and Reporting Services experience required.  Formal Education & Certification: \u00b7  High School Diploma or equivalent required. \u00b7  Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.  Work Status: \u00b7  Full-Time.  Supervisory Responsibility: \u00b7  None.  Travel: \u00b7  No travel expected.  Working Conditions: \u00b7  Conditions involve lifting no more than ten pounds, sitting most of the time, but may involve walking, moving, or standing for brief periods, and occasionally lifting and carrying articles like files, ledgers, folders, etc.", "5+ years SQL Development  Role Experience with SSIS and SSRS Looking for local to the Woodlands(greater Houston area).  Available for hybrid-remote work, but not looking to hire anyone remote that isn\u2019t local.  Basically if they are too far away that can\u2019t ask them to come into the office tomorrow, then they are too far away.  SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.   SQL Server Developer III Qualifications  Ideally 5- 7 years\u2019 experience in a SQL Server development role required. Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. 2+ years of experience monitoring database performance and tuning to maximize efficiency required. SQL Server Integration and Reporting Services experience required. High School Diploma or equivalent required. Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.", "Power BI Developer Position The Power BI Developer will be responsible for designing, developing, and maintaining interactive data visualizations and reports using the Power BI platform. To be successful in this role, the Power BI Developer will collaborate with stakeholders and business analysts to understand requirements and translate them into effective and visually appealing dashboards and reports. Your expertise in Power BI and data visualization will play a crucial role in helping our organization make informed decisions based on data-driven insights.", "Tableau Opportunity Hi Emmanuel,  I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak.  Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently.  Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Required Skills and Experience *  5-7 years of experience in a SQL Development role 3+ years of experience using SSIS/SSRS for automated data imports and hands-on report/parameter creation. 3+ years creating queries within Visual Studio Experience creating stored procedures and views within SQL in a work environment Experience working with Microsoft Server 2012 or newer .NET experience- C# or VB.NET ETL Development experience     Nice to Have Skills and Experience  Experience utilizing Healthcare Information Systems and Databases Bachelor's Degree in computer science or any related field     Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus) The annual base salary for this role ranges from $80,000 - $90,000. Starting pay will be based on several factors and commensurate with qualifications, experience, and work location.  Benefits/Perks:  Unlimited Paid Time Off Program Great benefit plans: Medical, Dental, Vision, FSA, Pre-tax Transit, Short Term Disability, Life Insurance, 401k AcronymCares Matching Gifts program for employee donations DE&I Employee Resource Groups", "Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis. With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables. Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS. Research and propose opportunities for data acquisition and new uses for existing data. Code, test, and document new or modified data systems to create robust and scalable applications for analytics. Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables. In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions. Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts. Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI. Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices. Collaborate with Quality Assurance team to ensure valid and proper deliverables. Support business decisions with ad-hoc analysis as needed. Participate in rotation of after-hours support. Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates. Research new technologies for implementation by the team for producing cutting-edge solutions. Cultivate business relationships with stakeholders. May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.", "ob Description:   BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.   Job Responsibilities   Managing the planning, scheduling and deployment of all hardware facilities and associated software for major or multiple sites. Trains, develops, and mentors staff by providing subject matter direction and guidance. Assigns, monitors, and reviews progress and accuracy of work.Provides staff management oversight including hiring, promoting, or making recommendations for staff.Conducts performance reviews and assessments, manages performance, engages in skills assessment, and promotes professional development of staff. Directing, motivating and developing staff, maximizing their individual contribution, professional growth and ability to function effectively with their colleagues as a team. Ensuring adherence to policies, plans, objectives, budgets and staffing allocations for the assigned site. Optimizes the utilization of resources and adheres to Departmental budgeting and fiscal responsibilities. Actively participates in project teams, manages and tracks project details, and provides leadership during periods of transition. Ensures compliance with corporate and industry standards, policies, procedures, and regulations.   Job Qualifications   Education   Bachelor's Degree in a Computer Sciences related field or equivalent work experience   Experience   5 years - Experience in Information Technology required   Skills\\Certifications   Knowledge of information technology concepts, methodology, terminology and standards. Demonstrated ability to interpret and translate technical and/or or complex concepts into information meaningful to project team members and/or business personnel. Strong interpersonal and organizational skills PC Skills required (Basic Microsoft Office and E-Mail) Adaptive to high pace and changing environment Must be able to communicate effectively with both technical and non-technical co-workers Must be willing to adjust schedule to perform maintenance and upgrades outside of business hours and be part of an on-call rotation.   Job Specific Requirements:    Working knowledge with regards to End User Experience (Business user experience) Prior experience with Agile is preferred.   Preferred Skills:   Number of Openings Available:   1   Worker Type:   Employee   Worker Sub-Type:   Employee   Company:   BCBST BlueCross BlueShield of Tennessee, Inc.   Applying for this job indicates your acknowledgement and understanding of the following statements:   BCBST is an Equal Opportunity employer (EEO), and all employees and applicants will be entitled to equal employment opportunities when employment decisions are made. BCBST will take affirmative action to recruit, hire, train and promote individuals in all job classifications without regard to race, religion, color, age, sex, national origin, citizenship, pregnancy, veteran status, sexual orientation, physical or mental disability, gender identity, or any other characteristic protected by applicable law.   Further information regarding BCBST's EEO Policies/Notices may be found by reviewing the following page:   BCBST's EEO Policies/Notices   BlueCross BlueShield of Tennessee is not accepting unsolicited assistance from search firms for this employment opportunity. All resumes submitted by search firms to any employee at BlueCross BlueShield of Tennessee via-email, the Internet or any other method without a valid, written Direct Placement Agreement in place for this position from BlueCross BlueShield of Tennessee HR/Talent Acquisition will not be considered. No fee will be paid in the event the applicant is hired by BlueCross BlueShield of Tennessee as a result of the referral or through other means.    All applicants will be advised that BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.", "Analyze and Define Raw Data Visualizing and developing BI solutions (Dashboards, Scorecards, Analytic reports) Implement best practices to ensure dashboard design consistency for the best user experience Design and test analytics platform code. Data Preparation (Predictive & Restrictive) Enhance and Streamline data collection process Custom Analysis Long term research and prediction Using statistical techniques, collect and analyse data from the clients internal databases and systems and convert it to actionable intelligence; Lead the design of comprehensive data, intelligence and value proposition tools; Identify and communicate trends within complex datasets to stakeholders across the business, including the top problems that need to be solved and how to solve them proactively; Use internal data analytics tools to develop data dashboards that can be accessed by corporate security partners and senior stakeholders on demand; Improve standard operating procedures (SOPs) for implementing databases and data collection systems Plan, research and draft a range of tailored reports to deliver actionable insight for internal clients, including periodic reports (monthly, quarterly, bi-annual, etc.) and bespoke briefs with minimal supervision; Maintain clear and coherent communication, both verbal and written, to understand data needs and report results; Display creative thinking and consulting skills Identify gaps in crucial data, information and intelligence, and submit plans to fill them; Conduct briefings as needed for a variety of levels of customers as requested (via phone, video conference, in-person briefing, or industry conference); Establish and maintain professional relationships with internal stakeholders across the client business", "Comprehend Greenhouse Gas regulatory requirements and translate them into business requirements and data objectives  Transform available data into actionable business intelligence to inform and recommend tactical and strategic Greenhouse Gas approaches  Use and manage existing date forecasting tools to generate GHG forecasts and actionable recommendations  Extend forecasting processes and methods to wider marketing and sales forecasting needs  Assimilate, aggregate, and query data to provide recommendations based on statistical analysis  Monitor data integrity and notify appropriate personnel of data impairments  Develop solutions for automating complex repeatable queries that normalize and cleanse data  Synthesize data into actionable content, and communicate findings back to the business  Become a subject matter expert on improving data, processes, and methodologies to identify inefficiencies and recommend improvements  Ensure that consistent documentation is developed and maintained to easily replicate and improve processes related to data and data analysis  Engage in creating quality metrics, reports, KPIs and Dashboards  Consult with business teams on project requirement gathering and communicating the appropriate selection, utilization, and interpretation of advanced statistical methodologies used in projects  Support GHG operational processes as needed  Effectively communicate and present to both technical and non-technical employees on advanced analytics", "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions. ESSENTIAL FUNCTIONS AND RESPONSIBILITIES Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned. SUPERVISORY RESPONSIBILITY Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management. QUALIFICATIONS Minimum Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems. REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.", "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com  Job Description  What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements.  Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed.", "DATA ENGINEER  In every office around the world, HH Global offers an entrepreneurial culture that sets ambitious goals and looks beyond the status quo.  At HH Global , we reward sharp, unconventional thinkers who are motivated to create their own success. Our winning culture draws from employees who step up to the challenge of solving tough problems and making a difference. We dream big, so our clients can dream bigger.  Responsibilities   Document new reporting features or bugs from both internal and external users   Coordinate testing of reports with users   Manage an accurate and visible task and project list and meet regularly for input on prioritization.   Analyzes data, identifies trends and outliers, and recommends solutions when appropriate.   Coordinate with team members overseas   Create and maintain system protocols by writing and updating procedures; this includes documentation and writing SQL stored procedures.   Generate standard or custom reports summarizing business, financial, or economic data for review by executives, managers, clients, and other stakeholders. This will involve using T-SQL, SSIS, SSRS, and other report writing tools.   Willingness to learn new reporting technologies such as Microsoft Power BI, Tableau, or Qlikview   Participate in physical and virtual meetings as required to facilitate functional requirement gathering and report development.   Maintain or update business intelligence tools, databases, dashboards, systems, or methods   Assist with project management activities by identifying project milestones, phases, and elements; tracking activities, resolving problems, and publishing progress reports.   Manage timely flow of business intelligence information to users.   Requirements   Must be legally authorized to work in the United States without needing current or future employer sponsorship.   Bachelor\u2019s degree in a business or technology related discipline   2 + Years work experience   Working knowledge of SQL   Microsoft Business Intelligence Suite (SSRS, SSIS, SSAS)   Experience with Azure cloud environment: Azure SQL Database, Azure Data Factory   Strong Microsoft Excel skills related to data analysis and manipulation   Proven ability to document and prioritize issues raised by others   Ability to prioritize tasks and directly support the department managers.   Good troubleshooting and error isolation skills.   Ability to work independently on assigned tasks as well as to accept direction on given assignments.   Must be able to interact and communicate with individuals at all levels of the organization.   Your resume will be reviewed by a member of our Recruiting team and we\u2019ll reach out to you directly if there\u2019s a fit. We\u2019re using video conferencing software (Microsoft Teams) to conduct our interviews, but all interviews will be live with a member of our Recruiting or Hiring teams.  Equal Employment Opportunity Employer: HH Global is an equal opportunity employer and all qualified applicants will receive consideration for employment without regard to race, color, religion, sex, national origin, disability status, protected veteran status, sexual orientation, gender, gender identity and gender expression, or any other characteristic protected by law.", "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions. The successful candidates will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.   Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. Degree in computer science, information systems, or related field or 10 years comparable experience in above PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. In addition to supporting extensions to the data warehouse design, this role will design and develop ETL required to onboard new types of business data. Finally, this role will also provide support for Analytics assignments as needed.  Responsibilities  Display sense of ownership over assigned work, requiring minimal direction and driving to completion in a sometimes fuzzy and uncharted environment. Designing and building new data pipelines that support business requirements. Work with IT and other business partners to support the evolution of the enterprise data architecture. Work with IT to build new ETLs to take data from various operational systems and extend existing data warehouse data model for analytics and reporting. Continually improve ongoing reporting and analysis processes, automating or simplifying self-service support for business constituents. Support the development of the company BI infrastructure, including the construction of scalable analytic solutions, and on-premises reporting tools. Utilize Power BI development to build scalable reporting models to serve BI reporting needs. Demonstrate the ability to gather requirements, extract and manipulate data residing in multiple disparate databases, and articulate solutions to support the business. Design, develop, and maintain performant data models in Power BI utilizing best practices. Serve as a subject matter expert for all data warehouse and enterprise systems Use new or existing technologies to produce analytics solutions (in the form of excel spreadsheets, dashboards, etc.). Work with IT and Analytics team to architect and build data pipelines to optimize for performance, data quality, scalability, ease of future development, and cost. Gather requirements, assess gaps and build roadmaps to help the analytics driven organization achieve its goals. Develop data-related Proof of Concepts in order to demonstrate feasibility and value to Symmetry business constituents. Qualifications / Requirements  Bachelor\u2019s degree in Information Systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+years\u2019 experience with advanced SQL concepts and writing SQL statements (SQL Server or similar). Prefer 2 years\u2019 experience with Microsoft BI Suite, PowerBI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Knowledge of the software development lifecycle, agile methodologies, and structured software development methodologies. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data At least 5 years of work experience", "\"Description: Leading with our people, Digital Consultants' mission is to deliver the highest level of professional solutions while being a trusted partner and advisor to our customers. With a culture of practicality, opportunity, and creativity we remain dedicated to being honest, trustworthy, respectful, and ethical in everything we do. We are a certified SBA 8(a) small-disadvantaged business that supports multiple IT customers within the Federal, civilian, and private sectors. Digital Consultants also offers our employees growth opportunities, competitive wages, and a full benefits package. Our founding principles, Fairness and Common Sense make working here more than a job, it is the Digital family.  Digital Consultants is seeking a Power BI Reports Developer to join our team! As the Power BI Reports Developer, you will be designing ETL processes and working directly with developers, testers, and other roles active to translate product roadmap features into well-defined product requirements including features, user stories, and acceptance test criteria.  Duties to include:  Maintain and support data analytics platforms Develop and update relevant technical documentation Collaborate directly with analysts and end users to integrate systems and create effective reports Develop and execute database queries and conduct analyses as needed Maintain status updates for all assigned ad hoc report requests Knowledge of SQL queries, SQL Server Reporting Services (SSRS), and MS SQL Server An expert that understands the Power BI platform and its tools very well. Takes complete responsibility for the development and administration of BI tools including transforming raw data into valuable and meaningful insights in the form of appealing dashboards and reports. Recreating existing reports from the current platform into Power BI.\"\" Build complex dimensional data models and reports from the bottom up Audit existing Power BI efforts with a focus on improvement Visualize compelling data stories on the report canvas Produce KPIs with user-friendly display dashboards Collaborate with client's data team Familiarity with data warehouse design (e.g. dimensional modeling) and data mining Requirements: Active DOD Secret Clearance IAT level II Certification: GSEC", "Competencies  Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience  3+ years\u2019 experience with Integration Services (SSIS)  5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions  Technical documentation skills Self-motivated and directed, with keen attention to detail  Experience with data management Good written and oral communications   Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data  Create ETL processes to load database structures  Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed Position Requirements  Education and Certifications Required \u2022\tBachelor\u2019s Degree in Business Analytics, Management Information Systems or, Business Computer Information Systems \u2022\tCBIP Certification a Plus Experience Required \u2022\t5 + years as a Business Intelligence Analyst, Business Analyst, Systems Support Analyst or Application Support Analyst \u2022\tExperience in Power BI developing reports and dashboards \u2022\tExperience in Business Objects Designer for creating and maintaining universes, WEBI, Derived tables, @functions and schemas \u2022\tUse of Business Objects to access data from a variety of sources \u2022\tPrior business systems analysis experience \u2022\tDrive RCA (root cause analysis) activities \u2022\tWorking experience in server and PC environments and skilled in navigating in a distributed server architecture Experience Preferred \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.", "What you\u2019ll do as the BI Analyst:   Help elevate the Operations and Technology teams by diving deep into data, exploring opportunities for gaining insight and extracting value from the data, and finally, contributing actively to the dashboarding and reporting needs within the company. Act as SME for Snapsheet\u2019s analysis data model, supporting customers and in-house users in finding the information they need for reporting. Collaborate with development and product to provide schema modeling recommendations  Assist in validating launch data from new product releases  Build and maintain documentation on the products you\u2019re building   What we are looking for in a BI Analyst: B.S. or higher degree in related fields 4+ years of experience as a BI analyst (or related role) Proficiency in leveraging SQL to build reports  Experience in building, maintaining, and managing reports & dashboards using data visualization tools (i.e. Tableau, Qlik, Sisense) Self-starter mentality  Nice to haves: Previous experience with AI or ML is a plus  Previous experience pulling metrics or analytics for an operations department/organization", "Kelsey-Seybold Clinic, a Houston tradition in patient-centered care, is a multispecialty clinic with 40+ locations and comprises more than 700 physicians providing primary and specialty care collaboratively.  With more than 65 different clinical and non-clinical specialties, you can design a career path at Kelsey-Seybold Clinic to grow your future in a new direction.  Works collaboratively as a senior member of the Business Intelligence & Reporting team under the direction of KSC Application Technology Leadership. Supports, develops, and maintains SQL database environments and related technology. Acts as a team member on multi-team projects and uses advanced skill sets to develop, test, troubleshoot, and support database-related projects and associated solutions/applications. Acts as a mentor to others learning essential and advanced SQL-related skills.  Requirements include:  Bachelor\u2019s degree in a technical area or equivalent work experience 6 years experience in SQL database administration Flexibility and the ability to adapt to change. Proven communication, presentation, analytical, problem-solving, technical, and writing skills. MS SQL Server Administration MS SQL Transact SQL Programming (T-SQL) MS SQL Data Transformation Services (DTS) and SQL Server Integration Services (SSIS) programming. Performance Tuning of Hardware & MS SQL Server. MS SQL Server Analysis Services (SSAS) MS SQL Server Reporting Services (SSRS) Demonstrates an advanced understanding of the following: Database modeling/normalization Indexing strategies and maintenance Backup and recovery models Clustering and high availability Preferences include:  MCDBA MCTS MCITP Vendor Certified SQL Administrator Other database-related certification/s Why Kelsey-Seybold Clinic?  Medical, Vision, and Dental Tuition Reimbursement Company Matching 401K Employee Reward and Recognition Program Paid time off for vacation, sick, and holidays Employee Assistance Program Continuing Medical Education allowance If you want a satisfying career and a rich, rewarding personal life, don t choose between them.  Achieve them both at Kelsey-Seybold Clinic.  Kelsey-Seybold Clinic strives to provide equal opportunity employment without regard to race, color, religion, age, national origin, sex, gender, sexual orientation, gender identity/expression, genetic information, disability, veteran status, or any other basis protected by organizational policy or by federal, state, or local laws unless such distinction is required by law. Kelsey-Seybold is a VEVRAA Federal Contractor and desires priority referrals of protected veterans.  Job Type: Full-time  Pay: $110,090.00 - $136,995.00 per year  Benefits:  401(k) Dental insurance Flexible schedule Health insurance Life insurance Paid time off Professional development assistance Retirement plan Tuition reimbursement Vision insurance Schedule:  Monday to Friday Education:  Bachelor's (Preferred) Experience:  Database administration: 6 years (Preferred) Microsoft SQL Server: 6 years (Preferred) License/Certification:  Texas Driver's license (Preferred) Work Location: In person", "Proven experience as a BI Developer with expertise in Tableau, SQL, and Tableau Prep. Strong proficiency in SQL for data manipulation and analysis. Experience in designing and developing interactive dashboards and reports using Tableau. Proficiency in at least one programming language like R, Python, or PostgreSQL.", "Key Responsibilities: - Troubleshoot and tune existing Data Warehouse, Dashboards and Reporting systems - Write and modify SSRS and Power BI reports - Design and improve current ETL processes - Maintain Azure Devops Pipelines - Create and update Power BI Data Models - Own and develop relationships with end-users, working with them to optimize and enhance existing reports and integrations - Help design, document and maintain system processes - Improve systems by studying current practices and designing modifications. - Recommend controls by identifying problems and writing improved procedures. - Maintain professional and technical knowledge by attending educational workshops; reviewing professional publications; establishing personal networks; benchmarking state-of-the-art practices Requirements \uf0b7 Bachelor\u2019s degree in Computer Science, Business or Information Science. \uf0b7 Minimum of 5 to 10 years of experience in the field or in a related area. \uf0b7 Experience with Microsoft SQL Server 2008 onwards, Transact-SQL, and Business Intelligence Development Studio (SSAS, SSIS, SSRS, Visual Studio). \uf0b7 Power BI Experience \uf0b7 Knowledge in Azure Data Factory and Pipelines \uf0b7 Familiarity with Essbase and MDX scripts a plus \uf0b7 Operational Data Warehouse experience \uf0b7 Must demonstrate basic knowledge or expertise in the following technology disciplines: Servers, Desktop/Laptop/Workstation Computing, Networking, Security, Programming, and/or IT Operations \uf0b7 Able to read, write and speak English fluently. \uf0b7 Proficient in Microsoft Office Suite (Outlook, Word, Excel, Access and PowerPoint) required. \uf0b7 Detail oriented and ability to work in a team setting. \uf0b7 Ability to be a self-starter and resolve issues with minimal supervision. \uf0b7 Maintains a positive attitude \uf0b7 Ability to handle multiple projects, prioritize tasks, and exercise good judgment. \uf0b7 Good customer skills \uf0b7 Willing to learn new systems and technology", "Title: Senior Report Developer Location: Remote - Anywhere USA As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company. This position will focus on delivery of solutions inside our Data Management/Analytics business unit. Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.", "Requirements  Bachelor\u2019s Degree desired in Computer Science, Information Technology, or related field Minimum of 5 years of experience with database design and Architecture, at least 2 years with Azure technologies, and previous Consulting experience Expert knowledge of Data Management, Business Intelligence and Analytics concepts including: Data Movement (ETL/ELT) Data Warehousing (Designing and Implementing, Azure SQL, Synapse) Azure Storage Technologies (Data Lake, Blob Storage) Data Governance (including Data Quality and Profiling, Master Data Management, and Metadata Management) Business Intelligence, including Reporting and Visualizations (Key Performance Indicators (KPI), and Scorecards) Predictive, Prescription, and Descriptive Analytics Expert knowledge of Microsoft Azure technologies: SQL Server on premises plus cloud supported versions) Azure Data Factory (including ARM templates) Azure Synapse, Cosmos DB Azure Data Lake/Azure Blob Storage Power BI for reporting and analytics Databricks Azure DevOps (including building Stories and tasks, and using development pipelines and ARM templates for publishing code) Eagerness to contribute in a team-oriented environment Excellent communication (written and oral) and interpersonal skills for both technical and non-technical teams Passionate about learning new technologies Analytical approach to problem-solving; ability to use technology to solve business problems Ability to work in a fast-paced environment   Additional Preferred Experience:  Analytics and Data Science tools, technologies, and techniques (R, Python, algorithms, Azure ML Studio/Services) Custom Visualizations in Microsoft Power BI using D3 and jQuery Azure Infrastructure architecture and design Knowledge and experience using Azure DevOps for source control, project deployment and project management", "Power BI Developer Hybrid Remote - 3x per week onsite Based in Rosemont IL Direct hire   At Medix, we are dedicated to creating opportunities for talent in Information Technology. Our dedicated recruiters offer a personalized service to make sure we truly understand your employment needs. We are currently seeking a hybrid remote Power BI Developer with one of our technology clients due growth. This is a direct hire opportunity. Partner with Medix, and you will experience the multiple benefits our company has to offer. We will hold a personal consultation with you to understand your skills and aspirations! Our placement services provide flexibility to accommodate your schedule and needs. We offer competitive compensation packages including full health, dental and vision insurance, 401k and PTO.  Power BI Developer  Job Responsibilities: Reports development Working with Power BI and other individuals across the data team to assist in the pulling of data from SQL and creating visualizations and dashboard for their application and software They will have a smaller team they meet with, but for the most part they will be operating on their own Need to have strong analytical skills and be able to adapt quickly Develop operational reports Build automated reports and dashboards with the help of Power BI and other reporting tools Understand business requirements to set functional specifications for reporting applications Be experienced in tools and systems on MS SQL Server BI Stack, including SSRS and TSQL, Power Query, MDX, PowerBI, and DAX Be able to quickly shape data into reporting and analytics solutions   Power BI Developer  Requirements:  As an Power BI Developer, this individual must be highly motivated, able to multitask and able to work in a fast paced IT environment. Qualified candidates must be able to self direct while working with others.  Other requirements of the role include:  4 years of Power BI experience (including dashboard creation and supporting end users on their visualization needs) Strong SQL experience  Strong understanding of BI functions and tools including SSRS, Power Query, and DAX Any fundamental database knowledge and relational database design  SSIS and SSRS knowledge", "Job Description Summary:  The Business Intelligence Developer is responsible for developing, implementing and supporting reporting and business intelligence solutions to meet the information needs of the organization. The Business Intelligence Developer supports one or more business units in preparing analysis and reporting to drive the business while ensuring accuracy and consistency. Must be able to work with multiple teams and business units simultaneously and thrive in fast-paced, dynamic environment. Must demonstrate the eagerness and ability to learn and must work well in a team environment.   Competencies   Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience 3+ years\u2019 experience with Integration Services (SSIS) 5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions Technical documentation skills Self-motivated and directed, with keen attention to detail Experience with data management Good written and oral communications  Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data Create ETL processes to load database structures Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Apeiron Sumus is looking for a Solution Assessment Consultant to join our team in United States. This person will lead the successful execution of a variety of projects from start to finish.  The ideal candidate is a self-starter with excellent time-management and problem-solving abilities who thrives in fast-paced environments. Someone with high energy, a curiosity about the industry, and tenacity and has previous Microsoft Technology sales experience. This person will bring new ideas, have a deep passion for the role and create ways to attain new accounts.  Responsibilities:  Assessment Implementation -\u202fTrusted advisor to consult on effective plan deployment and new opportunity developments. Able to qualify solution assessment opportunities, handover to Technical team for execution and position partners in the overall sales process.  Customer Engagement - Receives the nomination and engagement with the customer may begin through contact to secure acceptance of the Letter of Engagement and orchestrates project delivery under a remote assistance model.  Orchestrate Assessment process - Manage and execute the activities required to perform a Solution Assessment in each account. Starts the data collection phase, executed under a tele-assisted model that includes remote installation, configuration, and execution of discovery tools, data collection, troubleshooting, data analysis, and the creation of the deliverable for the Solution Assessment.  Report Information and Migration Handover - Shares and fine tunes the report information with Microsoft Team and Designated Migration Partner prior to presenting the team\u2019s Insights & Recommendations to the customer. Hand-offs the Assessment to a designated Migration Partner and Microsoft Field Team to act on the Migration Plan and Drive Consumption.  Partner and Supplier Relationship Management - Recommends Solution Assessment Partner (in case of partner delivered assessments) and coordinates end-to-end engagement with Partner  Professional and Technical competencies:  Hands-on experience with multiple sales techniques  Experience with Microsoft Office and CRM software  Familiarity with MS Cloud and PowerBI  Understanding of sales performance metrics Strong written and verbal communication skills  Attention to detail, data analysis, and analytical skills  Integrate consulting on Microsoft solutions and offerings in support of organizations\u2019 business needs Work with IT systems in support of collecting data  Self-Direction and a focus on quality, apply independent judgment to accomplish objectives   Desirable Certifications:  Microsoft Certified | Azure Fundamentals | AZ-900 Microsoft 365 Certified | Fundamentals | MS-900 Microsoft Certified | Dynamics 365 Fundamentals (CRM) | MB-910  Personal Profile:  Required languages: English Educational level: Bachelor\u2019s degree Special conditions or requirements: Open to work on a global environment with different cultures and languages This is a remote position", "Tableau Opportunity Hi Emmanuel, I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak. Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently. Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Job Description The Power BI / SSRS Developer\u2019s primary responsibility is to design, create and/or support data reporting systems and solutions for the Symmetry Lending organization. Systems include but are not limited to loan originations system, loan servicing system, data warehouse, company intranet, homegrown automation applications, and various partner interfaces. Additional responsibilities include analysis, design, and maintenance of departmental, financial, investor and regulatory reports. Qualifications / Requirements Experience working in the financial industry, ideally banking, lending, or similar as a Power BI and SSRS. Experience as a business analyst or quality assurance analyst is a major plus. 5+ years database design and development experience with MS SQL server technologies (SSRS and SSMS) with Data transformation / ETL and Power Query engine experience. 4+ years' experience with Power BI Desktop, Power Query, DAX (Data Analysis Expressions) language, data modeling, and visualizations. Strong analytical and data modeling skills with the ability to gather and analyze data from various sources, design effective data models, and create relationships between different data tables. Strong understanding of visualization with the ability to create compelling and interactive visualizations with an eye for design. A deep understanding of best practices for creating meaningful charts and graphs, and the ability to effectively communicate data insights to stakeholders. Collaborate with other analysts and developers to integrate Power BI solutions with other data sources and applications. Collaborate with key stakeholders across the organization to identify business requirements for reporting, dashboards, and visualizations. Experience writing complex and optimized SQL queries. Experience with SDLC and Agile processes. Strong verbal, written, and technical analysis skills. Responsibilities Work closely with business users and stakeholders to analyze and define business requirements. Create and provide time sensitive ad-hoc report/data requests. Participate in defining and adhering to best practices, standards and procedures as defined by Symmetry IT. Work closely with Quality Assurance to ensure accurate and compliant data implementations. Create various document artifacts including business requirements and technical design documents. Comply with company policies and procedures, security and regulatory requirements, and investor guidelines. Ensures all applicable internal NPI policies and procedures are followed, and confidentiality of borrower information is maintained. Any combination of following are strong pluses but not strictly required: You have a solid foundation in data analysis and an attention to detail which you use to understand business requirements and translate them into effective report designs. Your strong analytical skills will help you identify trends, patterns, and insights from the data. You have data warehouse design and/or some software development experience. You have a good understanding of data visualization principles and the ability to present data in a meaningful way. You are a continuous learner with a willingness to learn and stay updated with the latest trends, tools, and best practices.", "As a Business Solution Architect, you will\u2026 lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design. Lead the Functional team. Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "EKN Engineering is a fast-growing civil engineering and technology consulting company located in Irvine, CA. We are looking for a Data Analyst II to join us on our quest to further invent and innovate.  As a Data Analyst II, you will liaise with both internal and external stakeholders to anticipate their needs and help foster a data-led culture. You should be able to work with both technical and non-technical teams to define and measure key business metrics and use them in insightful reports. The successful candidate will turn data into information, information into insight, and insight into business decisions.  Responsibilities  Interpret data, analyze results, and identify opportunities for new reporting. Validate data by continually reviewing both reports and data sources for accuracy and consistency. Create and maintain reports and dashboards in Microsoft Excel and Power BI. Administer and improve the data management system, including deployment pipelines. Establish KPI's to measure the effectiveness of business decisions. Create presentations and reports based on recommendations and findings. Work with management to prioritize business and information needs. Requirements  Proficiency with Microsoft Excel. Intermediate-level proficiency using SQL or similar query language. Exceptional problem-solving, technical, and analytical skills. Bachelors' degree in Data Analytics, Mathematics, Statistics, or related field. Experience with Microsoft Power BI or Tableau or similar data visualization software. Competence managing various aspects of a data pipeline, including data validation, data management, data analysis and data visualization. &nbsp;", "SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.", "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.   This position is remote. We are unable to offer work sponsorship for this role.    We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.   Your impact:   Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company\u2019s product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform.", "Title: Senior Report Developer  Location: Remote - Anywhere USA  As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company.  This position will focus on delivery of solutions inside our Data Management/Analytics business unit.  Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Overview: Supports the mission of People's Community Clinic to provide high quality care, by championing and supporting a robust health analytics program.  The starting salary rate for this position is $65,000 - $75,000 annually. Responsibilities: Identifies and implements informatics strategies to support patient outcomes, professional practice and organizational performance. Continuously collects, analyzes, and reports data to end users, including clinicians and administrative staff, through one-time project-based work and by developing tools and systems to support end users\u2019 ongoing needs for data-driven decision making Trains clinical staff on the integrated use of analytics to create sustained progress toward a culture of quality improvement. Provides critical analysis and evaluation of health IT and recommends revision of clinical systems, processes, and workflow to ensure achievement of positive patient outcomes. Serves as the liaison for health IT efforts representing clinician needs. Incorporates clinical research and evidence-based clinical knowledge into informatics program and platform. Collaborate with clinical and IT team members to ensure the effectiveness of technologies and workflows that impact clinical users. Applies human factors and ergonomics to the design of systems and devices. Provides project management oversight of data improvement initiatives. Adheres to HIPAA guidelines. Qualifications: Education: High school diploma or GED. Bachelor\u2019s or other advanced degree in Healthcare Informatics, Nursing, Public Health, or related field preferred. Experience: Two years\u2019 experience working with data, preferably in a healthcare setting. Experience participating in quality improvement and quality assurance efforts preferred. Experience in using a database programming language such as SQL preferred. Experience in statistical programming language such as R or SPSS preferred.  Knowledge, Skills, and Abilities: Strong analytic ability, including problem identification and resolution. Familiarity with EHR and EHR analytics preferred. Strong knowledge of Excel. Ability to work effectively with people of diverse background and varying levels of computer and data expertise. Excellent written and oral communication skills. Ability to work independently with minimal supervision. Able to lead cross-functional teams and influence without direct supervisory authority. Ability to meet deadlines.  Certificate/License: None Required. RN license preferred.  Our Benefits Include: 18 PTO days per year & 11 paid holidays Major Medical Health Insurance Coverage. Most employees experience $0 in out-of-pocket medical expenses. Dental & Vision Flexible Spending Accounts Employer paid Life Insurance Employer paid Short-Term and Long-Term Disability Annual Training 403(b) with 4% employer matching", "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995. Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel! About The Opportunity Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry. You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. Key Responsibilities Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs. Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner. Experience & Qualifications Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field. Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. Solid experience in SQL and working with relational databases. Excellent analytical skills with the ability to dissect large amounts of data. Strong communication skills and the ability to effectively convey complex information. Experience in the corporate travel industry is a plus.", "Designing and maintaining SQL Server Database architecture as well as ensuring their optimal performance, availability, and security. Optimizing SQL Server Database performance, including query tuning, indexing, and statics maintenance. Creating complex parameterized (declare) T-SQL script, as well as using T-SQ: scripts and queries for business intelligence reporting. Writing optimized complex SQL queries for integration with other applications. Performing multipart sub-queries and joining the table indexing and maintenance (clustered and non-clustered). Creating user defined functions, views, and stored procedures. Working with intricate recursive queries, i.e., Common table expressions (CTE), table variables. Developing, configuring, and deploying SSIS packages. Implementing and enforcing database security measures, including access controls, encryption, auditing, updating, merging, deleting, and inserting the databases. Creating and using stored procedures and creating over clauses with or without partitioning. Effective partnership with development teams to design data management and governance protocols, manage the information lifecycle, design infrastructure, and data integration controls.", "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.  Key Responsibilities:  Data Visualization Design: Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques. Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels. Data Analysis and Insight Generation: Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization. Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization. Data Quality and Governance: Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams. Implement data quality checks and validation processes to maintain the integrity of visualized data. Stakeholder Management and Collaboration: Engage with various departments and business leaders to gather requirements and understand their data needs. Collaborate with stakeholders to refine visualization designs and align them with business objectives. Data Strategy and Technology: Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities. Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.", "The team members in our stores are made up of different backgrounds, experiences, and perspectives, all with something special to contribute. Our Rethink Reuse business model of purchasing, reselling and recycling gives the community a smart way to shop and keeps 700 million pounds of used goods from landfills each year.  We also help more than 100 non-profit organizations by purchasing donated goods from them, which provides a source of revenue to help support their vital community programs and services.", "Primarily responsible for the data warehouse ETL framework and architecture Partner and align with business leaders and stakeholders to understand the business needs and address them using the many variations of visualizers PowerBI has to offer Provide training, guidance, and support to users Build & modify a solid data infrastructure, to include underpinning enterprise scale BI analytics / reporting platform, add / create new data models and integrate new data as needed Monitor analytics and metrics results Interact with internal clients to evaluate performance, availability and to collaborate on ways to improve the platform / reporting data Identify and act upon data infrastructure needs, data warehouse design, infrastructure maintenance and investment areas Manage infrastructure projects from beginning to end, including ideation, execution, socialization, and stakeholder management Ensure data integrity and compliance with any and all data security policies Translate business requirements into technical documentation Debug, monitor and troubleshoot BI Solution in development and production environments Conduct and participate in code walkthroughs and document technical design Follow the release cycles and implement on-time delivery of bug fixes, change requests and enhancements Other Duties as assigned", "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices.", "Job Description  This person will be responsible for maintaining the quality and direction of data solutions in support of our Finance team.  The role requires knowledge of database development tools and services, with an emphasis on SSAS.  Qualifications  Experience Required: 7 \u2013 10 Years Education Required: Bachelors Degree Minimum seven (7+) years experience in a multi-disciplined IT environment with strong expertise in data analysis, data modeling, data governance and involvement in enterprise architecture Minimum of five (5+) years experience, hands-on, data profiling and performance tuning databases and data marts with Oracle and / or SQL Server Experience with performance improvement using Azure and/or on-premise Microsoft technologies Experience taking a leading role in architecting, designing and developing solutions exceeding business expectations Knowledge of interpreting business processes and requirements and translating them into logical and physical data models adhering to documented standards and best practices Excellent problem solving and communication skills with experience in interacting with business and technical teams at all levels Responsibilities  This person will be ultimately responsible for performing the data analysis and profiling necessary to provide direction, standards, and implementation of data management solutions associated with data ingestion, transformation, integration, and analytics Engage in full stack Microsoft BI development activities to deploy usable and measurable projects meeting business needs leveraging tools such as SSIS, SSAS, stored procedures and Power BI Write complex Stored procedures to harmonize data sets for reporting Setup dimensional/tabular data models Setup and deploy row/object level security Develop and publish Power BI reports Provide input and implement solutions to drive the continuous improvement of the development and support teams Participate in data integration, business intelligence (BI), and enterprise information management programs by rationalizing data processing to support reuse", "Role Summary  This role\u2019s objectives are to develop reports in Power BI that meet our clients\u2019 expectations. We anticipate this will require consequential expertise in working with Power BI, which includes DAX programming.   Duties and Responsibilities  Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.    Qualifications and Skills  Demonstrable expertise in working with Power BI, including DAX programming. Please note that having experience is insufficient. Succeeding in this role requires demonstrable expertise building sophisticated Power BI dashboards and interfaces.  Experience successfully engaging with clients to develop user-facing reports. Excellent verbal and written communication skills. Experience with other BI tools, notably Tableau, is strongly desired, but not required.    Why Abett?   Opportunity to join a high-growth, venture backed software company, with a clear and important mission.  Competitive market salary and equity options. Flexible hours/scheduling. Work remotely. Fully paid health, dental and vision benefits available. Unlimited PTO.", "POSITION: POWER BI DEVELOPER/ANALYST \u2013 W2 ONLY LOCATION: REMOTE TYPE: DIRECT HIRE Are you a problem-solver with a passion for data analysis and visualization? Our direct client, a leader in the global travel industry including being well known in global travel analytics, is seeking a Business Intelligence (BI) Developer/Analyst to join their leading-edge team. In this role, you&#39;ll bring your expert Power BI development skills, data analytics, SQL knowledge, and understanding of relational databases, working with valued clients in the corporate travel industry. You&#39;ll be at the forefront of their analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for their client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. This is also a great opportunity to work for a Microsoft Power BI Partner! Responsibilities: \uf0b7 Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client&#39;s needs. \uf0b7 Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. \uf0b7 SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. \uf0b7 Client Relationship Management: Work directly with a specific, valued main client, understanding their needs, and presenting your findings in a clear and persuasive manner. Qualifications: \uf0b7 Bachelor&#39;s Degree in Information Systems, Computer Science, Business Administration, or a related field. \uf0b7 Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. \uf0b7 Solid experience in SQL and working with relational databases. \uf0b7 Excellent analytical skills with the ability to dissect large amounts of data. \uf0b7 Strong communication skills and the ability to effectively convey complex information. \uf0b7 Experience in the corporate travel industry is a plus.", "Expected they will be able to:  \u2022\tCreating and developing actionable interactive reports and dashboards using statistical and business intelligence tools such as PowerBI \u2022\tConducting exploratory data analysis to identify areas for improvement and generate insights into products and services \u2022\tConsulting with stakeholders using human centered design approaches to understand the need for data products and to identify a potential solution. \u2022\tTranslating customer requirements for data products (datasets, reports, dashboards) into data solutions; creating calculated measures, columns, relationships, etc \u2022\tAnalyzing source systems and designing new data structures for high-volume, complex data. \u2022\tAccessing, transforming, cleansing, and testing data products using programming languages such as M, DAX, Python, R, and SQL. \u2022\tDesigning data visualization strategies that make large or complex datasets more understandable, accessible, and usable. \u2022\tDeveloping wireframes or prototypes of potential user experiences to share with stakeholder to collect feedback. \u2022\tCommunicating (orally and in written form) analytical results displayed through data visualizations to diverse stakeholder groups. General requirements:  \u2022\tTier 4-High Risk Public Trust Clearance \u2022\tIdeally 5 years of experience using business intelligence tools e.g. Power BI, to develop interactive data visualizations and reports. \u2022\tExperience using languages (e.g. DAX, M, Python, R, SQL) to structure and analyze data. \u2022\tKnowledge of data architecture and modelling, including relational databases.", "Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Responsibilities:  Collaborate with cross-functional teams to understand business requirements and translate them into technical solutions. Design, develop, and optimize database systems, ETL processes, and data models for efficient data storage and retrieval. Create interactive and insightful Tableau dashboards and reports to enable data visualization and analysis. Write and optimize complex SQL queries to extract and transform data for use in Tableau Troubleshoot issues related to data, databases, and Tableau reports. Provide support and mentorship to junior team members. Stay updated on emerging technologies, tools, and best practices in the field.    Required Skills:  Masters or bachelor in computer technology or related field  4 years of professional experience in back-end software development with a strong focus on Tableau and database management. A strong understanding of databases is crucial. This includes knowledge of relational database systems like MySQL, PostgreSQL, or Microsoft SQL Server, as well as NoSQL databases like MongoDB. Proficiency in writing and optimizing SQL queries for data retrieval and manipulation. Knowledge of complex joins, subqueries, and indexing is important. Ability to design and implement ETL processes to extract, transform, and load data from various sources into a database for analysis in Tableau. Understanding the business context and how data analysis and reporting contribute to business goals is important for creating relevant Tableau dashboards. Experience Utilizing: JIRA, ZEPHYR, Microsoft Word, PowerPoint, Excel, Teams, Share point. Strong communication skills    Desired Skills  Additional Key Information  Work must be performed from a US location and engaged resource must be video capable during work hours in the eastern US time zone. This position is on a long term/multi-year contract that includes the possibility for yearly performance-based bonuses. This should be a W-2 hire.", "With minimal supervision, completes the technical design, build, testing, and documentation of Power BI reports based on on-premises and SaaS data sources. The role is within a large and complex ERP implementation project and will primarily support the PMO in creating reporting solutions for project KPI tracking as well as data analysis and validation to support project activities.  * Education:-  bachelor\u2019s degree or equivalent experience is required  * Experience:- Minimum of four (4) to six (6) years of progressive, relevant information technology experience", "Insight Global is looking for a junior data integration engineer to join one of our clients in Midlothian VA. The role is hybrid on-site, 3 days per week. The engineer will be apart of the business systems solutions team. The ideal candidate would be responsible for coordinating and processing requests for SQL data integration work, validate requirements, identify system needs, recommend solutions, and work with other team members to develop end to end solutions.  This candidate would work with business lines and the data team to identify data sources, create data flow diagrams and document the processes.  Additional Responsibilities Include:  -Develop complex data structures and workflows to support processes utilizing MS SQL, custom integration tools and other resources.  -Stay informed of ways the organization uses data and makes recommendations as needed to improve efficiencies.  -Monitors and troubleshoot jobs and data issues.  -Coordinate integration changes as source systems are modified.", "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL  Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995.  Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel!  About The Opportunity  Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry.  You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies.  Key Responsibilities  Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs.  Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations.  SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives.  Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner.  Experience & Qualifications  Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field.  Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI.  Solid experience in SQL and working with relational databases.  Excellent analytical skills with the ability to dissect large amounts of data.  Strong communication skills and the ability to effectively convey complex information.  Experience in the corporate travel industry is a plus.", "Must-haves   - 5+ years of experience developing ETL database in a SQL Server Environment  - Strong knowledge of Data Warehousing methodology and ETL best practices  - Experience with SSIS and SSAS  - .Net experience (doing translations and storing them for later use)  - Database experience - knowing what is dirty data, how to move data, clustered and non-clustered indexing  - .Net experience (doing translations and storing them for later use). - Strong communication (verbal & written) - being able to communicate issues in a timely manner - API experience   Plusses   - DBA background  - OLAP cube development  - HTML experience - Power BI experience   Day-to-Day  Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.  This role is hybrid (up to 2-3 days onsite on some weeks) and a typical work week is Monday-Friday, 8am-5pm.", "Develop and maintain databases by acquiring data from primary and secondary sources. Build scripts and implement tools that will make the data evaluation process more flexible or scalable across datasets and platforms. Escalate and manage internal and external incident tickets through company\u2019s ticketing system. Work closely with project managers to understand and maintain focus on their analytics needs, including critical metrics and KPIs, and deliver actionable insights to relevant decision-makers. Provide after-hours or weekend support when necessary to perform high-risk or planned downtime of IT systems for upgrades and maintenance. Evaluate internal systems for efficiency, problems, and inaccuracies, and develop and maintain protocols for handling, processing, and cleaning data. Assist with the creation, deployment and maintenance of new datasets and reports that can be used to review and improve company goals across departments.", "Position Summary  Reasons you will want this position:  Cedar Gate Technologies is a rapidly growing company with limitless career growth and advancement for top performers Our culture appreciates and rewards creative ideas, especially those that achieve better outcomes for everyone Interact regularly with our executives and senior leadership. Gain valuable work experience with the leader in healthcare technology for value-based care Work in a highly productive environment with a Remote Hybrid work schedule, including a focus on work-life balance. Summary  Cedar Gate Technologies is looking to hire a hard-working and organized Senior BI Developer to be responsible for the upkeep and development of reports and dashboards to support business performance monitoring and decision-making. In this role, you will build and maintain designs for generating reports on financial and market intelligence, collaborate with internal department leaders and global resources to understand business needs, and successfully communicate project results and challenges. You will be part of a talented team that demonstrates superb technical competency, delivering mission-critical reporting infrastructure and ensuring the highest levels of performance and security.   Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.  Job Location: Hybrid Remote in our office in Houston, TX, but also considering Fully Remote within the USA   Required Experience / Qualifications  5 years of experience performing SQL-based data analysis 2 years of experience building friendly end-user reports and dashboards in SSRS, Power BI, or Tableau. Ability to work well under pressure by efficiently prioritizing and managing multiple tasks to meet performance expectations and deadlines. Superior customer service skills with demonstrated experience of this on the resume. Excellent written and verbal communication skills in English. Consistently presents a professional, businesslike image to the public, especially in front of clients, visitors, and internal leadership. BS/BA in a related field to Management Information Systems, Healthcare Management, or Computer Science/Engineering. Demonstrate strong critical thinking and analytical skills. Excellent interpersonal and observational skills in order to assess trainee\u2019s understanding and progress. Possess a positive attitude and a willingness to learn from everyone at all levels of experience. Self-motivated and team-oriented.", "Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "Graphic Business Solutions (GBS) is currently seeking a talented Database Developer with two or more years\u2019 proven SQL Server experience to join our growing software development team.  A successful candidate for this position will have a strong background in developing and maintaining world-class data solutions using Microsoft SQL Server technologies. The candidate will have advanced T-SQL skills with a strong ability to work independently on a wide range of business-enhancing data projects. Equally important to these specific technology skills are excellent written and verbal communication skills both with the team and external teams, the ability to multi-task, the ability to translate business requirements to database requirements, the ability adapt quickly to new environments and using creativity to solve difficult problems as a key member of the software development team.  Essential responsibilities and characteristics of this position include the following:  Develop and organize SQL Server objects, such as Stored Procedures, Functions, Views, Tables, SSIS packages, etc., that support automation efforts Co-develop SQL-based solutions for an e-commerce environment Generate and deliver solutions that provide business intelligence to stakeholders Collaborate with other database developers in the software development team on complex data projects Exhibit an understanding of fundamental database design principles Ability to prioritize and manage multiple concurrent tasks and projects Ability to collaborate in a small and productive development team Motivated self-starter with the ability to learn and adapt to new technologies Passion for working with technology and excitement for creating high-quality products Rigorous attention to detail and focus on the quality of deliverables Excellent verbal and written communication skills Dedication and an appetite for learning new technologies and furthering professional growth Solid analytical and problem-solving skills Requirements:  Minimum Required Qualifications:  Must have 5 or more years\u2019 worth of experience and deep knowledge of:  MSSQL Server 2019 or higher Advanced T-SQL skillset Knowledge of MS SQL Server performance tuning, and the design and implementation of a high-availability database architecture. ETL, SSIS, SSRS SSMS and Visual Studio GIT and version control Familiarity with MS development technologies, C#, ASP.NET and web technologies, HTML, Javascript, CSS, XML etc. highly desirable. Additional Preferred Qualifications:  Tableau Experience with reporting and business intelligence systems Exposure and understanding of Agile Methodologies Proficient with all aspects of the Software Development Lifecycle Excellence in debugging practices Comfortable with GIT and deployments Expert-level proficiency in Excel Desired Education:  Associate's degree or above in Computer Science, Information Systems, Business Administration or related field Work Hours:  Typically, Monday through Friday, 8:30 am to 5:00 pm with the flexibility to meet business demands as needed. This position does not require travel.", "We are looking for a savvy Power BI and Reporting Analyst, with previous experience in the retail energy space, to join our growing team of enterprise data and analytics experts. The hire will be responsible for advancing our reporting and analytics footprint. The ideal candidate is an experienced BI Analyst who enjoys optimizing data reporting processes and driving insights.  ESSENTIAL SKILLS AND EXPERIENCE Successful job applicants will be able to perform these functions. Reasonable accommodations will be made to enable individuals with disabilities to perform essential functions. \u2022 5+ years of experience in a related role. \u2022 3+ years of experience using Microsoft PowerBI. \u2022 2+ years of experience working in the retail energy space. \u2022 Advanced working SQL knowledge and experience working with relational databases, query authoring (SQL) as well as working familiarity with a variety\u00a0of\u00a0databases.", "5+ years of experience working with SQL/Azure SQL/T-SQL. proficiency with at least one RDBMS like SQL Server DB, Oracle, MySQL, Postgres is must. Understanding of modern cloud data platforms like Azure or Snowflake is preferred but not required. Understanding of ETL and data warehousing concepts, coupled with hands-on experience of at least one ETL tool like SSIS, Azure Data Factory, Talend, Informatica. Knowledge of Power BI, DAX, or Tableau or SSRS. Adapt at conveying insights through data, assisting partners in identifying what matters and what steps they can take to help their business. Devotion to the QA process, conducting QA testing, and adept troubleshooting While AI or ML experience is preferred, it is not obligatory. Awareness of modern-day storage, compute, serverless, and orchestration services offered by cloud platform such as Azure, AWS, GCP. Experience with task automation, configuration, and alerts via PowerShell, Azure Data Factory, Databricks, SQL Agent, Data Pipelines. Working knowledge of Python and/or Spark (preferred but not required). Understanding of data modeling is desired but not mandatory. Advanced knowledge of performance monitoring and optimization. Be able to analyze system resource utilization, bottlenecks, and plan platform capacity sizing (activity monitors, traces, query tuning, optimizers, etc.) Capability to quickly adapt to new projects, systems, and technology tools. Must reside in Southern California. Some of the systems we work with are: Yardi (multiple modules including Voyager, Deal Manager), SQL databases and DW, Smartsheet, HubSpot, various 3rd party data sources.", "Summary  Under general supervision, this position will involve reviewing, researching, analyzing, monitoring, and manipulating school and business-related data within many database systems, implementing information delivery improvements, ensuring data accuracy, and creating daily, weekly, and quarterly reports and dashboards, including support ticketing processes.   Essential Functions  Demonstrates expert proficiency in the design, development, and implementation of data, reporting and database technologies and tools, Consults with businesses to resolve complex data issues Champions\u2019 efforts to extend existing data architecture to ensure new and existing user demands and application requirements are met on an ongoing basis Advise database design/code through in-depth understanding of business needs/functionalities and provides expertise in devising, negotiating, and defending database schema and data models Consults with database administration and client areas and provides solutions in resolving complex issues during the translation to a physical database design Provides knowledge and expertise of enterprise data to assist Spartan functional groups in the creation and definition of internal and external dashboards, reports, and KPIs Provides direction and guidance on reports and visualizations and ensures recommendations are aligned with user needs and capabilities Uses expertise to evaluate market trends and provide input into the selection of tools and any necessary changes to the company\u2019s data management, reporting and visualization environment Serve as a mentor to other data analyst within IT and throughout organization Accomplishes engineering and organization mission by completing related results as needed  Knowledge / Skills:  Experience in consultative requirements elicitation, design and building of data management, reporting, and visualization solutions Motivated and able to quickly learn new technologies and tools 5+ years report and analysis development experience Experience scripting in TSQL and other database technologies Experience in SSRS or equivalent technologies Experience with PowerBI, Tableau or equivalent technologies (Power BI development/design experience is a plus) Ability to develop, design and solution specifications Demonstrated record of perusing and applying new advancements in information technology to solving business problems related to data management, reporting, and data visualization Must be a self-starter with effective oral and written communication skills. Must also be customer-service oriented and an experienced problem solver who seeks assistance when necessary Education and Work Experience  High School diploma or GED required Bachelor\u2019s degree preferred in computer science or related discipline, or equivalent work experience required 5 to 7 years\u2019 experience directly related to duties and responsibilities specified", "A remote position position opened for candidates in the USA; What you will do  Design and develop database solutions using SQL Server; Create and maintain data models, database schema, and data dictionaries; Implement Service Broker queue concepts; Provide solutions to other groups and work collaboratively with cross-functional teams; Discuss pros and cons of potential solutions and make recommendations based on business needs; Perform troubleshooting and debugging of database issues; Maintain database performance by identifying and resolving production and application development Must haves  7+ years of experience in data modeling, database development, and database design; Strong experience with SQL server; Work with Control-m jobs scheduling and Jenkins; Knowledge of Service Broker queue concepts and their implementation; Ability to create database schemas, data models, and data dictionaries; Ability to work well in a team-oriented, collaborative environment; Excellent communication and interpersonal skills.", "About the job ABOUT US Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards! ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable. Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns. With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement. THE ROLE The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting. We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements. You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units. KEY TASKS & RESPONSIBILITIES Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "\"Position: BI Developer Hours: 8-5pm EST Location: Remote - EST time zone   Local healthcare client in Atlanta, GA is looking to bring on a resource to the BI team to assist with day-to-day analysis and project/data development. They are seeking a high performer with the ability to hit the ground running and maintain a \"\"we vs me\"\" mentality with other team members.   Requirement:  Minimum 5 years of experience in the following: Strong SQL experience Strong Power BI experience Enterprise Database Reporting Analytical Thinker Business facing skillsets Report optimization Metric Insights experience is a plus Must be a team player - we vs me mentality   Responsibilities:   Ensures all projects and data developed is value-adding and provides actionable insights.  Building new data tables", "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI", "Responsibilities:   Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis.   With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables.   Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS.   Research and propose opportunities for data acquisition and new uses for existing data.   Code, test, and document new or modified data systems to create robust and scalable applications for analytics.   Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables.   In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions.   Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts.   Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI.   Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices.   Collaborate with Quality Assurance team to ensure valid and proper deliverables.   Support business decisions with ad-hoc analysis as needed.   Participate in rotation of after-hours support.   Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates.   Research new technologies for implementation by the team for producing cutting-edge solutions.   Cultivate business relationships with stakeholders.   May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.   Required:   Bachelor\u2019s degree in a related discipline (Computer Science, Information Systems Management, Engineering, or similar) or equivalent work experience.   Advanced knowledge of Microsoft\u2019s SQL Server, SSRS, SSIS, and SSAS.   Knowledgeable with Power BI, preferably with an on-premises environment.   Intermediate SQL Query, ETL, and Data Architecture experience.   Advanced Knowledge and ability in writing complex T-SQL code.   Ability to quickly identify and troubleshoot problematic SQL code.   Ability to design tables, data marts, and/or databases to suit reporting needs.   Knowledge of data mapping, database design, and data warehouse concepts.   Introductory experience with SQL Database Administration.   Knowledge using Jira, Bitbucket, GitKraken, and/or SourceTree with a good understanding of Git.   Desire and ability to learn emerging technologies and methodologies.   Ability to interpret report requests and requirements in order to build appropriate automated solutions.   Ability to work with shifting deadlines in a fast-paced environment.   Strong computer skills, including Microsoft Office (Access, Excel, Word, & Outlook).   Strong attention to detail, interpersonal skills, and notation skills.", "Responsibilities: Consult with internal and external customers to collect BI requirements. Understand the customer\u2019s datasets. Correlate the datasets with the BI requirements. Create Power BI visualizations and edit existing reports. Publish and administrate Power BI Workspaces. Creation of staging databases and data warehouses for consumption by Power BI. Setup and administration of Power BI data connections.  Specific Skills Required:  Strong T-SQL skills. Knowledge of data warehousing products and techniques, including OLAP and/or SSAS. Experience in working with different departments and cross-functional teams, including customer interface and requirements gathering. Ability to manage multiple priorities and juggle customer demands. Exceptional problem-solving skills with the ability to leverage a wide variety of data and related tools to improve the efficiency of the organization. Strong communication, teamwork, and organizational skills. Solid relationship management and leadership skills and the ability to assume increasing responsibilities in a rapidly changing environment. Strong general technical aptitude.   Preferred Skills:  Additional software development skills, particularly in .NET are highly desirable  Education & Years of Experience:  Bachelor\u2019s degree preferred. Two-plus years\u2019 experience in BI. Proven expertise in creating Power BI visualizations, workspaces, datasets, DAX, database queries.", "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred  5-7 years experience is preferred   Basic knowledge of programming languages in order to comprehend reading code and basic functions.   Ability to create business solutions that increase competitive advantage.   Ability to exercise good judgment in selecting methods and techniques for obtaining solutions.   Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines.   Ability to solve technical problems/ processes and understand complex details.   Ability to increase operating efficiency by producing high quality technical solutions.   A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level.   Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must."], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1]}, "label": "Job_Description", "count": 138, "min": "\"Description: Leading with our people, Digital Consultants' mission is to deliver the highest level of professional solutions while being a trusted partner and advisor to our customers. With a culture of practicality, opportunity, and creativity we remain dedicated to being honest, trustworthy, respectful, and ethical in everything we do. We are a certified SBA 8(a) small-disadvantaged business that supports multiple IT customers within the Federal, civilian, and private sectors. Digital Consultants also offers our employees growth opportunities, competitive wages, and a full benefits package. Our founding principles, Fairness and Common Sense make working here more than a job, it is the Digital family.  Digital Consultants is seeking a Power BI Reports Developer to join our team! As the Power BI Reports Developer, you will be designing ETL processes and working directly with developers, testers, and other roles active to translate product roadmap features into well-defined product requirements including features, user stories, and acceptance test criteria.  Duties to include:  Maintain and support data analytics platforms Develop and update relevant technical documentation Collaborate directly with analysts and end users to integrate systems and create effective reports Develop and execute database queries and conduct analyses as needed Maintain status updates for all assigned ad hoc report requests Knowledge of SQL queries, SQL Server Reporting Services (SSRS), and MS SQL Server An expert that understands the Power BI platform and its tools very well. Takes complete responsibility for the development and administration of BI tools including transforming raw data into valuable and meaningful insights in the form of appealing dashboards and reports. Recreating existing reports from the current platform into Power BI.\"\" Build complex dimensional data models and reports from the bottom up Audit existing Power BI efforts with a focus on improvement Visualize compelling data stories on the report canvas Produce KPIs with user-friendly display dashboards Collaborate with client's data team Familiarity with data warehouse design (e.g. dimensional modeling) and data mining Requirements: Active DOD Secret Clearance IAT level II Certification: GSEC", "max": "ob Description:   BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.   Job Responsibilities   Managing the planning, scheduling and deployment of all hardware facilities and associated software for major or multiple sites. Trains, develops, and mentors staff by providing subject matter direction and guidance. Assigns, monitors, and reviews progress and accuracy of work.Provides staff management oversight including hiring, promoting, or making recommendations for staff.Conducts performance reviews and assessments, manages performance, engages in skills assessment, and promotes professional development of staff. Directing, motivating and developing staff, maximizing their individual contribution, professional growth and ability to function effectively with their colleagues as a team. Ensuring adherence to policies, plans, objectives, budgets and staffing allocations for the assigned site. Optimizes the utilization of resources and adheres to Departmental budgeting and fiscal responsibilities. Actively participates in project teams, manages and tracks project details, and provides leadership during periods of transition. Ensures compliance with corporate and industry standards, policies, procedures, and regulations.   Job Qualifications   Education   Bachelor's Degree in a Computer Sciences related field or equivalent work experience   Experience   5 years - Experience in Information Technology required   Skills\\Certifications   Knowledge of information technology concepts, methodology, terminology and standards. Demonstrated ability to interpret and translate technical and/or or complex concepts into information meaningful to project team members and/or business personnel. Strong interpersonal and organizational skills PC Skills required (Basic Microsoft Office and E-Mail) Adaptive to high pace and changing environment Must be able to communicate effectively with both technical and non-technical co-workers Must be willing to adjust schedule to perform maintenance and upgrades outside of business hours and be part of an on-call rotation.   Job Specific Requirements:    Working knowledge with regards to End User Experience (Business user experience) Prior experience with Agile is preferred.   Preferred Skills:   Number of Openings Available:   1   Worker Type:   Employee   Worker Sub-Type:   Employee   Company:   BCBST BlueCross BlueShield of Tennessee, Inc.   Applying for this job indicates your acknowledgement and understanding of the following statements:   BCBST is an Equal Opportunity employer (EEO), and all employees and applicants will be entitled to equal employment opportunities when employment decisions are made. BCBST will take affirmative action to recruit, hire, train and promote individuals in all job classifications without regard to race, religion, color, age, sex, national origin, citizenship, pregnancy, veteran status, sexual orientation, physical or mental disability, gender identity, or any other characteristic protected by applicable law.   Further information regarding BCBST's EEO Policies/Notices may be found by reviewing the following page:   BCBST's EEO Policies/Notices   BlueCross BlueShield of Tennessee is not accepting unsolicited assistance from search firms for this employment opportunity. All resumes submitted by search firms to any employee at BlueCross BlueShield of Tennessee via-email, the Internet or any other method without a valid, written Direct Placement Agreement in place for this position from BlueCross BlueShield of Tennessee HR/Talent Acquisition will not be considered. No fee will be paid in the event the applicant is hired by BlueCross BlueShield of Tennessee as a result of the referral or through other means.    All applicants will be advised that BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate."}, {"values": {"label": ["Sue", "Kate", "Kyrsa", "Amanda", "Andrea", "Shaun", "Shirudkar", "Bharath", "Jason", "Nathan", "Rocky and Tracy", "Yolanda", "Matthew", "Ray", "Chris", "Jordan", "Colleen", "Tracy", "Toni", "Nikole", "Wesley", "Dave", "Daniela", "Lhuana", "Liz", "Preeti", "Kaylee", "Christopher", "Kelly", " Security+CE", "Lynda", "Capri", "Nydia Valenzuela", "Suzy", "Barcley", "Nicole", "Amy", "Ram", "Heather", "Sarah", "Edward", "Kyle", "Laney", "Meg", "Pamela", "Rita", "Ashley", "Joshua", "Abby", "Pearson", "Bradie", "Tim", "Patrick", "Matea", "Akshay", "Dana", "Samuel", "Drake", "Dan", "Scott Bostic", "Virginia", "Alexandra", "Tony", "Bobby", "Andrew", "Beau", "Sofiia", "Shreya", "Vanessa", "Anthony", "Luca", "Kevin", "Olivia", "Annie", "Talley", "Luis", "Jessica", "Julie", "Jeevana", "Milind", "Tashira", "Brittany", "Marie", "Sandeep", "Brendan", "Aaron", "prashant", "Lauren", "Elisa", "David", "Lisa", "Thomas", " and making adjustments to existing tables. Ability to find a way to be able to look at data to see how it will change reporting. Ability to understand a business problem and work through various legacy systems.  Ability to communicate clearly and efficiently with internal business members\"", "Laurine", "Cassie", "Fiona", "Wendy", "Malyssa", "Paige", "parshant", "Sharon", "Kylie", "Steven", " NC"], "data": [1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 2, 1, 3, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 3, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1]}, "label": "Recruiter_First_Name", "count": 104, "min": " NC", "max": "prashant"}, {"values": {"label": ["JOHNSON", "Grimes", "Bucher", "Lott", "Jones", "Ashburn", "Tolia", "Skelton", "Vazquez", "Weigel", "Pickering", "Daub", "Rociles", "Smith", "Poynter", "Rountree", "Allen", "Sethi", "Joshi", "Miller", "Mercer", "Talone", "Galyan", "Strandberg", "Kaylee", "Burk", "Tumang", "Capri", "Martin", "Fitzgerald", "Austin", "Mikelson", "V", "Cave", "Lambdin", "Harris", "Silva", "Hord", "Lieblang", "Amudala", "Adusumilli", "Stafford", "Lievina", "Lachica", "Antifave", "Booth", "Filian", "Adams", "Connor", "tolia", "Pearson", " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.  While our engagements have taken us around the globe", "Mcneil", "McGinnis", "Flanagan", "Van Ness", "Andrzejewski", "Toub", "Nulph", "Hathaway", "Murray", "Seiler", "Talbert", "Dandapa", "Kumar", "Cadet", "Nandi", "Talley", "Ostrander", "Massey and Miller", " or", "Dalrymple", "Aguayo", "Cruz", "Butler", "Lofgren", "Dipti", "Shreckengost", "Turner", "Abraham", "Selki", "Etherton", "Choe", "Alonzo", "Salazar", "Dryer", "Hegemier", "Thomas", "Guzman", "Johnson", "Schoemehl", "Penn", "Mcneill", "Detz", "Hill", "Carlson", "Gallagher", "Griffith", "Dye", "Singh", "MacKillop", "Barker", "Varga", "Parker", "Henry", "Daletski", "Wingate", "Jerkovic"], "data": [1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 2, 3, 1, 1, 3, 3, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 3, 1, 1, 2, 1, 1, 1, 3, 1, 1]}, "label": "Recruiter_Last_Name", "count": 108, "min": " or", "max": "tolia"}, {"values": {"label": ["Dipti_Shirudkar@bcbst.com", "Kevin.Thomas@honestmed.com", "careers@paccarparts.com", "parshant.tolia@RADYUSradiology.com", "nicole.mcneill@unifyconsulting.com", "SFlanagan@compia.global", "ThomasJ@woodforest.com", "sarah.weigel@gravityitresources.com", "bharath.amudala@peopletech.com", "bschoemehl@brooksource.com", "https://www.linkedin.com/in/sandeep-joshi-450a796/", "Paige.Bucher@insightglobal.com", "capri.talley@symmetrylending.com", "fconnor@eknengineering.com", "Virginia.Griffith@insightglobal.com", "Alexandra.Adams@sibylline.co.uk", "aaustin@brooksource.com", "thomas@itbtalent.com", "Toni.Parker@rice.edu", "kyrsa.galyan@snapsheet.me", "Joshua.Vazquez@ventrahealth.com", "lbooth@savers.com", "ahathaway@wiredhivetech.com", "linkedin.com/in/samjohnson2010", " SSCP Power BI Data Analyst or associate degree in a related field 5+ Power BI specific focus Experience w/ DevOps Framework Experience visualizing data in Power BI Desktop and Power BI Service Extensive experience with building dashboards and custom reports in Power BI Strong analytical orientation and problem-solving skills Focusing on backend work with very large and intricate data models to create high-performing dashboards and paginated reports Rebuild existing SAP Business Intelligence-based reports", "Pamela.Hord@oncoursehome.com", "olivia.d@publishing.com", "aaron.talbert@buyersedgeplatform.com", "allambdin@cshco.com", "tguzman@uslegalsupport.com", "atumang@ds-llc.com", "cassiesmithboz6b_p3y@indeedemail.com", "Malyssa.Daletski@hirschbach.com", "sbostic-stafford@signifyhealth.com", "dvanness@rexfordindustrial.com", "kate@abett.com", "Beau.Jones@connectiverx.com", "jobs@edward.com", "bbutler@tetratec.com", "v-nydiav@microsoft.com", "Russell", "lizostrander@auctiontechnologygroup.com", "lchoe@ledgent.com", "n/a", "slieblang@3cloudsolutions.com", "austinpcc+email+6nc-3c2907147b@talent.icims.com", "Barcley.Cadet@carriageservices.com", "laurine.lachica@modaliconsulting.com", "shreya.nandi@agileengine.com", "EWingate@paylocity.com", "Daniela.Aguayo@scipax.com", "<Tracy.Miller@stridecare.com>, <rocky.massey@stridecare.com>", "mateajerkovic@auctiontechnologygroup.com", "Ray.Andrzejewski@insightglobal.com", "ealonzo@altamed.org", "kpearson@theshipyard.com", "not sure", "bobby@markful.com", "akshay.kumar@Experis.com", "candidate-5eba678d684f@navaide.breezy-mail.com", "NDetz@m-inc.com", "luca.talone@niceforyou.com", "jason.dryer@randstadusa.com", "kyle.skelton@msg.clrco.com", "PREETI.SINGH@msg.paycomonline.com", "Tracy.Miller@stridecare.com", "vanessa@zarecruiting.com", "<adaub@lexipol.com>", "jtoub@nutrisystem.com", "ram@pavetalent.com", "patrick.gallagher@cedargate.com", "andrea.grimes@us.flightcentre.com", "hrsymmetrylending4_eja@indeedemail.com", "matthew.pickering@msg.clrco.com", "Dana.Turner@itineris.net", "kylie.hegemier@medixteam.com", "adaub@lexipol.com", "Julie.Antifave@technossus.com", "Lesli.Martinez-Torres@ey.com", "recruiting+226318872@applytojob.com", " working with some of the largest Fortune 500 companies", "heather.mcginnis@pacden.com", "david.dalrymple@cibr.com", "Meg.Allen@insightglobal.com", "aharris@lbconsulting.com", "Steven.Penn@ideaentity.com", "Patrick.Gallagher@msg.paycomonline.com", "jobs@primusglobal.com", "Nathan.Seiler@insightglobal.com", "inmail-hit-reply@linkedin.com", "rita.varga@shift4.com", "Tim.Strandberg@datavail.com", "cmurray@acgme.org", "wesley.mercer@matrixres.com", "marie.mikelson@profoundjobs.com", "scarlson@entelli.com", "Sofiia.Lievina@dxc.com", "Brendan.Barker@insightglobal.com", "https://www.linkedin.com/in/ashley-selki/.", "recruiting.echo.ac72a5fdd54642d79b800c8a75a2c01f@echo.newtonsoftware.com", "lcruz@mammoth777.com", "milinds@procomservices.com", "shaun.fitzgerald@jobot.com", "jabraham@marinerfinance.com", "jdefaehsz@jobvite.com", "dashburn@liveperson.com", "Lauren.Etherton@roberthalf.com", "kdye@acronym.com", "dmacKillop@aspirepartnersusa.com", "prashant.tolia@RAYUSradiology.com"], "data": [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1]}, "label": "Recruiter_Email_Address", "count": 110, "min": " SSCP Power BI Data Analyst or associate degree in a related field 5+ Power BI specific focus Experience w/ DevOps Framework Experience visualizing data in Power BI Desktop and Power BI Service Extensive experience with building dashboards and custom reports in Power BI Strong analytical orientation and problem-solving skills Focusing on backend work with very large and intricate data models to create high-performing dashboards and paginated reports Rebuild existing SAP Business Intelligence-based reports", "max": "wesley.mercer@matrixres.com"}, {"values": {"label": ["Rexford Industrial", "Wired Hive", "Atlas Technologies, Inc.", "NavAide", "Honest-Medical", "Acronym US", "Rayus radiology", "Flight Center Travel Group (FCTG)", "Markful", "Signify Health", "NICE North America LLC", "Publishing.com", "LEXIPOL", "Houston Methodist", "BlueCross BlueShield of Tennessee", "Carriage Services", "Agile Engine", "Randstad federal", "CIBR Warriors - BSA", "Sibylline", "Z & A Recruiting", "Cedar Gate Technologies", "Lotis Blue Consulting, LLC", "Shift4 Payments", "unifyconsulting.com", "Acronym", "Itineries", "Oncourse Home Solutions", "Luxoft", "Hirschbach", "Robert Half", "Woodforest National Bank", "People's Community Clinic", "Ledgent Technology", "Nutrisystem Inc", "Symmetry Lending", "Hirschbach Motor Lines", "siness intelligence developer", "hrussell@medasource.com", "Bridgesecurityadvisors", "Modali Consulting", "LivePerson", "Spartan College", "Cedar Gate Technologies Recruiter", "Ernst & Young, LLP", "SEAM Group", "Paylocity", "The Shipyard", "Ventra Health", "StrideCare", "People tech group", "TETRA Technologies", "HH Global", " utilizing PowerBi dashboards Design effective BI data models Evaluate and improve existing BI systems\"", "Pave Talent", "Idea Entity", "CoServ", "Jobot", "Lexipol LLC", "IDEA ENTITY", "MARINER FINANCE", "ESP IT", "Aspire Partners", "USLegalSupport", "Clarke Schaefer Hacket", "Pacific Dental Services", "Rice University", "Nice North America", "Edward Jones", "Digital Strategy LLC", "Mammoth Freighters", "Randstad Federal", "ArrowStream", "PRIMUS Global Services", "Spalding Consulting", "U.S. Legal Support", "AltaMed", "Savers", "Entelli", "ConnectiveRx", "Unify Consukting", "Savers/Value Village", "Snapsheet", "Community First Health Plans", "ACGME", "1 of 36 ProFound Staffing", "Centene Corporation - Brooksource", "CIBR Warriors", "Microsoft", "Auction Technology Group", "Abett", "Insight Global", "Kelsey-Seybold Clinic", "Technossus", "Gravity IT Resources", "Brooksource", "Procom - Woodforest National Bank", "Mariner Finance", " our focus has always been on being the best", "Datavail", "3Cloud", "Momentum Inc", "Itineris", "EKN Engineering", "Apeiron Sumus LLC", "Tech M/Citi Bank", "CompTIA", "Paccar Parts", "Northwest Cascade Inc.", "Medix Technology", "ATG (Auction Technology Group)"], "data": [1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 3, 1, 2, 2, 1, 2, 1, 1, 1, 2, 3, 1, 1, 1, 2, 2, 2, 4, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]}, "label": "Company_name", "count": 111, "min": " our focus has always been on being the best", "max": "unifyconsulting.com"}, {"values": {"label": ["Jane Mwangi_11/30/2023_Centene Corporation - Brooksource_PowerBI Eng", "Yama Touray_11/08/2023_Robert Half_Data Analyst", "Mary Gathogo_10/26/2023_Entelli_Power BI Developer", "Yama Touray_12/05/2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "MULUGETA TADE_12/04/2023_Symmetry Lending_ETL Developer", "Mary Gathogo_09/14/2023_Lotis Blue Consulting, LLC_Data Engineer - Consultant/Senior", "EMMANUEL OJENIYI_08/25/2023_Houston Methodist_IT Data Specialist", "LILIAN NJERI_09/07/2023_Itineris_BI Reporting", "EMMANUEL OJENIYI_11/28/2023_BlueCross BlueShield of Tennessee_EIT Team Lead", "Stephanie Anne Lim_11/21/2023_Aspire Partners_Business Development Specialist", "EMMANUEL OJENIYI_11/13/2023_Modali Consulting_Associate Consultant, Data Analyst", "Betty Asmerom_08/30/2023_AltaMed_Data Governance Analyst", "Calvine  Cheptoo _09/13/2023_Jobot_Associate BI Developer", "EMMANUEL OJENIYI_11/01/2023_Insight Global_BI Developer", "LILIAN NJERI_10/12/2023_Z & A Recruiting_Senior Business Analyst Data Visualization", "Nadege Nguemo Mbouyo_08/16/2023_PRIMUS Global Services_BI Developer", "Mary Gathogo_08/25/2023_SEAM Group_Sr. Data Engineer", "Rufus", "ANNE NDUNGU_09/24/2023_Microsoft_Business intelligence Analyst 2", "OLUKAYODE AKINRIMISI_11/21/2023_U.S. Legal Support_Business Intelligence Developer", "Avworo  OGHENEKEVWE _11/02/2023_Atlas Technologies, Inc._Power BI and Power Apps Developer", "EMMANUEL OJENIYI_10/21/2023_Cedar Gate Technologies Recruiter_Senior BI Developer", "Calvine  Cheptoo _08/15/2023_The Shipyard_Data Visualization Manager", "Mary Gathogo_09/07/2023_ACGME_Senior BI Architect", "Yama Touray_10/25/2023_ArrowStream_Data Engineer", "Yama Touray_08/28/2023_Randstad federal_Data Analyst", "Calvine  Cheptoo _11/02/2023_Markful_Database Developer", "Calvine  Cheptoo _10/18/2023_Paylocity_Business Intelligence Report Analyst", "JORUM MWANGI_10/13/2023_Auction Technology Group_Product BI Analyst", "EMMANUEL OJENIYI_12/06/2023_Ventra Health_Business Intelligence Developer", "OLUKAYODE AKINRIMISI_11/20/2023_USLegalSupport_Business Intelligence Developer", "EMMANUEL OJENIYI_09/14/2023_CIBR Warriors - BSA_Tableau Developer", "Yama Touray_08/27/2023_Randstad Federal_Data Analytics", "EMMANUEL OJENIYI_09/12/2023_CIBR Warriors_Tableau Developer", "Mary Gathogo_10/06/2023_Acronym US_Power BI Reporting Specialist", "Talq Tera_10/24/2023_NICE North America LLC_Business Intelligence Developer", "Calvine  Cheptoo _10/07/2023_Ledgent Technology_Sr Data Analyst", "Avworo  OGHENEKEVWE _10/07/2023_Abett_Business Intelligence Analyst", "Mary Gathogo_08/21/2023_Savers_Software Engineer", "JORUM MWANGI_09/05/2023_AltaMed_Tableau Developer (Business Intelligence)", "Shahad Jawad_11/18/2023_Rayus radiology_business intelligence developer", "abebe woldeargay_08/31/2023_CompTIA_Data Specialist", "ANNE NDUNGU_09/26/2023_Microsoft_Business intelligence Analyst 2", "Medasource", "AYODEJI OLAWOYE_11/03/2023_StrideCare_Database Administrator", "Feven Asmelash_11/24/2023_Modali Consulting_Data Warehouse Specialist", "Nadege Nguemo Mbouyo_10/08/2023_ATG (Auction Technology Group)_Product BI Analyst", "ANNE NDUNGU_09/21/2023_People tech group_BI Developer/Analyst", "Mary Gathogo_09/01/2023_3Cloud_Sr. Architect, Power BI", "Calvine  Cheptoo _10/17/2023_NavAide_Navy ERP Level III Data Analyst", " not the biggest.  We believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "Nadege Nguemo Mbouyo_08/15/2023_MARINER FINANCE_Business Intelligence Architect", "OLUKAYODE AKINRIMISI_11/21/2023_Idea Entity_SQL Developer", "Mary Gathogo_08/15/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "Talq Tera_08/15/2023_Hirschbach_Application Specialist", "Mary Gathogo_11/15/2023_HH Global_Data Engineer", "EMMANUEL OJENIYI_09/06/2023_Unify Consukting_Tableau Cloud", "Adib Kazi_08/29/2023_Sibylline_Embedded BI Data Visualisation Specialist SIBU510", "Mary Gathogo_09/15/2023_Snapsheet_Business Intelligence Developer", "Mary Gathogo_10/07/2023_Acronym US_Power BI Specialist", "Talq Tera_10/13/2023_Nice North America_Business Intelligence Developer", "Talq Tera_08/23/2023_The Shipyard_Data Visualization Manager", "EMMANUEL OJENIYI_10/20/2023_Cedar Gate Technologies_Senior BI Developer", "AYODEJI OLAWOYE_09/10/2023_Community First Health Plans_SQL Developer", "Shahad Jawad_11/18/2023_siness intelligence developer_siness intelligence developer", "Avworo  OGHENEKEVWE _09/06/2023_Randstad Federal_Data Engineer", "LILIAN NJERI_08/25/2023_LEXIPOL_Power BI Developer", "Talq Tera_12-04-2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "Talq Tera_10/07/2023_Spartan College_Senior IT Business System Analyst", "Mary Gathogo_08/21/2023_Clarke Schaefer Hacket_Power BI Developer", "Calvine  Cheptoo _08/11/2023_Symmetry Lending_Power BI / SSRS Developer", "Feven Asmelash_11/02/2023_Apeiron Sumus LLC_Solution Assessment Consultant", "AYODEJI OLAWOYE_08/17/2023_Savers/Value Village_Software Engineer, Business Intelligence", "Avworo  OGHENEKEVWE _09/10/2023_Insight Global_Data Integration Engineer", "Nadege Nguemo Mbouyo_10/10/2023_ATG (Auction Technology Group)_Product BI Analyst", "Mary Gathogo_09/12/2023_ACGME_Senior BI Architect", "LILIAN NJERI_09/18/2023_LivePerson_Business Data Analyst", "EMMANUEL OJENIYI_09/04/2023_Kelsey-Seybold Clinic_Senior SQL Database Administrator", "Calvine  Cheptoo _11/11/2023_Honest-Medical_Business Data Analyst", "EMMANUEL OJENIYI_08/17/2023_Luxoft_Tableau Developer", "OLUKAYODE AKINRIMISI_11/17/2023_Rice University_Systems Analyst", "Mary Gathogo_11/08/2023_Agile Engine_Senior Data Base Developer/Data Modeler", "EMMANUEL OJENIYI_10/17/2023_Insight Global_ETL Developer", "Yama Touray_08/29/2023_Mariner Finance_Business Intelligence Architect", "EMMANUEL OJENIYI_09/07/2023_Spalding Consulting_Business Intelligence Developer", "Yama Touray_08/21/2023_Signify Health_Business Intelligence Developer", "EMMANUEL OJENIYI_09/15/2023_Ernst & Young, LLP_Tableau Administrator", "AYODEJI OLAWOYE_08/30/2023_Community First Health Plans_SQL Developer", "AYODEJI OLAWOYE_11/08/2023_Publishing.com_BI Data Engineer", "Talq Tera_10/03/2023_The Shipyard_Data Visualization Manager", "Mary Gathogo_08/17/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "EMMANUEL OJENIYI_09/14/2023_Bridgesecurityadvisors_Tableau developers", "EMMANUEL OJENIYI_12-01-2023_Carriage Services_Sr. Datawarehouse and BI Developer", "Nadege Nguemo Mbouyo_10/09/2023_Auction Technology Group_Product BI Analyst", "OLUKAYODE AKINRIMISI_10/07/2023_Woodforest National Bank_Data Developer II", "Mary Gathogo_12-01-2023_Oncourse Home Solutions_Analytics Consultant", "EMMANUEL OJENIYI_11/30/2023_Momentum Inc_Tableau and Database Specialist", "Jane Mwangi_11/03/2023_Paccar Parts_Sr Business/Data Analyst", "AYODEJI OLAWOYE_08/23/2023_Lexipol LLC_Data Analytics", "OLUKAYODE AKINRIMISI_10/11/2023_Procom - Woodforest National Bank_Data Developer 2", "Nadege Nguemo Mbouyo_09/24/2023_Edward Jones_power BI Developer", "Mary Gathogo_08/15/2023_Medix Technology_Power BI Developer", "Altish Asfaw_08/31/2023_ESP IT_Power BI Developer", "Calvine  Cheptoo _10/04/2023_EKN Engineering_Data Analyst II", "OLUKAYODE AKINRIMISI_09/20/2023_Wired Hive_Power BI and Reporting Analyst", "Mary Gathogo_09/07/2023_Pave Talent_Power Platform Developer", "AYODEJI OLAWOYE_08/16/2023_Savers_Software Engineer", "Mary Gathogo_10/14/2023_Acronym_Power BI Reporting Specialist", "OLUKAYODE AKINRIMISI_09/21/2023_Gravity IT Resources_Lead SQL Developer", "EMMANUEL OJENIYI_09/21/2023_Tech M/Citi Bank_Senior Developer (Tableau + ETL)", "EMMANUEL OJENIYI_09/08/2023_Spalding Consulting_Business Intelligence Developer", "EMMANUEL OJENIYI_11/01/2023_Datavail_Senior Report Developer", "LILIAN NJERI_08/28/2023_CoServ_Business Intelligence Analyst-Power BI", "Yama Touray_10/18/2023_ArrowStream_Data Engineer", "Jane Mwangi_11/30/2023_People's Community Clinic_Clinical Data Analyst", "Calvine  Cheptoo _08/22/2023_Symmetry Lending_Data Engineer", "ANNE NDUNGU_08/22/2023_Northwest Cascade Inc._Data Analyst", "OLUKAYODE AKINRIMISI_11/12/2023_IDEA ENTITY_SQL Developer", "Shahad Jawad_11/20/2023_Nutrisystem Inc_Business Intelligence Lead Developer", "AYODEJI OLAWOYE_11/02/2023_StrideCare_DATABASE ADMINISTRATOR", "EMMANUEL OJENIYI_08/31/2023_Spalding Consulting_Business Intelligence Developer", "Altish Asfaw_08/28/2023_ESP IT_Power BI Developer", "EMMANUEL OJENIYI_10/04/2023_Brooksource_Business Intelligence Developer", "EMMANUEL OJENIYI_11/13/2023_Digital Strategy LLC_Technical Data Analyst (Remote)", "Mary Gathogo_10/11/2023_Shift4 Payments_Business Intelligence Analyst II", "Rio Rochelle Florague_11/10/2023_Insight Global_Data Engineer/ETL Developer", "Robelyn Florague_11/09/2023_1 of 36 ProFound Staffing_Tableau Data Analyst", "Talq Tera_11/15/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics role!", "EMMANUEL OJENIYI_10/13/2023_TETRA Technologies_BI Developer", "Talq Tera_11/14/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics", "LILIAN NJERI_10/06/2023_Mammoth Freighters_Sr. Data Analyst", "AYODEJI OLAWOYE_08/26/2023_Lexipol LLC_Data Analytics", "Calvine  Cheptoo _10/26/2023_Technossus_Sr. Consultant, Power BI Analyst", "LILIAN NJERI_08/25/2023_Itineries_Power BI Developer", "EMMANUEL OJENIYI_10/18/2023_Datavail_Senior Reports Developer", "Talq Tera_08/30/2023_Rexford Industrial_Data Engineer", "EMMANUEL OJENIYI_08/25/2023_unifyconsulting.com_Tableau Cloud opportunity with Unify Consulting"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "SetName", "count": 137, "min": " not the biggest.  We believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "max": "abebe woldeargay_08/31/2023_CompTIA_Data Specialist"}, {"values": {"label": ["31661", "39119", "37975", "39112", "35551", "37295", "37048", "38690", "37423", "38457", "Benhur", "38744", "37640", "36877", " client focus", "37165", "34701", "OLUKAYODE AKINRIMISI_11/28/2023_Medasource_BI Developer", "38532", "40376", "33898", "38944", "37077"], "data": [11, 11, 2, 2, 1, 8, 4, 3, 2, 5, 1, 3, 8, 21, 1, 29, 6, 1, 11, 1, 10, 1, 1]}, "label": "CandidateID", "count": 23, "min": " client focus", "max": "OLUKAYODE AKINRIMISI_11/28/2023_Medasource_BI Developer"}, {"values": {"label": ["31661", "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "rufus.benhur@digitalconsultants.org", "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying", " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.  Company Description StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte"], "data": [1, 4, 14, 119, 3, 1, 1]}, "label": "SurveyResponse", "count": 7, "min": " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.  Company Description StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "max": "rufus.benhur@digitalconsultants.org"}, {"values": {"label": ["\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", " with excellent question clarity", " with clear and engaging questions. The candidate felt comfortable and performed well", "Recruiter", " engaging interviewer", "Digital Consultants, LLC", "Technical", " NC"], "data": [1, 1, 4, 90, 17, 1, 28, 1]}, "label": "InterviewType", "count": 8, "min": " NC", "max": "Technical"}, {"values": {"label": ["56.25", "18.75", "0", "62.5", "6.25", "100", "75", "37.5", "25", "31.25", " engaging interviewer", " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.\\r\\n\\r\\nWhile our engagements have taken us around the globe", "43.75", "Avworo  OGHENEKEVWE _10/03/2023_Digital Consultants, LLC_Power BI Reports Developer", " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "12.5", " and relevant technical aspects. Strong performance in algorithm design and data structures"], "data": [14, 10, 64, 2, 6, 1, 1, 10, 6, 1, 2, 1, 2, 1, 4, 1, 17]}, "label": "Preparationscore", "count": 17, "min": " and relevant technical aspects. Strong performance in algorithm design and data structures", "max": "Avworo  OGHENEKEVWE _10/03/2023_Digital Consultants, LLC_Power BI Reports Developer"}, {"values": {"label": ["3", "0", " there was some neutrality in the additional feedback section.\"\"", " and relevant technical aspects. Strong performance in showcasing skills and qualifications", "6", " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "38457", "1", " working with some of the largest Fortune 500 companies", "4", " and relevant technical aspects. Strong performance in algorithm design and data structures", "2"], "data": [4, 72, 4, 1, 2, 17, 1, 28, 1, 2, 1, 10]}, "label": "AutoInterviewsCount", "count": 12, "min": " and relevant technical aspects. Strong performance in algorithm design and data structures", "max": "6"}, {"values": {"label": ["282", "1793", "823", "468", "425", "524", "1788", "251", "1696", "71", "1514", "195", "568", "908", "70", "75", "997", "736", "326", "1196", " though a challenge in recruiter miscommunication. Positive sentiment in open-ended responses", " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "341", "60", "1346", "1331", "1069", "827", "144", " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "283", "869", "1037", "778", "1891", "1813", "346", "237", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "1690", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "65", " our focus has always been on being the best", "21", "74", "72", "1517", "392", "791", "1703", "NULL"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 74]}, "label": "AutoInterviewsDuration", "count": 51, "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "max": "NULL"}, {"values": {"label": ["     \"\"ComfortWhileAnsweringQuestions\"\": 5", "0", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", " but some neutrality in additional feedback.\"\"", "Recruiter", " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "1", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", " not the biggest.\\r\\n\\r\\nWe believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "2"], "data": [4, 98, 1, 1, 1, 1, 2, 18, 7, 4, 3, 1, 2]}, "label": "MentorInterviewsCount", "count": 13, "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "max": "Recruiter"}, {"values": {"label": ["11", "2058", "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "18.75", "8", "479", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "46", "     \"\"ComfortWhileAnsweringQuestions\"\": 4", "1847", "136", "6", "1157", "60", "1878", "     \"\"ComfortWhileAnsweringQuestions\"\": 2", " client focus", "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "3990", "     \"\"HandlingChallengingQuestions\"\": 5", "63", "65", "21", "94", "74", "674", "     \"\"HandlingChallengingQuestions\"\": 4", "NULL"], "data": [2, 1, 12, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 98]}, "label": "MentorInterviewsDuration", "count": 29, "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "max": "NULL"}, {"values": {"label": ["Leslie Boye", "Aagbara Kpea", "     \"\"ComfortWhileAnsweringQuestions\"\": 5", " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.\"", "0", "Sakthia Okou", "Sowmya Attur", "Saher Maiber", "Shireesha Ravi", "Ayodele Adepoju", "Grace Karuga", "AMINAT OKERINDE", "Charanya Balakrishnan", "Kwabena Manu", "Frew Samuel", "ALEXANDER  OPIYO", "     \"\"HandlingChallengingQuestions\"\": 3", "     \"\"HandlingChallengingQuestions\"\": 5", "     \"\"HandlingChallengingQuestions\"\": 1", "     \"\"LikelihoodToRecommendCompany\"\": 5", "     \"\"HandlingChallengingQuestions\"\": 4"], "data": [5, 9, 2, 1, 1, 9, 5, 1, 47, 2, 4, 5, 17, 1, 7, 6, 4, 5, 2, 4, 6]}, "label": "Mentor", "count": 21, "min": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "max": "Sowmya Attur"}, {"values": {"label": ["JORUM MWANGI", "Avworo  OGHENEKEVWE ", "AYODEJI OLAWOYE", "     \"\"LikelihoodToRecommendCompany\"\": 3", "ANNE NDUNGU", "     \"\"LikelihoodToRecommendCompany\"\": 1", "OLUKAYODE AKINRIMISI", "LILIAN NJERI", "Nadege Nguemo Mbouyo", "     \"\"AlignmentWithExpectations\"\": 5", "     \"\"LikelihoodToRecommendCompany\"\": 4", "Feven Asmelash", "Mary Gathogo", "Shahad Jawad", "EMMANUEL OJENIYI", "     \"\"LikelihoodToRecommendCompany\"\": 2", "Yama Touray", "Talq Tera", "Adib Kazi", "Calvine  Cheptoo ", "     \"\"HandlingChallengingQuestions\"\": 3", "George", "     \"\"HandlingChallengingQuestions\"\": 5", "Jane Mwangi", "     \"\"LikelihoodToRecommendCompany\"\": 5", "Betty Asmerom", "     \"\"AlignmentWithExpectations\"\": 4", "Altish Asfaw", "MULUGETA TADE"], "data": [2, 5, 9, 2, 4, 1, 7, 8, 5, 1, 1, 2, 17, 3, 25, 2, 7, 10, 1, 7, 1, 1, 1, 3, 11, 1, 3, 2, 1]}, "label": "Applicant", "count": 29, "min": "     \"\"AlignmentWithExpectations\"\": 4", "max": "Yama Touray"}, {"values": {"label": ["7", "15", "11", "3", "8", "22", "Williams", "16", "0", "     \"\"LikelihoodToRecommendCompany\"\": 3", "5", "18", "17", "     \"\"AlignmentWithExpectations\"\": 1", "6", "     \"\"AlignmentWithExpectations\"\": 5", "23", "     \"\"InterviewerEngagement\"\": 5", "     \"\"AlignmentWithExpectations\"\": 3", "24", "9", "1", "20", "10", "     \"\"AlignmentWithExpectations\"\": 2", "     \"\"LikelihoodToRecommendCompany\"\": 5", "4", "     \"\"AlignmentWithExpectations\"\": 4", "12", "13", "14", "2"], "data": [8, 1, 2, 14, 3, 1, 1, 2, 4, 1, 9, 2, 1, 1, 4, 6, 1, 4, 2, 1, 3, 29, 1, 2, 1, 1, 11, 7, 1, 1, 1, 17]}, "label": "Recruiter_InterviewCount", "count": 32, "min": "     \"\"AlignmentWithExpectations\"\": 1", "max": "Williams"}, {"values": {"label": ["3", "0", "5", "6", "     \"\"AlignmentWithExpectations\"\": 5", "1490", "     \"\"InterviewerEngagement\"\": 5", "     \"\"SkillsAlignmentWithRole\"\": 5", "     \"\"AlignmentWithExpectations\"\": 3", "     \"\"InterviewerEngagement\"\": 2", "gwilliams@stonelaurel.com", "1", "4", "2", "     \"\"InterviewerEngagement\"\": 3"], "data": [10, 35, 4, 5, 1, 1, 12, 4, 1, 2, 1, 29, 17, 18, 3]}, "label": "Technical_InterviewCount", "count": 15, "min": "     \"\"AlignmentWithExpectations\"\": 3", "max": "gwilliams@stonelaurel.com"}, {"values": {"label": ["     \"\"SkillsAlignmentWithRole\"\": 4", "     \"\"QuestionClarityAndEffectiveness\"\": 5", "Sowmya Attur", "     \"\"SkillsAlignmentWithRole\"\": 2", "     \"\"InterviewerEngagement\"\": 5", "     \"\"SkillsAlignmentWithRole\"\": 5", "     \"\"QuestionClarityAndEffectiveness\"\": 4", "StoneLaurel", "     \"\"InterviewerEngagement\"\": 3"], "data": [2, 1, 1, 2, 1, 13, 3, 119, 1]}, "label": "InterviewScore", "count": 9, "min": "     \"\"InterviewerEngagement\"\": 3", "max": "StoneLaurel"}, {"values": {"label": ["0.0 - 7.0", "7.0 - 14.0", "14.0 - 21.0", "21.0 - 28.0", "28.0 - 35.0", "35.0 - 42.0", "42.0 - 49.0", "49.0 - 56.0", "56.0 - 63.0", "63.0 - 70.0"], "data": [35, 21, 16, 14, 14, 14, 7, 7, 7, 8]}, "label": "InterviewDate_stringindexer_transform", "count": 10, "min": 0.0, "max": 70.0}, {"values": {"label": ["0.0 - 8.8", "8.8 - 17.6", "17.6 - 26.4", "26.4 - 35.2", "35.2 - 44.0", "44.0 - 52.8", "52.8 - 61.6", "61.6 - 70.4", "70.4 - 79.2", "79.2 - 88.0"], "data": [45, 21, 15, 9, 8, 9, 9, 9, 9, 9]}, "label": "Job_Title_stringindexer_transform", "count": 10, "min": 0.0, "max": 88.0}, {"values": {"label": ["0.0 - 13.7", "13.7 - 27.4", "27.4 - 41.1", "41.1 - 54.8", "54.8 - 68.5", "68.5 - 82.2", "82.2 - 95.9", "95.9 - 109.6", "109.6 - 123.3", "123.3 - 137.0"], "data": [19, 14, 14, 13, 14, 14, 13, 14, 14, 14]}, "label": "Job_Description_stringindexer_transform", "count": 10, "min": 0.0, "max": 137.0}, {"values": {"label": ["0.0 - 10.3", "10.3 - 20.6", "20.6 - 30.9", "30.9 - 41.2", "41.2 - 51.5", "51.5 - 61.8", "61.8 - 72.1", "72.1 - 82.4", "82.4 - 92.7", "92.7 - 103.0"], "data": [28, 20, 20, 13, 10, 10, 11, 10, 10, 11]}, "label": "Recruiter_First_Name_stringindexer_transform", "count": 10, "min": 0.0, "max": 103.0}, {"values": {"label": ["0.0 - 10.7", "10.7 - 21.4", "21.4 - 32.1", "32.1 - 42.8", "42.8 - 53.5", "53.5 - 64.2", "64.2 - 74.9", "74.9 - 85.6", "85.6 - 96.3", "96.3 - 107.0"], "data": [28, 22, 18, 10, 11, 11, 10, 11, 11, 11]}, "label": "Recruiter_Last_Name_stringindexer_transform", "count": 10, "min": 0.0, "max": 107.0}, {"values": {"label": ["0.0 - 10.9", "10.9 - 21.8", "21.8 - 32.7", "32.7 - 43.6", "43.6 - 54.5", "54.5 - 65.4", "65.4 - 76.3", "76.3 - 87.2", "87.2 - 98.1", "98.1 - 109.0"], "data": [28, 22, 16, 11, 11, 11, 11, 11, 11, 11]}, "label": "Recruiter_Email_Address_stringindexer_transform", "count": 10, "min": 0.0, "max": 109.0}, {"values": {"label": ["0.0 - 11.0", "11.0 - 22.0", "22.0 - 33.0", "33.0 - 44.0", "44.0 - 55.0", "55.0 - 66.0", "66.0 - 77.0", "77.0 - 88.0", "88.0 - 99.0", "99.0 - 110.0"], "data": [28, 22, 15, 11, 11, 11, 11, 11, 11, 12]}, "label": "Company_name_stringindexer_transform", "count": 10, "min": 0.0, "max": 110.0}, {"values": {"label": ["0.0 - 13.6", "13.6 - 27.2", "27.2 - 40.8", "40.8 - 54.4", "54.4 - 68.0", "68.0 - 81.6", "81.6 - 95.2", "95.2 - 108.8", "108.8 - 122.4", "122.4 - 136.0"], "data": [20, 14, 13, 14, 13, 14, 14, 13, 14, 14]}, "label": "SetName_stringindexer_transform", "count": 10, "min": 0.0, "max": 136.0}, {"values": {"label": ["0.0 - 2.2", "2.2 - 4.4", "4.4 - 6.6", "6.6 - 8.8", "8.8 - 11.0", "11.0 - 13.2", "13.2 - 15.4", "15.4 - 17.6", "17.6 - 19.8", "19.8 - 22.0"], "data": [61, 22, 18, 14, 9, 8, 4, 2, 2, 3]}, "label": "CandidateID_stringindexer_transform", "count": 10, "min": 0.0, "max": 22.0}, {"values": {"label": ["0.0", "1.0", "4.0", "3.0", "2.0", "6.0", "5.0"], "data": [119, 14, 1, 3, 4, 1, 1]}, "label": "SurveyResponse_stringindexer_transform", "count": 7, "min": "0.0", "max": "6.0"}, {"values": {"label": ["0.0", "7.0", "1.0", "4.0", "3.0", "2.0", "6.0", "5.0"], "data": [90, 1, 28, 1, 4, 17, 1, 1]}, "label": "InterviewType_stringindexer_transform", "count": 8, "min": "0.0", "max": "7.0"}, {"values": {"label": ["0.0 - 1.6", "1.6 - 3.2", "3.2 - 4.8", "4.8 - 6.4", "6.4 - 8.0", "8.0 - 9.6", "9.6 - 11.2", "11.2 - 12.8", "12.8 - 14.4", "14.4 - 16.0"], "data": [81, 24, 10, 12, 4, 4, 3, 1, 2, 2]}, "label": "Preparationscore_stringindexer_transform", "count": 10, "min": 0.0, "max": 16.0}, {"values": {"label": ["0.0 - 1.1", "1.1 - 2.2", "2.2 - 3.3", "3.3 - 4.4", "4.4 - 5.5", "5.5 - 6.6", "6.6 - 7.7", "7.7 - 8.8", "8.8 - 9.9", "9.9 - 11.0"], "data": [100, 17, 10, 4, 4, 2, 2, 1, 1, 2]}, "label": "AutoInterviewsCount_stringindexer_transform", "count": 10, "min": 0.0, "max": 11.0}, {"values": {"label": ["0.0 - 5.0", "5.0 - 10.0", "10.0 - 15.0", "15.0 - 20.0", "20.0 - 25.0", "25.0 - 30.0", "30.0 - 35.0", "35.0 - 40.0", "40.0 - 45.0", "45.0 - 50.0"], "data": [97, 5, 5, 5, 5, 5, 5, 5, 5, 6]}, "label": "AutoInterviewsDuration_stringindexer_transform", "count": 10, "min": 0.0, "max": 50.0}, {"values": {"label": ["0.0 - 1.2", "1.2 - 2.4", "2.4 - 3.6", "3.6 - 4.8", "4.8 - 6.0", "6.0 - 7.2", "7.2 - 8.4", "8.4 - 9.6", "9.6 - 10.8", "10.8 - 12.0"], "data": [116, 7, 4, 4, 3, 4, 1, 1, 1, 2]}, "label": "MentorInterviewsCount_stringindexer_transform", "count": 10, "min": 0.0, "max": 12.0}, {"values": {"label": ["0.0 - 2.8", "2.8 - 5.6", "5.6 - 8.4", "8.4 - 11.2", "11.2 - 14.0", "14.0 - 16.8", "16.8 - 19.6", "19.6 - 22.4", "22.4 - 25.2", "25.2 - 28.0"], "data": [113, 7, 3, 3, 2, 3, 3, 3, 3, 3]}, "label": "MentorInterviewsDuration_stringindexer_transform", "count": 10, "min": 0.0, "max": 28.0}, {"values": {"label": ["0.0 - 2.0", "2.0 - 4.0", "4.0 - 6.0", "6.0 - 8.0", "8.0 - 10.0", "10.0 - 12.0", "12.0 - 14.0", "14.0 - 16.0", "16.0 - 18.0", "18.0 - 20.0"], "data": [64, 18, 13, 11, 10, 9, 8, 4, 3, 3]}, "label": "Mentor_stringindexer_transform", "count": 10, "min": 0.0, "max": 20.0}, {"values": {"label": ["0.0 - 2.8", "2.8 - 5.6", "5.6 - 8.4", "8.4 - 11.2", "11.2 - 14.0", "14.0 - 16.8", "16.8 - 19.6", "19.6 - 22.4", "22.4 - 25.2", "25.2 - 28.0"], "data": [53, 27, 21, 14, 6, 7, 6, 3, 3, 3]}, "label": "Applicant_stringindexer_transform", "count": 10, "min": 0.0, "max": 28.0}, {"values": {"label": ["0.0 - 3.1", "3.1 - 6.2", "6.2 - 9.3", "9.3 - 12.4", "12.4 - 15.5", "15.5 - 18.6", "18.6 - 21.7", "21.7 - 24.8", "24.8 - 27.9", "27.9 - 31.0"], "data": [71, 24, 14, 10, 6, 5, 3, 3, 3, 4]}, "label": "Recruiter_InterviewCount_stringindexer_transform", "count": 10, "min": 0.0, "max": 31.0}, {"values": {"label": ["0.0 - 1.4", "1.4 - 2.8", "2.8 - 4.2", "4.2 - 5.6", "5.6 - 7.0", "7.0 - 8.4", "8.4 - 9.8", "9.8 - 11.2", "11.2 - 12.6", "12.6 - 14.0"], "data": [64, 18, 29, 10, 5, 8, 3, 3, 1, 2]}, "label": "Technical_InterviewCount_stringindexer_transform", "count": 10, "min": 0.0, "max": 14.0}, {"values": {"label": ["8.0", "0.0", "7.0", "1.0", "4.0", "3.0", "2.0", "6.0", "5.0"], "data": [1, 119, 1, 13, 2, 2, 3, 1, 1]}, "label": "InterviewScore_stringindexer_transform", "count": 9, "min": "0.0", "max": "8.0"}], "stageId": "6572047fc850af03eddd1462", "FESamplePath": "/FileStore/platform/sampleData/6572047fc850af03eddd1462_AutoFE/part-00000-a0d7dec3-6068-466f-a736-0149705ff7ca-c000.csv", "manualfesamplepath": "/FileStore/platform/sampleData/6572047fc850af03eddd1462_AutoFE/part-00000-a0d7dec3-6068-466f-a736-0149705ff7ca-c000.csv", "originalcount": 143, "graphdata": {"InterviewDate": {"label": ["11/7/2023", "9/21/2023", "9/10/2023", "10/14/2023", "10/8/2023", "11/8/2023", "9/18/2023", "9/14/2023", "9/8/2023", "9/13/2023", "9/11/2023", "8/27/2023", "8/26/2023", "10/20/2023", "12/5/2023", "12/4/2023", "10/24/2023", "10/31/2023", "10/12/2023", "10/25/2023", "8/16/2023", "9/12/2023", "8/23/2023", "10/9/2023", "9/1/2023", "11/13/2023", "10/3/2023", "10/26/2023", "8/31/2023", "12/6/2023", "10/7/2023", "11/24/2023", "9/7/2023", "12/1/2023", "8/15/2023", "11/11/2023", "9/20/2023", "10/17/2023", "9/15/2023", "9/24/2023", "11/21/2023", "10/6/2023", "11/18/2023", "11/10/2023", "10/13/2023", "10/21/2023", "11/14/2023", "10/11/2023", "11/1/2023", "9/26/2023", "11/9/2023", "11/28/2023", "10/10/2023", "11/17/2023", "8/21/2023", "8/22/2023", "9/5/2023", "8/11/2023", "11/15/2023", "8/25/2023", "11/2/2023", "10/4/2023", "8/29/2023", "11/30/2023", "8/30/2023", "11/20/2023", "11/3/2023", "11/12/2023", "8/28/2023", "10/18/2023", "8/17/2023"], "data": [1, 3, 1, 1, 1, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 3, 2, 1, 1, 2, 2, 2, 3, 1, 7, 1, 5, 2, 6, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2, 2, 1, 2, 5, 4, 2, 2, 3, 3, 3, 2, 1, 4, 3, 4]}, "NoofDays": {"label": ["-111.0 - -99.3", "-99.3 - -87.6", "-87.6 - -75.9", "-75.9 - -64.2", "-64.2 - -52.5", "-52.5 - -40.8", "-40.8 - -29.1", "-29.1 - -17.4", "-17.4 - -5.7", "-5.7 - 6"], "data": [18, 22, 20, 8, 14, 15, 6, 15, 14, 11]}, "LogInterviewID": {"label": ["42.0 - 66.6", "66.6 - 91.2", "91.2 - 115.8", "115.8 - 140.4", "140.4 - 165.0", "165.0 - 189.6", "189.6 - 214.2", "214.2 - 238.8", "238.8 - 263.4", "263.4 - 288"], "data": [11, 23, 16, 15, 11, 18, 19, 14, 6, 10]}, "QID": {"label": ["0.0 - 274.5", "274.5 - 549.0", "549.0 - 823.5", "823.5 - 1098.0", "1098.0 - 1372.5", "1372.5 - 1647.0", "1647.0 - 1921.5", "1921.5 - 2196.0", "2196.0 - 2470.5", "2470.5 - 2745"], "data": [1, 0, 0, 0, 0, 0, 0, 0, 0, 142]}, "Job_Title": {"label": ["Tableau Cloud opportunity with Unify Consulting", "Clinical Data Analyst", "Senior BI Developer", "Business Intelligence Report Analyst", "Business Intelligence Analyst", "Lead SQL Developer", "Navy ERP Level III Data Analyst", "Power BI and Power Apps Developer", "Senior Business Analyst Data Visualization", "Data Specialist", "business intelligence developer", "Power BI Developer", "Product BI Analyst", "PowerBI Eng", "Data Engineer/ETL Developer", "Business Intelligence Analyst-Power BI", "Software Engineer, Business Intelligence", "BI Developer", "Senior SQL Database Administrator", "Senior Developer (Tableau + ETL)", "Embedded BI Data Visualisation Specialist SIBU510", "ETL Developer", "Business Intelligence Developer (BI)", "Tableau developers", "Tableau Developer (Business Intelligence)", "Senior Reports Developer", "Sr Engineer, Data Management and Analytics role!", "Solution Assessment Consultant", "BI Reporting", "siness intelligence developer", "Data Engineer - Consultant/Senior", "Data Analytics", "Power BI Reporting Specialist", "Business Development Specialist", "Business Intelligence Architect", "SQL Developer", "Business Intelligence Lead Developer", "Sr. Consultant, Power BI Analyst", "Senior IT Business System Analyst", "Business intelligence Analyst 2", "Application Specialist", "DATABASE ADMINISTRATOR", "Data Governance Analyst", "BI Developer/Analyst", "Data Warehouse Specialist", "Power BI Specialist", "Data Analyst II", "Business Intelligence Analyst II", "Associate BI Developer", "BI Data Engineer", "Database Administrator", "Business Intelligence Developer", "Systems Analyst", "Data Developer II", "Senior Analyst, IT Business Analyst", "Data Analyst", "Tableau Administrator", "Technical Data Analyst (Remote)", "Sr Engineer, Data Management and Analytics", "Power BI / SSRS Developer", "Tableau Data Analyst", "Tableau Developer", "IT Data Specialist", "Tableau Cloud", "Business Data Analyst", "Power BI and Reporting Analyst", "Power Platform Developer", "Senior BI Architect", "Data Visualization Manager", "Sr Data Analyst", "Database Developer", "Senior Report Developer", "Sr. Datawarehouse and BI Developer", "power BI Developer", "Sr. Data Engineer", "Sr. Architect, Power BI", "Data Integration Engineer", "Sr Business/Data Analyst", "Sr. Data Analyst", "Tableau and Database Specialist", "Software Engineer", "EIT Team Lead", "Data Developer 2", "Power BI Reports Developer", "Analytics Consultant", "Data Engineer", "Senior Data Base Developer/Data Modeler", "Power BI Developer/Analyst (Corporate Travel)", "Associate Consultant, Data Analyst"], "data": [1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 7, 4, 1, 1, 2, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 2, 4, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 2, 2, 3, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 6, 1, 2, 1]}, "Job_Description": {"label": ["Professional who expertly designs, creates, and implements Self-Service BI data models. Plan, implement and oversee comprehensive BI delivery strategy. Design, build and deploy EPIC reporting solutions (Clarity, Caboodle, RWB, Radar, Metrics) Innovator, adept at conceptualizing and developing marketable tools that cater to the needs and demands of multiple clients. Build relationships with the business users, understand how data can solve business problems, and formulate business requirements for the BI tools. Work with data warehouse System Analyst and Engineering team to implement data schema to accommodate new analytics requirements. Manage meta data for BI models, reports, and dashboards (author, usage, data source) Create technical and functional documentation and provide training for BI tools.", "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites up to 50% of the time Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Key Responsibilities:  Develop and optimize SQL queries for data extraction and analysis. Collaborate with business stakeholders to gather and understand reporting requirements. Create visually compelling and insightful reports using Looker. Field daily report requests from multiple Backoffice teams to meet the needs of customers. Conducting and troubleshooting reports and data models. Comprehend and work with Key Performance Indicators (KPIs) and metrics.  Qualifications:  A minimum of 10 years of experience in report writing or as a business analyst. Proficiency in SQL query development (queries, stored procedures, functions) and data analysis. Familiarity with SQL Server databases and data warehousing. Proven experience with one or more of the following reporting tools: Looker, Business Objects, Power BI, or Tableau. Strong understanding of KPIs and metrics. Exhibit adaptability and a quick learning curve to efficiently contribute to projects.  Knowledge of Snowflake Datawarehouse query development is a plus.", "Job: BI Developer  Location: Woodlands, TX  Duration: 6 Month contract-to-perm     Job Description *  The BI Developer will be responsible for the design and development of data models that support enterprise analytical reporting and dashboard solutions. This position will work closely with business users and executives to gather, define, and translate business requirements into BI solutions. The applicant must have excellent collaboration skills with the ability to communicate concepts and solutions effectively and clearly. This position will also play a key technical role requiring expert level skills in the design, development and implementation of data warehousing and BI solutions. This person needs to be located in the Houston, TX area to attend in person meetings (about once every other month) to collaborate on team meetings.", "Essential Functions/ Responsibilities: The demands described here are representative of those that must be met by an employee to successfully perform the essential functions of this job. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Lead technical design, implementation, and problem resolution Partner cross-functionally to define and complete well-structured user stories Maintain, evolve and adhere to a maturing data governance policy Maintain and evolve a rapidly growing and robust data model containing vital customer information Design and implement reliable ETL solutions from a variety of data sources (APIs, Proprietary DB, No-SQL ) Provide best in class business analytics in the form of web-based reports and dashboards Define Data Engineering project feature delivery timelines and risks Provide mitigation options to solve for blockers and technical risks as they arise Identify technical debt, and communicate plans to manage it responsibly Provide mentoring as needed to team members Required Skills/Abilities: The requirements listed below are representative of the knowledge, skills, and/or abilities required to perform each essential duty satisfactorily. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Desire and passion to learn from like-minded, experienced, data-obsessed team members A strong sense of ownership, pride and commitment to quality Mastery of Microsoft Power BI Mastery of Business Intelligence data visualization tools Mastery of RDBMS (MSSQL) and/or NoSQL database technologies (MongoDB, Cosmos DB) Experience with cloud-based and/or on premises data warehousing (Azure preferred) Experience with Power BI Embedded Analytics Experience with Agile software development principles A track record of teamwork through high quality and timely Data Engineering projects Benefits you will receive:  Opportunity to work on an exciting and highly visible project at SEAM Group Participation in a fast-growing company Opportunity to learn new technologies and expand your skillset Flexible time off Flexible work hours Collaborative and embracing culture Comprehensive healthcare plan that includes access to health, dental, vision, disability, and life insurance at group rates 8 Paid Holidays Company 401k matching program Educational Reimbursement up to $1,000/year", "Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.", "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.   Key Responsibilities:   Data Visualization Design:  Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques.  Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels.  Data Analysis and Insight Generation:  Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization.  Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization.  Data Quality and Governance:  Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams.  Implement data quality checks and validation processes to maintain the integrity of visualized data.  Stakeholder Management and Collaboration:  Engage with various departments and business leaders to gather requirements and understand their data needs.  Collaborate with stakeholders to refine visualization designs and align them with business objectives.  Data Strategy and Technology:  Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities.  Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.  Qualifications and Requirements  Bachelor's or Master's degree in Data Science, Data Visualization, Computer Science, or comparable experience.  Proven experience (typically 5+ years) in data visualization, with a track record of creating impactful visualizations.  Strong proficiency in data visualization tools such as Power BI, Tableau, or other industry-leading platforms.  Solid understanding of data analysis and data interpretation techniques to support the creation of meaningful visualizations.  Demonstrated ability to translate complex data concepts into clear and visually appealing presentations.  Strong communication and collaboration skills to work effectively with cross-functional teams and stakeholders.  Analytical mindset with a passion for discovering insights through data visualization.", "https://ds-llc.com/technicaldataanalyst", "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "About the job StrideCare, a healthcare multi-specialty physician group, is currently seeking a highly skilled and experienced Database Architect and Data Analyst to join our dynamic team. The ideal candidate will possess expertise in ETL processes, and Power BI, and have prior experience in the medical field.  Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.", "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed    Experience Preferred  \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.", "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred 5-7 years experience is preferred Basic knowledge of programming languages in order to comprehend reading code and basic functions. Ability to create business solutions that increase competitive advantage. Ability to exercise good judgment in selecting methods and techniques for obtaining solutions. Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines. Ability to solve technical problems/ processes and understand complex details. Ability to increase operating efficiency by producing high quality technical solutions. A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level. Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must.", "DATA ENGINEER \u2013 CONSULTANT/SENIOR  Lotis Blue Consulting is a growth advisory that helps clients grow and transform their organization to achieve their business goals. We apply expertise in behavioral and data science to set business and go-to-market strategy and then improve organization alignment to enable effective execution. We are looking for data and analytics-savvy professionals to join our Chicago-based team of consultants who have proven Data Engineering expertise and experience working with other data analysts and project resources. This role is client-facing and will be a fully-fledged member of the client service project team helping us to identify, understand and solve complex problems.  PRIMARY RESPONSIBILITIES Work with the Lotis Blue team to develop hypotheses that explain business problems or opportunities, and then create the analytical work plan to test them Create and manage highly structured data requests that acquire the right information in the right format to execute on the analytical work plan Serve as lead point of contact with the client and be accountable for all matters related to data acquisition, cleaning, integration, management, transformation, interpretation, and analytics Work with Power BI or Tableau to present and visualize new insights or reveal complex relationships between variables in a clear, accurate, and compelling manner that supports evolving ideation Lead discussions internally around the relationship between different data elements to add to the Lotis Blue team\u2019s knowledge, awareness, clarity, and depth in addressing the client situation and potential solutions Develop and provide meaningful insights and relevant points-of-view on complex concepts directly to clients through simple, plainspoken materials Contribute to leading-edge thinking that deepens the Firm\u2019s capabilities in data science and engineering and differentiates Lotis Blue in the market QUALIFICATIONS & EXPERIENCES Bachelor\u2019s degree in computer science, mathematics, engineering or related field At least two years of experience working on an analytics or data science team Experience communicating directly with clients and addressing business problems through analytics Passion for learning and track record of keeping up to date on technologies, platforms, and tools Some travel may be required REQUIRED KNOWLEDGE, SKILLS & CAPABILITIES Business acumen Teamwork and collaboration Critical thinking and ideation Project management Experience with and capability to execute on: Production databases (e.g., SQL Server, MongoDB) and related administrative tools (e.g., SQL Management Studio, Navicat) Python (preferable) or R Business Intelligence tools (e.g., Power BI, Tableau) PREFERRED KNOWLEDGE, SKILLS & CAPABILITIES Working knowledge of Azure Experience managing databases in the cloud (as well as AWS) Working knowledge of data transformation tools (e.g., Alteryx) Experience operationalizing data pipelines to support analytics in a production environment Coursework or qualification in Machine Learning Experience applying ML techniques in real world business scenarios", "Position Summary Join our team as an Analytics Consultant and help drive our marketing, call center, claims, and retention initiatives to new heights! We're seeking a highly skilled individual with a focus on data analysis and advanced analytics to support our efforts across all business units.  As an Analytics Consultant, you'll be responsible for analyzing data, providing actionable insights, and making data-driven decisions that impact our company strategy efforts. With your expertise in data analysis and advanced analytics, you'll play a key role in optimizing our analytics capabilities for maximum impact and ROI. You'll collaborate closely cross-functionally to gather data, analyze trends, and uncover insights that support our business objectives. You\u2019ll support the broader business in performing deep dive analyses to drive business growth. Think of yourself as an internal consultant tasked with improving business processes utilizing data driven insights.  Located at our office in Naperville, our office environment is a key driver of our company culture and employee experience, so a regular in-office hybrid model (generally T-TH in-office and M & F remote) is required.  Responsibilities include but are not limited to: Utilizing advanced analytics approaches such as cohort analysis, risk analysis, and predictive modeling to inform decision-making and improve the customer experience across the organization. Collaborating with various teams to gather and analyze customer data and provide insights that support decision-making and improve overall business processes. Developing dashboards and visualizations to provide regular reporting and insights to support various teams within the company. Identifying incremental opportunities to improve business processes and drive growth by leveraging data to inform marketing and acquisition efforts. Utilizing data to inform company-wide strategies and initiatives that drive growth and efficiency. Providing thought leadership on analytics and identifying new and innovative ways to leverage data to drive business growth across the organization. We\u2019re Excited if This is You: 5+ years of experience in analytics and 3+ years in business intelligence roles In-depth technical knowledge in data modeling, SQL, and Python Strong understanding of business metrics and ability to drive growth. Proficiency in driving data-driven insights and informed business decision making. Demonstrated track record of delivering significant business impact through data analysis and implementation of insights. Strong communication and collaboration skills, with the ability to work effectively in a team environment. Proven track record of partnering with Analytics and Commercial Finance functions to drive improvements by way of analytical capabilities. Education Bachelor\u2019s degree  Computer Skills Needed to Perform this Job Proficiency in Microsoft and Google Suites Prior knowledge of SQL Understanding of ETL/Cloud Infrastructure Proficiency in Tableau, Looker, or other BI tool", "This is the job\u2026. Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026. 3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026. Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "JOB OVERVIEW  Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Senior Analyst \u2013 Business Strategy and Data Visualization  Incredible well-established, high growth Texas based company is looking for a to join their San Antonio team! Company offers challenge, is team-oriented, has a great work/life balance and a career path! This Company is recognized for its customer service focus and single digit turnover!  The Senior Analyst is responsible for analyzing data and presenting insightful recommendations and findings!  Essential Functions:  \u00b7 Informs marketing strategy by analyzing marketing campaign effectiveness and ROI, sharing insights about response rates across channels and audiences with Marketing Managers  \u00b7 Perform analysis and creates insight that inform sales and marketing decisions in operations, sales, marketing, and support groups.  \u00b7 Presents valuable insightful information and recommends actionable items.  \u00b7 Downloads data from multiple systems and reporting databases, develops and disseminates reports to end users.  \u00b7 Responds to data requests from management and performs basic reporting.  \u00b7 Develops and executes complex reports and custom queries.  \u00b7 Prepares technical reports by collecting, analyzing, and summarizing information and trends from various systems.  \u00b7 Maintains databases for the collection, analysis, and dissemination of operational data throughout the company.  \u00b7 Entry, extraction, and ad-hoc reporting from various systems to support business objectives and the needs of the department.  \u00b7 Provides report training to applicable departments/roles.  \u00b7 Creates and provides opportunity and market share reports and analysis using all applicable business reporting databases.  Qualifications:  \u00b7 High school diploma or equivalent required; BA/BS, preferred.  \u00b7 A minimum of three years of work-related experience required.  \u00b7 Strong knowledge of data analytics and applicable reporting tools  \u00b7 Strong analytical and database management skills  \u00b7 Strong working knowledge and/or experience including but not limited to DBS, Tableau, Alteryx, WMS, Salesforce, MS Dynamics and Outlook  \u00b7 Ability to identify problems and to review related information to develop and evaluate options and implement solutions.  \u00b7 Consulting and influencing abilities.  \u00b7 Excellent interpersonal and customer service skills  \u00b7 Creative ability to understand the implications of new information for both current and future problem-solving and decision-making.  \u00b7 Ability to train and motivate others.  \u00b7 Outgoing personality  #IND1  Job Type: Full-time  Pay: $81,000.00 - $88,000.00 per year  Benefits:  401(k) 401(k) matching Dental insurance Flexible spending account Health insurance Health savings account Paid time off Parental leave Professional development assistance Tuition reimbursement Vision insurance Schedule:  Monday to Friday Work Location: Hybrid remote in Irving, TX 75062", "Data Specialist", "Spalding Consulting, Inc. is seeking a Business Intelligence Developer in Lexington Park, MD -Remote.  Spalding Consulting, Inc. is a professional services company delivering cutting-edge solutions to the Department of Defense since 2001. Our expert-level solutions include software development, information technology, program management, financial management and business intelligence services. Spalding Consulting offers competitive compensation, career development, flexible work schedules and excellent benefits.  Position Type: Full-Time Work Location: This is a remote position (see on-site requirements below).  **On-Site Requirements: On-boarding will require 1-2 visits to Patuxent River, MD for candidates that are local to the area. Candidates out of state will be onboarded virtually. Training will be virtual and telework maximized/permitted to the greatest extent possible, however for local candidates, training/tasking may require on-site work a few hours per week. Future on-site/telework requirements/schedules may change as additional client direction is received.      Essential Functions: Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.   Qualifications and Experience:  Required: At least 5 years of experience developing software programs using any language At least 2 years\u2019 experience of developing solutions to support an ETL process Experience with Oracle, SQL, or Teradata databases Experience with working on a team of at least 5 developers Experience with understanding and modifying data models  Desired: Development experience using Tableau or Qlik Experience using Atlassian Jira Experience making REST API calls Experience in an Agile development environment   Security Clearance: Must be eligible to obtain a Secret clearance. Requirements to obtain a clearance include US Citizenship, security investigation, etc.", "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "Technossus, a leading software solutions and technology consulting company, is seeking a qualified and experienced Sr. Consultant, Power BI Analyst to join our team. As a Sr. Consultant, Power BI Analyst, you will be responsible for developing interactive and insightful dashboards and reports to help our clients make better-informed business decisions. At Technossus, we value our commitment to delivering cutting-edge solutions, and our Sr. Consultant, Power BI Analyst is a key player in ensuring our clients receive exceptional value and quality every time.  Location: Full time onsite in Long Beach 5 days a week   Responsibilities Collaborate with stakeholders and team members to understand their business intelligence needs and translate them into data visualizations that provide actionable insights. Develop interactive dashboards and reports in Power BI to track business performance and identify trends. Analyze and interpret data to provide recommendations that enhance decision-making processes. Design and implement data models and data architecture to support the management and analysis of large data sets. Identify and resolve data quality and integration issues. Share best practices with the team to increase knowledge and optimize processes. Stay up-to-date with the latest Business Intelligence trends and technologies. Requirements  Proven experience in developing high-quality dashboards and reports in Power BI. Understanding of Data Warehouse design and architecture. Strong business acumen and the ability to translate business requirements into technical solutions. Excellent communication and presentation skills. 5+ years of working experience as BI Analyst and a bachelor's degree in engineering, computer science, commerce degree or equivalent 5+ Years of Power BI experience with DAX and Power Query Strong/excellent SQL Skills including PL/SQL Benefits  Our job titles may span more than one career level. The starting base pay for this role is between $110,000.00 and $140,000.00. The actual base pay is dependent upon many factors, such as: training, transferable skills, work experience, business needs, and market demands. The base pay range is subject to change and may be modified in the future. This role may also be eligible for bonus and benefits.  Benefits:  Medical, Dental, Vision, 401k Match Health Savings & Flexible Spending Account Health Care FSA Dependent Day Care FSA Company paid life, AD&D, & LTD insurance Flexible PTO policy Continued training to level up your skills Supplemental benefits available: Accident Insurance Critical Illness Insurance Hospital Indemnity Employee Assistance Program Physical Demands:  While performing the duties of this job, the employee routinely is required to sit; walk; talk and hear; use hands to keyboard, finger, handle, and feel; stoop, kneel, crouch, twist, reach, and stretch. Speaking and hearing ability sufficient to communicate in person, over telephone, and/or video conference.  The ability to stand, walk, and sit in a computer chair for long periods of time. The ability to see and respond to dangerous situations. Speaking and hearing ability sufficient to communicate in person, over telephone and/or video conferences. Sufficient hand, arm, and finger dexterity to operate a computer keyboard and other office equipment. Emotional Demands:  While performing the duties of this role the employee is required to maintain a professional and positive attitude with clients and colleagues. Frequent deep thinking and interactions with multiple stakeholders and clients. Ability to utilize knowledge and experience to problem solve, make quick decisions, and interpret proposals publicly or in group setting.  Ability to problem solve Able to make quick decisions Frequent deep thinking Communicate clearly with coworkers Lead and direct a team Articulate objectives and expectations clearly Speak publicly Interpret data", "Position Overview The Talent Business Intelligence (BI) Reporting Analyst works within Talent & Program Delivery to provide expertise in data analysis, business intelligence tools, and learning and development measurement principles to contribute to the ongoing improvement of employee performance and skills within the organization. This individual will design, develop, and validate dashboards, alerts, and reports that measure business performance across Talent & Delivery programs for management purposes. Ensures information is easily available to users for direct consumption. Conducts analyses of functional business processes and participates in the development of business cases in the support of continuous improvement programs and the implementation of enabling technologies. This individual provides leadership in facilitating information gathering, structured documentation and presentation of findings to all levels of management. This role enhances program effectiveness and enables sound business decisions by providing insights and data which are accurate, relevant, and reliable. Primary Responsibilities To perform this job successfully, an individual must be able to perform each essential duty satisfactorily. The requirements listed below are representative of the knowledge, skill, and/or ability required. Reasonable accommodations may be made to enable individuals with disabilities to perform the essential functions.  Collect and organize data from various sources, including learning management systems (LMS), employee performance training records, surveys, and other relevant systems. Define and track key performance indicators (KPIs) related to learning and development, such as training completion rates, learner engagement, skill acquisition, and business impact. Interprets & analyzes operational metrics in order to create meaningful dashboards & reporting related to Talent & Program Delivery initiatives. Design, build and deploy BI solutions Works with subject matter experts, especially within various departments across the enterprise, to understand business KPIs and resulting outcomes, defining requirements for data integration, reporting, analysis, and descriptive, predictive, and prescriptive business intelligence solution options. Builds and updates process control measurements and changes existing reports and dashboards as needed Increases the usage practices around objective performance data in day-to-day management activities Other duties as assigned Education and Experience  The minimum education, experience, skills and certifications/training required to successfully perform the job:  Bachelor\u2019s degree in business, computer science, information systems or equivalent work experience Minimum 4 years\u2019 experience Oracle BI, SAP Business Objects etc. Knowledge of Data Warehouse platforms Knowledge of languages such as Python, R, Scala, SQL, etc. Experience working with multidimensional data sets/databases such as SQL, Salesforce, JSON, etc. Strong MS Office skills, especially with Power BI and Excel Understanding of report writing required Experience with Lean Six Sigma preferred", "This contract is W2 ONLY, no C2C.   The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. You will be responsible for extracting, transforming, and loading data from various sources into our data warehouse, ensuring the accuracy, reliability, and performance of our data pipelines. Additionally, this role will also provide support for Reporting and Analytics assignments as needed.  Key Responsibilities:  Data Extraction and Transformation: Design and develop ETL processes to extract data from multiple sources, transform it to meet business requirements, and ensure data quality and consistency. SQL Server Integration Services (SSIS): Create, optimize, and maintain SSIS packages to automate data workflows, including data cleansing, enrichment, and loading into target systems. Complex SQL Queries: Create and optimize complex SQL queries, stored procedures, and functions to extract, transform, and load data from various data sources. Business Requirements: Collaborate with cross-functional teams to gather business requirements and translate them into technical specifications for data integration and ETL solutions. Data Profiling and Analysis: Perform data profiling and analysis to identify data quality issues and propose appropriate solutions. Data Quality: Implement data cleansing, transformation, and validation rules to ensure the accuracy and consistency of data. Data Modeling: Collaborate with database administrators and data architects to design and maintain data models and database schemas. Managing Data Pipelines: Manage and maintain data pipelines, ensuring their reliability, performance, and scalability to meet business needs. Agile Methodology: Apply Agile methodologies to ensure that ETL processes align with Agile principles and practices, facilitating collaboration, and adaptability within the team. Software Development Life Cycle (SDLC): Demonstrate a strong understanding of the Software Development Life Cycle (SDLC) process, ensuring that testing activities are aligned with each phase of the SDLC, from requirements gathering to deployment. Documentation: Develop and maintain documentation, including data flow diagrams, data dictionaries, and technical specifications. Performance Optimization: Monitor and optimize the performance of SQL queries, ETL processes, and database systems to ensure efficient data processing and system reliability. Issue Resolution: Troubleshoot and resolve data-related issues, including data integration failures, data quality problems, and performance bottlenecks. Industry Trends: Stay up to date with industry trends and best practices in SQL development, ETL, and data integration technologies. Be part of an on-call rotation. Qualifications / Requirements  Bachelor\u2019s degree in information systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred. Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+ years\u2019 experience with advanced SQL and SSIS Prefer 2 years\u2019 experience with Microsoft BI Suite, Power BI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint and modeling tools such as ERStudio Prefer experience with other ETL tools such as AWS Glue, etc. Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization. Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused. Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data Python experience a plus Familiarity with API integrations About Symmetry  Symmetry Lending specializes in providing mortgage fulfillment services to include origination, servicing, and capital markets needs to various Lenders across the country with whom we partner. We have offices in Atlanta, GA, Eden Prairie, MN, Denver, CO, Orlando, FL, and Anaheim, CA, and we do business from coast to coast. We take great pride in building a diverse team of motivated professionals that contribute to an exciting work atmosphere. We provide a competitive benefits package including medical, dental, and vision plan options, paid time off, and more.", "As a Business Solution Architect, you will\u2026  lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design.   Lead the Functional team.  Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms", "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices. What you have:   Required Knowledge, Skills and Abilities:   Hands-on experience working with modern ETL, BI tools & technology. Hands-on delivery experience in leading cloud data platforms: Snowflake, Azure Synapse. Extensive recent experience with SQL and SQL analytics: SQL Server, SSIS, SSRS, SSAS Hands-on experience implementing ETL pipelines using packaged tools: Attunity, Azure Data Factory Familiarity and experience with common BI and data exploration tools \u2013 Power BI, DAX Software development experience with C/C++ a definite plus. Scripting experience with Python, Ruby, Perl, Bash a definite plus. Perform data analysis required to troubleshoot data related issues and assist in the resolution of data issues. Strong organizational skills. Excellent written and oral communication skills. Business / Retail Operations background preferred.", "LivePerson (NASDAQ: LPSN) is a global leader in trustworthy and equal AI for business. Hundreds of the world's leading brands \u2014 including HSBC, Chipotle, and Virgin Media \u2014 use our Conversational Cloud platform to engage with millions of consumers safely and responsibly. We power a billion conversational interactions every month, providing a uniquely rich data set and safety tools to unlock the power of Generative AI and Large Language Models for better business outcomes.  At LivePerson, we foster an inclusive workplace culture that encourages meaningful connection, collaboration, and innovation. Every mind is invited to ask questions and actively seek new ways to achieve success and reach their full potential. We operate as one with a growth mindset. This means spotting opportunities, solving ambiguities and seeking effective solutions to challenges that make things better.   Overview:  Reporting to the Director of Data, Models, and Decisions (DMD), the successful candidate has an opportunity to join an innovative data science and engineering team that's operationalizing data across the organization. We see model-driven processes and workflows as a means to reduce uncertainty, reveal opportunity, and generate operational leverage that collectively create a new dimension of competitive advantage and lay the foundation for new revenue streams.  You will: Apply cutting-edge data visualization techniques to reveal actionable insights to business users Solve challenging data problems through in-depth analysis of many systems Apply statistical analysis to summarize data and forecast trends Participate in Data Requirement Gathering, Data Preparation and devise proper Data Interpretation Ensure data is maintained in our platform and all systems with best quality, always considering automation and scalability of your solutions Evangelize our products and train others on Data Visualization and presentation techniques, enabling them to create dashboards and reports themselves  You have: Demonstrated ability to uncover insights and relationships across numerous datasets 5+ years of experience analyzing data and creating dashboards and reports (Looker / PowerBI / Tableau / Metabase) 5+ years of experience interpreting and writing advanced SQL 2+ years of experience in Python and good working knowledge of pandas and matplotlib Bachelor's degree in Computer Science, Statistics, or another quantitative field Ability to work closely with teammates in a highly collaborative environment and simultaneously be a self-starter with strong individual contributions Excellent communication and presentation skills  Benefits: The salary range for this role will be between $88,000 to $120,000 Final compensation will be determined by a variety of factors, including, but not limited to, your location, skills, experience, education, and/or certifications. During the phone screening, the recruiter will provide the location-specific salary range for this role. Regardless of your personal situation or where you are in the world, LivePerson offers comprehensive and great benefits programs to meet your needs:  Health: medical, dental, vision and wellbeing. Time away: Public holidays and discretionary PTO package for flexible days off with manager approval. Financial: 401K, ESPP, Basic life and AD&D insurance, long-term and short-term disability Family: parental leave, maternity support, fertility services. Development: tuition reimbursement, native AI learning. Additional: 24/7 access to professional counselors, voluntary insurance coverage, exclusive perks and discounts. #LI-Remote", "- Open to W-2 candidates - Building Power BI dashboards - Some sort of risk environment (Could be cyber/operations/etc..) OR another financial institution", "Design and develop interactive Power BI reports and dashboards. Extract, transform, and load (ETL) data from various sources into Power BI. Collaborate with business users to gather requirements and translate them into effective visualizations. Develop custom applications using Power Apps to streamline business processes. Integrate Power Apps with other Microsoft 365 applications and services. Create canvas and model-driven apps that meet the organization's needs. Design and implement data models to support reporting and analytics requirements. Perform data analysis to identify trends, patterns, and insights. Automate repetitive tasks and workflows using Power Automate (Flow). Ensure seamless integration between Power BI, Power Apps, and other Microsoft 365 tools. Collaborate with cross-functional teams to understand business requirements and provide technical solutions. Train end-users on how to use Power BI reports and Power Apps applications effectively.", "Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.   Qualifications And Education Requirements   Bachelor's or Master's degree in Computer Science, Information Systems, Data Science, or a related field.   Must be local or able to work Hybrid in Dallas, TX   Proven experience as a Database Architect, Data Analyst, or a similar role.   Strong proficiency in designing and managing relational databases (e.g., SQL Server, Oracle, MySQL).   Expertise in ETL processes, data integration, and transformation techniques.   In-depth knowledge of NetSuite, including configuration, customization, and integration capabilities.   Proficiency in data analysis and visualization tools such as Power BI, Tableau, or similar platforms.   Familiarity with medical data management, healthcare industry regulations, and terminology.   Strong analytical and problem-solving skills with the ability to extract insights from complex datasets.   Excellent communication and collaboration skills to effectively work with cross-functional teams and stakeholders.   Attention to detail, with the ability to prioritize tasks and manage multiple projects simultaneously.   StrideCare Offers a Total Rewards Benefits Package That Includes   Major medical insurance   Dental and vision   401k   Long- and short-term disability   Corporate outings   Fun and casual corporate environment   PTO   Paid holidays   No weekends, evenings, nights, or holidays (paid holidays)   Excellent work - life balance (Monday - Friday work schedules)   Employee Assistance Program and more!", "Responsibilities Work closely with Data integration team to stage data for the reporting requirement Build rich visualization dashboards using tableau , SSRS and other relevant technologies Perform report administration & user access provisioning activities for optimized performance Support business team for self-service and ad-hoc activities Set standards for reporting & BI functions; design templates which are scalable, repeatable, and simple Work with business teams to understand their unique business and technical requirements for tools and analytics Lead the requirement gathering, design and development of reporting solution using various tools e.g Tableau, MS SSRS for all different types of reporting for all LOB. Lead the development of Master Reporting Inventory as part of Data Governance initiatives. Effective collaboration with multiple levels of end users including data stewards, leadership and management, executive and other end users. Led the reporting design and architecture and work closely with infrastructure to meet the needs of the business Work with other technical staff, such as networking to ensure connectivity, compatibility, and scalability of reporting platform & systems Support ongoing monitoring, automation and refinement of reporting solutions Work with management to identify and resolve reporting related issues Participate in process reviews and enhancements. Participate in design and delivery of cubes, dashboards and various self-service business intelligence solutions. Maintains a high degree of business functional knowledge and current automated technologies and tools. All other duties assigned", "Hey Jane,  My name is Bradie, and I work with Brooksource, a National IT Services Company. I came across your profile and was extremely impressed with your PowerBI and SQL exposure paired with your business intelligence experience! That is exactly the kind of background our client is currently looking for.  Based on your experience, I have an awesome opportunity for you! I am reaching out to you today as an extension of our Fortune 24 Healthcare Insurance client, Centene Corporation.  We are currently seeking a mid-level Power BI Engineer to support the creation of analytics and visualization solutions tied to a suite of applications that encompass the following business functions: Fraud, Waste and Abuse, Claims processing and Quality Assurance. You will primarily support new application builds as well as improvements on existing applications.  What we are looking for: - 2-5 years professional experience creating/building data visualizations and dashboards - Strong experience with PowerBI and SQL queries -Exposure to Snowflake architecture mapping and creation preferred - Experience with Gitlab, Confluent Cloud, Kafka, or equivalent tools - High attitude/aptitude and ability to work in large data set environment  Additional Details: - 5+ month contract (potential to convert to FTE) - Fully remote schedule - W2 Only (no sponsorship provided)  I believe this opportunity could align great and would love the chance to speak with you further! Please let me know if you would be interested and when you would be available for a quick 10-minute phone call discussing the position further.  Looking forward to hearing back from you!  Bradie Schoemehl Senior Technical Recruiter", "Salary in the $60-80K range + 10-20% bonus.  Here's some info on the need - MUST have  at least one year of experience with SQL, ETL, SSRS, and Power BI experience (data modeling, data viz, dashboarding, ad hoc reporting).  Seeking an Associate Business Intelligence (BI) Developer to contribute to the creation of BI solutions, transforming raw data into valuable insights.   Key Responsibilities:  \u2022   Assess requests for data interfaces, perform data profiling, and determine optimal methods for request fulfillment  \u2022    Translate diverse business requirements into precise technical specifications  \u2022     Construct data models to support data visualizations, interactive dashboards, and ad hoc data inquiries  \u2022    Engage in collaborative efforts with fellow developers and end-users as requests progress through their life cycle  \u2022     Conduct unit testing and quality assurance assessments on data models and reports  \u2022   Produce, review, interpret, and troubleshoot intricate code while adhering to established standards  \u2022   Investigate and resolve unforeseen work items, communicating findings promptly to the team and end users  \u2022    Evaluate and enhance our existing BI system   Essential Qualifications:  \u2022    Minimum of 1 year of experience in BI development  \u2022     Proficiency in SQL, SSRS, Excel, and Power BI  \u2022    Familiarity with relational databases, with a preference for understanding SQL Server Database Management Systems (RDBMS) principles  \u2022    Proficient in ETL processes and skilled in implementing data transformations using SQL and Power BI  \u2022     Basic knowledge of source control is advantageous", "Description  Robert Half is currently working with a client seeking a Data Analyst. The Data Analyst will be responsible for the preparation of financial reports that serve as summary information for managers. The Data Analyst will be analyzing a variety of data types and reporting on that information. This Data Analyst position is for someone who is deadline driven and highly analytical.  What you get to do every single day   Call out relevant insights from compiled analytical reports  Organize, manipulate, and extract data in response to management requests  Create and share key decision-making data for market assessments, forecasting and further investigation  Complete data mining projects- Analyze corporate reports in order to create financial reports  Requirements   Complete competence in data management and manipulation  Ability to work independently with minimal oversight  BS/BA in Accounting, finance, or economics  Skilled in spreadsheet and reporting applications, including V-lookups, pivot tables, and queries  Strong communication skills and able to receive criticism well  Critical thinking and problem-solving skills are a must, as well as great attention to detail  Understanding of a variety of data models  5+ years of experience in financial planning and analysis, data analysis or similar role  Robert Half is the world\u2019s first and largest specialized talent solutions firm that connects highly qualified job seekers to opportunities at great companies. We offer contract, temporary and permanent placement solutions for finance and accounting, technology, marketing and creative, legal, and administrative and customer support roles.  Robert Half works to put you in the best position to succeed. We provide access to top jobs, competitive compensation and benefits, and free online training. Stay on top of every opportunity - whenever you choose - even on the go.  All applicants applying for U.S. job openings must be legally authorized to work in the United States. Benefits are available to contract/temporary professionals, including medical, vision, dental, and life and disability insurance. Hired contract/temporary professionals are also eligible to enroll in our company 401(k) plan. Visit", "NavAide is on the lookout for dedicated professionals committed to supporting the Navy's strategic alignment in enhancing the FM workforce, standardizing business processes, and leveraging data analytics. Specifically, this role will engage deeply in the Navy ERP data migration initiative and facilitate close collaboration with FM&C and Government clients. If you thrive in dynamic, challenging settings and have a penchant for pioneering change and innovation, then this opportunity might just be your next great leap.  Duties & Responsibilities:  Work in tandem with FM&C and Government clients, understanding data migration needs, and aligning them with the strategic aspirations of the ASN FM&C. Lead and oversee the creation and deployment of a Program Management Plan, touching crucial facets like organizational structure, transition plan, risk management, and performance metrics. Steer data health assessments and migration processes including, but not limited to, data mapping, post-migration data validation, and business transition. Oversee financial reconciliation, DDRS reporting, and user acceptance testing. Be at the forefront of organizational change management by crafting strategies and conducting change readiness assessments. Play a pivotal role in training strategy development, execution, and user management to ensure a smooth and hitch-free data migration process. Provide unwavering leadership to subordinate teams, making sure of strict adherence to financial standards and guidance. Knowledge, Skills & Abilities:  Demonstrable expertise in IT development, database management, and data analytics. Excellent communication, negotiation, and problem-solving acumen. Strong alignment with NavAide's ethos and guiding principles. Proficiency in tools and languages such as SQL, Python, and R, along with familiarity with data visualization tools like Tableau and Power BI. In-depth understanding of Navy ERP migration or related large-scale data migration projects. Education & Experience:  A Bachelor's Degree from an accredited institution in a field relevant to the role. Between 6-15+ years of work experience, with a preference for those who have engaged with State or Federal Government agencies or sizable corporations. While not mandatory, certifications or exposure to the Department of Navy Financial Management & Systems would be an added advantage.", "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com Job Description What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements. Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed", "Immediate Hire \u2013 Senior Developer (Tableau + ETL) - Irving, TX  (DAY 1 ONSITE) Hybrid    Role: Senior Developer (Tableau + ETL)  Location: Irving, TX  (DAY 1 ONSITE) Hybrid  Duration: Fulltime     Required skills (technical & professional) : \u2022       8+ years of overall IT experience. \u2022       4+ years\u2019 experience working with Tableau with ETL experience. \u2022       You will work closely with customers, product owners and dev team to ensure requirements and business objectives are translated into working technical designs \u2022       Drive end-to-end design, development and implementation of complex solutions, often using new technologies \u2022       Design and develop Tableau reports and dashboards that will yield actionable insights that present the answers to business questions \u2022       Code and modify SQL/ETL based on dashboard requirements \u2022       Run ad-hoc analysis for Product and Business Managers using standard query languages and operationalize for repeatable use via Tableau reporting suite", "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:   At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Sr Data Analyst Partnered with a client who simplifies shipping logistics for merchants and warehouses, offering customized API solutions that streamline the shipping process and make logistics a seamless and stress- free experience. Position Overview: As a Senior Data Analyst, you will play a key role in providing valuable insights and supporting data- driven decision-making processes. You will work closely with cross-functional teams to analyze complex data sets, identify trends, and help drive business growth. The ideal candidate will have a minimum of 5 years of experience in data analysis, strong proficiency in VBA, and advanced MS Excel skills.  Key Responsibilities: \uf0b7 Perform in-depth data analysis to identify trends, patterns, and insights. \uf0b7 Create and maintain complex Excel models using VBA to automate repetitive tasks and streamline processes. \uf0b7 Create macros that can be changed easily in a fast-changing environment. \uf0b7 Provide recommendations for process improvements based on data analysis. \uf0b7 Stay updated on industry trends and best practices in data analysis. \uf0b7 Mentor and provide guidance to junior analysts when necessary. Qualifications: \uf0b7 Bachelor&#39;s degree in a related field (e.g., Statistics, Mathematics, Computer Science). \uf0b7 Minimum of 5 years of experience as a Data Analyst. \uf0b7 Proficiency in VBA for Excel automation is a must. \uf0b7 Advanced skills in Microsoft Excel, including pivot tables, complex formulas, and data visualization. \uf0b7 Strong analytical and problem-solving skills. \uf0b7 Excellent communication and teamwork abilities. \uf0b7 Ability to prioritize and multi-task. \uf0b7 Attention to detail and high level of accuracy. \uf0b7 Experience with data visualization tools (e.g., Tableau, Power BI). \uf0b7 Knowledge of shipping, logistics, or eCommerce industry is not mandatory, but a plus. \uf0b7 Fluency in Mandarin is not mandatory, a plus.", "Design and Develop Tableau reports and dashboards \u2022 Provide operational support for existing Tableau reports/dashboards \u2022 Provide subject matter expertise for designing of Tableau workbooks \u2022 Participate in analysis, design, development, testing, deployment and support of dashboards and reports \u2022 Perform impact analysis and validation of existing production reports and universes after application and database upgrade \u2022 Interface with business analysts and/or users to clarify requirements. Work closely with the different business groups to cater to their reporting and dashboard needs. \u2022 Troubleshoot dashboard and report problems independently, determining the root cause and fixing the problem. \u2022 Understand reporting database schema/model, identify joins/tables, and perform data analysis. \u2022 Experience building complex dashboards using Tableau \u2022 Implement industry BI standards and best practices \u2022 Proactively identify problems/issues/risks and provide solutions \u2022 Develop report & dashboards using Business Objects and Tableau and Provide status updates on regular basis and be committed to aggressive delivery timelines", "WHAT YOU\u2019LL DO  Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms WHAT YOU\u2019LL BRING  Bachelor's Degree in Data Analysis, Data Development, Marketing Data & Analytics, or related field and/or 3-5 years equivalent work experience in Data Developer or similar Data & Analytics Role Proficiency in SQL Experience with BI and Analytics Tools Experience building and supporting high-performance data models, visualizations, and KPIs for key initiatives Experience with data storytelling, data science, or data strategy Knowledge of data modeling and entity relationships Ability to write code with clean documentation Strong entrepreneurial drive Strong verbal and written communication skills and a collaborative, problem-solving mindset Customer/client service experience (internal and/or external audiences) Strong critical thinking, problem solving and analytical skills Strong verbal and written communication skills Proven experience in implementing innovations that drive business goals led from user feedback and experience NOT REQUIRED, BUT PREFERRED  Marketing, media, & advertising knowledge, including digital and traditional channels Experience with tools that support data engineering such as Looker, Fivetran, AWS, DBT Experience with data warehousing architecture and data modeling", "Overview:Shift4 (NYSE: FOUR) is boldly redefining commerce by simplifying complex payments ecosystems across the world. As the leader in commerce-enabling technology, Shift4 powers billions of transactions annually for hundreds of thousands of businesses in virtually every industry. For more information, visit www.shift4.com. We are looking for a Business Intelligence Analyst (BA) with a Data Mapping Focus to join our Information Technology Group. As a BIA, you will be understanding business operations and gather, analyze and identify data from their sources to map to target databases and reports of the Business Intelligence solution to ensure the flow of information and data to the entire organization. The position requires at least 3 years of prior experience as a Business Intelligence Analyst within Data Mapping. We are looking for individuals that are extremely self-sufficient, available to work flexible hours and hold themselves to the highest standards of professionalism. Responsibilities:  Responsible for the BI Data Mapping, which includes analyzing business requirements from stakeholders, identifying location of necessary data from technical systems, and defining transformations to meet target needs. Create and maintain documents of needed BI Data Mapping. Conduct source data profiling for anomalies and information summaries. Interpret data from a business perspective to aid in the modeling of the data targets such as business intelligence reports or an enterprise data warehouse. Supports the strategy for how data will be documented, handled, stored and processed to support the requirements from across all business units. Provides support for the ETL and BI developers for all data related analysis, questions and issues. Maintain accountability of Data Mapping using our Software Development Life Cycle (SDLC). Contribute to and enforce the use of the Business Intelligence solution. Support key metrics and shared goals that determine success for a particular area. Qualifications:  3-5+ years of experience in business intelligence analysis surrounding system knowledge and data mapping. Advanced experience of technical systems from both the application and data repository points of view. Advanced experience in SQL proficiency (T-SQL, MySQL, and PostgreSQL). Advanced experience in extracting, transforming and mining of data. Advanced experience with BI tools such as Tableau and ETL tools like SSIS. Advanced experience working with various data sources such as AWS Redshift, Postgres, SQL Server, Amazon Athena, Excel, Flat Files, etc. Advanced experience working with large data sets from sources such as AWS Redshift, Postgres, SQL Server, etc. Experience working with an Enterprise Data Warehouse and Dimensional Databases is a plus. Advanced experience of the SDLC and how BIA processes fit into KANBAN and Scrum Frameworks. Experience with Jira and Confluence is a plus. Ability to prioritize multiple tasks and easily adjust to changing priorities. Ability to identify problems, initiate solutions, and effectively collaborate and communicate with team members. Have excellent verbal and written communication skills. Location: Remote  Location: 2202 N. Irving Street, Allentown, PA 18109  Job Type: Full-time  Experience:  SQL: 3 years (Required) Oracle: 3 years (Preferred) finding, understand and working with data in a variety of databases/files: 3 years (Required) understanding the business process of systems: 3 years (Required) data mapping: 3 years (Required) documentation of data mapping (reports): 3 years (Required) writing queries and simple database view: 3 years (Required) Microsoft Excel: 3 years (Required)", "Responsible for impact analysis, identifying common BI patterns, L3 support queries, and more.", "Responsible for the design, development and maintenance of informational dashboards, data and report development. KPIs and dashboards according to semi-monthly / monthly cycle reporting. Coordinate forecasting exercise and planning resources. Analyze activity performance on providing reports, timelines, and analysis such as month-by-month hourly resource time utilization and unit costing, analysis on trends. Developing and providing accurate reporting tools for organization in relation with Programs and Indirect budgets. Interfacing with project teams to ensure consistent reporting of project performance, scope and accurate project forecasting. Conduct cost/benefit analysis and develop business case. Put in place all actions needed regarding continuous improvement and processes. A demonstrable experience in producing high quality and detailed written documents. Other duties as assigned or required.", "Earn $100K+ annually \u2026 as a Sideline\u2014no need to quit your day job. Part-time or full-time.    Pay for Performance, 1099 compensation.    The Ideal Candidate:    Self-motivator who routinely sets and exceeds their own goals. If you're goal-oriented and self-motivated, you'll thrive here. Proven track record of relationship-building and influencing. Exceptional relationship-building skills.    Position Overview:    Pay for Performance, 1099 compensation \u2013 residual monthly income paid for the client's life (average 10+ years!). This position requires no quotas and no caps on earnings. Work alongside your current position or business. Sideline, Part-time or Full-time. Training and ongoing support provided.   General Responsibilities:    Identify opportunities in our cost-saving services with prospects and new clients, building them into long-term relationships. Serve as a liaison between prospective clients and Business Development Director/SME.   Requirements:     Current or former Business Professional, Executive, B2B Sales Rep, Finance Executive, CFO, COO, or Controller. Ability to lead conversations with prospects and clients. Must have 10+ years of business experience working with decision-makers. Strong communication and interpersonal skills. Positive and results-driven. Ability to work well independently and with others.   About Us:    Aspire Partners offers B2B solutions with front-end timing and at no cost or investment to prospective companies. It's a win-win for clients. Current inflationary conditions make our services more relevant and in demand for all sectors. Companies desperately need our help. Our solutions can help companies thrive during these uncertain times by solving efficiency issues and adding to their bottom line.   Every business needs to reach peak profitability and efficiency. Handling account payables, reducing expenses, and attracting and retaining good employees is vital to the success of every business. We create operational efficiencies and actual cost savings for companies of all sizes and industries without switching vendors or current, established relationships with company vendors or service providers.", "Job Summary:  Join HonestMed, a fast-growing ecommerce company in the medical supply space, as a Data Analyst. Utilize your analytical prowess to enhance our online retail business's performance. Your primary responsibilities will include monitoring key performance indicators, such as website traffic, conversion rates, and sales, identifying growth opportunities, optimizing website designs, implementing marketing campaigns, and maintaining comprehensive business intelligence reporting to drive HonestMed's success.  Essential Functions and Key Responsibilities:  Identify, ingest, and clean critical data sources for modeling and reporting. Design and manage dashboards and reports for marketing and business teams. Provide actionable metrics, insights, and recommendations on consumer analytics and marketing campaigns. Lead projects leveraging data analytics to address complex business issues. Narrate the customer and service story through BI tools and timely reporting. Become the company's data expert, deeply understanding the data landscape across customer journeys. Promote data-literacy and accelerate data knowledge among colleagues and customers. Foster a team-oriented and inclusive work environment. Collaborate effectively with all organizational levels and stakeholders. Be on-site in Oceanside, CA Perform additional duties as required. Knowledge Skills and Abilities:  Minimum of 3 years in data analytics, focused on consumer, retail, and marketing data. Expertise in creating dynamic, data-driven dashboards, preferably in Tableau. Proficiency in consumer analytics, marketing analytics, and forecasting. Demonstrated ability to apply data and analytics to problem-solving. Experience in effectively presenting complex results to all organization levels. Outstanding leadership, communication, interpersonal, and presentation skills. Ability to foster positive working relationships within and outside the company. Required Education and Experience:  Bachelor's degree or relevant combination of education and experience. Strong proficiency in SQL, Python, and Excel. Experience in building data pipelines is a plus. Minimum 5 years of e-Commerce experience preferred. Strong data visualization skills with dashboard building expertise in Tableau or Power BI.", "SaaS solution provider located in the Cayman Islands is searching for a (Senior) Tableau Data Analyst to work remotely from anywhere in the United States.  Candidate will join their team and be responsible for designing, developing and maintaining the Tableau dashboards and reports.     About:  This company has extensive experience in operating world-class data centers hosting SaaS solutions.  They are a 20-year-old company with a solid client base focused on building long term client relationships and world class solutions.  They have a business model for long term loyalty with their staff and clients.     Candidate will work remotely from a home office and on occasion be required to work outside of regular business hours and share on-call duties with other members on the Application Support team.  Candidate will be given the opportunity to travel and work in a Caribbean lifestyle for one week each year when they visit the company\u2019s headquarters and data centers in the Cayman Islands.  Over time is expected in this position.     Note:  Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers. Job Requirements Education:  College Degree in Computer Science, Information Systems or related field.    Technical Skills & Abilities:  Three (3)+ years proven experience as a Tableau Developer or similar role - required Proficient in Tableau Desktop and Tableau Server Strong understanding of data visualization principles and best practices Experience with data modeling, data integration, and ETL processes Strong knowledge of SQL for data manipulation and querying; extensive experience writing functions and scripts    Responsibilities:  Develop and maintain Tableau dashboards and reports to support business analytics needs Collaborate with stakeholders to gather requirements and understand business objectives Design and implement data visualizations using Tableau best practices Create complex calculations, parameters, and filters to support data analysis Optimize Tableau performance and troubleshoot issues as needed Conduct data analysis and provide insights to drive business decision-making Stay up-to-date with Tableau features and functionalities to ensure effective utilization Soft Skills:  Excellent problem-solving skills and attention to detail Strong communication and collaboration abilities Fluent in the English language Additional Information Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers.", "Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Bachelor\u2019s Degree in Computer Science, Engineering, Management Information Systems, or a related field Five years of related experience in application administration and support, including experience utilizing SQL and related SQL management tools (SSMS, SSAS, SSIS and SSRS) Skills Required Knowledge of computer system capabilities, business processes and workflow Experience with enterprise applications and understanding of database driven applications Experience with SQL scripting Strong understanding of the software development life cycle Excellent communication skills, both written and verbal, including the ability to bridge functional and technical resources by communicating effectively with individuals of varying systems expertise and business needs Proven problem solving and analytical thinking and ability to approach problems logically and systematically Ability to maintain good customer relations with clients and external vendors and partners Essential Functions  Builds ad hoc queries, reports and business processes using standard Blackbaud CRM features/functionality      Builds custom business process and data integrations using SQL Supports system users with issues, new requests and system upgrades Collaborates with team members and individuals across the Development and Alumni Relations division to develop best practices, re-usable objects and effective documentation Analyzes and documents user needs, existing and new policies, processes, procedures and operational methods to consider possible improvements to new and existing systems Utilizes elicitation techniques to understand business processes and translate into system requirements and/or development of systems solutions Defines and documents business requirements, technical specifications and test cases for system developments May include the writing of all or a portion of functional and technical specifications Coordinates with business and technology teams, ascertaining system requirements, such as program functions, output requirements, input data acquisition, and system techniques and controls Problem solves in areas such as system design, input/output requirements and procedural flow between departments and/or business systems Performs configuration of enterprise application software Performs testing of new systems, upgrades and patching of existing systems Plans, conducts and documents results of testing Performs all other duties as assigned Additional Functions  Has frequent contact with division staff and other university offices Open office environment Many hours spent in front of a computer Evening/weekend and on call work as required to meet project deadlines and/or maintain system availability Preferences  Six or more years of related experience in application software support Programming experience utilizing SQL and related SQL tools, and report development tools using SSRS, PowerBI and/or Tableau Experience developing business intelligence solutions Experience building SSIS (SQL Server Integration Services) packages Experience with project management methodologies Experience with REST APIs Experience with alumni/development database systems, preferably Blackbaud CRM Experience in non-profit or higher education setting Thorough understanding and working knowledge of alumni relations and/or fundraising Skills Excellent organizational skills Strong attention to detail High levels of overall organization, accuracy and time management Goal oriented with the ability to prioritize a heavy workload Willingness to take charge of assignments and follow through with minimal supervision Ability to work with high level of confidentiality Proficiency in Microsoft Office Suite", "https://www.indeed.com/viewjob?jk=57bafe6006d3d2ad&tk=1hdr8h4cejr51801&from=serp&vjs=3", "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.  This position is remote. We are unable to offer work sponsorship for this role.  We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.  Your impact:  Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company's product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform. About you:  Microsoft SQL Server solutions DB Architecture Stored Procedure SSIS Performance Tuning Enterprise Analytics Toolsets Examples: MicroStrategy, Power BI, Tableau, Looker Python Scripting Agile Development Process Jira 3+ years hands-on experience in developing and architecture of large-scale, multi-tenant, real-time, customer-facing data platforms using relational and non-relational database platforms and micro-services architecture patterns. 3+ years hands-on experience in developing Microsoft SQL Server solutions including DB architecture, stored procedure, SSIS and performance tuning. 1+ years hands-on experience in designing and developing enterprise analytics reports and dashboards that are deployed into a customer-facing analytics reporting platform. 1+ years hands-on experience with enterprise analytics back-end components including schema, analytics engine and web layer to support a customer-facing analytics reporting platform. 1+ years hands-on experience with REST API, Python scripting experience is a plus. Significant experience collaborating with individuals in product development and engineering roles to envision and deliver a customer-facing analytics report platform. Experience in delivering an agile environment and understand how to maximize results from sprints, releases and road maps. Experience in creating a variety of architecture and business artifacts to communicate all aspects of a proposed solution to a diverse audience comprised of technical and business team members. Experience in designing and leading experiments or proofs of concept which increase team knowledge and bring about effective technical and business decisions. Keep up with industry trends, enjoy teaching yourself new technology, and enjoy talking about different technical problems and their solutions. Courage to debate with colleagues and drive out the best solution for the organization, not just your solution. One or more industry certifications in a relevant data architecture or engineering topic area.", "The Data Governance Management Office (DGMO) is responsible for the development, implementation, and continuous improvement of an enterprise data governance framework that will increase coordination and consistency across enterprise domains, establish a shared, cross-functional understanding of critical data assets and concepts, and improve AltaMed\u2019s ability to make data-informed decisions using quality, trusted data & insights.   The Data Governance (DG) Analyst is responsible for facilitating and managing data governance initiatives, including the development of data standards, policies and procedures, and working with stakeholders from across the organization to promote and implement data governance best practices (data classification, data lineage, lifecycle management). This role will convene cross-functional groups to understand and document data requirements, data flows, and data use. In addition, the DG Analyst will help define and execute toward the implementation of an enterprise data governance roadmap, collaborating with data & analytics technical teams to bridge business objectives to analytical products & solutions.   To be successful in this role, individuals must have a blend of business acumen, a problem-solving attitude, data governance and data management knowledge, and a strong ability to communicate effectively with both technical and non-technical stakeholders. Other critical success factors include: comfort with ambiguity, curiosity and willingness to learn new subject matter, and an ability to build relationships with a focus on partnership. This role will support cross-functional teams with analysis and measurement of key data governance inputs, and requires some proficiency with data analysis and data quality measurement techniques.   Responsibilities   Contribute to and facilitate the creation of policies, standards, and documents on topics such as: data governance, data stewardship, master data management, data quality management. Build and maintain data governance collateral to centralize, coordinate, and share DGMO content with a wide array of enterprise stakeholders. Work with key business and technical stakeholders to create, manage, and curate an enterprise business glossary, data dictionary, and data catalog. Capture and share detailed formal documents, such as governance meeting minutes for operational, tactical, strategic, and executive audiences. Implement change control & change management processes and tools, and resolve enterprise data governance issues. Develop and socialize data maps to ensure transparency in the lineage and flow of data within and outside of the organization. Define and drive tactical roadmaps for enterprise data governance adoption, including socialization, stakeholder buy-in, operating model implementation, and data governance training. Work with other data & analytics teams to develop, promote, and monitor adherence to data quality standards. Develop, maintain, and socialize data inventory tools and methods to support data asset documentation & governance. Work with key stakeholders to define, monitor, and share data governance key performance, quality, and adherence metrics. Perform other duties as assigned.   Qualifications   Bachelor\u2019s degree in information technology, business, public health, mathematics, finance, or a related field, with appropriate professional and technical experience required. Minimum of 4 years of experience in data management, data analytics, product management, or consulting, or other relevant work experience required. Experience with project management techniques, such as cross-functional project coordination & delivery, work plan development, requirements gathering is required. Prior professional experience working within a healthcare environment (payer, provider, vendor) required. Proven ability to facilitate effective meetings and work sessions across various levels of staff and leadership required. Prior experience with data governance tools and platforms highly preferred. Previous experience in health care analytics, data strategy, business strategy, or clinical administration preferred. Prior experience with product management & agile delivery principles (Scaled Agile - SAFe) preferred. Show less  Seniority level Entry level Employment type Full-time Job function Information Technology Industries Wellness and Fitness Services", "No description details", "https://www.indeed.com/viewjob?jk=dd7d5cb7585219aa&tk=1hepmokcejm4n800&from=serp&vjs=3&applied=1&from=smart-apply", "Job Responsibilities  \u00b7 Collaborate closely with cross-functional teams in engineering, supply chain, and production to identify key performance metrics and indicators.  \u00b7 Design, develop, and implement comprehensive Power BI dashboards and reports that provide actionable insights for program management and decision-making.  \u00b7 Utilize DAX language to create advanced calculations, measures, and transformations to ensure accurate representation of metrics in reports.  \u00b7 Build and maintain complex data models with a keen focus on establishing accurate and efficient table relationships, enabling seamless data flow and analysis.  \u00b7 Analyze large datasets to extract valuable insights, identify trends, and present findings in a clear and concise manner.  \u00b7 Work closely with stakeholders to understand their data needs and translate requirements into effective data visualizations.  \u00b7 Lead the development of data-driven solutions that enhance program efficiency, quality, and overall performance.  \u00b7 Establish data quality standards and procedures to ensure accuracy, consistency, and reliability of metrics.  \u00b7 Stay current with industry trends, best practices, and advancements in data visualization, DAX language, and program management techniques.  Education/Experience  \u00b7 Bachelor's degree in a relevant field such as Engineering, Supply Chain Management, Business Analytics, or a related discipline. Master's degree is a plus.  \u00b7 Proven experience (5+ years) in utilizing Power BI for data visualization and creating advanced dashboards and reports.  \u00b7 Demonstrated expertise in setting up and managing metrics for complex programs within engineering, supply chain, or production environments.  \u00b7 Proficiency in the DAX language is essential, with the ability to create complex calculations and measures.  \u00b7 Strong aptitude for establishing and optimizing table relationships to ensure accurate data modeling.  \u00b7 Excellent analytical skills and the ability to transform raw data into meaningful insights.  \u00b7 Effective communication skills to collaborate with technical and non-technical stakeholders.  \u00b7 Experience in data manipulation, transformation, and cleaning for accurate analysis.  \u00b7 Detail-oriented mindset with a commitment to data accuracy and quality.  \u00b7 Ability to work independently, prioritize tasks, and manage multiple projects simultaneously.  \u00b7 Familiarity with engineering, supply chain, or production processes is a plus.  \u00b7 Certifications in Power BI and relevant data analysis fields are valuable.", "About the job ABOUT US  Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards!   ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable.   Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns.     With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement.   THE ROLE  The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting.   We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements.   You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units.   KEY TASKS & RESPONSIBILITIES   Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Responsibilities:  \u00b7 Experience Developing, deploying, and supporting SharePoint, Teams, Power Platform and SPFx applications.  \u00b7 Strong technical knowledge with Power Platform tools including Power Automate (Flow), Power Apps, Power BI, DataVerse.  \u00b7 Experience with enterprise level canvas applications utilizing Power Platform tools  \u00b7 Knowledge of Power Automate Technical REST & SOAP protocols  Desired Technical Skills:  Strong technical knowledge with Power Platform tools such as Power Automate (Flow), Power Apps, Power BI, DataVerse. Proven experience developing enterprise level applications utilizing Power Platform tools Strong experience with SharePoint administration, workflows, and development. Strong Microsoft Power Platform development experience Web development experience including, JavaScript, SQL ,XML, and CSS Design/implementation experience in the Microsoft Power Platform \u2013 MS PowerApps, Power Automate, and PowerBI. Experience :  Bachelor\u2019s in computer science, Information Systems or related field OR 4+ years of relevant work experience 3+ years of experience Developing and administrating enterprise applications Experience on teams with emphasis on development within Microsoft SharePoint environments Experience implementing and/or administrating IT service support management tools Strong interpersonal skills, oral and written communications across all levels of an organization", "JOB DESCRIPTION & DETAILS     Day to day:  Insight Global is seeking a Data Engineer to support a local insurance company headquartered in Richmond, VA. This engineer will be responsible for enterprise data integration and reporting, as well as building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies. This candidate will be required to go onsite 2 days a week in the Richmond, VA area.     Responsibilities:  Assembling large, complex sets of data that meet non-functional and functional business requirements. Identifying, designing, and implementing internal process improvements including re-designing infrastructure for greater scalability, optimizing data delivery, and automating manual processes Building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies Building analytical tools to utilize the data pipeline, providing actionable insight into key business performance metrics including operational efficiency and customer acquisition Working with stakeholders including data, design, product and executive teams and assisting them with data-related technical issues Working with stakeholders including the Executive, Product, Data and Design teams to support their data infrastructure needs while assisting with data-related technical issues    Must Haves:  3-5+ years of experience as a Data Engineer Experience with MS SQL Server Platform (SSIS, SSRS & SSAS) Experience in data warehousing and ETL development (T-SQL, PLSQL, and/or SQL scripts) Experience working with intelligence products and data analytics tools (e.g. PowerBI, Tableau) Ability to compute, analyze and interpret complex and disparate data to produce relevant and consumable reports, dashboards, etc.", "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI RAYUS is committed to delivering clinical excellence in communities across the U.S., driven by our passion for and superior service to referring providers and patients. RAYUS Radiology is built on our brilliant medicine, brilliant team, brilliant technology and services - all to provide the highest level of patient\u00a0care\u00a0possible.", "-Own data needs for clients and internal teams -Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports -Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools -Manage the retrieval, compiling, and formatting of large volumes of data -Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. -Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support -Learn new technologies as they evolve, and understand their impact to systems -Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously -Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals -Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities -Present and clearly articulate solution options to key stakeholders -Be a go-to resource with thorough understanding of data structures for various ad platforms", "Publishing.com has helped thousands of normal everyday people to become successful self-published authors. And along the way, we also became one the most successful companies in the US (  Want to be at the forefront of the AI revolution? Join us! We are building the most comprehensive AI-powered self-publishing platform and you get to join us at ground zero. Instead of just teaching people how to create successful books, we are going to help them do it.  About you:  You are a data engineer with strong analytical skills and hands-on experience with modern data warehousing and business intelligence solutions. You know how to use code and no-code to ingest data from various sources, how to interpret data and translate it into business insight, and how to prepare reports and dashboards that are easy to understand and digest.  And you have a great attitude!  About this role:  As our first data engineer, you will have the opportunity to make important contributions to various aspects of our data platform. Your main responsibilities are:  Build a highly scalable data warehouse Propose, design, and implement data ingestion pipelines (ELT/ETL) Maintain our local and cloud data platforms Understand and interpret business intelligence requirements and translate them into technical solutions Build business analytics and dashboards to address sales and marketing needs  Required skills:  Strong problem solving skills Strong communication skills Strong SQL skills Expert in using data warehousing solutions such as BigQuery, Snowflake, or Databricks Experience with data ingestion services such as Fivetran, Matilion, Segment, or similar Experience with Google Sheets Experience with business analytics for marketing and sales Strong programming skills in JavaScript and Python Experience with HubSpot Experience with Git Experience with agile development Experience working with marketing and sales teams Strong sense of ownership  Preferred Skills:  Experience with Google Clouds Experience building CI/CD pipelines Experience with AWS, Azure, or GCP Experience with Terraform or other IaC solutions Experience with DevOps and SRE best practices", "About the job Job Summary   The Business Intelligence Developer works independently, and collaboratively, to elicit requirements and create specifications. They then design, architect, and implement complex and visually compelling reporting and business intelligence (BI) solutions (data visualizations, extract-transform-load (ETL), ad hoc querying, etc.)   The individual in this position interfaces with various functional teams to support the BI solution delivery. They proactively identify needs or issues, develop strategies, and propose/implement technical and process solutions. The Senior BI Developer leads complex or specialized projects and will grow to become a subject matter expert with responsibility for mentoring and training all levels of BI developers as well business stakeholders   Essential Functions And Tasks   Responsible for designing and implementing BI solutions using the Microsoft BI Toolkit (SQL, SSIS, SSAS, SSRS, Power BI) to enable the analysis of data to support strategic initiatives and ongoing business requirements. Solutions include, but are not limited to, end-user reports, ad hoc requests, data visualizations, extract-transform-load (ETL) systems, master data management (MDM), and other BI Solutions   This position is expected to have a proactive approach and create the best solution to address business needs and current infrastructure. Care will be given to provide accurate data to fulfill the requirements of the developed solutions   Actively seeks opportunities to expand technical knowledge and capabilities   Work with the Development team to establish best patterns, practices, and standards as new technology arises   Participate in the out of hours support process   Performs special projects and other duties as assigned   Education And Experience Requirements   Bachelor\u2019s Degree in Computer Science, Information Technology, Data Science, Math, Finance, or a related field, or equivalent training   Two (2) to five (5) years of experience as a Business Intelligence Developer   At least three (3) years of progressively responsible experience building Data Warehouse and Business intelligence solutions. Experience using Microsoft Business Intelligence technologies: SSAS, SSIS, SSRS or similar technologies and database platforms such as Information Builder\u2019s WebFocus, SQL, Tableau, SAP, Power BI, or Oracle. Experience working with SQL queries and data processes   Certification in Lean, Six Sigma or other advanced performance improvement methodology, preferred   Knowledge, Skills, And Abilities   Knowledge and experience with SQL, SSIS, SSAS and SSRSs that support an Enterprise Data Warehouse environment   Ideal candidates will have hands-on experience with the full life cycle of Data warehouse design and development including logical and physical data modeling, mapping data elements from various data sources, and loading EDW objects including dimensions and fact tables   Candidates must have hands-on experience with gathering business requirements, documenting the reporting and analysis specifications, and designing technical architecture   Proven ability to answer technical questions   Strong knowledge and experience with healthcare reporting, Analytics, and Business reporting needs is a must   Excellent communication and client-facing skills   Ability to be flexible and work under high pressure in a complex environment   HealthCare/RCM/Financial systems is a major plus   Experience with large Health care EMRs is a plus   Understand and comply with company policies and procedures", "JOB SUMMARY  At Houston Methodist, the IT Data Specialist is responsible for supporting an enterprise wide business intelligence and analytics framework that will provide the organization with solutions for effective decision-making. This position utilizes critical thinking, attention to detail, and effective communication skills and collaborates effectively with teams to consult with business area leads to generate solution recommendations. The IT Data Specialist plays a technical role on multiple projects and communicates effectively with technical and non-technical audiences. The position utilizes technical expertise in Business Intelligence architecture, design and implementation with experience in business, healthcare and technology projects. The incumbent will be actively involved in supporting, developing and advancing Houston Methodist\u2019s Analytics applications. The IT Data Specialist will use tools such as Microsoft SQL Server, Microsoft SQL Server Reporting Services, Microsoft SQL Server Integration Services, and Tableau to design and implement innovative approaches to data collection, analysis, interpretation and presentation to support planning and decision-making at all levels of the organization and assist in managing data as a corporate strategic resource.     Primary Job Responsibilities  Communicates (oral and written) effectively with customers, vendors, colleagues, and management about services, contact information, system availability, and information. Assists the business analysts to elicit requirements to document. technical and design specifications for package solutions, and/or software development. Assists with user education of business intelligence applications and helps ensure access to data with the goal of reduced reliance on technical specialists in order to obtain data. Develops Analytics Solutions including the data marts, Tableau data sources, reports and dashboards that support operational and strategic decision making. Identifies required source system data and develops ETL processes that move data from source systems into the data warehouse and data marts. Participates in resolving major system outages, disaster management and change control and provides technical or on call support for Analytics applications. Installs, configures, and deploys Analytics tools including as Microsoft SQL Server, and Tableau. Ensures all reported data and information are accurate, consistent, relevant and timely. Practices good time management, good assessment in professional decision making, and management reporting skills.", "The Role  We're seeking a seasoned and dynamic professional to join us as an Associate Consultant, Data Analytics. In this role, you'll be instrumental in delivering projects to our clients. You'll be responsible for analyzing, strategizing, implementing measures, and offering expert guidance to enhance our clients' operational resilience.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  \u2022  Conduct in-depth data analysis to identify trends, patterns, and insights that can inform client strategies and recommendations.  \u2022  Collaborate closely with clients to understand their business objectives and tailor data-driven solutions that address their specific needs.  \u2022  Create visually compelling and easy-to-understand data visualizations, dashboards, and reports to effectively communicate findings to both technical and non-technical stakeholders.  \u2022  Apply statistical techniques and predictive modeling to uncover correlations and forecast potential outcomes, enhancing the accuracy of strategic planning.  \u2022  Ensure the quality, accuracy, and reliability of data by conducting data cleaning, validation, and preprocessing procedures.  \u2022  Present analytical findings and recommendations to clients in a clear and concise manner, demonstrating the value of data-driven decision-making.  \u2022  Leverage cutting-edge analytics tools and technologies to optimize data analysis processes and streamline workflows.  \u2022  Collaborate with cross-functional teams to tackle complex business problems, utilizing your data expertise to drive innovative solutions.  \u2022  Stay up-to-date with the latest trends and advancements in data analytics, bringing new ideas and best practices to the team.  \u2022  Assist in project planning, timeline management, and resource allocation to ensure the successful execution of data analytics initiatives.  Qualifications  Bachelor's or Master's degree in a related field (e.g., Data Science, Statistics, Business Analytics). Proficiency in data analysis tools such as Python, R, or SQL. Experience with data visualization tools like Tableau, Power BI, or similar. Strong analytical thinking and problem-solving skills. Excellent communication and presentation abilities. Ability to work collaboratively in a team-oriented environment. Prior consulting or client-facing experience is a plus. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "\"Responsibilities Job Description Job Description  The Business Intelligence (BI) Developer is responsible for the design, creation, and maintenance of sustainable reporting solutions to support data-driven decisions by the client.  Drives significant analytic initiatives in support of business strategies.  Develops an understanding of business processes and operational tools in order to create meaningful reporting designs.  Responsible for the analysis of business data needs and develops the required data modeling.  Designs and develops creative and interactive data visualizations.  Partners with business leaders across the organization to support and implement high-quality, data-driven solutions.  Assists IT with collecting and storing operational data from source systems.  Stays current on all processes, techniques, tools, and industry best practices to ensure the client is at the forefront of Business Intelligence solutions.  REQUIRED QUALIFICATIONS  3-5 years of Business Intelligence experience  3-5 years of Data Analytics, Dashboarding, Reporting, or Analysis experience  Bachelor\u2019s Degree in Data Science, Business, or related field  JOB FUNCTIONS AND RESPONSIBILITIES  Partner with business leaders and SMEs to understand reporting and analytics needs within their functions.  Gather, document, and analyze business reporting and communications requirements from stakeholders  Map business requirements to source data structures and develop data models from data located within multiple data stores utilizing data solutions such as SQL or Snowflake  Design, build, and maintain dashboards visualizations using BI applications such as Tableau  Ensure dashboards are creatively designed and tell a story behind the data.  Analyze report data for accuracy and report on potential quality errors  Participate in peer review process to ensure all reports are accurate prior to distribution  Partner with business owners to prioritize projects to ensure the most important items are being successfully addressed.  Partner with IT to identify and store required data sets.  Provide ongoing analytics expertise and insights into data trends across the operational segments.  Lead and facilitate dashboard demonstration and educational sessions  Provide ad-hoc data analysis and support to business functions.  REQUIRED COMPETENCIES  Healthcare experience  Advanced skills in data applications such as Power BI, ETL, Tableau (some knowledge) and SQL (some knowledge)  Ability to display complex quantitative data in a simple, intuitive format to present findings in a clear manner  Creativity in designing data visualizations  Strong understanding of data structures that ease the generation of reliable data  Strong analytical skills with some moderate project management knowledge  Proficient Data mining and normalization skills  How to Apply:  If you are a results-driven professional with the qualifications and experience required for this role, we invite you to apply by responding to this portal or send your resume to careers@StoneLaurel.com with the subject line \"\"BI Developer.\"\" We look forward to welcoming a dedicated and strategic thinker to our team.  Company Description  StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "Data Analytics role", "In Addition, You  Have an entrepreneurial streak Are self-motivated and driven Just get things done Roll with the punches when the unexpected happens or if the team needs to pivot direction Are passionate Have strong report visualization and data design intuition Pay attention to user feedback Thrive in an environment of open feedback/brainstorming/sharing Are a team player and people like working with you Are intellectually curious and always wanting to learn more Interested in creating a culture driven by metrics and experimentation   The Business Intelligence Developer will Design, implement, and maintain Dashboards, visualizations, and supporting data analysis layers. Additionally, he/she will design and develop visualization solutions against data warehouses, data marts, and cubes. This position will coordinate with other team members and managers to translate business needs into technical solutions and provide technical assistance to users pulling data from our self-service environment. The Business Intelligence Developer will troubleshoot issues in cubes and database objects (procedures \u2013 as they relate to surfacing data) to identify and solve problems with data accuracy and performance.   Education/Licensing Requirements   High School Diploma or equivalent. Bachelor\u2019s degree in a computer-related field or equivalent experience. Master\u2019s degree in a computer-related field is a plus.   Experience Requirements   Minimum 5 years of experience in MS BI tools (SSRS, SSAS, Power BI)  5+ years of relevant experience in report development, data science, business analytics, business intelligence, or comparable data engineering role, including data warehousing and business intelligence tools, techniques, and technology Minimum of 2 years of experience in Power BI Knowledge of SQL to write complex, highly-optimized queries across large volumes of data Successful work experience in MS SQL programming, database design, data warehouse design, query performance tuning, and writing stored procedures. Knowledge of ETL and data warehouse concepts and processes Experience with Tableau or an equivalent reporting tool to create impactful reports, visualizations, and interactive dashboards Understanding of data models Creativity to determine the best solution for a real-world problem with quantitative data Experience supporting a multi-database environment. Excellent understanding of OLTP and OLAP systems. Knowledge of best practices and software development process   Essential Skills/Experience   Fluently speak, read, and write English. Good verbal and written communication skills. Proven ability to prioritize and multi-task. SQL programming, server integration, and reporting  Curiosity and passion for data, visualization, and solving problems Creativity to determine the best solution for a real-world problem with quantitative data Experience with reporting, descriptive statistics, probability, and cleaning big datasets Willingness to question the validity, accuracy of data, and assumptions Enjoyment from collaborating with others in a team environment Eagerness to learn in a fast-paced environment Knowledge of medical data a plus   Essential Characteristics   Self-directed and organized. Discrete/ability to maintain confidentiality. Team player. Detail-oriented. Sense of urgency. Customer service orientation. Drive and self-reliance Ability to work under pressure. Ability to work well independently. Ability to take direction.   Essential Job Responsibilities   Evaluate and monitor databases to resolve performance issues. Develop, deploy, maintain and debug SSIS packages. Develop, test, and maintain MS SQL Server databases. Work with Business Analysts to aid in the design of the system. Investigate and resolve problems of data accuracy and availability Participate in integral testing to identify problems early. Perform error and stress scenarios. Participate in design and code reviews. Identify architectural issues and propose alternative solutions. Install upgrades and patches to existing databases. Develop and maintain data warehouse documentation.   Additional Job Responsibilities   Maintains a neat, orderly work area.  Performs other incidental and related duties as required. Actively demonstrates teamwork at all times. Ability to work overtime.", "https://www.indeed.com/viewjob?jk=bbe2a3fe0476f181&tk=1h5a6oa4dh5hp801&from=serp&vjs=3  The Role  We are looking for an experienced and energetic leader to join the team as a Data Warehouse Specialist. As a Data Warehouse Specialist, you will play a critical role in developing data warehouses for our clients. You will be responsible for conducting assessments, developing strategies, and providing expert guidance to enhance their data governance.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  Collaborate with clients to understand their business requirements and design effective data warehouse solutions. Develop and implement data warehouse architecture, data models, schemas, and structures. Design and implement efficient Extract, Transform, and Load (ETL) processes to populate and update data warehouses. Ensure data quality and integrity by establishing appropriate data validation and cleansing procedures. Optimize data warehouse performance through indexing, partitioning, and other performance tuning techniques. Implement effective backup, recovery, and security measures for data warehouses. Evaluate existing data frameworks and identify opportunities for improvement. Conduct in-depth data analysis to identify data quality issues, inconsistencies, and gaps. Recommend and implement enhancements to data frameworks to meet client requirements. Collaborate with cross-functional teams to define data governance policies, standards, and best practices. Conduct regular audits to ensure compliance with data governance guidelines. Participate in project planning and scoping activities, providing technical expertise on data warehouse solutions. Demonstrate expertise in data modeling, dimensional modeling, and data warehouse design principles. Proficiently use SQL, ETL tools, and programming languages to extract, transform, and load data. Utilize data visualization tools to create meaningful reports and dashboards for clients. Stay up to date with the latest trends, tools, and technologies in data warehousing and business intelligence. Qualifications  Bachelor's degree in Computer Science, Information Systems, or a related field. Relevant certifications (e.g., AWS) are highly desirable. Proven experience working on data warehouse projects, including data modeling, ETL development, and performance optimization. Strong understanding of database concepts and proficiency in SQL. Experience with data warehousing tools and technologies (e.g., Snowflake, Amazon Redshift, Microsoft Azure SQL Data Warehouse) Proficiency in at least one ETL tool (e.g., Informatica, Talend, SSIS). Familiarity with data governance principles and best practices. Excellent problem-solving and analytical skills. Strong communication and interpersonal skills to effectively collaborate with clients and team members. Ability to manage multiple projects and prioritize tasks effectively. Professionalism and client-oriented mindset, with the ability to establish trust and maintain confidentiality. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "The Data Developer II will be responsible for developing, supporting, and enhancing database programs and reports using the SQL platform. This senior position typically handles projects of a more complex nature and serves as a resource to junior team members.  Key Responsibilities: \u00b7  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. \u00b7  Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. \u00b7  Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. \u00b7  Monitors database performance and tunes to maximize efficiency. \u00b7  Develops new and enhances existing database objects and packages to advance functionality and automation of systems.  Competencies Required: \u00b7  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. \u00b7  Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. \u00b7  Self-starter with the ability to work independently while supporting a team environment. \u00b7  Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. \u00b7  Flexibility to provide after hours and weekend support on occasion to support business needs. \u00b7  Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. \u00b7  Proficient with database performance monitoring and tuning to maximize efficiency. \u00b7  Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems. Qualifications   Minimum Qualifications/Experience: \u00b7  5-7 years\u2019 experience in a SQL Server development role required.    \u00b7  Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. \u00b7  2+ years of experience monitoring database performance and tuning to maximize efficiency required. \u00b7  SQL Server Integration and Reporting Services experience required.  Formal Education & Certification: \u00b7  High School Diploma or equivalent required. \u00b7  Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.  Work Status: \u00b7  Full-Time.  Supervisory Responsibility: \u00b7  None.  Travel: \u00b7  No travel expected.  Working Conditions: \u00b7  Conditions involve lifting no more than ten pounds, sitting most of the time, but may involve walking, moving, or standing for brief periods, and occasionally lifting and carrying articles like files, ledgers, folders, etc.", "5+ years SQL Development  Role Experience with SSIS and SSRS Looking for local to the Woodlands(greater Houston area).  Available for hybrid-remote work, but not looking to hire anyone remote that isn\u2019t local.  Basically if they are too far away that can\u2019t ask them to come into the office tomorrow, then they are too far away.  SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.   SQL Server Developer III Qualifications  Ideally 5- 7 years\u2019 experience in a SQL Server development role required. Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. 2+ years of experience monitoring database performance and tuning to maximize efficiency required. SQL Server Integration and Reporting Services experience required. High School Diploma or equivalent required. Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.", "Power BI Developer Position The Power BI Developer will be responsible for designing, developing, and maintaining interactive data visualizations and reports using the Power BI platform. To be successful in this role, the Power BI Developer will collaborate with stakeholders and business analysts to understand requirements and translate them into effective and visually appealing dashboards and reports. Your expertise in Power BI and data visualization will play a crucial role in helping our organization make informed decisions based on data-driven insights.", "Tableau Opportunity Hi Emmanuel,  I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak.  Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently.  Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Required Skills and Experience *  5-7 years of experience in a SQL Development role 3+ years of experience using SSIS/SSRS for automated data imports and hands-on report/parameter creation. 3+ years creating queries within Visual Studio Experience creating stored procedures and views within SQL in a work environment Experience working with Microsoft Server 2012 or newer .NET experience- C# or VB.NET ETL Development experience     Nice to Have Skills and Experience  Experience utilizing Healthcare Information Systems and Databases Bachelor's Degree in computer science or any related field     Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus) The annual base salary for this role ranges from $80,000 - $90,000. Starting pay will be based on several factors and commensurate with qualifications, experience, and work location.  Benefits/Perks:  Unlimited Paid Time Off Program Great benefit plans: Medical, Dental, Vision, FSA, Pre-tax Transit, Short Term Disability, Life Insurance, 401k AcronymCares Matching Gifts program for employee donations DE&I Employee Resource Groups", "Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis. With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables. Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS. Research and propose opportunities for data acquisition and new uses for existing data. Code, test, and document new or modified data systems to create robust and scalable applications for analytics. Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables. In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions. Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts. Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI. Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices. Collaborate with Quality Assurance team to ensure valid and proper deliverables. Support business decisions with ad-hoc analysis as needed. Participate in rotation of after-hours support. Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates. Research new technologies for implementation by the team for producing cutting-edge solutions. Cultivate business relationships with stakeholders. May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.", "ob Description:   BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.   Job Responsibilities   Managing the planning, scheduling and deployment of all hardware facilities and associated software for major or multiple sites. Trains, develops, and mentors staff by providing subject matter direction and guidance. Assigns, monitors, and reviews progress and accuracy of work.Provides staff management oversight including hiring, promoting, or making recommendations for staff.Conducts performance reviews and assessments, manages performance, engages in skills assessment, and promotes professional development of staff. Directing, motivating and developing staff, maximizing their individual contribution, professional growth and ability to function effectively with their colleagues as a team. Ensuring adherence to policies, plans, objectives, budgets and staffing allocations for the assigned site. Optimizes the utilization of resources and adheres to Departmental budgeting and fiscal responsibilities. Actively participates in project teams, manages and tracks project details, and provides leadership during periods of transition. Ensures compliance with corporate and industry standards, policies, procedures, and regulations.   Job Qualifications   Education   Bachelor's Degree in a Computer Sciences related field or equivalent work experience   Experience   5 years - Experience in Information Technology required   Skills\\Certifications   Knowledge of information technology concepts, methodology, terminology and standards. Demonstrated ability to interpret and translate technical and/or or complex concepts into information meaningful to project team members and/or business personnel. Strong interpersonal and organizational skills PC Skills required (Basic Microsoft Office and E-Mail) Adaptive to high pace and changing environment Must be able to communicate effectively with both technical and non-technical co-workers Must be willing to adjust schedule to perform maintenance and upgrades outside of business hours and be part of an on-call rotation.   Job Specific Requirements:    Working knowledge with regards to End User Experience (Business user experience) Prior experience with Agile is preferred.   Preferred Skills:   Number of Openings Available:   1   Worker Type:   Employee   Worker Sub-Type:   Employee   Company:   BCBST BlueCross BlueShield of Tennessee, Inc.   Applying for this job indicates your acknowledgement and understanding of the following statements:   BCBST is an Equal Opportunity employer (EEO), and all employees and applicants will be entitled to equal employment opportunities when employment decisions are made. BCBST will take affirmative action to recruit, hire, train and promote individuals in all job classifications without regard to race, religion, color, age, sex, national origin, citizenship, pregnancy, veteran status, sexual orientation, physical or mental disability, gender identity, or any other characteristic protected by applicable law.   Further information regarding BCBST's EEO Policies/Notices may be found by reviewing the following page:   BCBST's EEO Policies/Notices   BlueCross BlueShield of Tennessee is not accepting unsolicited assistance from search firms for this employment opportunity. All resumes submitted by search firms to any employee at BlueCross BlueShield of Tennessee via-email, the Internet or any other method without a valid, written Direct Placement Agreement in place for this position from BlueCross BlueShield of Tennessee HR/Talent Acquisition will not be considered. No fee will be paid in the event the applicant is hired by BlueCross BlueShield of Tennessee as a result of the referral or through other means.    All applicants will be advised that BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.", "Analyze and Define Raw Data Visualizing and developing BI solutions (Dashboards, Scorecards, Analytic reports) Implement best practices to ensure dashboard design consistency for the best user experience Design and test analytics platform code. Data Preparation (Predictive & Restrictive) Enhance and Streamline data collection process Custom Analysis Long term research and prediction Using statistical techniques, collect and analyse data from the clients internal databases and systems and convert it to actionable intelligence; Lead the design of comprehensive data, intelligence and value proposition tools; Identify and communicate trends within complex datasets to stakeholders across the business, including the top problems that need to be solved and how to solve them proactively; Use internal data analytics tools to develop data dashboards that can be accessed by corporate security partners and senior stakeholders on demand; Improve standard operating procedures (SOPs) for implementing databases and data collection systems Plan, research and draft a range of tailored reports to deliver actionable insight for internal clients, including periodic reports (monthly, quarterly, bi-annual, etc.) and bespoke briefs with minimal supervision; Maintain clear and coherent communication, both verbal and written, to understand data needs and report results; Display creative thinking and consulting skills Identify gaps in crucial data, information and intelligence, and submit plans to fill them; Conduct briefings as needed for a variety of levels of customers as requested (via phone, video conference, in-person briefing, or industry conference); Establish and maintain professional relationships with internal stakeholders across the client business", "Comprehend Greenhouse Gas regulatory requirements and translate them into business requirements and data objectives  Transform available data into actionable business intelligence to inform and recommend tactical and strategic Greenhouse Gas approaches  Use and manage existing date forecasting tools to generate GHG forecasts and actionable recommendations  Extend forecasting processes and methods to wider marketing and sales forecasting needs  Assimilate, aggregate, and query data to provide recommendations based on statistical analysis  Monitor data integrity and notify appropriate personnel of data impairments  Develop solutions for automating complex repeatable queries that normalize and cleanse data  Synthesize data into actionable content, and communicate findings back to the business  Become a subject matter expert on improving data, processes, and methodologies to identify inefficiencies and recommend improvements  Ensure that consistent documentation is developed and maintained to easily replicate and improve processes related to data and data analysis  Engage in creating quality metrics, reports, KPIs and Dashboards  Consult with business teams on project requirement gathering and communicating the appropriate selection, utilization, and interpretation of advanced statistical methodologies used in projects  Support GHG operational processes as needed  Effectively communicate and present to both technical and non-technical employees on advanced analytics", "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions. ESSENTIAL FUNCTIONS AND RESPONSIBILITIES Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned. SUPERVISORY RESPONSIBILITY Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management. QUALIFICATIONS Minimum Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems. REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.", "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com  Job Description  What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements.  Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed.", "DATA ENGINEER  In every office around the world, HH Global offers an entrepreneurial culture that sets ambitious goals and looks beyond the status quo.  At HH Global , we reward sharp, unconventional thinkers who are motivated to create their own success. Our winning culture draws from employees who step up to the challenge of solving tough problems and making a difference. We dream big, so our clients can dream bigger.  Responsibilities   Document new reporting features or bugs from both internal and external users   Coordinate testing of reports with users   Manage an accurate and visible task and project list and meet regularly for input on prioritization.   Analyzes data, identifies trends and outliers, and recommends solutions when appropriate.   Coordinate with team members overseas   Create and maintain system protocols by writing and updating procedures; this includes documentation and writing SQL stored procedures.   Generate standard or custom reports summarizing business, financial, or economic data for review by executives, managers, clients, and other stakeholders. This will involve using T-SQL, SSIS, SSRS, and other report writing tools.   Willingness to learn new reporting technologies such as Microsoft Power BI, Tableau, or Qlikview   Participate in physical and virtual meetings as required to facilitate functional requirement gathering and report development.   Maintain or update business intelligence tools, databases, dashboards, systems, or methods   Assist with project management activities by identifying project milestones, phases, and elements; tracking activities, resolving problems, and publishing progress reports.   Manage timely flow of business intelligence information to users.   Requirements   Must be legally authorized to work in the United States without needing current or future employer sponsorship.   Bachelor\u2019s degree in a business or technology related discipline   2 + Years work experience   Working knowledge of SQL   Microsoft Business Intelligence Suite (SSRS, SSIS, SSAS)   Experience with Azure cloud environment: Azure SQL Database, Azure Data Factory   Strong Microsoft Excel skills related to data analysis and manipulation   Proven ability to document and prioritize issues raised by others   Ability to prioritize tasks and directly support the department managers.   Good troubleshooting and error isolation skills.   Ability to work independently on assigned tasks as well as to accept direction on given assignments.   Must be able to interact and communicate with individuals at all levels of the organization.   Your resume will be reviewed by a member of our Recruiting team and we\u2019ll reach out to you directly if there\u2019s a fit. We\u2019re using video conferencing software (Microsoft Teams) to conduct our interviews, but all interviews will be live with a member of our Recruiting or Hiring teams.  Equal Employment Opportunity Employer: HH Global is an equal opportunity employer and all qualified applicants will receive consideration for employment without regard to race, color, religion, sex, national origin, disability status, protected veteran status, sexual orientation, gender, gender identity and gender expression, or any other characteristic protected by law.", "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions. The successful candidates will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.   Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. Degree in computer science, information systems, or related field or 10 years comparable experience in above PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. In addition to supporting extensions to the data warehouse design, this role will design and develop ETL required to onboard new types of business data. Finally, this role will also provide support for Analytics assignments as needed.  Responsibilities  Display sense of ownership over assigned work, requiring minimal direction and driving to completion in a sometimes fuzzy and uncharted environment. Designing and building new data pipelines that support business requirements. Work with IT and other business partners to support the evolution of the enterprise data architecture. Work with IT to build new ETLs to take data from various operational systems and extend existing data warehouse data model for analytics and reporting. Continually improve ongoing reporting and analysis processes, automating or simplifying self-service support for business constituents. Support the development of the company BI infrastructure, including the construction of scalable analytic solutions, and on-premises reporting tools. Utilize Power BI development to build scalable reporting models to serve BI reporting needs. Demonstrate the ability to gather requirements, extract and manipulate data residing in multiple disparate databases, and articulate solutions to support the business. Design, develop, and maintain performant data models in Power BI utilizing best practices. Serve as a subject matter expert for all data warehouse and enterprise systems Use new or existing technologies to produce analytics solutions (in the form of excel spreadsheets, dashboards, etc.). Work with IT and Analytics team to architect and build data pipelines to optimize for performance, data quality, scalability, ease of future development, and cost. Gather requirements, assess gaps and build roadmaps to help the analytics driven organization achieve its goals. Develop data-related Proof of Concepts in order to demonstrate feasibility and value to Symmetry business constituents. Qualifications / Requirements  Bachelor\u2019s degree in Information Systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+years\u2019 experience with advanced SQL concepts and writing SQL statements (SQL Server or similar). Prefer 2 years\u2019 experience with Microsoft BI Suite, PowerBI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Knowledge of the software development lifecycle, agile methodologies, and structured software development methodologies. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data At least 5 years of work experience", "\"Description: Leading with our people, Digital Consultants' mission is to deliver the highest level of professional solutions while being a trusted partner and advisor to our customers. With a culture of practicality, opportunity, and creativity we remain dedicated to being honest, trustworthy, respectful, and ethical in everything we do. We are a certified SBA 8(a) small-disadvantaged business that supports multiple IT customers within the Federal, civilian, and private sectors. Digital Consultants also offers our employees growth opportunities, competitive wages, and a full benefits package. Our founding principles, Fairness and Common Sense make working here more than a job, it is the Digital family.  Digital Consultants is seeking a Power BI Reports Developer to join our team! As the Power BI Reports Developer, you will be designing ETL processes and working directly with developers, testers, and other roles active to translate product roadmap features into well-defined product requirements including features, user stories, and acceptance test criteria.  Duties to include:  Maintain and support data analytics platforms Develop and update relevant technical documentation Collaborate directly with analysts and end users to integrate systems and create effective reports Develop and execute database queries and conduct analyses as needed Maintain status updates for all assigned ad hoc report requests Knowledge of SQL queries, SQL Server Reporting Services (SSRS), and MS SQL Server An expert that understands the Power BI platform and its tools very well. Takes complete responsibility for the development and administration of BI tools including transforming raw data into valuable and meaningful insights in the form of appealing dashboards and reports. Recreating existing reports from the current platform into Power BI.\"\" Build complex dimensional data models and reports from the bottom up Audit existing Power BI efforts with a focus on improvement Visualize compelling data stories on the report canvas Produce KPIs with user-friendly display dashboards Collaborate with client's data team Familiarity with data warehouse design (e.g. dimensional modeling) and data mining Requirements: Active DOD Secret Clearance IAT level II Certification: GSEC", "Competencies  Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience  3+ years\u2019 experience with Integration Services (SSIS)  5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions  Technical documentation skills Self-motivated and directed, with keen attention to detail  Experience with data management Good written and oral communications   Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data  Create ETL processes to load database structures  Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed Position Requirements  Education and Certifications Required \u2022\tBachelor\u2019s Degree in Business Analytics, Management Information Systems or, Business Computer Information Systems \u2022\tCBIP Certification a Plus Experience Required \u2022\t5 + years as a Business Intelligence Analyst, Business Analyst, Systems Support Analyst or Application Support Analyst \u2022\tExperience in Power BI developing reports and dashboards \u2022\tExperience in Business Objects Designer for creating and maintaining universes, WEBI, Derived tables, @functions and schemas \u2022\tUse of Business Objects to access data from a variety of sources \u2022\tPrior business systems analysis experience \u2022\tDrive RCA (root cause analysis) activities \u2022\tWorking experience in server and PC environments and skilled in navigating in a distributed server architecture Experience Preferred \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.", "What you\u2019ll do as the BI Analyst:   Help elevate the Operations and Technology teams by diving deep into data, exploring opportunities for gaining insight and extracting value from the data, and finally, contributing actively to the dashboarding and reporting needs within the company. Act as SME for Snapsheet\u2019s analysis data model, supporting customers and in-house users in finding the information they need for reporting. Collaborate with development and product to provide schema modeling recommendations  Assist in validating launch data from new product releases  Build and maintain documentation on the products you\u2019re building   What we are looking for in a BI Analyst: B.S. or higher degree in related fields 4+ years of experience as a BI analyst (or related role) Proficiency in leveraging SQL to build reports  Experience in building, maintaining, and managing reports & dashboards using data visualization tools (i.e. Tableau, Qlik, Sisense) Self-starter mentality  Nice to haves: Previous experience with AI or ML is a plus  Previous experience pulling metrics or analytics for an operations department/organization", "Kelsey-Seybold Clinic, a Houston tradition in patient-centered care, is a multispecialty clinic with 40+ locations and comprises more than 700 physicians providing primary and specialty care collaboratively.  With more than 65 different clinical and non-clinical specialties, you can design a career path at Kelsey-Seybold Clinic to grow your future in a new direction.  Works collaboratively as a senior member of the Business Intelligence & Reporting team under the direction of KSC Application Technology Leadership. Supports, develops, and maintains SQL database environments and related technology. Acts as a team member on multi-team projects and uses advanced skill sets to develop, test, troubleshoot, and support database-related projects and associated solutions/applications. Acts as a mentor to others learning essential and advanced SQL-related skills.  Requirements include:  Bachelor\u2019s degree in a technical area or equivalent work experience 6 years experience in SQL database administration Flexibility and the ability to adapt to change. Proven communication, presentation, analytical, problem-solving, technical, and writing skills. MS SQL Server Administration MS SQL Transact SQL Programming (T-SQL) MS SQL Data Transformation Services (DTS) and SQL Server Integration Services (SSIS) programming. Performance Tuning of Hardware & MS SQL Server. MS SQL Server Analysis Services (SSAS) MS SQL Server Reporting Services (SSRS) Demonstrates an advanced understanding of the following: Database modeling/normalization Indexing strategies and maintenance Backup and recovery models Clustering and high availability Preferences include:  MCDBA MCTS MCITP Vendor Certified SQL Administrator Other database-related certification/s Why Kelsey-Seybold Clinic?  Medical, Vision, and Dental Tuition Reimbursement Company Matching 401K Employee Reward and Recognition Program Paid time off for vacation, sick, and holidays Employee Assistance Program Continuing Medical Education allowance If you want a satisfying career and a rich, rewarding personal life, don t choose between them.  Achieve them both at Kelsey-Seybold Clinic.  Kelsey-Seybold Clinic strives to provide equal opportunity employment without regard to race, color, religion, age, national origin, sex, gender, sexual orientation, gender identity/expression, genetic information, disability, veteran status, or any other basis protected by organizational policy or by federal, state, or local laws unless such distinction is required by law. Kelsey-Seybold is a VEVRAA Federal Contractor and desires priority referrals of protected veterans.  Job Type: Full-time  Pay: $110,090.00 - $136,995.00 per year  Benefits:  401(k) Dental insurance Flexible schedule Health insurance Life insurance Paid time off Professional development assistance Retirement plan Tuition reimbursement Vision insurance Schedule:  Monday to Friday Education:  Bachelor's (Preferred) Experience:  Database administration: 6 years (Preferred) Microsoft SQL Server: 6 years (Preferred) License/Certification:  Texas Driver's license (Preferred) Work Location: In person", "Proven experience as a BI Developer with expertise in Tableau, SQL, and Tableau Prep. Strong proficiency in SQL for data manipulation and analysis. Experience in designing and developing interactive dashboards and reports using Tableau. Proficiency in at least one programming language like R, Python, or PostgreSQL.", "Key Responsibilities: - Troubleshoot and tune existing Data Warehouse, Dashboards and Reporting systems - Write and modify SSRS and Power BI reports - Design and improve current ETL processes - Maintain Azure Devops Pipelines - Create and update Power BI Data Models - Own and develop relationships with end-users, working with them to optimize and enhance existing reports and integrations - Help design, document and maintain system processes - Improve systems by studying current practices and designing modifications. - Recommend controls by identifying problems and writing improved procedures. - Maintain professional and technical knowledge by attending educational workshops; reviewing professional publications; establishing personal networks; benchmarking state-of-the-art practices Requirements \uf0b7 Bachelor\u2019s degree in Computer Science, Business or Information Science. \uf0b7 Minimum of 5 to 10 years of experience in the field or in a related area. \uf0b7 Experience with Microsoft SQL Server 2008 onwards, Transact-SQL, and Business Intelligence Development Studio (SSAS, SSIS, SSRS, Visual Studio). \uf0b7 Power BI Experience \uf0b7 Knowledge in Azure Data Factory and Pipelines \uf0b7 Familiarity with Essbase and MDX scripts a plus \uf0b7 Operational Data Warehouse experience \uf0b7 Must demonstrate basic knowledge or expertise in the following technology disciplines: Servers, Desktop/Laptop/Workstation Computing, Networking, Security, Programming, and/or IT Operations \uf0b7 Able to read, write and speak English fluently. \uf0b7 Proficient in Microsoft Office Suite (Outlook, Word, Excel, Access and PowerPoint) required. \uf0b7 Detail oriented and ability to work in a team setting. \uf0b7 Ability to be a self-starter and resolve issues with minimal supervision. \uf0b7 Maintains a positive attitude \uf0b7 Ability to handle multiple projects, prioritize tasks, and exercise good judgment. \uf0b7 Good customer skills \uf0b7 Willing to learn new systems and technology", "Title: Senior Report Developer Location: Remote - Anywhere USA As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company. This position will focus on delivery of solutions inside our Data Management/Analytics business unit. Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.", "Requirements  Bachelor\u2019s Degree desired in Computer Science, Information Technology, or related field Minimum of 5 years of experience with database design and Architecture, at least 2 years with Azure technologies, and previous Consulting experience Expert knowledge of Data Management, Business Intelligence and Analytics concepts including: Data Movement (ETL/ELT) Data Warehousing (Designing and Implementing, Azure SQL, Synapse) Azure Storage Technologies (Data Lake, Blob Storage) Data Governance (including Data Quality and Profiling, Master Data Management, and Metadata Management) Business Intelligence, including Reporting and Visualizations (Key Performance Indicators (KPI), and Scorecards) Predictive, Prescription, and Descriptive Analytics Expert knowledge of Microsoft Azure technologies: SQL Server on premises plus cloud supported versions) Azure Data Factory (including ARM templates) Azure Synapse, Cosmos DB Azure Data Lake/Azure Blob Storage Power BI for reporting and analytics Databricks Azure DevOps (including building Stories and tasks, and using development pipelines and ARM templates for publishing code) Eagerness to contribute in a team-oriented environment Excellent communication (written and oral) and interpersonal skills for both technical and non-technical teams Passionate about learning new technologies Analytical approach to problem-solving; ability to use technology to solve business problems Ability to work in a fast-paced environment   Additional Preferred Experience:  Analytics and Data Science tools, technologies, and techniques (R, Python, algorithms, Azure ML Studio/Services) Custom Visualizations in Microsoft Power BI using D3 and jQuery Azure Infrastructure architecture and design Knowledge and experience using Azure DevOps for source control, project deployment and project management", "Power BI Developer Hybrid Remote - 3x per week onsite Based in Rosemont IL Direct hire   At Medix, we are dedicated to creating opportunities for talent in Information Technology. Our dedicated recruiters offer a personalized service to make sure we truly understand your employment needs. We are currently seeking a hybrid remote Power BI Developer with one of our technology clients due growth. This is a direct hire opportunity. Partner with Medix, and you will experience the multiple benefits our company has to offer. We will hold a personal consultation with you to understand your skills and aspirations! Our placement services provide flexibility to accommodate your schedule and needs. We offer competitive compensation packages including full health, dental and vision insurance, 401k and PTO.  Power BI Developer  Job Responsibilities: Reports development Working with Power BI and other individuals across the data team to assist in the pulling of data from SQL and creating visualizations and dashboard for their application and software They will have a smaller team they meet with, but for the most part they will be operating on their own Need to have strong analytical skills and be able to adapt quickly Develop operational reports Build automated reports and dashboards with the help of Power BI and other reporting tools Understand business requirements to set functional specifications for reporting applications Be experienced in tools and systems on MS SQL Server BI Stack, including SSRS and TSQL, Power Query, MDX, PowerBI, and DAX Be able to quickly shape data into reporting and analytics solutions   Power BI Developer  Requirements:  As an Power BI Developer, this individual must be highly motivated, able to multitask and able to work in a fast paced IT environment. Qualified candidates must be able to self direct while working with others.  Other requirements of the role include:  4 years of Power BI experience (including dashboard creation and supporting end users on their visualization needs) Strong SQL experience  Strong understanding of BI functions and tools including SSRS, Power Query, and DAX Any fundamental database knowledge and relational database design  SSIS and SSRS knowledge", "Job Description Summary:  The Business Intelligence Developer is responsible for developing, implementing and supporting reporting and business intelligence solutions to meet the information needs of the organization. The Business Intelligence Developer supports one or more business units in preparing analysis and reporting to drive the business while ensuring accuracy and consistency. Must be able to work with multiple teams and business units simultaneously and thrive in fast-paced, dynamic environment. Must demonstrate the eagerness and ability to learn and must work well in a team environment.   Competencies   Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience 3+ years\u2019 experience with Integration Services (SSIS) 5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions Technical documentation skills Self-motivated and directed, with keen attention to detail Experience with data management Good written and oral communications  Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data Create ETL processes to load database structures Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Apeiron Sumus is looking for a Solution Assessment Consultant to join our team in United States. This person will lead the successful execution of a variety of projects from start to finish.  The ideal candidate is a self-starter with excellent time-management and problem-solving abilities who thrives in fast-paced environments. Someone with high energy, a curiosity about the industry, and tenacity and has previous Microsoft Technology sales experience. This person will bring new ideas, have a deep passion for the role and create ways to attain new accounts.  Responsibilities:  Assessment Implementation -\u202fTrusted advisor to consult on effective plan deployment and new opportunity developments. Able to qualify solution assessment opportunities, handover to Technical team for execution and position partners in the overall sales process.  Customer Engagement - Receives the nomination and engagement with the customer may begin through contact to secure acceptance of the Letter of Engagement and orchestrates project delivery under a remote assistance model.  Orchestrate Assessment process - Manage and execute the activities required to perform a Solution Assessment in each account. Starts the data collection phase, executed under a tele-assisted model that includes remote installation, configuration, and execution of discovery tools, data collection, troubleshooting, data analysis, and the creation of the deliverable for the Solution Assessment.  Report Information and Migration Handover - Shares and fine tunes the report information with Microsoft Team and Designated Migration Partner prior to presenting the team\u2019s Insights & Recommendations to the customer. Hand-offs the Assessment to a designated Migration Partner and Microsoft Field Team to act on the Migration Plan and Drive Consumption.  Partner and Supplier Relationship Management - Recommends Solution Assessment Partner (in case of partner delivered assessments) and coordinates end-to-end engagement with Partner  Professional and Technical competencies:  Hands-on experience with multiple sales techniques  Experience with Microsoft Office and CRM software  Familiarity with MS Cloud and PowerBI  Understanding of sales performance metrics Strong written and verbal communication skills  Attention to detail, data analysis, and analytical skills  Integrate consulting on Microsoft solutions and offerings in support of organizations\u2019 business needs Work with IT systems in support of collecting data  Self-Direction and a focus on quality, apply independent judgment to accomplish objectives   Desirable Certifications:  Microsoft Certified | Azure Fundamentals | AZ-900 Microsoft 365 Certified | Fundamentals | MS-900 Microsoft Certified | Dynamics 365 Fundamentals (CRM) | MB-910  Personal Profile:  Required languages: English Educational level: Bachelor\u2019s degree Special conditions or requirements: Open to work on a global environment with different cultures and languages This is a remote position", "Tableau Opportunity Hi Emmanuel, I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak. Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently. Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Job Description The Power BI / SSRS Developer\u2019s primary responsibility is to design, create and/or support data reporting systems and solutions for the Symmetry Lending organization. Systems include but are not limited to loan originations system, loan servicing system, data warehouse, company intranet, homegrown automation applications, and various partner interfaces. Additional responsibilities include analysis, design, and maintenance of departmental, financial, investor and regulatory reports. Qualifications / Requirements Experience working in the financial industry, ideally banking, lending, or similar as a Power BI and SSRS. Experience as a business analyst or quality assurance analyst is a major plus. 5+ years database design and development experience with MS SQL server technologies (SSRS and SSMS) with Data transformation / ETL and Power Query engine experience. 4+ years' experience with Power BI Desktop, Power Query, DAX (Data Analysis Expressions) language, data modeling, and visualizations. Strong analytical and data modeling skills with the ability to gather and analyze data from various sources, design effective data models, and create relationships between different data tables. Strong understanding of visualization with the ability to create compelling and interactive visualizations with an eye for design. A deep understanding of best practices for creating meaningful charts and graphs, and the ability to effectively communicate data insights to stakeholders. Collaborate with other analysts and developers to integrate Power BI solutions with other data sources and applications. Collaborate with key stakeholders across the organization to identify business requirements for reporting, dashboards, and visualizations. Experience writing complex and optimized SQL queries. Experience with SDLC and Agile processes. Strong verbal, written, and technical analysis skills. Responsibilities Work closely with business users and stakeholders to analyze and define business requirements. Create and provide time sensitive ad-hoc report/data requests. Participate in defining and adhering to best practices, standards and procedures as defined by Symmetry IT. Work closely with Quality Assurance to ensure accurate and compliant data implementations. Create various document artifacts including business requirements and technical design documents. Comply with company policies and procedures, security and regulatory requirements, and investor guidelines. Ensures all applicable internal NPI policies and procedures are followed, and confidentiality of borrower information is maintained. Any combination of following are strong pluses but not strictly required: You have a solid foundation in data analysis and an attention to detail which you use to understand business requirements and translate them into effective report designs. Your strong analytical skills will help you identify trends, patterns, and insights from the data. You have data warehouse design and/or some software development experience. You have a good understanding of data visualization principles and the ability to present data in a meaningful way. You are a continuous learner with a willingness to learn and stay updated with the latest trends, tools, and best practices.", "As a Business Solution Architect, you will\u2026 lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design. Lead the Functional team. Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "EKN Engineering is a fast-growing civil engineering and technology consulting company located in Irvine, CA. We are looking for a Data Analyst II to join us on our quest to further invent and innovate.  As a Data Analyst II, you will liaise with both internal and external stakeholders to anticipate their needs and help foster a data-led culture. You should be able to work with both technical and non-technical teams to define and measure key business metrics and use them in insightful reports. The successful candidate will turn data into information, information into insight, and insight into business decisions.  Responsibilities  Interpret data, analyze results, and identify opportunities for new reporting. Validate data by continually reviewing both reports and data sources for accuracy and consistency. Create and maintain reports and dashboards in Microsoft Excel and Power BI. Administer and improve the data management system, including deployment pipelines. Establish KPI's to measure the effectiveness of business decisions. Create presentations and reports based on recommendations and findings. Work with management to prioritize business and information needs. Requirements  Proficiency with Microsoft Excel. Intermediate-level proficiency using SQL or similar query language. Exceptional problem-solving, technical, and analytical skills. Bachelors' degree in Data Analytics, Mathematics, Statistics, or related field. Experience with Microsoft Power BI or Tableau or similar data visualization software. Competence managing various aspects of a data pipeline, including data validation, data management, data analysis and data visualization. &nbsp;", "SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.", "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.   This position is remote. We are unable to offer work sponsorship for this role.    We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.   Your impact:   Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company\u2019s product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform.", "Title: Senior Report Developer  Location: Remote - Anywhere USA  As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company.  This position will focus on delivery of solutions inside our Data Management/Analytics business unit.  Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Overview: Supports the mission of People's Community Clinic to provide high quality care, by championing and supporting a robust health analytics program.  The starting salary rate for this position is $65,000 - $75,000 annually. Responsibilities: Identifies and implements informatics strategies to support patient outcomes, professional practice and organizational performance. Continuously collects, analyzes, and reports data to end users, including clinicians and administrative staff, through one-time project-based work and by developing tools and systems to support end users\u2019 ongoing needs for data-driven decision making Trains clinical staff on the integrated use of analytics to create sustained progress toward a culture of quality improvement. Provides critical analysis and evaluation of health IT and recommends revision of clinical systems, processes, and workflow to ensure achievement of positive patient outcomes. Serves as the liaison for health IT efforts representing clinician needs. Incorporates clinical research and evidence-based clinical knowledge into informatics program and platform. Collaborate with clinical and IT team members to ensure the effectiveness of technologies and workflows that impact clinical users. Applies human factors and ergonomics to the design of systems and devices. Provides project management oversight of data improvement initiatives. Adheres to HIPAA guidelines. Qualifications: Education: High school diploma or GED. Bachelor\u2019s or other advanced degree in Healthcare Informatics, Nursing, Public Health, or related field preferred. Experience: Two years\u2019 experience working with data, preferably in a healthcare setting. Experience participating in quality improvement and quality assurance efforts preferred. Experience in using a database programming language such as SQL preferred. Experience in statistical programming language such as R or SPSS preferred.  Knowledge, Skills, and Abilities: Strong analytic ability, including problem identification and resolution. Familiarity with EHR and EHR analytics preferred. Strong knowledge of Excel. Ability to work effectively with people of diverse background and varying levels of computer and data expertise. Excellent written and oral communication skills. Ability to work independently with minimal supervision. Able to lead cross-functional teams and influence without direct supervisory authority. Ability to meet deadlines.  Certificate/License: None Required. RN license preferred.  Our Benefits Include: 18 PTO days per year & 11 paid holidays Major Medical Health Insurance Coverage. Most employees experience $0 in out-of-pocket medical expenses. Dental & Vision Flexible Spending Accounts Employer paid Life Insurance Employer paid Short-Term and Long-Term Disability Annual Training 403(b) with 4% employer matching", "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995. Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel! About The Opportunity Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry. You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. Key Responsibilities Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs. Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner. Experience & Qualifications Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field. Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. Solid experience in SQL and working with relational databases. Excellent analytical skills with the ability to dissect large amounts of data. Strong communication skills and the ability to effectively convey complex information. Experience in the corporate travel industry is a plus.", "Designing and maintaining SQL Server Database architecture as well as ensuring their optimal performance, availability, and security. Optimizing SQL Server Database performance, including query tuning, indexing, and statics maintenance. Creating complex parameterized (declare) T-SQL script, as well as using T-SQ: scripts and queries for business intelligence reporting. Writing optimized complex SQL queries for integration with other applications. Performing multipart sub-queries and joining the table indexing and maintenance (clustered and non-clustered). Creating user defined functions, views, and stored procedures. Working with intricate recursive queries, i.e., Common table expressions (CTE), table variables. Developing, configuring, and deploying SSIS packages. Implementing and enforcing database security measures, including access controls, encryption, auditing, updating, merging, deleting, and inserting the databases. Creating and using stored procedures and creating over clauses with or without partitioning. Effective partnership with development teams to design data management and governance protocols, manage the information lifecycle, design infrastructure, and data integration controls.", "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.  Key Responsibilities:  Data Visualization Design: Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques. Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels. Data Analysis and Insight Generation: Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization. Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization. Data Quality and Governance: Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams. Implement data quality checks and validation processes to maintain the integrity of visualized data. Stakeholder Management and Collaboration: Engage with various departments and business leaders to gather requirements and understand their data needs. Collaborate with stakeholders to refine visualization designs and align them with business objectives. Data Strategy and Technology: Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities. Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.", "The team members in our stores are made up of different backgrounds, experiences, and perspectives, all with something special to contribute. Our Rethink Reuse business model of purchasing, reselling and recycling gives the community a smart way to shop and keeps 700 million pounds of used goods from landfills each year.  We also help more than 100 non-profit organizations by purchasing donated goods from them, which provides a source of revenue to help support their vital community programs and services.", "Primarily responsible for the data warehouse ETL framework and architecture Partner and align with business leaders and stakeholders to understand the business needs and address them using the many variations of visualizers PowerBI has to offer Provide training, guidance, and support to users Build & modify a solid data infrastructure, to include underpinning enterprise scale BI analytics / reporting platform, add / create new data models and integrate new data as needed Monitor analytics and metrics results Interact with internal clients to evaluate performance, availability and to collaborate on ways to improve the platform / reporting data Identify and act upon data infrastructure needs, data warehouse design, infrastructure maintenance and investment areas Manage infrastructure projects from beginning to end, including ideation, execution, socialization, and stakeholder management Ensure data integrity and compliance with any and all data security policies Translate business requirements into technical documentation Debug, monitor and troubleshoot BI Solution in development and production environments Conduct and participate in code walkthroughs and document technical design Follow the release cycles and implement on-time delivery of bug fixes, change requests and enhancements Other Duties as assigned", "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices.", "Job Description  This person will be responsible for maintaining the quality and direction of data solutions in support of our Finance team.  The role requires knowledge of database development tools and services, with an emphasis on SSAS.  Qualifications  Experience Required: 7 \u2013 10 Years Education Required: Bachelors Degree Minimum seven (7+) years experience in a multi-disciplined IT environment with strong expertise in data analysis, data modeling, data governance and involvement in enterprise architecture Minimum of five (5+) years experience, hands-on, data profiling and performance tuning databases and data marts with Oracle and / or SQL Server Experience with performance improvement using Azure and/or on-premise Microsoft technologies Experience taking a leading role in architecting, designing and developing solutions exceeding business expectations Knowledge of interpreting business processes and requirements and translating them into logical and physical data models adhering to documented standards and best practices Excellent problem solving and communication skills with experience in interacting with business and technical teams at all levels Responsibilities  This person will be ultimately responsible for performing the data analysis and profiling necessary to provide direction, standards, and implementation of data management solutions associated with data ingestion, transformation, integration, and analytics Engage in full stack Microsoft BI development activities to deploy usable and measurable projects meeting business needs leveraging tools such as SSIS, SSAS, stored procedures and Power BI Write complex Stored procedures to harmonize data sets for reporting Setup dimensional/tabular data models Setup and deploy row/object level security Develop and publish Power BI reports Provide input and implement solutions to drive the continuous improvement of the development and support teams Participate in data integration, business intelligence (BI), and enterprise information management programs by rationalizing data processing to support reuse", "Role Summary  This role\u2019s objectives are to develop reports in Power BI that meet our clients\u2019 expectations. We anticipate this will require consequential expertise in working with Power BI, which includes DAX programming.   Duties and Responsibilities  Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.    Qualifications and Skills  Demonstrable expertise in working with Power BI, including DAX programming. Please note that having experience is insufficient. Succeeding in this role requires demonstrable expertise building sophisticated Power BI dashboards and interfaces.  Experience successfully engaging with clients to develop user-facing reports. Excellent verbal and written communication skills. Experience with other BI tools, notably Tableau, is strongly desired, but not required.    Why Abett?   Opportunity to join a high-growth, venture backed software company, with a clear and important mission.  Competitive market salary and equity options. Flexible hours/scheduling. Work remotely. Fully paid health, dental and vision benefits available. Unlimited PTO.", "POSITION: POWER BI DEVELOPER/ANALYST \u2013 W2 ONLY LOCATION: REMOTE TYPE: DIRECT HIRE Are you a problem-solver with a passion for data analysis and visualization? Our direct client, a leader in the global travel industry including being well known in global travel analytics, is seeking a Business Intelligence (BI) Developer/Analyst to join their leading-edge team. In this role, you&#39;ll bring your expert Power BI development skills, data analytics, SQL knowledge, and understanding of relational databases, working with valued clients in the corporate travel industry. You&#39;ll be at the forefront of their analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for their client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. This is also a great opportunity to work for a Microsoft Power BI Partner! Responsibilities: \uf0b7 Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client&#39;s needs. \uf0b7 Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. \uf0b7 SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. \uf0b7 Client Relationship Management: Work directly with a specific, valued main client, understanding their needs, and presenting your findings in a clear and persuasive manner. Qualifications: \uf0b7 Bachelor&#39;s Degree in Information Systems, Computer Science, Business Administration, or a related field. \uf0b7 Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. \uf0b7 Solid experience in SQL and working with relational databases. \uf0b7 Excellent analytical skills with the ability to dissect large amounts of data. \uf0b7 Strong communication skills and the ability to effectively convey complex information. \uf0b7 Experience in the corporate travel industry is a plus.", "Expected they will be able to:  \u2022\tCreating and developing actionable interactive reports and dashboards using statistical and business intelligence tools such as PowerBI \u2022\tConducting exploratory data analysis to identify areas for improvement and generate insights into products and services \u2022\tConsulting with stakeholders using human centered design approaches to understand the need for data products and to identify a potential solution. \u2022\tTranslating customer requirements for data products (datasets, reports, dashboards) into data solutions; creating calculated measures, columns, relationships, etc \u2022\tAnalyzing source systems and designing new data structures for high-volume, complex data. \u2022\tAccessing, transforming, cleansing, and testing data products using programming languages such as M, DAX, Python, R, and SQL. \u2022\tDesigning data visualization strategies that make large or complex datasets more understandable, accessible, and usable. \u2022\tDeveloping wireframes or prototypes of potential user experiences to share with stakeholder to collect feedback. \u2022\tCommunicating (orally and in written form) analytical results displayed through data visualizations to diverse stakeholder groups. General requirements:  \u2022\tTier 4-High Risk Public Trust Clearance \u2022\tIdeally 5 years of experience using business intelligence tools e.g. Power BI, to develop interactive data visualizations and reports. \u2022\tExperience using languages (e.g. DAX, M, Python, R, SQL) to structure and analyze data. \u2022\tKnowledge of data architecture and modelling, including relational databases.", "Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Responsibilities:  Collaborate with cross-functional teams to understand business requirements and translate them into technical solutions. Design, develop, and optimize database systems, ETL processes, and data models for efficient data storage and retrieval. Create interactive and insightful Tableau dashboards and reports to enable data visualization and analysis. Write and optimize complex SQL queries to extract and transform data for use in Tableau Troubleshoot issues related to data, databases, and Tableau reports. Provide support and mentorship to junior team members. Stay updated on emerging technologies, tools, and best practices in the field.    Required Skills:  Masters or bachelor in computer technology or related field  4 years of professional experience in back-end software development with a strong focus on Tableau and database management. A strong understanding of databases is crucial. This includes knowledge of relational database systems like MySQL, PostgreSQL, or Microsoft SQL Server, as well as NoSQL databases like MongoDB. Proficiency in writing and optimizing SQL queries for data retrieval and manipulation. Knowledge of complex joins, subqueries, and indexing is important. Ability to design and implement ETL processes to extract, transform, and load data from various sources into a database for analysis in Tableau. Understanding the business context and how data analysis and reporting contribute to business goals is important for creating relevant Tableau dashboards. Experience Utilizing: JIRA, ZEPHYR, Microsoft Word, PowerPoint, Excel, Teams, Share point. Strong communication skills    Desired Skills  Additional Key Information  Work must be performed from a US location and engaged resource must be video capable during work hours in the eastern US time zone. This position is on a long term/multi-year contract that includes the possibility for yearly performance-based bonuses. This should be a W-2 hire.", "With minimal supervision, completes the technical design, build, testing, and documentation of Power BI reports based on on-premises and SaaS data sources. The role is within a large and complex ERP implementation project and will primarily support the PMO in creating reporting solutions for project KPI tracking as well as data analysis and validation to support project activities.  * Education:-  bachelor\u2019s degree or equivalent experience is required  * Experience:- Minimum of four (4) to six (6) years of progressive, relevant information technology experience", "Insight Global is looking for a junior data integration engineer to join one of our clients in Midlothian VA. The role is hybrid on-site, 3 days per week. The engineer will be apart of the business systems solutions team. The ideal candidate would be responsible for coordinating and processing requests for SQL data integration work, validate requirements, identify system needs, recommend solutions, and work with other team members to develop end to end solutions.  This candidate would work with business lines and the data team to identify data sources, create data flow diagrams and document the processes.  Additional Responsibilities Include:  -Develop complex data structures and workflows to support processes utilizing MS SQL, custom integration tools and other resources.  -Stay informed of ways the organization uses data and makes recommendations as needed to improve efficiencies.  -Monitors and troubleshoot jobs and data issues.  -Coordinate integration changes as source systems are modified.", "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL  Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995.  Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel!  About The Opportunity  Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry.  You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies.  Key Responsibilities  Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs.  Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations.  SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives.  Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner.  Experience & Qualifications  Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field.  Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI.  Solid experience in SQL and working with relational databases.  Excellent analytical skills with the ability to dissect large amounts of data.  Strong communication skills and the ability to effectively convey complex information.  Experience in the corporate travel industry is a plus.", "Must-haves   - 5+ years of experience developing ETL database in a SQL Server Environment  - Strong knowledge of Data Warehousing methodology and ETL best practices  - Experience with SSIS and SSAS  - .Net experience (doing translations and storing them for later use)  - Database experience - knowing what is dirty data, how to move data, clustered and non-clustered indexing  - .Net experience (doing translations and storing them for later use). - Strong communication (verbal & written) - being able to communicate issues in a timely manner - API experience   Plusses   - DBA background  - OLAP cube development  - HTML experience - Power BI experience   Day-to-Day  Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.  This role is hybrid (up to 2-3 days onsite on some weeks) and a typical work week is Monday-Friday, 8am-5pm.", "Develop and maintain databases by acquiring data from primary and secondary sources. Build scripts and implement tools that will make the data evaluation process more flexible or scalable across datasets and platforms. Escalate and manage internal and external incident tickets through company\u2019s ticketing system. Work closely with project managers to understand and maintain focus on their analytics needs, including critical metrics and KPIs, and deliver actionable insights to relevant decision-makers. Provide after-hours or weekend support when necessary to perform high-risk or planned downtime of IT systems for upgrades and maintenance. Evaluate internal systems for efficiency, problems, and inaccuracies, and develop and maintain protocols for handling, processing, and cleaning data. Assist with the creation, deployment and maintenance of new datasets and reports that can be used to review and improve company goals across departments.", "Position Summary  Reasons you will want this position:  Cedar Gate Technologies is a rapidly growing company with limitless career growth and advancement for top performers Our culture appreciates and rewards creative ideas, especially those that achieve better outcomes for everyone Interact regularly with our executives and senior leadership. Gain valuable work experience with the leader in healthcare technology for value-based care Work in a highly productive environment with a Remote Hybrid work schedule, including a focus on work-life balance. Summary  Cedar Gate Technologies is looking to hire a hard-working and organized Senior BI Developer to be responsible for the upkeep and development of reports and dashboards to support business performance monitoring and decision-making. In this role, you will build and maintain designs for generating reports on financial and market intelligence, collaborate with internal department leaders and global resources to understand business needs, and successfully communicate project results and challenges. You will be part of a talented team that demonstrates superb technical competency, delivering mission-critical reporting infrastructure and ensuring the highest levels of performance and security.   Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.  Job Location: Hybrid Remote in our office in Houston, TX, but also considering Fully Remote within the USA   Required Experience / Qualifications  5 years of experience performing SQL-based data analysis 2 years of experience building friendly end-user reports and dashboards in SSRS, Power BI, or Tableau. Ability to work well under pressure by efficiently prioritizing and managing multiple tasks to meet performance expectations and deadlines. Superior customer service skills with demonstrated experience of this on the resume. Excellent written and verbal communication skills in English. Consistently presents a professional, businesslike image to the public, especially in front of clients, visitors, and internal leadership. BS/BA in a related field to Management Information Systems, Healthcare Management, or Computer Science/Engineering. Demonstrate strong critical thinking and analytical skills. Excellent interpersonal and observational skills in order to assess trainee\u2019s understanding and progress. Possess a positive attitude and a willingness to learn from everyone at all levels of experience. Self-motivated and team-oriented.", "Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "Graphic Business Solutions (GBS) is currently seeking a talented Database Developer with two or more years\u2019 proven SQL Server experience to join our growing software development team.  A successful candidate for this position will have a strong background in developing and maintaining world-class data solutions using Microsoft SQL Server technologies. The candidate will have advanced T-SQL skills with a strong ability to work independently on a wide range of business-enhancing data projects. Equally important to these specific technology skills are excellent written and verbal communication skills both with the team and external teams, the ability to multi-task, the ability to translate business requirements to database requirements, the ability adapt quickly to new environments and using creativity to solve difficult problems as a key member of the software development team.  Essential responsibilities and characteristics of this position include the following:  Develop and organize SQL Server objects, such as Stored Procedures, Functions, Views, Tables, SSIS packages, etc., that support automation efforts Co-develop SQL-based solutions for an e-commerce environment Generate and deliver solutions that provide business intelligence to stakeholders Collaborate with other database developers in the software development team on complex data projects Exhibit an understanding of fundamental database design principles Ability to prioritize and manage multiple concurrent tasks and projects Ability to collaborate in a small and productive development team Motivated self-starter with the ability to learn and adapt to new technologies Passion for working with technology and excitement for creating high-quality products Rigorous attention to detail and focus on the quality of deliverables Excellent verbal and written communication skills Dedication and an appetite for learning new technologies and furthering professional growth Solid analytical and problem-solving skills Requirements:  Minimum Required Qualifications:  Must have 5 or more years\u2019 worth of experience and deep knowledge of:  MSSQL Server 2019 or higher Advanced T-SQL skillset Knowledge of MS SQL Server performance tuning, and the design and implementation of a high-availability database architecture. ETL, SSIS, SSRS SSMS and Visual Studio GIT and version control Familiarity with MS development technologies, C#, ASP.NET and web technologies, HTML, Javascript, CSS, XML etc. highly desirable. Additional Preferred Qualifications:  Tableau Experience with reporting and business intelligence systems Exposure and understanding of Agile Methodologies Proficient with all aspects of the Software Development Lifecycle Excellence in debugging practices Comfortable with GIT and deployments Expert-level proficiency in Excel Desired Education:  Associate's degree or above in Computer Science, Information Systems, Business Administration or related field Work Hours:  Typically, Monday through Friday, 8:30 am to 5:00 pm with the flexibility to meet business demands as needed. This position does not require travel.", "We are looking for a savvy Power BI and Reporting Analyst, with previous experience in the retail energy space, to join our growing team of enterprise data and analytics experts. The hire will be responsible for advancing our reporting and analytics footprint. The ideal candidate is an experienced BI Analyst who enjoys optimizing data reporting processes and driving insights.  ESSENTIAL SKILLS AND EXPERIENCE Successful job applicants will be able to perform these functions. Reasonable accommodations will be made to enable individuals with disabilities to perform essential functions. \u2022 5+ years of experience in a related role. \u2022 3+ years of experience using Microsoft PowerBI. \u2022 2+ years of experience working in the retail energy space. \u2022 Advanced working SQL knowledge and experience working with relational databases, query authoring (SQL) as well as working familiarity with a variety\u00a0of\u00a0databases.", "5+ years of experience working with SQL/Azure SQL/T-SQL. proficiency with at least one RDBMS like SQL Server DB, Oracle, MySQL, Postgres is must. Understanding of modern cloud data platforms like Azure or Snowflake is preferred but not required. Understanding of ETL and data warehousing concepts, coupled with hands-on experience of at least one ETL tool like SSIS, Azure Data Factory, Talend, Informatica. Knowledge of Power BI, DAX, or Tableau or SSRS. Adapt at conveying insights through data, assisting partners in identifying what matters and what steps they can take to help their business. Devotion to the QA process, conducting QA testing, and adept troubleshooting While AI or ML experience is preferred, it is not obligatory. Awareness of modern-day storage, compute, serverless, and orchestration services offered by cloud platform such as Azure, AWS, GCP. Experience with task automation, configuration, and alerts via PowerShell, Azure Data Factory, Databricks, SQL Agent, Data Pipelines. Working knowledge of Python and/or Spark (preferred but not required). Understanding of data modeling is desired but not mandatory. Advanced knowledge of performance monitoring and optimization. Be able to analyze system resource utilization, bottlenecks, and plan platform capacity sizing (activity monitors, traces, query tuning, optimizers, etc.) Capability to quickly adapt to new projects, systems, and technology tools. Must reside in Southern California. Some of the systems we work with are: Yardi (multiple modules including Voyager, Deal Manager), SQL databases and DW, Smartsheet, HubSpot, various 3rd party data sources.", "Summary  Under general supervision, this position will involve reviewing, researching, analyzing, monitoring, and manipulating school and business-related data within many database systems, implementing information delivery improvements, ensuring data accuracy, and creating daily, weekly, and quarterly reports and dashboards, including support ticketing processes.   Essential Functions  Demonstrates expert proficiency in the design, development, and implementation of data, reporting and database technologies and tools, Consults with businesses to resolve complex data issues Champions\u2019 efforts to extend existing data architecture to ensure new and existing user demands and application requirements are met on an ongoing basis Advise database design/code through in-depth understanding of business needs/functionalities and provides expertise in devising, negotiating, and defending database schema and data models Consults with database administration and client areas and provides solutions in resolving complex issues during the translation to a physical database design Provides knowledge and expertise of enterprise data to assist Spartan functional groups in the creation and definition of internal and external dashboards, reports, and KPIs Provides direction and guidance on reports and visualizations and ensures recommendations are aligned with user needs and capabilities Uses expertise to evaluate market trends and provide input into the selection of tools and any necessary changes to the company\u2019s data management, reporting and visualization environment Serve as a mentor to other data analyst within IT and throughout organization Accomplishes engineering and organization mission by completing related results as needed  Knowledge / Skills:  Experience in consultative requirements elicitation, design and building of data management, reporting, and visualization solutions Motivated and able to quickly learn new technologies and tools 5+ years report and analysis development experience Experience scripting in TSQL and other database technologies Experience in SSRS or equivalent technologies Experience with PowerBI, Tableau or equivalent technologies (Power BI development/design experience is a plus) Ability to develop, design and solution specifications Demonstrated record of perusing and applying new advancements in information technology to solving business problems related to data management, reporting, and data visualization Must be a self-starter with effective oral and written communication skills. Must also be customer-service oriented and an experienced problem solver who seeks assistance when necessary Education and Work Experience  High School diploma or GED required Bachelor\u2019s degree preferred in computer science or related discipline, or equivalent work experience required 5 to 7 years\u2019 experience directly related to duties and responsibilities specified", "A remote position position opened for candidates in the USA; What you will do  Design and develop database solutions using SQL Server; Create and maintain data models, database schema, and data dictionaries; Implement Service Broker queue concepts; Provide solutions to other groups and work collaboratively with cross-functional teams; Discuss pros and cons of potential solutions and make recommendations based on business needs; Perform troubleshooting and debugging of database issues; Maintain database performance by identifying and resolving production and application development Must haves  7+ years of experience in data modeling, database development, and database design; Strong experience with SQL server; Work with Control-m jobs scheduling and Jenkins; Knowledge of Service Broker queue concepts and their implementation; Ability to create database schemas, data models, and data dictionaries; Ability to work well in a team-oriented, collaborative environment; Excellent communication and interpersonal skills.", "About the job ABOUT US Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards! ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable. Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns. With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement. THE ROLE The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting. We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements. You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units. KEY TASKS & RESPONSIBILITIES Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "\"Position: BI Developer Hours: 8-5pm EST Location: Remote - EST time zone   Local healthcare client in Atlanta, GA is looking to bring on a resource to the BI team to assist with day-to-day analysis and project/data development. They are seeking a high performer with the ability to hit the ground running and maintain a \"\"we vs me\"\" mentality with other team members.   Requirement:  Minimum 5 years of experience in the following: Strong SQL experience Strong Power BI experience Enterprise Database Reporting Analytical Thinker Business facing skillsets Report optimization Metric Insights experience is a plus Must be a team player - we vs me mentality   Responsibilities:   Ensures all projects and data developed is value-adding and provides actionable insights.  Building new data tables", "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI", "Responsibilities:   Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis.   With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables.   Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS.   Research and propose opportunities for data acquisition and new uses for existing data.   Code, test, and document new or modified data systems to create robust and scalable applications for analytics.   Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables.   In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions.   Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts.   Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI.   Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices.   Collaborate with Quality Assurance team to ensure valid and proper deliverables.   Support business decisions with ad-hoc analysis as needed.   Participate in rotation of after-hours support.   Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates.   Research new technologies for implementation by the team for producing cutting-edge solutions.   Cultivate business relationships with stakeholders.   May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.   Required:   Bachelor\u2019s degree in a related discipline (Computer Science, Information Systems Management, Engineering, or similar) or equivalent work experience.   Advanced knowledge of Microsoft\u2019s SQL Server, SSRS, SSIS, and SSAS.   Knowledgeable with Power BI, preferably with an on-premises environment.   Intermediate SQL Query, ETL, and Data Architecture experience.   Advanced Knowledge and ability in writing complex T-SQL code.   Ability to quickly identify and troubleshoot problematic SQL code.   Ability to design tables, data marts, and/or databases to suit reporting needs.   Knowledge of data mapping, database design, and data warehouse concepts.   Introductory experience with SQL Database Administration.   Knowledge using Jira, Bitbucket, GitKraken, and/or SourceTree with a good understanding of Git.   Desire and ability to learn emerging technologies and methodologies.   Ability to interpret report requests and requirements in order to build appropriate automated solutions.   Ability to work with shifting deadlines in a fast-paced environment.   Strong computer skills, including Microsoft Office (Access, Excel, Word, & Outlook).   Strong attention to detail, interpersonal skills, and notation skills.", "Responsibilities: Consult with internal and external customers to collect BI requirements. Understand the customer\u2019s datasets. Correlate the datasets with the BI requirements. Create Power BI visualizations and edit existing reports. Publish and administrate Power BI Workspaces. Creation of staging databases and data warehouses for consumption by Power BI. Setup and administration of Power BI data connections.  Specific Skills Required:  Strong T-SQL skills. Knowledge of data warehousing products and techniques, including OLAP and/or SSAS. Experience in working with different departments and cross-functional teams, including customer interface and requirements gathering. Ability to manage multiple priorities and juggle customer demands. Exceptional problem-solving skills with the ability to leverage a wide variety of data and related tools to improve the efficiency of the organization. Strong communication, teamwork, and organizational skills. Solid relationship management and leadership skills and the ability to assume increasing responsibilities in a rapidly changing environment. Strong general technical aptitude.   Preferred Skills:  Additional software development skills, particularly in .NET are highly desirable  Education & Years of Experience:  Bachelor\u2019s degree preferred. Two-plus years\u2019 experience in BI. Proven expertise in creating Power BI visualizations, workspaces, datasets, DAX, database queries.", "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred  5-7 years experience is preferred   Basic knowledge of programming languages in order to comprehend reading code and basic functions.   Ability to create business solutions that increase competitive advantage.   Ability to exercise good judgment in selecting methods and techniques for obtaining solutions.   Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines.   Ability to solve technical problems/ processes and understand complex details.   Ability to increase operating efficiency by producing high quality technical solutions.   A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level.   Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must."], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1]}, "Recruiter_First_Name": {"label": ["Sue", "Kate", "Kyrsa", "Amanda", "Andrea", "Shaun", "Shirudkar", "Bharath", "Jason", "Nathan", "Rocky and Tracy", "Yolanda", "Matthew", "Ray", "Chris", "Jordan", "Colleen", "Tracy", "Toni", "Nikole", "Wesley", "Dave", "Daniela", "Lhuana", "Liz", "Preeti", "Kaylee", "Christopher", "Kelly", " Security+CE", "Lynda", "Capri", "Nydia Valenzuela", "Suzy", "Barcley", "Nicole", "Amy", "Ram", "Heather", "Sarah", "Edward", "Kyle", "Laney", "Meg", "Pamela", "Rita", "Ashley", "Joshua", "Abby", "Pearson", "Bradie", "Tim", "Patrick", "Matea", "Akshay", "Dana", "Samuel", "Drake", "Dan", "Scott Bostic", "Virginia", "Alexandra", "Tony", "Bobby", "Andrew", "Beau", "Sofiia", "Shreya", "Vanessa", "Anthony", "Luca", "Kevin", "Olivia", "Annie", "Talley", "Luis", "Jessica", "Julie", "Jeevana", "Milind", "Tashira", "Brittany", "Marie", "Sandeep", "Brendan", "Aaron", "prashant", "Lauren", "Elisa", "David", "Lisa", "Thomas", " and making adjustments to existing tables. Ability to find a way to be able to look at data to see how it will change reporting. Ability to understand a business problem and work through various legacy systems.  Ability to communicate clearly and efficiently with internal business members\"", "Laurine", "Cassie", "Fiona", "Wendy", "Malyssa", "Paige", "parshant", "Sharon", "Kylie", "Steven", " NC"], "data": [1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 2, 1, 3, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 3, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1]}, "Recruiter_Last_Name": {"label": ["JOHNSON", "Grimes", "Bucher", "Lott", "Jones", "Ashburn", "Tolia", "Skelton", "Vazquez", "Weigel", "Pickering", "Daub", "Rociles", "Smith", "Poynter", "Rountree", "Allen", "Sethi", "Joshi", "Miller", "Mercer", "Talone", "Galyan", "Strandberg", "Kaylee", "Burk", "Tumang", "Capri", "Martin", "Fitzgerald", "Austin", "Mikelson", "V", "Cave", "Lambdin", "Harris", "Silva", "Hord", "Lieblang", "Amudala", "Adusumilli", "Stafford", "Lievina", "Lachica", "Antifave", "Booth", "Filian", "Adams", "Connor", "tolia", "Pearson", " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.  While our engagements have taken us around the globe", "Mcneil", "McGinnis", "Flanagan", "Van Ness", "Andrzejewski", "Toub", "Nulph", "Hathaway", "Murray", "Seiler", "Talbert", "Dandapa", "Kumar", "Cadet", "Nandi", "Talley", "Ostrander", "Massey and Miller", " or", "Dalrymple", "Aguayo", "Cruz", "Butler", "Lofgren", "Dipti", "Shreckengost", "Turner", "Abraham", "Selki", "Etherton", "Choe", "Alonzo", "Salazar", "Dryer", "Hegemier", "Thomas", "Guzman", "Johnson", "Schoemehl", "Penn", "Mcneill", "Detz", "Hill", "Carlson", "Gallagher", "Griffith", "Dye", "Singh", "MacKillop", "Barker", "Varga", "Parker", "Henry", "Daletski", "Wingate", "Jerkovic"], "data": [1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 2, 3, 1, 1, 3, 3, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 3, 1, 1, 2, 1, 1, 1, 3, 1, 1]}, "Recruiter_Email_Address": {"label": ["Dipti_Shirudkar@bcbst.com", "Kevin.Thomas@honestmed.com", "careers@paccarparts.com", "parshant.tolia@RADYUSradiology.com", "nicole.mcneill@unifyconsulting.com", "SFlanagan@compia.global", "ThomasJ@woodforest.com", "sarah.weigel@gravityitresources.com", "bharath.amudala@peopletech.com", "bschoemehl@brooksource.com", "https://www.linkedin.com/in/sandeep-joshi-450a796/", "Paige.Bucher@insightglobal.com", "capri.talley@symmetrylending.com", "fconnor@eknengineering.com", "Virginia.Griffith@insightglobal.com", "Alexandra.Adams@sibylline.co.uk", "aaustin@brooksource.com", "thomas@itbtalent.com", "Toni.Parker@rice.edu", "kyrsa.galyan@snapsheet.me", "Joshua.Vazquez@ventrahealth.com", "lbooth@savers.com", "ahathaway@wiredhivetech.com", "linkedin.com/in/samjohnson2010", " SSCP Power BI Data Analyst or associate degree in a related field 5+ Power BI specific focus Experience w/ DevOps Framework Experience visualizing data in Power BI Desktop and Power BI Service Extensive experience with building dashboards and custom reports in Power BI Strong analytical orientation and problem-solving skills Focusing on backend work with very large and intricate data models to create high-performing dashboards and paginated reports Rebuild existing SAP Business Intelligence-based reports", "Pamela.Hord@oncoursehome.com", "olivia.d@publishing.com", "aaron.talbert@buyersedgeplatform.com", "allambdin@cshco.com", "tguzman@uslegalsupport.com", "atumang@ds-llc.com", "cassiesmithboz6b_p3y@indeedemail.com", "Malyssa.Daletski@hirschbach.com", "sbostic-stafford@signifyhealth.com", "dvanness@rexfordindustrial.com", "kate@abett.com", "Beau.Jones@connectiverx.com", "jobs@edward.com", "bbutler@tetratec.com", "v-nydiav@microsoft.com", "Russell", "lizostrander@auctiontechnologygroup.com", "lchoe@ledgent.com", "n/a", "slieblang@3cloudsolutions.com", "austinpcc+email+6nc-3c2907147b@talent.icims.com", "Barcley.Cadet@carriageservices.com", "laurine.lachica@modaliconsulting.com", "shreya.nandi@agileengine.com", "EWingate@paylocity.com", "Daniela.Aguayo@scipax.com", "<Tracy.Miller@stridecare.com>, <rocky.massey@stridecare.com>", "mateajerkovic@auctiontechnologygroup.com", "Ray.Andrzejewski@insightglobal.com", "ealonzo@altamed.org", "kpearson@theshipyard.com", "not sure", "bobby@markful.com", "akshay.kumar@Experis.com", "candidate-5eba678d684f@navaide.breezy-mail.com", "NDetz@m-inc.com", "luca.talone@niceforyou.com", "jason.dryer@randstadusa.com", "kyle.skelton@msg.clrco.com", "PREETI.SINGH@msg.paycomonline.com", "Tracy.Miller@stridecare.com", "vanessa@zarecruiting.com", "<adaub@lexipol.com>", "jtoub@nutrisystem.com", "ram@pavetalent.com", "patrick.gallagher@cedargate.com", "andrea.grimes@us.flightcentre.com", "hrsymmetrylending4_eja@indeedemail.com", "matthew.pickering@msg.clrco.com", "Dana.Turner@itineris.net", "kylie.hegemier@medixteam.com", "adaub@lexipol.com", "Julie.Antifave@technossus.com", "Lesli.Martinez-Torres@ey.com", "recruiting+226318872@applytojob.com", " working with some of the largest Fortune 500 companies", "heather.mcginnis@pacden.com", "david.dalrymple@cibr.com", "Meg.Allen@insightglobal.com", "aharris@lbconsulting.com", "Steven.Penn@ideaentity.com", "Patrick.Gallagher@msg.paycomonline.com", "jobs@primusglobal.com", "Nathan.Seiler@insightglobal.com", "inmail-hit-reply@linkedin.com", "rita.varga@shift4.com", "Tim.Strandberg@datavail.com", "cmurray@acgme.org", "wesley.mercer@matrixres.com", "marie.mikelson@profoundjobs.com", "scarlson@entelli.com", "Sofiia.Lievina@dxc.com", "Brendan.Barker@insightglobal.com", "https://www.linkedin.com/in/ashley-selki/.", "recruiting.echo.ac72a5fdd54642d79b800c8a75a2c01f@echo.newtonsoftware.com", "lcruz@mammoth777.com", "milinds@procomservices.com", "shaun.fitzgerald@jobot.com", "jabraham@marinerfinance.com", "jdefaehsz@jobvite.com", "dashburn@liveperson.com", "Lauren.Etherton@roberthalf.com", "kdye@acronym.com", "dmacKillop@aspirepartnersusa.com", "prashant.tolia@RAYUSradiology.com"], "data": [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1]}, "Company_name": {"label": ["Rexford Industrial", "Wired Hive", "Atlas Technologies, Inc.", "NavAide", "Honest-Medical", "Acronym US", "Rayus radiology", "Flight Center Travel Group (FCTG)", "Markful", "Signify Health", "NICE North America LLC", "Publishing.com", "LEXIPOL", "Houston Methodist", "BlueCross BlueShield of Tennessee", "Carriage Services", "Agile Engine", "Randstad federal", "CIBR Warriors - BSA", "Sibylline", "Z & A Recruiting", "Cedar Gate Technologies", "Lotis Blue Consulting, LLC", "Shift4 Payments", "unifyconsulting.com", "Acronym", "Itineries", "Oncourse Home Solutions", "Luxoft", "Hirschbach", "Robert Half", "Woodforest National Bank", "People's Community Clinic", "Ledgent Technology", "Nutrisystem Inc", "Symmetry Lending", "Hirschbach Motor Lines", "siness intelligence developer", "hrussell@medasource.com", "Bridgesecurityadvisors", "Modali Consulting", "LivePerson", "Spartan College", "Cedar Gate Technologies Recruiter", "Ernst & Young, LLP", "SEAM Group", "Paylocity", "The Shipyard", "Ventra Health", "StrideCare", "People tech group", "TETRA Technologies", "HH Global", " utilizing PowerBi dashboards Design effective BI data models Evaluate and improve existing BI systems\"", "Pave Talent", "Idea Entity", "CoServ", "Jobot", "Lexipol LLC", "IDEA ENTITY", "MARINER FINANCE", "ESP IT", "Aspire Partners", "USLegalSupport", "Clarke Schaefer Hacket", "Pacific Dental Services", "Rice University", "Nice North America", "Edward Jones", "Digital Strategy LLC", "Mammoth Freighters", "Randstad Federal", "ArrowStream", "PRIMUS Global Services", "Spalding Consulting", "U.S. Legal Support", "AltaMed", "Savers", "Entelli", "ConnectiveRx", "Unify Consukting", "Savers/Value Village", "Snapsheet", "Community First Health Plans", "ACGME", "1 of 36 ProFound Staffing", "Centene Corporation - Brooksource", "CIBR Warriors", "Microsoft", "Auction Technology Group", "Abett", "Insight Global", "Kelsey-Seybold Clinic", "Technossus", "Gravity IT Resources", "Brooksource", "Procom - Woodforest National Bank", "Mariner Finance", " our focus has always been on being the best", "Datavail", "3Cloud", "Momentum Inc", "Itineris", "EKN Engineering", "Apeiron Sumus LLC", "Tech M/Citi Bank", "CompTIA", "Paccar Parts", "Northwest Cascade Inc.", "Medix Technology", "ATG (Auction Technology Group)"], "data": [1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 3, 1, 2, 2, 1, 2, 1, 1, 1, 2, 3, 1, 1, 1, 2, 2, 2, 4, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]}, "SetName": {"label": ["Jane Mwangi_11/30/2023_Centene Corporation - Brooksource_PowerBI Eng", "Yama Touray_11/08/2023_Robert Half_Data Analyst", "Mary Gathogo_10/26/2023_Entelli_Power BI Developer", "Yama Touray_12/05/2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "MULUGETA TADE_12/04/2023_Symmetry Lending_ETL Developer", "Mary Gathogo_09/14/2023_Lotis Blue Consulting, LLC_Data Engineer - Consultant/Senior", "EMMANUEL OJENIYI_08/25/2023_Houston Methodist_IT Data Specialist", "LILIAN NJERI_09/07/2023_Itineris_BI Reporting", "EMMANUEL OJENIYI_11/28/2023_BlueCross BlueShield of Tennessee_EIT Team Lead", "Stephanie Anne Lim_11/21/2023_Aspire Partners_Business Development Specialist", "EMMANUEL OJENIYI_11/13/2023_Modali Consulting_Associate Consultant, Data Analyst", "Betty Asmerom_08/30/2023_AltaMed_Data Governance Analyst", "Calvine  Cheptoo _09/13/2023_Jobot_Associate BI Developer", "EMMANUEL OJENIYI_11/01/2023_Insight Global_BI Developer", "LILIAN NJERI_10/12/2023_Z & A Recruiting_Senior Business Analyst Data Visualization", "Nadege Nguemo Mbouyo_08/16/2023_PRIMUS Global Services_BI Developer", "Mary Gathogo_08/25/2023_SEAM Group_Sr. Data Engineer", "Rufus", "ANNE NDUNGU_09/24/2023_Microsoft_Business intelligence Analyst 2", "OLUKAYODE AKINRIMISI_11/21/2023_U.S. Legal Support_Business Intelligence Developer", "Avworo  OGHENEKEVWE _11/02/2023_Atlas Technologies, Inc._Power BI and Power Apps Developer", "EMMANUEL OJENIYI_10/21/2023_Cedar Gate Technologies Recruiter_Senior BI Developer", "Calvine  Cheptoo _08/15/2023_The Shipyard_Data Visualization Manager", "Mary Gathogo_09/07/2023_ACGME_Senior BI Architect", "Yama Touray_10/25/2023_ArrowStream_Data Engineer", "Yama Touray_08/28/2023_Randstad federal_Data Analyst", "Calvine  Cheptoo _11/02/2023_Markful_Database Developer", "Calvine  Cheptoo _10/18/2023_Paylocity_Business Intelligence Report Analyst", "JORUM MWANGI_10/13/2023_Auction Technology Group_Product BI Analyst", "EMMANUEL OJENIYI_12/06/2023_Ventra Health_Business Intelligence Developer", "OLUKAYODE AKINRIMISI_11/20/2023_USLegalSupport_Business Intelligence Developer", "EMMANUEL OJENIYI_09/14/2023_CIBR Warriors - BSA_Tableau Developer", "Yama Touray_08/27/2023_Randstad Federal_Data Analytics", "EMMANUEL OJENIYI_09/12/2023_CIBR Warriors_Tableau Developer", "Mary Gathogo_10/06/2023_Acronym US_Power BI Reporting Specialist", "Talq Tera_10/24/2023_NICE North America LLC_Business Intelligence Developer", "Calvine  Cheptoo _10/07/2023_Ledgent Technology_Sr Data Analyst", "Avworo  OGHENEKEVWE _10/07/2023_Abett_Business Intelligence Analyst", "Mary Gathogo_08/21/2023_Savers_Software Engineer", "JORUM MWANGI_09/05/2023_AltaMed_Tableau Developer (Business Intelligence)", "Shahad Jawad_11/18/2023_Rayus radiology_business intelligence developer", "abebe woldeargay_08/31/2023_CompTIA_Data Specialist", "ANNE NDUNGU_09/26/2023_Microsoft_Business intelligence Analyst 2", "Medasource", "AYODEJI OLAWOYE_11/03/2023_StrideCare_Database Administrator", "Feven Asmelash_11/24/2023_Modali Consulting_Data Warehouse Specialist", "Nadege Nguemo Mbouyo_10/08/2023_ATG (Auction Technology Group)_Product BI Analyst", "ANNE NDUNGU_09/21/2023_People tech group_BI Developer/Analyst", "Mary Gathogo_09/01/2023_3Cloud_Sr. Architect, Power BI", "Calvine  Cheptoo _10/17/2023_NavAide_Navy ERP Level III Data Analyst", " not the biggest.  We believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "Nadege Nguemo Mbouyo_08/15/2023_MARINER FINANCE_Business Intelligence Architect", "OLUKAYODE AKINRIMISI_11/21/2023_Idea Entity_SQL Developer", "Mary Gathogo_08/15/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "Talq Tera_08/15/2023_Hirschbach_Application Specialist", "Mary Gathogo_11/15/2023_HH Global_Data Engineer", "EMMANUEL OJENIYI_09/06/2023_Unify Consukting_Tableau Cloud", "Adib Kazi_08/29/2023_Sibylline_Embedded BI Data Visualisation Specialist SIBU510", "Mary Gathogo_09/15/2023_Snapsheet_Business Intelligence Developer", "Mary Gathogo_10/07/2023_Acronym US_Power BI Specialist", "Talq Tera_10/13/2023_Nice North America_Business Intelligence Developer", "Talq Tera_08/23/2023_The Shipyard_Data Visualization Manager", "EMMANUEL OJENIYI_10/20/2023_Cedar Gate Technologies_Senior BI Developer", "AYODEJI OLAWOYE_09/10/2023_Community First Health Plans_SQL Developer", "Shahad Jawad_11/18/2023_siness intelligence developer_siness intelligence developer", "Avworo  OGHENEKEVWE _09/06/2023_Randstad Federal_Data Engineer", "LILIAN NJERI_08/25/2023_LEXIPOL_Power BI Developer", "Talq Tera_12-04-2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "Talq Tera_10/07/2023_Spartan College_Senior IT Business System Analyst", "Mary Gathogo_08/21/2023_Clarke Schaefer Hacket_Power BI Developer", "Calvine  Cheptoo _08/11/2023_Symmetry Lending_Power BI / SSRS Developer", "Feven Asmelash_11/02/2023_Apeiron Sumus LLC_Solution Assessment Consultant", "AYODEJI OLAWOYE_08/17/2023_Savers/Value Village_Software Engineer, Business Intelligence", "Avworo  OGHENEKEVWE _09/10/2023_Insight Global_Data Integration Engineer", "Nadege Nguemo Mbouyo_10/10/2023_ATG (Auction Technology Group)_Product BI Analyst", "Mary Gathogo_09/12/2023_ACGME_Senior BI Architect", "LILIAN NJERI_09/18/2023_LivePerson_Business Data Analyst", "EMMANUEL OJENIYI_09/04/2023_Kelsey-Seybold Clinic_Senior SQL Database Administrator", "Calvine  Cheptoo _11/11/2023_Honest-Medical_Business Data Analyst", "EMMANUEL OJENIYI_08/17/2023_Luxoft_Tableau Developer", "OLUKAYODE AKINRIMISI_11/17/2023_Rice University_Systems Analyst", "Mary Gathogo_11/08/2023_Agile Engine_Senior Data Base Developer/Data Modeler", "EMMANUEL OJENIYI_10/17/2023_Insight Global_ETL Developer", "Yama Touray_08/29/2023_Mariner Finance_Business Intelligence Architect", "EMMANUEL OJENIYI_09/07/2023_Spalding Consulting_Business Intelligence Developer", "Yama Touray_08/21/2023_Signify Health_Business Intelligence Developer", "EMMANUEL OJENIYI_09/15/2023_Ernst & Young, LLP_Tableau Administrator", "AYODEJI OLAWOYE_08/30/2023_Community First Health Plans_SQL Developer", "AYODEJI OLAWOYE_11/08/2023_Publishing.com_BI Data Engineer", "Talq Tera_10/03/2023_The Shipyard_Data Visualization Manager", "Mary Gathogo_08/17/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "EMMANUEL OJENIYI_09/14/2023_Bridgesecurityadvisors_Tableau developers", "EMMANUEL OJENIYI_12-01-2023_Carriage Services_Sr. Datawarehouse and BI Developer", "Nadege Nguemo Mbouyo_10/09/2023_Auction Technology Group_Product BI Analyst", "OLUKAYODE AKINRIMISI_10/07/2023_Woodforest National Bank_Data Developer II", "Mary Gathogo_12-01-2023_Oncourse Home Solutions_Analytics Consultant", "EMMANUEL OJENIYI_11/30/2023_Momentum Inc_Tableau and Database Specialist", "Jane Mwangi_11/03/2023_Paccar Parts_Sr Business/Data Analyst", "AYODEJI OLAWOYE_08/23/2023_Lexipol LLC_Data Analytics", "OLUKAYODE AKINRIMISI_10/11/2023_Procom - Woodforest National Bank_Data Developer 2", "Nadege Nguemo Mbouyo_09/24/2023_Edward Jones_power BI Developer", "Mary Gathogo_08/15/2023_Medix Technology_Power BI Developer", "Altish Asfaw_08/31/2023_ESP IT_Power BI Developer", "Calvine  Cheptoo _10/04/2023_EKN Engineering_Data Analyst II", "OLUKAYODE AKINRIMISI_09/20/2023_Wired Hive_Power BI and Reporting Analyst", "Mary Gathogo_09/07/2023_Pave Talent_Power Platform Developer", "AYODEJI OLAWOYE_08/16/2023_Savers_Software Engineer", "Mary Gathogo_10/14/2023_Acronym_Power BI Reporting Specialist", "OLUKAYODE AKINRIMISI_09/21/2023_Gravity IT Resources_Lead SQL Developer", "EMMANUEL OJENIYI_09/21/2023_Tech M/Citi Bank_Senior Developer (Tableau + ETL)", "EMMANUEL OJENIYI_09/08/2023_Spalding Consulting_Business Intelligence Developer", "EMMANUEL OJENIYI_11/01/2023_Datavail_Senior Report Developer", "LILIAN NJERI_08/28/2023_CoServ_Business Intelligence Analyst-Power BI", "Yama Touray_10/18/2023_ArrowStream_Data Engineer", "Jane Mwangi_11/30/2023_People's Community Clinic_Clinical Data Analyst", "Calvine  Cheptoo _08/22/2023_Symmetry Lending_Data Engineer", "ANNE NDUNGU_08/22/2023_Northwest Cascade Inc._Data Analyst", "OLUKAYODE AKINRIMISI_11/12/2023_IDEA ENTITY_SQL Developer", "Shahad Jawad_11/20/2023_Nutrisystem Inc_Business Intelligence Lead Developer", "AYODEJI OLAWOYE_11/02/2023_StrideCare_DATABASE ADMINISTRATOR", "EMMANUEL OJENIYI_08/31/2023_Spalding Consulting_Business Intelligence Developer", "Altish Asfaw_08/28/2023_ESP IT_Power BI Developer", "EMMANUEL OJENIYI_10/04/2023_Brooksource_Business Intelligence Developer", "EMMANUEL OJENIYI_11/13/2023_Digital Strategy LLC_Technical Data Analyst (Remote)", "Mary Gathogo_10/11/2023_Shift4 Payments_Business Intelligence Analyst II", "Rio Rochelle Florague_11/10/2023_Insight Global_Data Engineer/ETL Developer", "Robelyn Florague_11/09/2023_1 of 36 ProFound Staffing_Tableau Data Analyst", "Talq Tera_11/15/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics role!", "EMMANUEL OJENIYI_10/13/2023_TETRA Technologies_BI Developer", "Talq Tera_11/14/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics", "LILIAN NJERI_10/06/2023_Mammoth Freighters_Sr. Data Analyst", "AYODEJI OLAWOYE_08/26/2023_Lexipol LLC_Data Analytics", "Calvine  Cheptoo _10/26/2023_Technossus_Sr. Consultant, Power BI Analyst", "LILIAN NJERI_08/25/2023_Itineries_Power BI Developer", "EMMANUEL OJENIYI_10/18/2023_Datavail_Senior Reports Developer", "Talq Tera_08/30/2023_Rexford Industrial_Data Engineer", "EMMANUEL OJENIYI_08/25/2023_unifyconsulting.com_Tableau Cloud opportunity with Unify Consulting"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "CandidateID": {"label": ["31661", "39119", "37975", "39112", "35551", "37295", "37048", "38690", "37423", "38457", "Benhur", "38744", "37640", "36877", " client focus", "37165", "34701", "OLUKAYODE AKINRIMISI_11/28/2023_Medasource_BI Developer", "38532", "40376", "33898", "38944", "37077"], "data": [11, 11, 2, 2, 1, 8, 4, 3, 2, 5, 1, 3, 8, 21, 1, 29, 6, 1, 11, 1, 10, 1, 1]}, "SurveyResponse": {"label": ["31661", "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "rufus.benhur@digitalconsultants.org", "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying", " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.  Company Description StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte"], "data": [1, 4, 14, 119, 3, 1, 1]}, "InterviewType": {"label": ["\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", " with excellent question clarity", " with clear and engaging questions. The candidate felt comfortable and performed well", "Recruiter", " engaging interviewer", "Digital Consultants, LLC", "Technical", " NC"], "data": [1, 1, 4, 90, 17, 1, 28, 1]}, "Preparationscore": {"label": ["56.25", "18.75", "0", "62.5", "6.25", "100", "75", "37.5", "25", "31.25", " engaging interviewer", " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.\\r\\n\\r\\nWhile our engagements have taken us around the globe", "43.75", "Avworo  OGHENEKEVWE _10/03/2023_Digital Consultants, LLC_Power BI Reports Developer", " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "12.5", " and relevant technical aspects. Strong performance in algorithm design and data structures"], "data": [14, 10, 64, 2, 6, 1, 1, 10, 6, 1, 2, 1, 2, 1, 4, 1, 17]}, "AutoInterviewsCount": {"label": ["3", "0", " there was some neutrality in the additional feedback section.\"\"", " and relevant technical aspects. Strong performance in showcasing skills and qualifications", "6", " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "38457", "1", " working with some of the largest Fortune 500 companies", "4", " and relevant technical aspects. Strong performance in algorithm design and data structures", "2"], "data": [4, 72, 4, 1, 2, 17, 1, 28, 1, 2, 1, 10]}, "AutoInterviewsDuration": {"label": ["282", "1793", "823", "468", "425", "524", "1788", "251", "1696", "71", "1514", "195", "568", "908", "70", "75", "997", "736", "326", "1196", " though a challenge in recruiter miscommunication. Positive sentiment in open-ended responses", " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "341", "60", "1346", "1331", "1069", "827", "144", " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "283", "869", "1037", "778", "1891", "1813", "346", "237", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "1690", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "65", " our focus has always been on being the best", "21", "74", "72", "1517", "392", "791", "1703", "NULL"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 74]}, "MentorInterviewsCount": {"label": ["     \"\"ComfortWhileAnsweringQuestions\"\": 5", "0", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", " but some neutrality in additional feedback.\"\"", "Recruiter", " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "1", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", " not the biggest.\\r\\n\\r\\nWe believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "2"], "data": [4, 98, 1, 1, 1, 1, 2, 18, 7, 4, 3, 1, 2]}, "MentorInterviewsDuration": {"label": ["11", "2058", "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "18.75", "8", "479", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "46", "     \"\"ComfortWhileAnsweringQuestions\"\": 4", "1847", "136", "6", "1157", "60", "1878", "     \"\"ComfortWhileAnsweringQuestions\"\": 2", " client focus", "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "3990", "     \"\"HandlingChallengingQuestions\"\": 5", "63", "65", "21", "94", "74", "674", "     \"\"HandlingChallengingQuestions\"\": 4", "NULL"], "data": [2, 1, 12, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 98]}, "Mentor": {"label": ["Leslie Boye", "Aagbara Kpea", "     \"\"ComfortWhileAnsweringQuestions\"\": 5", " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.\"", "0", "Sakthia Okou", "Sowmya Attur", "Saher Maiber", "Shireesha Ravi", "Ayodele Adepoju", "Grace Karuga", "AMINAT OKERINDE", "Charanya Balakrishnan", "Kwabena Manu", "Frew Samuel", "ALEXANDER  OPIYO", "     \"\"HandlingChallengingQuestions\"\": 3", "     \"\"HandlingChallengingQuestions\"\": 5", "     \"\"HandlingChallengingQuestions\"\": 1", "     \"\"LikelihoodToRecommendCompany\"\": 5", "     \"\"HandlingChallengingQuestions\"\": 4"], "data": [5, 9, 2, 1, 1, 9, 5, 1, 47, 2, 4, 5, 17, 1, 7, 6, 4, 5, 2, 4, 6]}, "Applicant": {"label": ["JORUM MWANGI", "Avworo  OGHENEKEVWE ", "AYODEJI OLAWOYE", "     \"\"LikelihoodToRecommendCompany\"\": 3", "ANNE NDUNGU", "     \"\"LikelihoodToRecommendCompany\"\": 1", "OLUKAYODE AKINRIMISI", "LILIAN NJERI", "Nadege Nguemo Mbouyo", "     \"\"AlignmentWithExpectations\"\": 5", "     \"\"LikelihoodToRecommendCompany\"\": 4", "Feven Asmelash", "Mary Gathogo", "Shahad Jawad", "EMMANUEL OJENIYI", "     \"\"LikelihoodToRecommendCompany\"\": 2", "Yama Touray", "Talq Tera", "Adib Kazi", "Calvine  Cheptoo ", "     \"\"HandlingChallengingQuestions\"\": 3", "George", "     \"\"HandlingChallengingQuestions\"\": 5", "Jane Mwangi", "     \"\"LikelihoodToRecommendCompany\"\": 5", "Betty Asmerom", "     \"\"AlignmentWithExpectations\"\": 4", "Altish Asfaw", "MULUGETA TADE"], "data": [2, 5, 9, 2, 4, 1, 7, 8, 5, 1, 1, 2, 17, 3, 25, 2, 7, 10, 1, 7, 1, 1, 1, 3, 11, 1, 3, 2, 1]}, "Recruiter_InterviewCount": {"label": ["7", "15", "11", "3", "8", "22", "Williams", "16", "0", "     \"\"LikelihoodToRecommendCompany\"\": 3", "5", "18", "17", "     \"\"AlignmentWithExpectations\"\": 1", "6", "     \"\"AlignmentWithExpectations\"\": 5", "23", "     \"\"InterviewerEngagement\"\": 5", "     \"\"AlignmentWithExpectations\"\": 3", "24", "9", "1", "20", "10", "     \"\"AlignmentWithExpectations\"\": 2", "     \"\"LikelihoodToRecommendCompany\"\": 5", "4", "     \"\"AlignmentWithExpectations\"\": 4", "12", "13", "14", "2"], "data": [8, 1, 2, 14, 3, 1, 1, 2, 4, 1, 9, 2, 1, 1, 4, 6, 1, 4, 2, 1, 3, 29, 1, 2, 1, 1, 11, 7, 1, 1, 1, 17]}, "Technical_InterviewCount": {"label": ["3", "0", "5", "6", "     \"\"AlignmentWithExpectations\"\": 5", "1490", "     \"\"InterviewerEngagement\"\": 5", "     \"\"SkillsAlignmentWithRole\"\": 5", "     \"\"AlignmentWithExpectations\"\": 3", "     \"\"InterviewerEngagement\"\": 2", "gwilliams@stonelaurel.com", "1", "4", "2", "     \"\"InterviewerEngagement\"\": 3"], "data": [10, 35, 4, 5, 1, 1, 12, 4, 1, 2, 1, 29, 17, 18, 3]}, "InterviewScore": {"label": ["     \"\"SkillsAlignmentWithRole\"\": 4", "     \"\"QuestionClarityAndEffectiveness\"\": 5", "Sowmya Attur", "     \"\"SkillsAlignmentWithRole\"\": 2", "     \"\"InterviewerEngagement\"\": 5", "     \"\"SkillsAlignmentWithRole\"\": 5", "     \"\"QuestionClarityAndEffectiveness\"\": 4", "StoneLaurel", "     \"\"InterviewerEngagement\"\": 3"], "data": [2, 1, 1, 2, 1, 13, 3, 119, 1]}, "InterviewDate_stringindexer_transform": {"label": ["0.0 - 7.0", "7.0 - 14.0", "14.0 - 21.0", "21.0 - 28.0", "28.0 - 35.0", "35.0 - 42.0", "42.0 - 49.0", "49.0 - 56.0", "56.0 - 63.0", "63.0 - 70.0"], "data": [35, 21, 16, 14, 14, 14, 7, 7, 7, 8]}, "Job_Title_stringindexer_transform": {"label": ["0.0 - 8.8", "8.8 - 17.6", "17.6 - 26.4", "26.4 - 35.2", "35.2 - 44.0", "44.0 - 52.8", "52.8 - 61.6", "61.6 - 70.4", "70.4 - 79.2", "79.2 - 88.0"], "data": [45, 21, 15, 9, 8, 9, 9, 9, 9, 9]}, "Job_Description_stringindexer_transform": {"label": ["0.0 - 13.7", "13.7 - 27.4", "27.4 - 41.1", "41.1 - 54.8", "54.8 - 68.5", "68.5 - 82.2", "82.2 - 95.9", "95.9 - 109.6", "109.6 - 123.3", "123.3 - 137.0"], "data": [19, 14, 14, 13, 14, 14, 13, 14, 14, 14]}, "Recruiter_First_Name_stringindexer_transform": {"label": ["0.0 - 10.3", "10.3 - 20.6", "20.6 - 30.9", "30.9 - 41.2", "41.2 - 51.5", "51.5 - 61.8", "61.8 - 72.1", "72.1 - 82.4", "82.4 - 92.7", "92.7 - 103.0"], "data": [28, 20, 20, 13, 10, 10, 11, 10, 10, 11]}, "Recruiter_Last_Name_stringindexer_transform": {"label": ["0.0 - 10.7", "10.7 - 21.4", "21.4 - 32.1", "32.1 - 42.8", "42.8 - 53.5", "53.5 - 64.2", "64.2 - 74.9", "74.9 - 85.6", "85.6 - 96.3", "96.3 - 107.0"], "data": [28, 22, 18, 10, 11, 11, 10, 11, 11, 11]}, "Recruiter_Email_Address_stringindexer_transform": {"label": ["0.0 - 10.9", "10.9 - 21.8", "21.8 - 32.7", "32.7 - 43.6", "43.6 - 54.5", "54.5 - 65.4", "65.4 - 76.3", "76.3 - 87.2", "87.2 - 98.1", "98.1 - 109.0"], "data": [28, 22, 16, 11, 11, 11, 11, 11, 11, 11]}, "Company_name_stringindexer_transform": {"label": ["0.0 - 11.0", "11.0 - 22.0", "22.0 - 33.0", "33.0 - 44.0", "44.0 - 55.0", "55.0 - 66.0", "66.0 - 77.0", "77.0 - 88.0", "88.0 - 99.0", "99.0 - 110.0"], "data": [28, 22, 15, 11, 11, 11, 11, 11, 11, 12]}, "SetName_stringindexer_transform": {"label": ["0.0 - 13.6", "13.6 - 27.2", "27.2 - 40.8", "40.8 - 54.4", "54.4 - 68.0", "68.0 - 81.6", "81.6 - 95.2", "95.2 - 108.8", "108.8 - 122.4", "122.4 - 136.0"], "data": [20, 14, 13, 14, 13, 14, 14, 13, 14, 14]}, "CandidateID_stringindexer_transform": {"label": ["0.0 - 2.2", "2.2 - 4.4", "4.4 - 6.6", "6.6 - 8.8", "8.8 - 11.0", "11.0 - 13.2", "13.2 - 15.4", "15.4 - 17.6", "17.6 - 19.8", "19.8 - 22.0"], "data": [61, 22, 18, 14, 9, 8, 4, 2, 2, 3]}, "SurveyResponse_stringindexer_transform": {"label": ["0.0", "1.0", "4.0", "3.0", "2.0", "6.0", "5.0"], "data": [119, 14, 1, 3, 4, 1, 1]}, "InterviewType_stringindexer_transform": {"label": ["0.0", "7.0", "1.0", "4.0", "3.0", "2.0", "6.0", "5.0"], "data": [90, 1, 28, 1, 4, 17, 1, 1]}, "Preparationscore_stringindexer_transform": {"label": ["0.0 - 1.6", "1.6 - 3.2", "3.2 - 4.8", "4.8 - 6.4", "6.4 - 8.0", "8.0 - 9.6", "9.6 - 11.2", "11.2 - 12.8", "12.8 - 14.4", "14.4 - 16.0"], "data": [81, 24, 10, 12, 4, 4, 3, 1, 2, 2]}, "AutoInterviewsCount_stringindexer_transform": {"label": ["0.0 - 1.1", "1.1 - 2.2", "2.2 - 3.3", "3.3 - 4.4", "4.4 - 5.5", "5.5 - 6.6", "6.6 - 7.7", "7.7 - 8.8", "8.8 - 9.9", "9.9 - 11.0"], "data": [100, 17, 10, 4, 4, 2, 2, 1, 1, 2]}, "AutoInterviewsDuration_stringindexer_transform": {"label": ["0.0 - 5.0", "5.0 - 10.0", "10.0 - 15.0", "15.0 - 20.0", "20.0 - 25.0", "25.0 - 30.0", "30.0 - 35.0", "35.0 - 40.0", "40.0 - 45.0", "45.0 - 50.0"], "data": [97, 5, 5, 5, 5, 5, 5, 5, 5, 6]}, "MentorInterviewsCount_stringindexer_transform": {"label": ["0.0 - 1.2", "1.2 - 2.4", "2.4 - 3.6", "3.6 - 4.8", "4.8 - 6.0", "6.0 - 7.2", "7.2 - 8.4", "8.4 - 9.6", "9.6 - 10.8", "10.8 - 12.0"], "data": [116, 7, 4, 4, 3, 4, 1, 1, 1, 2]}, "MentorInterviewsDuration_stringindexer_transform": {"label": ["0.0 - 2.8", "2.8 - 5.6", "5.6 - 8.4", "8.4 - 11.2", "11.2 - 14.0", "14.0 - 16.8", "16.8 - 19.6", "19.6 - 22.4", "22.4 - 25.2", "25.2 - 28.0"], "data": [113, 7, 3, 3, 2, 3, 3, 3, 3, 3]}, "Mentor_stringindexer_transform": {"label": ["0.0 - 2.0", "2.0 - 4.0", "4.0 - 6.0", "6.0 - 8.0", "8.0 - 10.0", "10.0 - 12.0", "12.0 - 14.0", "14.0 - 16.0", "16.0 - 18.0", "18.0 - 20.0"], "data": [64, 18, 13, 11, 10, 9, 8, 4, 3, 3]}, "Applicant_stringindexer_transform": {"label": ["0.0 - 2.8", "2.8 - 5.6", "5.6 - 8.4", "8.4 - 11.2", "11.2 - 14.0", "14.0 - 16.8", "16.8 - 19.6", "19.6 - 22.4", "22.4 - 25.2", "25.2 - 28.0"], "data": [53, 27, 21, 14, 6, 7, 6, 3, 3, 3]}, "Recruiter_InterviewCount_stringindexer_transform": {"label": ["0.0 - 3.1", "3.1 - 6.2", "6.2 - 9.3", "9.3 - 12.4", "12.4 - 15.5", "15.5 - 18.6", "18.6 - 21.7", "21.7 - 24.8", "24.8 - 27.9", "27.9 - 31.0"], "data": [71, 24, 14, 10, 6, 5, 3, 3, 3, 4]}, "Technical_InterviewCount_stringindexer_transform": {"label": ["0.0 - 1.4", "1.4 - 2.8", "2.8 - 4.2", "4.2 - 5.6", "5.6 - 7.0", "7.0 - 8.4", "8.4 - 9.8", "9.8 - 11.2", "11.2 - 12.6", "12.6 - 14.0"], "data": [64, 18, 29, 10, 5, 8, 3, 3, 1, 2]}, "InterviewScore_stringindexer_transform": {"label": ["8.0", "0.0", "7.0", "1.0", "4.0", "3.0", "2.0", "6.0", "5.0"], "data": [1, 119, 1, 13, 2, 2, 3, 1, 1]}}}, "ManualFE": {"FE": [{"transformationsData": [{"feature_label": "InterviewDate", "transformation_label": "String Indexer"}], "feature": "InterviewDate", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "10/10/2023", "max": "9/8/2023", "missing": "0", "distinct": "71"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "InterviewDate"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "NoofDays", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "143", "mean": "-58.34", "stddev": "34.75", "min": "-111", "max": "6", "missing": "0"}, "updatedLabel": "NoofDays"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "LogInterviewID", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "143", "mean": "155.01", "stddev": "67.12", "min": "42", "max": "288", "missing": "0"}, "updatedLabel": "LogInterviewID"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "QID", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "143", "mean": "2614.15", "stddev": "228.25", "min": "0", "max": "2745", "missing": "0"}, "updatedLabel": "QID"}, {"transformationsData": [{"feature_label": "Job_Title", "transformation_label": "String Indexer"}], "feature": "Job_Title", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "Analytics Consultant", "max": "siness intelligence developer", "missing": "0", "distinct": "89"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Job_Title"}, {"transformationsData": [{"feature_label": "Job_Description", "transformation_label": "String Indexer"}], "feature": "Job_Description", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "\"Description: Leading with our people, Digital Consultants' mission is to deliver the highest level of professional solutions while being a trusted partner and advisor to our customers. With a culture of practicality, opportunity, and creativity we remain dedicated to being honest, trustworthy, respectful, and ethical in everything we do. We are a certified SBA 8(a) small-disadvantaged business that supports multiple IT customers within the Federal, civilian, and private sectors. Digital Consultants also offers our employees growth opportunities, competitive wages, and a full benefits package. Our founding principles, Fairness and Common Sense make working here more than a job, it is the Digital family.  Digital Consultants is seeking a Power BI Reports Developer to join our team! As the Power BI Reports Developer, you will be designing ETL processes and working directly with developers, testers, and other roles active to translate product roadmap features into well-defined product requirements including features, user stories, and acceptance test criteria.  Duties to include:  Maintain and support data analytics platforms Develop and update relevant technical documentation Collaborate directly with analysts and end users to integrate systems and create effective reports Develop and execute database queries and conduct analyses as needed Maintain status updates for all assigned ad hoc report requests Knowledge of SQL queries, SQL Server Reporting Services (SSRS), and MS SQL Server An expert that understands the Power BI platform and its tools very well. Takes complete responsibility for the development and administration of BI tools including transforming raw data into valuable and meaningful insights in the form of appealing dashboards and reports. Recreating existing reports from the current platform into Power BI.\"\" Build complex dimensional data models and reports from the bottom up Audit existing Power BI efforts with a focus on improvement Visualize compelling data stories on the report canvas Produce KPIs with user-friendly display dashboards Collaborate with client's data team Familiarity with data warehouse design (e.g. dimensional modeling) and data mining Requirements: Active DOD Secret Clearance IAT level II Certification: GSEC", "max": "ob Description:   BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.   Job Responsibilities   Managing the planning, scheduling and deployment of all hardware facilities and associated software for major or multiple sites. Trains, develops, and mentors staff by providing subject matter direction and guidance. Assigns, monitors, and reviews progress and accuracy of work.Provides staff management oversight including hiring, promoting, or making recommendations for staff.Conducts performance reviews and assessments, manages performance, engages in skills assessment, and promotes professional development of staff. Directing, motivating and developing staff, maximizing their individual contribution, professional growth and ability to function effectively with their colleagues as a team. Ensuring adherence to policies, plans, objectives, budgets and staffing allocations for the assigned site. Optimizes the utilization of resources and adheres to Departmental budgeting and fiscal responsibilities. Actively participates in project teams, manages and tracks project details, and provides leadership during periods of transition. Ensures compliance with corporate and industry standards, policies, procedures, and regulations.   Job Qualifications   Education   Bachelor's Degree in a Computer Sciences related field or equivalent work experience   Experience   5 years - Experience in Information Technology required   Skills\\Certifications   Knowledge of information technology concepts, methodology, terminology and standards. Demonstrated ability to interpret and translate technical and/or or complex concepts into information meaningful to project team members and/or business personnel. Strong interpersonal and organizational skills PC Skills required (Basic Microsoft Office and E-Mail) Adaptive to high pace and changing environment Must be able to communicate effectively with both technical and non-technical co-workers Must be willing to adjust schedule to perform maintenance and upgrades outside of business hours and be part of an on-call rotation.   Job Specific Requirements:    Working knowledge with regards to End User Experience (Business user experience) Prior experience with Agile is preferred.   Preferred Skills:   Number of Openings Available:   1   Worker Type:   Employee   Worker Sub-Type:   Employee   Company:   BCBST BlueCross BlueShield of Tennessee, Inc.   Applying for this job indicates your acknowledgement and understanding of the following statements:   BCBST is an Equal Opportunity employer (EEO), and all employees and applicants will be entitled to equal employment opportunities when employment decisions are made. BCBST will take affirmative action to recruit, hire, train and promote individuals in all job classifications without regard to race, religion, color, age, sex, national origin, citizenship, pregnancy, veteran status, sexual orientation, physical or mental disability, gender identity, or any other characteristic protected by applicable law.   Further information regarding BCBST's EEO Policies/Notices may be found by reviewing the following page:   BCBST's EEO Policies/Notices   BlueCross BlueShield of Tennessee is not accepting unsolicited assistance from search firms for this employment opportunity. All resumes submitted by search firms to any employee at BlueCross BlueShield of Tennessee via-email, the Internet or any other method without a valid, written Direct Placement Agreement in place for this position from BlueCross BlueShield of Tennessee HR/Talent Acquisition will not be considered. No fee will be paid in the event the applicant is hired by BlueCross BlueShield of Tennessee as a result of the referral or through other means.    All applicants will be advised that BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.", "missing": "0", "distinct": "138"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Job_Description"}, {"transformationsData": [{"feature_label": "Recruiter_First_Name", "transformation_label": "String Indexer"}], "feature": "Recruiter_First_Name", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " NC", "max": "prashant", "missing": "0", "distinct": "104"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_First_Name"}, {"transformationsData": [{"feature_label": "Recruiter_Last_Name", "transformation_label": "String Indexer"}], "feature": "Recruiter_Last_Name", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " or", "max": "tolia", "missing": "0", "distinct": "108"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_Last_Name"}, {"transformationsData": [{"feature_label": "Recruiter_Email_Address", "transformation_label": "String Indexer"}], "feature": "Recruiter_Email_Address", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " SSCP Power BI Data Analyst or associate degree in a related field 5+ Power BI specific focus Experience w/ DevOps Framework Experience visualizing data in Power BI Desktop and Power BI Service Extensive experience with building dashboards and custom reports in Power BI Strong analytical orientation and problem-solving skills Focusing on backend work with very large and intricate data models to create high-performing dashboards and paginated reports Rebuild existing SAP Business Intelligence-based reports", "max": "wesley.mercer@matrixres.com", "missing": "0", "distinct": "110"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_Email_Address"}, {"transformationsData": [{"feature_label": "Company_name", "transformation_label": "String Indexer"}], "feature": "Company_name", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " our focus has always been on being the best", "max": "unifyconsulting.com", "missing": "0", "distinct": "111"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Company_name"}, {"transformationsData": [{"feature_label": "SetName", "transformation_label": "String Indexer"}], "feature": "SetName", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " not the biggest.  We believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "max": "abebe woldeargay_08/31/2023_CompTIA_Data Specialist", "missing": "0", "distinct": "138"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "SetName"}, {"transformationsData": [{"feature_label": "CandidateID", "transformation_label": "String Indexer"}], "feature": "CandidateID", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "36821.76", "stddev": "2032.31", "min": " client focus", "max": "OLUKAYODE AKINRIMISI_11/28/2023_Medasource_BI Developer", "missing": "0", "distinct": "23"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "CandidateID"}, {"transformationsData": [{"feature_label": "SurveyResponse", "transformation_label": "String Indexer"}], "feature": "SurveyResponse", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "31661.0", "stddev": "nan", "min": " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.  Company Description StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "max": "rufus.benhur@digitalconsultants.org", "missing": "0", "distinct": "8"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "SurveyResponse"}, {"transformationsData": [{"feature_label": "InterviewType", "transformation_label": "String Indexer"}], "feature": "InterviewType", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " NC", "max": "Technical", "missing": "0", "distinct": "8"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "InterviewType"}, {"transformationsData": [{"feature_label": "Preparationscore", "transformation_label": "String Indexer"}], "feature": "Preparationscore", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "16.68", "stddev": "22.91", "min": " and relevant technical aspects. Strong performance in algorithm design and data structures", "max": "Avworo  OGHENEKEVWE _10/03/2023_Digital Consultants, LLC_Power BI Reports Developer", "missing": "0", "distinct": "17"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Preparationscore"}, {"transformationsData": [{"feature_label": "AutoInterviewsCount", "transformation_label": "String Indexer"}], "feature": "AutoInterviewsCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "323.84", "stddev": "3525.29", "min": " and relevant technical aspects. Strong performance in algorithm design and data structures", "max": "6", "missing": "0", "distinct": "12"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "AutoInterviewsCount"}, {"transformationsData": [{"feature_label": "AutoInterviewsDuration", "transformation_label": "String Indexer"}], "feature": "AutoInterviewsDuration", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "743.87", "stddev": "610.7", "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "max": "NULL", "missing": "0", "distinct": "51"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "AutoInterviewsDuration"}, {"transformationsData": [{"feature_label": "MentorInterviewsCount", "transformation_label": "String Indexer"}], "feature": "MentorInterviewsCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "0.19", "stddev": "0.43", "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "max": "Recruiter", "missing": "0", "distinct": "13"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "MentorInterviewsCount"}, {"transformationsData": [{"feature_label": "MentorInterviewsDuration", "transformation_label": "String Indexer"}], "feature": "MentorInterviewsDuration", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "606.8", "stddev": "1035.23", "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "max": "NULL", "missing": "0", "distinct": "29"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "MentorInterviewsDuration"}, {"transformationsData": [{"feature_label": "Mentor", "transformation_label": "String Indexer"}], "feature": "Mentor", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "0.0", "stddev": "nan", "min": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "max": "Sowmya Attur", "missing": "0", "distinct": "21"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Mentor"}, {"transformationsData": [{"feature_label": "Applicant", "transformation_label": "String Indexer"}], "feature": "Applicant", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "     \"\"AlignmentWithExpectations\"\": 4", "max": "Yama Touray", "missing": "0", "distinct": "30"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Applicant"}, {"transformationsData": [{"feature_label": "Recruiter_InterviewCount", "transformation_label": "String Indexer"}], "feature": "Recruiter_InterviewCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "5.0", "stddev": "5.24", "min": "     \"\"AlignmentWithExpectations\"\": 1", "max": "Williams", "missing": "0", "distinct": "32"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_InterviewCount"}, {"transformationsData": [{"feature_label": "Technical_InterviewCount", "transformation_label": "String Indexer"}], "feature": "Technical_InterviewCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "14.31", "stddev": "136.43", "min": "     \"\"AlignmentWithExpectations\"\": 3", "max": "gwilliams@stonelaurel.com", "missing": "0", "distinct": "15"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Technical_InterviewCount"}, {"transformationsData": [{"feature_label": "InterviewScore", "transformation_label": "String Indexer"}], "feature": "InterviewScore", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "     \"\"InterviewerEngagement\"\": 3", "max": "StoneLaurel", "missing": "0", "distinct": "10"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "InterviewScore"}, {"feature": "InterviewDate_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "24.43", "stddev": "19.96", "min": "0.0", "max": "70.0", "missing": "0"}, "updatedLabel": "InterviewDate_stringindex..."}, {"feature": "Job_Title_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "29.93", "stddev": "27.56", "min": "0.0", "max": "88.0", "missing": "0"}, "updatedLabel": "Job_Title_stringindexer_t..."}, {"feature": "Job_Description_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "66.17", "stddev": "41.14", "min": "0.0", "max": "137.0", "missing": "0"}, "updatedLabel": "Job_Description_stringind..."}, {"feature": "Recruiter_First_Name_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "41.25", "stddev": "31.14", "min": "0.0", "max": "103.0", "missing": "0"}, "updatedLabel": "Recruiter_First_Name_stri..."}, {"feature": "Recruiter_Last_Name_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "43.35", "stddev": "32.84", "min": "0.0", "max": "107.0", "missing": "0"}, "updatedLabel": "Recruiter_Last_Name_strin..."}, {"feature": "Recruiter_Email_Address_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "44.48", "stddev": "33.67", "min": "0.0", "max": "109.0", "missing": "0"}, "updatedLabel": "Recruiter_Email_Address_s..."}, {"feature": "Company_name_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "45.03", "stddev": "34.12", "min": "0.0", "max": "110.0", "missing": "0"}, "updatedLabel": "Company_name_stringindexe..."}, {"feature": "SetName_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "65.25", "stddev": "41.02", "min": "0.0", "max": "136.0", "missing": "0"}, "updatedLabel": "SetName_stringindexer_tra..."}, {"feature": "CandidateID_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "4.85", "stddev": "5.06", "min": "0.0", "max": "22.0", "missing": "0"}, "updatedLabel": "CandidateID_stringindexer..."}, {"feature": "SurveyResponse_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "0.32", "stddev": "0.92", "min": "0.0", "max": "6.0", "missing": "0"}, "updatedLabel": "SurveyResponse_stringinde..."}, {"feature": "InterviewType_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "0.67", "stddev": "1.17", "min": "0.0", "max": "7.0", "missing": "0"}, "updatedLabel": "InterviewType_stringindex..."}, {"feature": "Preparationscore_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "2.41", "stddev": "3.42", "min": "0.0", "max": "16.0", "missing": "0"}, "updatedLabel": "Preparationscore_stringin..."}, {"feature": "AutoInterviewsCount_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "1.34", "stddev": "2.1", "min": "0.0", "max": "11.0", "missing": "0"}, "updatedLabel": "AutoInterviewsCount_strin..."}, {"feature": "AutoInterviewsDuration_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "9.09", "stddev": "14.81", "min": "0.0", "max": "50.0", "missing": "0"}, "updatedLabel": "AutoInterviewsDuration_st..."}, {"feature": "MentorInterviewsCount_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "1.06", "stddev": "2.29", "min": "0.0", "max": "12.0", "missing": "0"}, "updatedLabel": "MentorInterviewsCount_str..."}, {"feature": "MentorInterviewsDuration_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "3.05", "stddev": "6.75", "min": "0.0", "max": "28.0", "missing": "0"}, "updatedLabel": "MentorInterviewsDuration_..."}, {"feature": "Mentor_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "4.43", "stddev": "5.13", "min": "0.0", "max": "20.0", "missing": "0"}, "updatedLabel": "Mentor_stringindexer_tran..."}, {"feature": "Applicant_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "6.53", "stddev": "6.77", "min": "0.0", "max": "28.0", "missing": "0"}, "updatedLabel": "Applicant_stringindexer_t..."}, {"feature": "Recruiter_InterviewCount_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "6.35", "stddev": "7.49", "min": "0.0", "max": "31.0", "missing": "0"}, "updatedLabel": "Recruiter_InterviewCount_..."}, {"feature": "Technical_InterviewCount_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "2.8", "stddev": "3.0", "min": "0.0", "max": "14.0", "missing": "0"}, "updatedLabel": "Technical_InterviewCount_..."}, {"feature": "InterviewScore_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "143", "mean": "0.41", "stddev": "1.26", "min": "0.0", "max": "8.0", "missing": "0"}, "updatedLabel": "InterviewScore_stringinde..."}], "message": "Successfully executed", "status": 1, "userid": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "autoFE_flag": true, "stageId": "6572047fc850af03eddd1462", "FESamplePath": "/FileStore/platform/sampleData/6572047fc850af03eddd1462_AutoFE/part-00000-a0d7dec3-6068-466f-a736-0149705ff7ca-c000.csv", "manualfesamplepath": "/FileStore/platform/sampleData/6572047fc850af03eddd1462_AutoFE/part-00000-a0d7dec3-6068-466f-a736-0149705ff7ca-c000.csv", "samplecount": 143, "originalcount": 143, "dataPercentage": "10", "FEGraph": [{"values": {"label": ["11/7/2023", "9/21/2023", "9/10/2023", "10/14/2023", "10/8/2023", "11/8/2023", "9/18/2023", "9/14/2023", "9/8/2023", "9/13/2023", "9/11/2023", "8/27/2023", "8/26/2023", "10/20/2023", "12/5/2023", "12/4/2023", "10/24/2023", "10/31/2023", "10/12/2023", "10/25/2023", "8/16/2023", "9/12/2023", "8/23/2023", "10/9/2023", "9/1/2023", "11/13/2023", "10/3/2023", "10/26/2023", "8/31/2023", "12/6/2023", "10/7/2023", "11/24/2023", "9/7/2023", "12/1/2023", "8/15/2023", "11/11/2023", "9/20/2023", "10/17/2023", "9/15/2023", "9/24/2023", "11/21/2023", "10/6/2023", "11/18/2023", "11/10/2023", "10/13/2023", "10/21/2023", "11/14/2023", "10/11/2023", "11/1/2023", "9/26/2023", "11/9/2023", "11/28/2023", "10/10/2023", "11/17/2023", "8/21/2023", "8/22/2023", "9/5/2023", "8/11/2023", "11/15/2023", "8/25/2023", "11/2/2023", "10/4/2023", "8/29/2023", "11/30/2023", "8/30/2023", "11/20/2023", "11/3/2023", "11/12/2023", "8/28/2023", "10/18/2023", "8/17/2023"], "data": [1, 3, 1, 1, 1, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 3, 2, 1, 1, 2, 2, 2, 3, 1, 7, 1, 5, 2, 6, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2, 2, 1, 2, 5, 4, 2, 2, 3, 3, 3, 2, 1, 4, 3, 4]}, "label": "InterviewDate", "count": 71, "min": "10/10/2023", "max": "9/8/2023"}, {"values": {"label": ["-111.0 - -99.3", "-99.3 - -87.6", "-87.6 - -75.9", "-75.9 - -64.2", "-64.2 - -52.5", "-52.5 - -40.8", "-40.8 - -29.1", "-29.1 - -17.4", "-17.4 - -5.7", "-5.7 - 6"], "data": [18, 22, 20, 8, 14, 15, 6, 15, 14, 11]}, "label": "NoofDays", "count": 10, "min": -111.0, "max": 6}, {"values": {"label": ["42.0 - 66.6", "66.6 - 91.2", "91.2 - 115.8", "115.8 - 140.4", "140.4 - 165.0", "165.0 - 189.6", "189.6 - 214.2", "214.2 - 238.8", "238.8 - 263.4", "263.4 - 288"], "data": [11, 23, 16, 15, 11, 18, 19, 14, 6, 10]}, "label": "LogInterviewID", "count": 10, "min": 42.0, "max": 288}, {"values": {"label": ["0.0 - 274.5", "274.5 - 549.0", "549.0 - 823.5", "823.5 - 1098.0", "1098.0 - 1372.5", "1372.5 - 1647.0", "1647.0 - 1921.5", "1921.5 - 2196.0", "2196.0 - 2470.5", "2470.5 - 2745"], "data": [1, 0, 0, 0, 0, 0, 0, 0, 0, 142]}, "label": "QID", "count": 10, "min": 0.0, "max": 2745}, {"values": {"label": ["Tableau Cloud opportunity with Unify Consulting", "Clinical Data Analyst", "Senior BI Developer", "Business Intelligence Report Analyst", "Business Intelligence Analyst", "Lead SQL Developer", "Navy ERP Level III Data Analyst", "Power BI and Power Apps Developer", "Senior Business Analyst Data Visualization", "Data Specialist", "business intelligence developer", "Power BI Developer", "Product BI Analyst", "PowerBI Eng", "Data Engineer/ETL Developer", "Business Intelligence Analyst-Power BI", "Software Engineer, Business Intelligence", "BI Developer", "Senior SQL Database Administrator", "Senior Developer (Tableau + ETL)", "Embedded BI Data Visualisation Specialist SIBU510", "ETL Developer", "Business Intelligence Developer (BI)", "Tableau developers", "Tableau Developer (Business Intelligence)", "Senior Reports Developer", "Sr Engineer, Data Management and Analytics role!", "Solution Assessment Consultant", "BI Reporting", "siness intelligence developer", "Data Engineer - Consultant/Senior", "Data Analytics", "Power BI Reporting Specialist", "Business Development Specialist", "Business Intelligence Architect", "SQL Developer", "Business Intelligence Lead Developer", "Sr. Consultant, Power BI Analyst", "Senior IT Business System Analyst", "Business intelligence Analyst 2", "Application Specialist", "DATABASE ADMINISTRATOR", "Data Governance Analyst", "BI Developer/Analyst", "Data Warehouse Specialist", "Power BI Specialist", "Data Analyst II", "Business Intelligence Analyst II", "Associate BI Developer", "BI Data Engineer", "Database Administrator", "Business Intelligence Developer", "Systems Analyst", "Data Developer II", "Senior Analyst, IT Business Analyst", "Data Analyst", "Tableau Administrator", "Technical Data Analyst (Remote)", "Sr Engineer, Data Management and Analytics", "Power BI / SSRS Developer", "Tableau Data Analyst", "Tableau Developer", "IT Data Specialist", "Tableau Cloud", "Business Data Analyst", "Power BI and Reporting Analyst", "Power Platform Developer", "Senior BI Architect", "Data Visualization Manager", "Sr Data Analyst", "Database Developer", "Senior Report Developer", "Sr. Datawarehouse and BI Developer", "power BI Developer", "Sr. Data Engineer", "Sr. Architect, Power BI", "Data Integration Engineer", "Sr Business/Data Analyst", "Sr. Data Analyst", "Tableau and Database Specialist", "Software Engineer", "EIT Team Lead", "Data Developer 2", "Power BI Reports Developer", "Analytics Consultant", "Data Engineer", "Senior Data Base Developer/Data Modeler", "Power BI Developer/Analyst (Corporate Travel)", "Associate Consultant, Data Analyst"], "data": [1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 7, 4, 1, 1, 2, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 2, 4, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 2, 2, 3, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 6, 1, 2, 1]}, "label": "Job_Title", "count": 89, "min": "Analytics Consultant", "max": "siness intelligence developer"}, {"values": {"label": ["Professional who expertly designs, creates, and implements Self-Service BI data models. Plan, implement and oversee comprehensive BI delivery strategy. Design, build and deploy EPIC reporting solutions (Clarity, Caboodle, RWB, Radar, Metrics) Innovator, adept at conceptualizing and developing marketable tools that cater to the needs and demands of multiple clients. Build relationships with the business users, understand how data can solve business problems, and formulate business requirements for the BI tools. Work with data warehouse System Analyst and Engineering team to implement data schema to accommodate new analytics requirements. Manage meta data for BI models, reports, and dashboards (author, usage, data source) Create technical and functional documentation and provide training for BI tools.", "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites up to 50% of the time Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Key Responsibilities:  Develop and optimize SQL queries for data extraction and analysis. Collaborate with business stakeholders to gather and understand reporting requirements. Create visually compelling and insightful reports using Looker. Field daily report requests from multiple Backoffice teams to meet the needs of customers. Conducting and troubleshooting reports and data models. Comprehend and work with Key Performance Indicators (KPIs) and metrics.  Qualifications:  A minimum of 10 years of experience in report writing or as a business analyst. Proficiency in SQL query development (queries, stored procedures, functions) and data analysis. Familiarity with SQL Server databases and data warehousing. Proven experience with one or more of the following reporting tools: Looker, Business Objects, Power BI, or Tableau. Strong understanding of KPIs and metrics. Exhibit adaptability and a quick learning curve to efficiently contribute to projects.  Knowledge of Snowflake Datawarehouse query development is a plus.", "Job: BI Developer  Location: Woodlands, TX  Duration: 6 Month contract-to-perm     Job Description *  The BI Developer will be responsible for the design and development of data models that support enterprise analytical reporting and dashboard solutions. This position will work closely with business users and executives to gather, define, and translate business requirements into BI solutions. The applicant must have excellent collaboration skills with the ability to communicate concepts and solutions effectively and clearly. This position will also play a key technical role requiring expert level skills in the design, development and implementation of data warehousing and BI solutions. This person needs to be located in the Houston, TX area to attend in person meetings (about once every other month) to collaborate on team meetings.", "Essential Functions/ Responsibilities: The demands described here are representative of those that must be met by an employee to successfully perform the essential functions of this job. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Lead technical design, implementation, and problem resolution Partner cross-functionally to define and complete well-structured user stories Maintain, evolve and adhere to a maturing data governance policy Maintain and evolve a rapidly growing and robust data model containing vital customer information Design and implement reliable ETL solutions from a variety of data sources (APIs, Proprietary DB, No-SQL ) Provide best in class business analytics in the form of web-based reports and dashboards Define Data Engineering project feature delivery timelines and risks Provide mitigation options to solve for blockers and technical risks as they arise Identify technical debt, and communicate plans to manage it responsibly Provide mentoring as needed to team members Required Skills/Abilities: The requirements listed below are representative of the knowledge, skills, and/or abilities required to perform each essential duty satisfactorily. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Desire and passion to learn from like-minded, experienced, data-obsessed team members A strong sense of ownership, pride and commitment to quality Mastery of Microsoft Power BI Mastery of Business Intelligence data visualization tools Mastery of RDBMS (MSSQL) and/or NoSQL database technologies (MongoDB, Cosmos DB) Experience with cloud-based and/or on premises data warehousing (Azure preferred) Experience with Power BI Embedded Analytics Experience with Agile software development principles A track record of teamwork through high quality and timely Data Engineering projects Benefits you will receive:  Opportunity to work on an exciting and highly visible project at SEAM Group Participation in a fast-growing company Opportunity to learn new technologies and expand your skillset Flexible time off Flexible work hours Collaborative and embracing culture Comprehensive healthcare plan that includes access to health, dental, vision, disability, and life insurance at group rates 8 Paid Holidays Company 401k matching program Educational Reimbursement up to $1,000/year", "Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.", "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.   Key Responsibilities:   Data Visualization Design:  Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques.  Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels.  Data Analysis and Insight Generation:  Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization.  Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization.  Data Quality and Governance:  Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams.  Implement data quality checks and validation processes to maintain the integrity of visualized data.  Stakeholder Management and Collaboration:  Engage with various departments and business leaders to gather requirements and understand their data needs.  Collaborate with stakeholders to refine visualization designs and align them with business objectives.  Data Strategy and Technology:  Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities.  Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.  Qualifications and Requirements  Bachelor's or Master's degree in Data Science, Data Visualization, Computer Science, or comparable experience.  Proven experience (typically 5+ years) in data visualization, with a track record of creating impactful visualizations.  Strong proficiency in data visualization tools such as Power BI, Tableau, or other industry-leading platforms.  Solid understanding of data analysis and data interpretation techniques to support the creation of meaningful visualizations.  Demonstrated ability to translate complex data concepts into clear and visually appealing presentations.  Strong communication and collaboration skills to work effectively with cross-functional teams and stakeholders.  Analytical mindset with a passion for discovering insights through data visualization.", "https://ds-llc.com/technicaldataanalyst", "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "About the job StrideCare, a healthcare multi-specialty physician group, is currently seeking a highly skilled and experienced Database Architect and Data Analyst to join our dynamic team. The ideal candidate will possess expertise in ETL processes, and Power BI, and have prior experience in the medical field.  Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.", "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed    Experience Preferred  \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.", "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred 5-7 years experience is preferred Basic knowledge of programming languages in order to comprehend reading code and basic functions. Ability to create business solutions that increase competitive advantage. Ability to exercise good judgment in selecting methods and techniques for obtaining solutions. Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines. Ability to solve technical problems/ processes and understand complex details. Ability to increase operating efficiency by producing high quality technical solutions. A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level. Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must.", "DATA ENGINEER \u2013 CONSULTANT/SENIOR  Lotis Blue Consulting is a growth advisory that helps clients grow and transform their organization to achieve their business goals. We apply expertise in behavioral and data science to set business and go-to-market strategy and then improve organization alignment to enable effective execution. We are looking for data and analytics-savvy professionals to join our Chicago-based team of consultants who have proven Data Engineering expertise and experience working with other data analysts and project resources. This role is client-facing and will be a fully-fledged member of the client service project team helping us to identify, understand and solve complex problems.  PRIMARY RESPONSIBILITIES Work with the Lotis Blue team to develop hypotheses that explain business problems or opportunities, and then create the analytical work plan to test them Create and manage highly structured data requests that acquire the right information in the right format to execute on the analytical work plan Serve as lead point of contact with the client and be accountable for all matters related to data acquisition, cleaning, integration, management, transformation, interpretation, and analytics Work with Power BI or Tableau to present and visualize new insights or reveal complex relationships between variables in a clear, accurate, and compelling manner that supports evolving ideation Lead discussions internally around the relationship between different data elements to add to the Lotis Blue team\u2019s knowledge, awareness, clarity, and depth in addressing the client situation and potential solutions Develop and provide meaningful insights and relevant points-of-view on complex concepts directly to clients through simple, plainspoken materials Contribute to leading-edge thinking that deepens the Firm\u2019s capabilities in data science and engineering and differentiates Lotis Blue in the market QUALIFICATIONS & EXPERIENCES Bachelor\u2019s degree in computer science, mathematics, engineering or related field At least two years of experience working on an analytics or data science team Experience communicating directly with clients and addressing business problems through analytics Passion for learning and track record of keeping up to date on technologies, platforms, and tools Some travel may be required REQUIRED KNOWLEDGE, SKILLS & CAPABILITIES Business acumen Teamwork and collaboration Critical thinking and ideation Project management Experience with and capability to execute on: Production databases (e.g., SQL Server, MongoDB) and related administrative tools (e.g., SQL Management Studio, Navicat) Python (preferable) or R Business Intelligence tools (e.g., Power BI, Tableau) PREFERRED KNOWLEDGE, SKILLS & CAPABILITIES Working knowledge of Azure Experience managing databases in the cloud (as well as AWS) Working knowledge of data transformation tools (e.g., Alteryx) Experience operationalizing data pipelines to support analytics in a production environment Coursework or qualification in Machine Learning Experience applying ML techniques in real world business scenarios", "Position Summary Join our team as an Analytics Consultant and help drive our marketing, call center, claims, and retention initiatives to new heights! We're seeking a highly skilled individual with a focus on data analysis and advanced analytics to support our efforts across all business units.  As an Analytics Consultant, you'll be responsible for analyzing data, providing actionable insights, and making data-driven decisions that impact our company strategy efforts. With your expertise in data analysis and advanced analytics, you'll play a key role in optimizing our analytics capabilities for maximum impact and ROI. You'll collaborate closely cross-functionally to gather data, analyze trends, and uncover insights that support our business objectives. You\u2019ll support the broader business in performing deep dive analyses to drive business growth. Think of yourself as an internal consultant tasked with improving business processes utilizing data driven insights.  Located at our office in Naperville, our office environment is a key driver of our company culture and employee experience, so a regular in-office hybrid model (generally T-TH in-office and M & F remote) is required.  Responsibilities include but are not limited to: Utilizing advanced analytics approaches such as cohort analysis, risk analysis, and predictive modeling to inform decision-making and improve the customer experience across the organization. Collaborating with various teams to gather and analyze customer data and provide insights that support decision-making and improve overall business processes. Developing dashboards and visualizations to provide regular reporting and insights to support various teams within the company. Identifying incremental opportunities to improve business processes and drive growth by leveraging data to inform marketing and acquisition efforts. Utilizing data to inform company-wide strategies and initiatives that drive growth and efficiency. Providing thought leadership on analytics and identifying new and innovative ways to leverage data to drive business growth across the organization. We\u2019re Excited if This is You: 5+ years of experience in analytics and 3+ years in business intelligence roles In-depth technical knowledge in data modeling, SQL, and Python Strong understanding of business metrics and ability to drive growth. Proficiency in driving data-driven insights and informed business decision making. Demonstrated track record of delivering significant business impact through data analysis and implementation of insights. Strong communication and collaboration skills, with the ability to work effectively in a team environment. Proven track record of partnering with Analytics and Commercial Finance functions to drive improvements by way of analytical capabilities. Education Bachelor\u2019s degree  Computer Skills Needed to Perform this Job Proficiency in Microsoft and Google Suites Prior knowledge of SQL Understanding of ETL/Cloud Infrastructure Proficiency in Tableau, Looker, or other BI tool", "This is the job\u2026. Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026. 3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026. Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "JOB OVERVIEW  Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Senior Analyst \u2013 Business Strategy and Data Visualization  Incredible well-established, high growth Texas based company is looking for a to join their San Antonio team! Company offers challenge, is team-oriented, has a great work/life balance and a career path! This Company is recognized for its customer service focus and single digit turnover!  The Senior Analyst is responsible for analyzing data and presenting insightful recommendations and findings!  Essential Functions:  \u00b7 Informs marketing strategy by analyzing marketing campaign effectiveness and ROI, sharing insights about response rates across channels and audiences with Marketing Managers  \u00b7 Perform analysis and creates insight that inform sales and marketing decisions in operations, sales, marketing, and support groups.  \u00b7 Presents valuable insightful information and recommends actionable items.  \u00b7 Downloads data from multiple systems and reporting databases, develops and disseminates reports to end users.  \u00b7 Responds to data requests from management and performs basic reporting.  \u00b7 Develops and executes complex reports and custom queries.  \u00b7 Prepares technical reports by collecting, analyzing, and summarizing information and trends from various systems.  \u00b7 Maintains databases for the collection, analysis, and dissemination of operational data throughout the company.  \u00b7 Entry, extraction, and ad-hoc reporting from various systems to support business objectives and the needs of the department.  \u00b7 Provides report training to applicable departments/roles.  \u00b7 Creates and provides opportunity and market share reports and analysis using all applicable business reporting databases.  Qualifications:  \u00b7 High school diploma or equivalent required; BA/BS, preferred.  \u00b7 A minimum of three years of work-related experience required.  \u00b7 Strong knowledge of data analytics and applicable reporting tools  \u00b7 Strong analytical and database management skills  \u00b7 Strong working knowledge and/or experience including but not limited to DBS, Tableau, Alteryx, WMS, Salesforce, MS Dynamics and Outlook  \u00b7 Ability to identify problems and to review related information to develop and evaluate options and implement solutions.  \u00b7 Consulting and influencing abilities.  \u00b7 Excellent interpersonal and customer service skills  \u00b7 Creative ability to understand the implications of new information for both current and future problem-solving and decision-making.  \u00b7 Ability to train and motivate others.  \u00b7 Outgoing personality  #IND1  Job Type: Full-time  Pay: $81,000.00 - $88,000.00 per year  Benefits:  401(k) 401(k) matching Dental insurance Flexible spending account Health insurance Health savings account Paid time off Parental leave Professional development assistance Tuition reimbursement Vision insurance Schedule:  Monday to Friday Work Location: Hybrid remote in Irving, TX 75062", "Data Specialist", "Spalding Consulting, Inc. is seeking a Business Intelligence Developer in Lexington Park, MD -Remote.  Spalding Consulting, Inc. is a professional services company delivering cutting-edge solutions to the Department of Defense since 2001. Our expert-level solutions include software development, information technology, program management, financial management and business intelligence services. Spalding Consulting offers competitive compensation, career development, flexible work schedules and excellent benefits.  Position Type: Full-Time Work Location: This is a remote position (see on-site requirements below).  **On-Site Requirements: On-boarding will require 1-2 visits to Patuxent River, MD for candidates that are local to the area. Candidates out of state will be onboarded virtually. Training will be virtual and telework maximized/permitted to the greatest extent possible, however for local candidates, training/tasking may require on-site work a few hours per week. Future on-site/telework requirements/schedules may change as additional client direction is received.      Essential Functions: Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.   Qualifications and Experience:  Required: At least 5 years of experience developing software programs using any language At least 2 years\u2019 experience of developing solutions to support an ETL process Experience with Oracle, SQL, or Teradata databases Experience with working on a team of at least 5 developers Experience with understanding and modifying data models  Desired: Development experience using Tableau or Qlik Experience using Atlassian Jira Experience making REST API calls Experience in an Agile development environment   Security Clearance: Must be eligible to obtain a Secret clearance. Requirements to obtain a clearance include US Citizenship, security investigation, etc.", "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "Technossus, a leading software solutions and technology consulting company, is seeking a qualified and experienced Sr. Consultant, Power BI Analyst to join our team. As a Sr. Consultant, Power BI Analyst, you will be responsible for developing interactive and insightful dashboards and reports to help our clients make better-informed business decisions. At Technossus, we value our commitment to delivering cutting-edge solutions, and our Sr. Consultant, Power BI Analyst is a key player in ensuring our clients receive exceptional value and quality every time.  Location: Full time onsite in Long Beach 5 days a week   Responsibilities Collaborate with stakeholders and team members to understand their business intelligence needs and translate them into data visualizations that provide actionable insights. Develop interactive dashboards and reports in Power BI to track business performance and identify trends. Analyze and interpret data to provide recommendations that enhance decision-making processes. Design and implement data models and data architecture to support the management and analysis of large data sets. Identify and resolve data quality and integration issues. Share best practices with the team to increase knowledge and optimize processes. Stay up-to-date with the latest Business Intelligence trends and technologies. Requirements  Proven experience in developing high-quality dashboards and reports in Power BI. Understanding of Data Warehouse design and architecture. Strong business acumen and the ability to translate business requirements into technical solutions. Excellent communication and presentation skills. 5+ years of working experience as BI Analyst and a bachelor's degree in engineering, computer science, commerce degree or equivalent 5+ Years of Power BI experience with DAX and Power Query Strong/excellent SQL Skills including PL/SQL Benefits  Our job titles may span more than one career level. The starting base pay for this role is between $110,000.00 and $140,000.00. The actual base pay is dependent upon many factors, such as: training, transferable skills, work experience, business needs, and market demands. The base pay range is subject to change and may be modified in the future. This role may also be eligible for bonus and benefits.  Benefits:  Medical, Dental, Vision, 401k Match Health Savings & Flexible Spending Account Health Care FSA Dependent Day Care FSA Company paid life, AD&D, & LTD insurance Flexible PTO policy Continued training to level up your skills Supplemental benefits available: Accident Insurance Critical Illness Insurance Hospital Indemnity Employee Assistance Program Physical Demands:  While performing the duties of this job, the employee routinely is required to sit; walk; talk and hear; use hands to keyboard, finger, handle, and feel; stoop, kneel, crouch, twist, reach, and stretch. Speaking and hearing ability sufficient to communicate in person, over telephone, and/or video conference.  The ability to stand, walk, and sit in a computer chair for long periods of time. The ability to see and respond to dangerous situations. Speaking and hearing ability sufficient to communicate in person, over telephone and/or video conferences. Sufficient hand, arm, and finger dexterity to operate a computer keyboard and other office equipment. Emotional Demands:  While performing the duties of this role the employee is required to maintain a professional and positive attitude with clients and colleagues. Frequent deep thinking and interactions with multiple stakeholders and clients. Ability to utilize knowledge and experience to problem solve, make quick decisions, and interpret proposals publicly or in group setting.  Ability to problem solve Able to make quick decisions Frequent deep thinking Communicate clearly with coworkers Lead and direct a team Articulate objectives and expectations clearly Speak publicly Interpret data", "Position Overview The Talent Business Intelligence (BI) Reporting Analyst works within Talent & Program Delivery to provide expertise in data analysis, business intelligence tools, and learning and development measurement principles to contribute to the ongoing improvement of employee performance and skills within the organization. This individual will design, develop, and validate dashboards, alerts, and reports that measure business performance across Talent & Delivery programs for management purposes. Ensures information is easily available to users for direct consumption. Conducts analyses of functional business processes and participates in the development of business cases in the support of continuous improvement programs and the implementation of enabling technologies. This individual provides leadership in facilitating information gathering, structured documentation and presentation of findings to all levels of management. This role enhances program effectiveness and enables sound business decisions by providing insights and data which are accurate, relevant, and reliable. Primary Responsibilities To perform this job successfully, an individual must be able to perform each essential duty satisfactorily. The requirements listed below are representative of the knowledge, skill, and/or ability required. Reasonable accommodations may be made to enable individuals with disabilities to perform the essential functions.  Collect and organize data from various sources, including learning management systems (LMS), employee performance training records, surveys, and other relevant systems. Define and track key performance indicators (KPIs) related to learning and development, such as training completion rates, learner engagement, skill acquisition, and business impact. Interprets & analyzes operational metrics in order to create meaningful dashboards & reporting related to Talent & Program Delivery initiatives. Design, build and deploy BI solutions Works with subject matter experts, especially within various departments across the enterprise, to understand business KPIs and resulting outcomes, defining requirements for data integration, reporting, analysis, and descriptive, predictive, and prescriptive business intelligence solution options. Builds and updates process control measurements and changes existing reports and dashboards as needed Increases the usage practices around objective performance data in day-to-day management activities Other duties as assigned Education and Experience  The minimum education, experience, skills and certifications/training required to successfully perform the job:  Bachelor\u2019s degree in business, computer science, information systems or equivalent work experience Minimum 4 years\u2019 experience Oracle BI, SAP Business Objects etc. Knowledge of Data Warehouse platforms Knowledge of languages such as Python, R, Scala, SQL, etc. Experience working with multidimensional data sets/databases such as SQL, Salesforce, JSON, etc. Strong MS Office skills, especially with Power BI and Excel Understanding of report writing required Experience with Lean Six Sigma preferred", "This contract is W2 ONLY, no C2C.   The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. You will be responsible for extracting, transforming, and loading data from various sources into our data warehouse, ensuring the accuracy, reliability, and performance of our data pipelines. Additionally, this role will also provide support for Reporting and Analytics assignments as needed.  Key Responsibilities:  Data Extraction and Transformation: Design and develop ETL processes to extract data from multiple sources, transform it to meet business requirements, and ensure data quality and consistency. SQL Server Integration Services (SSIS): Create, optimize, and maintain SSIS packages to automate data workflows, including data cleansing, enrichment, and loading into target systems. Complex SQL Queries: Create and optimize complex SQL queries, stored procedures, and functions to extract, transform, and load data from various data sources. Business Requirements: Collaborate with cross-functional teams to gather business requirements and translate them into technical specifications for data integration and ETL solutions. Data Profiling and Analysis: Perform data profiling and analysis to identify data quality issues and propose appropriate solutions. Data Quality: Implement data cleansing, transformation, and validation rules to ensure the accuracy and consistency of data. Data Modeling: Collaborate with database administrators and data architects to design and maintain data models and database schemas. Managing Data Pipelines: Manage and maintain data pipelines, ensuring their reliability, performance, and scalability to meet business needs. Agile Methodology: Apply Agile methodologies to ensure that ETL processes align with Agile principles and practices, facilitating collaboration, and adaptability within the team. Software Development Life Cycle (SDLC): Demonstrate a strong understanding of the Software Development Life Cycle (SDLC) process, ensuring that testing activities are aligned with each phase of the SDLC, from requirements gathering to deployment. Documentation: Develop and maintain documentation, including data flow diagrams, data dictionaries, and technical specifications. Performance Optimization: Monitor and optimize the performance of SQL queries, ETL processes, and database systems to ensure efficient data processing and system reliability. Issue Resolution: Troubleshoot and resolve data-related issues, including data integration failures, data quality problems, and performance bottlenecks. Industry Trends: Stay up to date with industry trends and best practices in SQL development, ETL, and data integration technologies. Be part of an on-call rotation. Qualifications / Requirements  Bachelor\u2019s degree in information systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred. Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+ years\u2019 experience with advanced SQL and SSIS Prefer 2 years\u2019 experience with Microsoft BI Suite, Power BI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint and modeling tools such as ERStudio Prefer experience with other ETL tools such as AWS Glue, etc. Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization. Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused. Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data Python experience a plus Familiarity with API integrations About Symmetry  Symmetry Lending specializes in providing mortgage fulfillment services to include origination, servicing, and capital markets needs to various Lenders across the country with whom we partner. We have offices in Atlanta, GA, Eden Prairie, MN, Denver, CO, Orlando, FL, and Anaheim, CA, and we do business from coast to coast. We take great pride in building a diverse team of motivated professionals that contribute to an exciting work atmosphere. We provide a competitive benefits package including medical, dental, and vision plan options, paid time off, and more.", "As a Business Solution Architect, you will\u2026  lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design.   Lead the Functional team.  Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms", "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices. What you have:   Required Knowledge, Skills and Abilities:   Hands-on experience working with modern ETL, BI tools & technology. Hands-on delivery experience in leading cloud data platforms: Snowflake, Azure Synapse. Extensive recent experience with SQL and SQL analytics: SQL Server, SSIS, SSRS, SSAS Hands-on experience implementing ETL pipelines using packaged tools: Attunity, Azure Data Factory Familiarity and experience with common BI and data exploration tools \u2013 Power BI, DAX Software development experience with C/C++ a definite plus. Scripting experience with Python, Ruby, Perl, Bash a definite plus. Perform data analysis required to troubleshoot data related issues and assist in the resolution of data issues. Strong organizational skills. Excellent written and oral communication skills. Business / Retail Operations background preferred.", "LivePerson (NASDAQ: LPSN) is a global leader in trustworthy and equal AI for business. Hundreds of the world's leading brands \u2014 including HSBC, Chipotle, and Virgin Media \u2014 use our Conversational Cloud platform to engage with millions of consumers safely and responsibly. We power a billion conversational interactions every month, providing a uniquely rich data set and safety tools to unlock the power of Generative AI and Large Language Models for better business outcomes.  At LivePerson, we foster an inclusive workplace culture that encourages meaningful connection, collaboration, and innovation. Every mind is invited to ask questions and actively seek new ways to achieve success and reach their full potential. We operate as one with a growth mindset. This means spotting opportunities, solving ambiguities and seeking effective solutions to challenges that make things better.   Overview:  Reporting to the Director of Data, Models, and Decisions (DMD), the successful candidate has an opportunity to join an innovative data science and engineering team that's operationalizing data across the organization. We see model-driven processes and workflows as a means to reduce uncertainty, reveal opportunity, and generate operational leverage that collectively create a new dimension of competitive advantage and lay the foundation for new revenue streams.  You will: Apply cutting-edge data visualization techniques to reveal actionable insights to business users Solve challenging data problems through in-depth analysis of many systems Apply statistical analysis to summarize data and forecast trends Participate in Data Requirement Gathering, Data Preparation and devise proper Data Interpretation Ensure data is maintained in our platform and all systems with best quality, always considering automation and scalability of your solutions Evangelize our products and train others on Data Visualization and presentation techniques, enabling them to create dashboards and reports themselves  You have: Demonstrated ability to uncover insights and relationships across numerous datasets 5+ years of experience analyzing data and creating dashboards and reports (Looker / PowerBI / Tableau / Metabase) 5+ years of experience interpreting and writing advanced SQL 2+ years of experience in Python and good working knowledge of pandas and matplotlib Bachelor's degree in Computer Science, Statistics, or another quantitative field Ability to work closely with teammates in a highly collaborative environment and simultaneously be a self-starter with strong individual contributions Excellent communication and presentation skills  Benefits: The salary range for this role will be between $88,000 to $120,000 Final compensation will be determined by a variety of factors, including, but not limited to, your location, skills, experience, education, and/or certifications. During the phone screening, the recruiter will provide the location-specific salary range for this role. Regardless of your personal situation or where you are in the world, LivePerson offers comprehensive and great benefits programs to meet your needs:  Health: medical, dental, vision and wellbeing. Time away: Public holidays and discretionary PTO package for flexible days off with manager approval. Financial: 401K, ESPP, Basic life and AD&D insurance, long-term and short-term disability Family: parental leave, maternity support, fertility services. Development: tuition reimbursement, native AI learning. Additional: 24/7 access to professional counselors, voluntary insurance coverage, exclusive perks and discounts. #LI-Remote", "- Open to W-2 candidates - Building Power BI dashboards - Some sort of risk environment (Could be cyber/operations/etc..) OR another financial institution", "Design and develop interactive Power BI reports and dashboards. Extract, transform, and load (ETL) data from various sources into Power BI. Collaborate with business users to gather requirements and translate them into effective visualizations. Develop custom applications using Power Apps to streamline business processes. Integrate Power Apps with other Microsoft 365 applications and services. Create canvas and model-driven apps that meet the organization's needs. Design and implement data models to support reporting and analytics requirements. Perform data analysis to identify trends, patterns, and insights. Automate repetitive tasks and workflows using Power Automate (Flow). Ensure seamless integration between Power BI, Power Apps, and other Microsoft 365 tools. Collaborate with cross-functional teams to understand business requirements and provide technical solutions. Train end-users on how to use Power BI reports and Power Apps applications effectively.", "Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.   Qualifications And Education Requirements   Bachelor's or Master's degree in Computer Science, Information Systems, Data Science, or a related field.   Must be local or able to work Hybrid in Dallas, TX   Proven experience as a Database Architect, Data Analyst, or a similar role.   Strong proficiency in designing and managing relational databases (e.g., SQL Server, Oracle, MySQL).   Expertise in ETL processes, data integration, and transformation techniques.   In-depth knowledge of NetSuite, including configuration, customization, and integration capabilities.   Proficiency in data analysis and visualization tools such as Power BI, Tableau, or similar platforms.   Familiarity with medical data management, healthcare industry regulations, and terminology.   Strong analytical and problem-solving skills with the ability to extract insights from complex datasets.   Excellent communication and collaboration skills to effectively work with cross-functional teams and stakeholders.   Attention to detail, with the ability to prioritize tasks and manage multiple projects simultaneously.   StrideCare Offers a Total Rewards Benefits Package That Includes   Major medical insurance   Dental and vision   401k   Long- and short-term disability   Corporate outings   Fun and casual corporate environment   PTO   Paid holidays   No weekends, evenings, nights, or holidays (paid holidays)   Excellent work - life balance (Monday - Friday work schedules)   Employee Assistance Program and more!", "Responsibilities Work closely with Data integration team to stage data for the reporting requirement Build rich visualization dashboards using tableau , SSRS and other relevant technologies Perform report administration & user access provisioning activities for optimized performance Support business team for self-service and ad-hoc activities Set standards for reporting & BI functions; design templates which are scalable, repeatable, and simple Work with business teams to understand their unique business and technical requirements for tools and analytics Lead the requirement gathering, design and development of reporting solution using various tools e.g Tableau, MS SSRS for all different types of reporting for all LOB. Lead the development of Master Reporting Inventory as part of Data Governance initiatives. Effective collaboration with multiple levels of end users including data stewards, leadership and management, executive and other end users. Led the reporting design and architecture and work closely with infrastructure to meet the needs of the business Work with other technical staff, such as networking to ensure connectivity, compatibility, and scalability of reporting platform & systems Support ongoing monitoring, automation and refinement of reporting solutions Work with management to identify and resolve reporting related issues Participate in process reviews and enhancements. Participate in design and delivery of cubes, dashboards and various self-service business intelligence solutions. Maintains a high degree of business functional knowledge and current automated technologies and tools. All other duties assigned", "Hey Jane,  My name is Bradie, and I work with Brooksource, a National IT Services Company. I came across your profile and was extremely impressed with your PowerBI and SQL exposure paired with your business intelligence experience! That is exactly the kind of background our client is currently looking for.  Based on your experience, I have an awesome opportunity for you! I am reaching out to you today as an extension of our Fortune 24 Healthcare Insurance client, Centene Corporation.  We are currently seeking a mid-level Power BI Engineer to support the creation of analytics and visualization solutions tied to a suite of applications that encompass the following business functions: Fraud, Waste and Abuse, Claims processing and Quality Assurance. You will primarily support new application builds as well as improvements on existing applications.  What we are looking for: - 2-5 years professional experience creating/building data visualizations and dashboards - Strong experience with PowerBI and SQL queries -Exposure to Snowflake architecture mapping and creation preferred - Experience with Gitlab, Confluent Cloud, Kafka, or equivalent tools - High attitude/aptitude and ability to work in large data set environment  Additional Details: - 5+ month contract (potential to convert to FTE) - Fully remote schedule - W2 Only (no sponsorship provided)  I believe this opportunity could align great and would love the chance to speak with you further! Please let me know if you would be interested and when you would be available for a quick 10-minute phone call discussing the position further.  Looking forward to hearing back from you!  Bradie Schoemehl Senior Technical Recruiter", "Salary in the $60-80K range + 10-20% bonus.  Here's some info on the need - MUST have  at least one year of experience with SQL, ETL, SSRS, and Power BI experience (data modeling, data viz, dashboarding, ad hoc reporting).  Seeking an Associate Business Intelligence (BI) Developer to contribute to the creation of BI solutions, transforming raw data into valuable insights.   Key Responsibilities:  \u2022   Assess requests for data interfaces, perform data profiling, and determine optimal methods for request fulfillment  \u2022    Translate diverse business requirements into precise technical specifications  \u2022     Construct data models to support data visualizations, interactive dashboards, and ad hoc data inquiries  \u2022    Engage in collaborative efforts with fellow developers and end-users as requests progress through their life cycle  \u2022     Conduct unit testing and quality assurance assessments on data models and reports  \u2022   Produce, review, interpret, and troubleshoot intricate code while adhering to established standards  \u2022   Investigate and resolve unforeseen work items, communicating findings promptly to the team and end users  \u2022    Evaluate and enhance our existing BI system   Essential Qualifications:  \u2022    Minimum of 1 year of experience in BI development  \u2022     Proficiency in SQL, SSRS, Excel, and Power BI  \u2022    Familiarity with relational databases, with a preference for understanding SQL Server Database Management Systems (RDBMS) principles  \u2022    Proficient in ETL processes and skilled in implementing data transformations using SQL and Power BI  \u2022     Basic knowledge of source control is advantageous", "Description  Robert Half is currently working with a client seeking a Data Analyst. The Data Analyst will be responsible for the preparation of financial reports that serve as summary information for managers. The Data Analyst will be analyzing a variety of data types and reporting on that information. This Data Analyst position is for someone who is deadline driven and highly analytical.  What you get to do every single day   Call out relevant insights from compiled analytical reports  Organize, manipulate, and extract data in response to management requests  Create and share key decision-making data for market assessments, forecasting and further investigation  Complete data mining projects- Analyze corporate reports in order to create financial reports  Requirements   Complete competence in data management and manipulation  Ability to work independently with minimal oversight  BS/BA in Accounting, finance, or economics  Skilled in spreadsheet and reporting applications, including V-lookups, pivot tables, and queries  Strong communication skills and able to receive criticism well  Critical thinking and problem-solving skills are a must, as well as great attention to detail  Understanding of a variety of data models  5+ years of experience in financial planning and analysis, data analysis or similar role  Robert Half is the world\u2019s first and largest specialized talent solutions firm that connects highly qualified job seekers to opportunities at great companies. We offer contract, temporary and permanent placement solutions for finance and accounting, technology, marketing and creative, legal, and administrative and customer support roles.  Robert Half works to put you in the best position to succeed. We provide access to top jobs, competitive compensation and benefits, and free online training. Stay on top of every opportunity - whenever you choose - even on the go.  All applicants applying for U.S. job openings must be legally authorized to work in the United States. Benefits are available to contract/temporary professionals, including medical, vision, dental, and life and disability insurance. Hired contract/temporary professionals are also eligible to enroll in our company 401(k) plan. Visit", "NavAide is on the lookout for dedicated professionals committed to supporting the Navy's strategic alignment in enhancing the FM workforce, standardizing business processes, and leveraging data analytics. Specifically, this role will engage deeply in the Navy ERP data migration initiative and facilitate close collaboration with FM&C and Government clients. If you thrive in dynamic, challenging settings and have a penchant for pioneering change and innovation, then this opportunity might just be your next great leap.  Duties & Responsibilities:  Work in tandem with FM&C and Government clients, understanding data migration needs, and aligning them with the strategic aspirations of the ASN FM&C. Lead and oversee the creation and deployment of a Program Management Plan, touching crucial facets like organizational structure, transition plan, risk management, and performance metrics. Steer data health assessments and migration processes including, but not limited to, data mapping, post-migration data validation, and business transition. Oversee financial reconciliation, DDRS reporting, and user acceptance testing. Be at the forefront of organizational change management by crafting strategies and conducting change readiness assessments. Play a pivotal role in training strategy development, execution, and user management to ensure a smooth and hitch-free data migration process. Provide unwavering leadership to subordinate teams, making sure of strict adherence to financial standards and guidance. Knowledge, Skills & Abilities:  Demonstrable expertise in IT development, database management, and data analytics. Excellent communication, negotiation, and problem-solving acumen. Strong alignment with NavAide's ethos and guiding principles. Proficiency in tools and languages such as SQL, Python, and R, along with familiarity with data visualization tools like Tableau and Power BI. In-depth understanding of Navy ERP migration or related large-scale data migration projects. Education & Experience:  A Bachelor's Degree from an accredited institution in a field relevant to the role. Between 6-15+ years of work experience, with a preference for those who have engaged with State or Federal Government agencies or sizable corporations. While not mandatory, certifications or exposure to the Department of Navy Financial Management & Systems would be an added advantage.", "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com Job Description What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements. Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed", "Immediate Hire \u2013 Senior Developer (Tableau + ETL) - Irving, TX  (DAY 1 ONSITE) Hybrid    Role: Senior Developer (Tableau + ETL)  Location: Irving, TX  (DAY 1 ONSITE) Hybrid  Duration: Fulltime     Required skills (technical & professional) : \u2022       8+ years of overall IT experience. \u2022       4+ years\u2019 experience working with Tableau with ETL experience. \u2022       You will work closely with customers, product owners and dev team to ensure requirements and business objectives are translated into working technical designs \u2022       Drive end-to-end design, development and implementation of complex solutions, often using new technologies \u2022       Design and develop Tableau reports and dashboards that will yield actionable insights that present the answers to business questions \u2022       Code and modify SQL/ETL based on dashboard requirements \u2022       Run ad-hoc analysis for Product and Business Managers using standard query languages and operationalize for repeatable use via Tableau reporting suite", "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:   At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Sr Data Analyst Partnered with a client who simplifies shipping logistics for merchants and warehouses, offering customized API solutions that streamline the shipping process and make logistics a seamless and stress- free experience. Position Overview: As a Senior Data Analyst, you will play a key role in providing valuable insights and supporting data- driven decision-making processes. You will work closely with cross-functional teams to analyze complex data sets, identify trends, and help drive business growth. The ideal candidate will have a minimum of 5 years of experience in data analysis, strong proficiency in VBA, and advanced MS Excel skills.  Key Responsibilities: \uf0b7 Perform in-depth data analysis to identify trends, patterns, and insights. \uf0b7 Create and maintain complex Excel models using VBA to automate repetitive tasks and streamline processes. \uf0b7 Create macros that can be changed easily in a fast-changing environment. \uf0b7 Provide recommendations for process improvements based on data analysis. \uf0b7 Stay updated on industry trends and best practices in data analysis. \uf0b7 Mentor and provide guidance to junior analysts when necessary. Qualifications: \uf0b7 Bachelor&#39;s degree in a related field (e.g., Statistics, Mathematics, Computer Science). \uf0b7 Minimum of 5 years of experience as a Data Analyst. \uf0b7 Proficiency in VBA for Excel automation is a must. \uf0b7 Advanced skills in Microsoft Excel, including pivot tables, complex formulas, and data visualization. \uf0b7 Strong analytical and problem-solving skills. \uf0b7 Excellent communication and teamwork abilities. \uf0b7 Ability to prioritize and multi-task. \uf0b7 Attention to detail and high level of accuracy. \uf0b7 Experience with data visualization tools (e.g., Tableau, Power BI). \uf0b7 Knowledge of shipping, logistics, or eCommerce industry is not mandatory, but a plus. \uf0b7 Fluency in Mandarin is not mandatory, a plus.", "Design and Develop Tableau reports and dashboards \u2022 Provide operational support for existing Tableau reports/dashboards \u2022 Provide subject matter expertise for designing of Tableau workbooks \u2022 Participate in analysis, design, development, testing, deployment and support of dashboards and reports \u2022 Perform impact analysis and validation of existing production reports and universes after application and database upgrade \u2022 Interface with business analysts and/or users to clarify requirements. Work closely with the different business groups to cater to their reporting and dashboard needs. \u2022 Troubleshoot dashboard and report problems independently, determining the root cause and fixing the problem. \u2022 Understand reporting database schema/model, identify joins/tables, and perform data analysis. \u2022 Experience building complex dashboards using Tableau \u2022 Implement industry BI standards and best practices \u2022 Proactively identify problems/issues/risks and provide solutions \u2022 Develop report & dashboards using Business Objects and Tableau and Provide status updates on regular basis and be committed to aggressive delivery timelines", "WHAT YOU\u2019LL DO  Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms WHAT YOU\u2019LL BRING  Bachelor's Degree in Data Analysis, Data Development, Marketing Data & Analytics, or related field and/or 3-5 years equivalent work experience in Data Developer or similar Data & Analytics Role Proficiency in SQL Experience with BI and Analytics Tools Experience building and supporting high-performance data models, visualizations, and KPIs for key initiatives Experience with data storytelling, data science, or data strategy Knowledge of data modeling and entity relationships Ability to write code with clean documentation Strong entrepreneurial drive Strong verbal and written communication skills and a collaborative, problem-solving mindset Customer/client service experience (internal and/or external audiences) Strong critical thinking, problem solving and analytical skills Strong verbal and written communication skills Proven experience in implementing innovations that drive business goals led from user feedback and experience NOT REQUIRED, BUT PREFERRED  Marketing, media, & advertising knowledge, including digital and traditional channels Experience with tools that support data engineering such as Looker, Fivetran, AWS, DBT Experience with data warehousing architecture and data modeling", "Overview:Shift4 (NYSE: FOUR) is boldly redefining commerce by simplifying complex payments ecosystems across the world. As the leader in commerce-enabling technology, Shift4 powers billions of transactions annually for hundreds of thousands of businesses in virtually every industry. For more information, visit www.shift4.com. We are looking for a Business Intelligence Analyst (BA) with a Data Mapping Focus to join our Information Technology Group. As a BIA, you will be understanding business operations and gather, analyze and identify data from their sources to map to target databases and reports of the Business Intelligence solution to ensure the flow of information and data to the entire organization. The position requires at least 3 years of prior experience as a Business Intelligence Analyst within Data Mapping. We are looking for individuals that are extremely self-sufficient, available to work flexible hours and hold themselves to the highest standards of professionalism. Responsibilities:  Responsible for the BI Data Mapping, which includes analyzing business requirements from stakeholders, identifying location of necessary data from technical systems, and defining transformations to meet target needs. Create and maintain documents of needed BI Data Mapping. Conduct source data profiling for anomalies and information summaries. Interpret data from a business perspective to aid in the modeling of the data targets such as business intelligence reports or an enterprise data warehouse. Supports the strategy for how data will be documented, handled, stored and processed to support the requirements from across all business units. Provides support for the ETL and BI developers for all data related analysis, questions and issues. Maintain accountability of Data Mapping using our Software Development Life Cycle (SDLC). Contribute to and enforce the use of the Business Intelligence solution. Support key metrics and shared goals that determine success for a particular area. Qualifications:  3-5+ years of experience in business intelligence analysis surrounding system knowledge and data mapping. Advanced experience of technical systems from both the application and data repository points of view. Advanced experience in SQL proficiency (T-SQL, MySQL, and PostgreSQL). Advanced experience in extracting, transforming and mining of data. Advanced experience with BI tools such as Tableau and ETL tools like SSIS. Advanced experience working with various data sources such as AWS Redshift, Postgres, SQL Server, Amazon Athena, Excel, Flat Files, etc. Advanced experience working with large data sets from sources such as AWS Redshift, Postgres, SQL Server, etc. Experience working with an Enterprise Data Warehouse and Dimensional Databases is a plus. Advanced experience of the SDLC and how BIA processes fit into KANBAN and Scrum Frameworks. Experience with Jira and Confluence is a plus. Ability to prioritize multiple tasks and easily adjust to changing priorities. Ability to identify problems, initiate solutions, and effectively collaborate and communicate with team members. Have excellent verbal and written communication skills. Location: Remote  Location: 2202 N. Irving Street, Allentown, PA 18109  Job Type: Full-time  Experience:  SQL: 3 years (Required) Oracle: 3 years (Preferred) finding, understand and working with data in a variety of databases/files: 3 years (Required) understanding the business process of systems: 3 years (Required) data mapping: 3 years (Required) documentation of data mapping (reports): 3 years (Required) writing queries and simple database view: 3 years (Required) Microsoft Excel: 3 years (Required)", "Responsible for impact analysis, identifying common BI patterns, L3 support queries, and more.", "Responsible for the design, development and maintenance of informational dashboards, data and report development. KPIs and dashboards according to semi-monthly / monthly cycle reporting. Coordinate forecasting exercise and planning resources. Analyze activity performance on providing reports, timelines, and analysis such as month-by-month hourly resource time utilization and unit costing, analysis on trends. Developing and providing accurate reporting tools for organization in relation with Programs and Indirect budgets. Interfacing with project teams to ensure consistent reporting of project performance, scope and accurate project forecasting. Conduct cost/benefit analysis and develop business case. Put in place all actions needed regarding continuous improvement and processes. A demonstrable experience in producing high quality and detailed written documents. Other duties as assigned or required.", "Earn $100K+ annually \u2026 as a Sideline\u2014no need to quit your day job. Part-time or full-time.    Pay for Performance, 1099 compensation.    The Ideal Candidate:    Self-motivator who routinely sets and exceeds their own goals. If you're goal-oriented and self-motivated, you'll thrive here. Proven track record of relationship-building and influencing. Exceptional relationship-building skills.    Position Overview:    Pay for Performance, 1099 compensation \u2013 residual monthly income paid for the client's life (average 10+ years!). This position requires no quotas and no caps on earnings. Work alongside your current position or business. Sideline, Part-time or Full-time. Training and ongoing support provided.   General Responsibilities:    Identify opportunities in our cost-saving services with prospects and new clients, building them into long-term relationships. Serve as a liaison between prospective clients and Business Development Director/SME.   Requirements:     Current or former Business Professional, Executive, B2B Sales Rep, Finance Executive, CFO, COO, or Controller. Ability to lead conversations with prospects and clients. Must have 10+ years of business experience working with decision-makers. Strong communication and interpersonal skills. Positive and results-driven. Ability to work well independently and with others.   About Us:    Aspire Partners offers B2B solutions with front-end timing and at no cost or investment to prospective companies. It's a win-win for clients. Current inflationary conditions make our services more relevant and in demand for all sectors. Companies desperately need our help. Our solutions can help companies thrive during these uncertain times by solving efficiency issues and adding to their bottom line.   Every business needs to reach peak profitability and efficiency. Handling account payables, reducing expenses, and attracting and retaining good employees is vital to the success of every business. We create operational efficiencies and actual cost savings for companies of all sizes and industries without switching vendors or current, established relationships with company vendors or service providers.", "Job Summary:  Join HonestMed, a fast-growing ecommerce company in the medical supply space, as a Data Analyst. Utilize your analytical prowess to enhance our online retail business's performance. Your primary responsibilities will include monitoring key performance indicators, such as website traffic, conversion rates, and sales, identifying growth opportunities, optimizing website designs, implementing marketing campaigns, and maintaining comprehensive business intelligence reporting to drive HonestMed's success.  Essential Functions and Key Responsibilities:  Identify, ingest, and clean critical data sources for modeling and reporting. Design and manage dashboards and reports for marketing and business teams. Provide actionable metrics, insights, and recommendations on consumer analytics and marketing campaigns. Lead projects leveraging data analytics to address complex business issues. Narrate the customer and service story through BI tools and timely reporting. Become the company's data expert, deeply understanding the data landscape across customer journeys. Promote data-literacy and accelerate data knowledge among colleagues and customers. Foster a team-oriented and inclusive work environment. Collaborate effectively with all organizational levels and stakeholders. Be on-site in Oceanside, CA Perform additional duties as required. Knowledge Skills and Abilities:  Minimum of 3 years in data analytics, focused on consumer, retail, and marketing data. Expertise in creating dynamic, data-driven dashboards, preferably in Tableau. Proficiency in consumer analytics, marketing analytics, and forecasting. Demonstrated ability to apply data and analytics to problem-solving. Experience in effectively presenting complex results to all organization levels. Outstanding leadership, communication, interpersonal, and presentation skills. Ability to foster positive working relationships within and outside the company. Required Education and Experience:  Bachelor's degree or relevant combination of education and experience. Strong proficiency in SQL, Python, and Excel. Experience in building data pipelines is a plus. Minimum 5 years of e-Commerce experience preferred. Strong data visualization skills with dashboard building expertise in Tableau or Power BI.", "SaaS solution provider located in the Cayman Islands is searching for a (Senior) Tableau Data Analyst to work remotely from anywhere in the United States.  Candidate will join their team and be responsible for designing, developing and maintaining the Tableau dashboards and reports.     About:  This company has extensive experience in operating world-class data centers hosting SaaS solutions.  They are a 20-year-old company with a solid client base focused on building long term client relationships and world class solutions.  They have a business model for long term loyalty with their staff and clients.     Candidate will work remotely from a home office and on occasion be required to work outside of regular business hours and share on-call duties with other members on the Application Support team.  Candidate will be given the opportunity to travel and work in a Caribbean lifestyle for one week each year when they visit the company\u2019s headquarters and data centers in the Cayman Islands.  Over time is expected in this position.     Note:  Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers. Job Requirements Education:  College Degree in Computer Science, Information Systems or related field.    Technical Skills & Abilities:  Three (3)+ years proven experience as a Tableau Developer or similar role - required Proficient in Tableau Desktop and Tableau Server Strong understanding of data visualization principles and best practices Experience with data modeling, data integration, and ETL processes Strong knowledge of SQL for data manipulation and querying; extensive experience writing functions and scripts    Responsibilities:  Develop and maintain Tableau dashboards and reports to support business analytics needs Collaborate with stakeholders to gather requirements and understand business objectives Design and implement data visualizations using Tableau best practices Create complex calculations, parameters, and filters to support data analysis Optimize Tableau performance and troubleshoot issues as needed Conduct data analysis and provide insights to drive business decision-making Stay up-to-date with Tableau features and functionalities to ensure effective utilization Soft Skills:  Excellent problem-solving skills and attention to detail Strong communication and collaboration abilities Fluent in the English language Additional Information Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers.", "Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Bachelor\u2019s Degree in Computer Science, Engineering, Management Information Systems, or a related field Five years of related experience in application administration and support, including experience utilizing SQL and related SQL management tools (SSMS, SSAS, SSIS and SSRS) Skills Required Knowledge of computer system capabilities, business processes and workflow Experience with enterprise applications and understanding of database driven applications Experience with SQL scripting Strong understanding of the software development life cycle Excellent communication skills, both written and verbal, including the ability to bridge functional and technical resources by communicating effectively with individuals of varying systems expertise and business needs Proven problem solving and analytical thinking and ability to approach problems logically and systematically Ability to maintain good customer relations with clients and external vendors and partners Essential Functions  Builds ad hoc queries, reports and business processes using standard Blackbaud CRM features/functionality      Builds custom business process and data integrations using SQL Supports system users with issues, new requests and system upgrades Collaborates with team members and individuals across the Development and Alumni Relations division to develop best practices, re-usable objects and effective documentation Analyzes and documents user needs, existing and new policies, processes, procedures and operational methods to consider possible improvements to new and existing systems Utilizes elicitation techniques to understand business processes and translate into system requirements and/or development of systems solutions Defines and documents business requirements, technical specifications and test cases for system developments May include the writing of all or a portion of functional and technical specifications Coordinates with business and technology teams, ascertaining system requirements, such as program functions, output requirements, input data acquisition, and system techniques and controls Problem solves in areas such as system design, input/output requirements and procedural flow between departments and/or business systems Performs configuration of enterprise application software Performs testing of new systems, upgrades and patching of existing systems Plans, conducts and documents results of testing Performs all other duties as assigned Additional Functions  Has frequent contact with division staff and other university offices Open office environment Many hours spent in front of a computer Evening/weekend and on call work as required to meet project deadlines and/or maintain system availability Preferences  Six or more years of related experience in application software support Programming experience utilizing SQL and related SQL tools, and report development tools using SSRS, PowerBI and/or Tableau Experience developing business intelligence solutions Experience building SSIS (SQL Server Integration Services) packages Experience with project management methodologies Experience with REST APIs Experience with alumni/development database systems, preferably Blackbaud CRM Experience in non-profit or higher education setting Thorough understanding and working knowledge of alumni relations and/or fundraising Skills Excellent organizational skills Strong attention to detail High levels of overall organization, accuracy and time management Goal oriented with the ability to prioritize a heavy workload Willingness to take charge of assignments and follow through with minimal supervision Ability to work with high level of confidentiality Proficiency in Microsoft Office Suite", "https://www.indeed.com/viewjob?jk=57bafe6006d3d2ad&tk=1hdr8h4cejr51801&from=serp&vjs=3", "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.  This position is remote. We are unable to offer work sponsorship for this role.  We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.  Your impact:  Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company's product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform. About you:  Microsoft SQL Server solutions DB Architecture Stored Procedure SSIS Performance Tuning Enterprise Analytics Toolsets Examples: MicroStrategy, Power BI, Tableau, Looker Python Scripting Agile Development Process Jira 3+ years hands-on experience in developing and architecture of large-scale, multi-tenant, real-time, customer-facing data platforms using relational and non-relational database platforms and micro-services architecture patterns. 3+ years hands-on experience in developing Microsoft SQL Server solutions including DB architecture, stored procedure, SSIS and performance tuning. 1+ years hands-on experience in designing and developing enterprise analytics reports and dashboards that are deployed into a customer-facing analytics reporting platform. 1+ years hands-on experience with enterprise analytics back-end components including schema, analytics engine and web layer to support a customer-facing analytics reporting platform. 1+ years hands-on experience with REST API, Python scripting experience is a plus. Significant experience collaborating with individuals in product development and engineering roles to envision and deliver a customer-facing analytics report platform. Experience in delivering an agile environment and understand how to maximize results from sprints, releases and road maps. Experience in creating a variety of architecture and business artifacts to communicate all aspects of a proposed solution to a diverse audience comprised of technical and business team members. Experience in designing and leading experiments or proofs of concept which increase team knowledge and bring about effective technical and business decisions. Keep up with industry trends, enjoy teaching yourself new technology, and enjoy talking about different technical problems and their solutions. Courage to debate with colleagues and drive out the best solution for the organization, not just your solution. One or more industry certifications in a relevant data architecture or engineering topic area.", "The Data Governance Management Office (DGMO) is responsible for the development, implementation, and continuous improvement of an enterprise data governance framework that will increase coordination and consistency across enterprise domains, establish a shared, cross-functional understanding of critical data assets and concepts, and improve AltaMed\u2019s ability to make data-informed decisions using quality, trusted data & insights.   The Data Governance (DG) Analyst is responsible for facilitating and managing data governance initiatives, including the development of data standards, policies and procedures, and working with stakeholders from across the organization to promote and implement data governance best practices (data classification, data lineage, lifecycle management). This role will convene cross-functional groups to understand and document data requirements, data flows, and data use. In addition, the DG Analyst will help define and execute toward the implementation of an enterprise data governance roadmap, collaborating with data & analytics technical teams to bridge business objectives to analytical products & solutions.   To be successful in this role, individuals must have a blend of business acumen, a problem-solving attitude, data governance and data management knowledge, and a strong ability to communicate effectively with both technical and non-technical stakeholders. Other critical success factors include: comfort with ambiguity, curiosity and willingness to learn new subject matter, and an ability to build relationships with a focus on partnership. This role will support cross-functional teams with analysis and measurement of key data governance inputs, and requires some proficiency with data analysis and data quality measurement techniques.   Responsibilities   Contribute to and facilitate the creation of policies, standards, and documents on topics such as: data governance, data stewardship, master data management, data quality management. Build and maintain data governance collateral to centralize, coordinate, and share DGMO content with a wide array of enterprise stakeholders. Work with key business and technical stakeholders to create, manage, and curate an enterprise business glossary, data dictionary, and data catalog. Capture and share detailed formal documents, such as governance meeting minutes for operational, tactical, strategic, and executive audiences. Implement change control & change management processes and tools, and resolve enterprise data governance issues. Develop and socialize data maps to ensure transparency in the lineage and flow of data within and outside of the organization. Define and drive tactical roadmaps for enterprise data governance adoption, including socialization, stakeholder buy-in, operating model implementation, and data governance training. Work with other data & analytics teams to develop, promote, and monitor adherence to data quality standards. Develop, maintain, and socialize data inventory tools and methods to support data asset documentation & governance. Work with key stakeholders to define, monitor, and share data governance key performance, quality, and adherence metrics. Perform other duties as assigned.   Qualifications   Bachelor\u2019s degree in information technology, business, public health, mathematics, finance, or a related field, with appropriate professional and technical experience required. Minimum of 4 years of experience in data management, data analytics, product management, or consulting, or other relevant work experience required. Experience with project management techniques, such as cross-functional project coordination & delivery, work plan development, requirements gathering is required. Prior professional experience working within a healthcare environment (payer, provider, vendor) required. Proven ability to facilitate effective meetings and work sessions across various levels of staff and leadership required. Prior experience with data governance tools and platforms highly preferred. Previous experience in health care analytics, data strategy, business strategy, or clinical administration preferred. Prior experience with product management & agile delivery principles (Scaled Agile - SAFe) preferred. Show less  Seniority level Entry level Employment type Full-time Job function Information Technology Industries Wellness and Fitness Services", "No description details", "https://www.indeed.com/viewjob?jk=dd7d5cb7585219aa&tk=1hepmokcejm4n800&from=serp&vjs=3&applied=1&from=smart-apply", "Job Responsibilities  \u00b7 Collaborate closely with cross-functional teams in engineering, supply chain, and production to identify key performance metrics and indicators.  \u00b7 Design, develop, and implement comprehensive Power BI dashboards and reports that provide actionable insights for program management and decision-making.  \u00b7 Utilize DAX language to create advanced calculations, measures, and transformations to ensure accurate representation of metrics in reports.  \u00b7 Build and maintain complex data models with a keen focus on establishing accurate and efficient table relationships, enabling seamless data flow and analysis.  \u00b7 Analyze large datasets to extract valuable insights, identify trends, and present findings in a clear and concise manner.  \u00b7 Work closely with stakeholders to understand their data needs and translate requirements into effective data visualizations.  \u00b7 Lead the development of data-driven solutions that enhance program efficiency, quality, and overall performance.  \u00b7 Establish data quality standards and procedures to ensure accuracy, consistency, and reliability of metrics.  \u00b7 Stay current with industry trends, best practices, and advancements in data visualization, DAX language, and program management techniques.  Education/Experience  \u00b7 Bachelor's degree in a relevant field such as Engineering, Supply Chain Management, Business Analytics, or a related discipline. Master's degree is a plus.  \u00b7 Proven experience (5+ years) in utilizing Power BI for data visualization and creating advanced dashboards and reports.  \u00b7 Demonstrated expertise in setting up and managing metrics for complex programs within engineering, supply chain, or production environments.  \u00b7 Proficiency in the DAX language is essential, with the ability to create complex calculations and measures.  \u00b7 Strong aptitude for establishing and optimizing table relationships to ensure accurate data modeling.  \u00b7 Excellent analytical skills and the ability to transform raw data into meaningful insights.  \u00b7 Effective communication skills to collaborate with technical and non-technical stakeholders.  \u00b7 Experience in data manipulation, transformation, and cleaning for accurate analysis.  \u00b7 Detail-oriented mindset with a commitment to data accuracy and quality.  \u00b7 Ability to work independently, prioritize tasks, and manage multiple projects simultaneously.  \u00b7 Familiarity with engineering, supply chain, or production processes is a plus.  \u00b7 Certifications in Power BI and relevant data analysis fields are valuable.", "About the job ABOUT US  Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards!   ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable.   Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns.     With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement.   THE ROLE  The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting.   We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements.   You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units.   KEY TASKS & RESPONSIBILITIES   Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Responsibilities:  \u00b7 Experience Developing, deploying, and supporting SharePoint, Teams, Power Platform and SPFx applications.  \u00b7 Strong technical knowledge with Power Platform tools including Power Automate (Flow), Power Apps, Power BI, DataVerse.  \u00b7 Experience with enterprise level canvas applications utilizing Power Platform tools  \u00b7 Knowledge of Power Automate Technical REST & SOAP protocols  Desired Technical Skills:  Strong technical knowledge with Power Platform tools such as Power Automate (Flow), Power Apps, Power BI, DataVerse. Proven experience developing enterprise level applications utilizing Power Platform tools Strong experience with SharePoint administration, workflows, and development. Strong Microsoft Power Platform development experience Web development experience including, JavaScript, SQL ,XML, and CSS Design/implementation experience in the Microsoft Power Platform \u2013 MS PowerApps, Power Automate, and PowerBI. Experience :  Bachelor\u2019s in computer science, Information Systems or related field OR 4+ years of relevant work experience 3+ years of experience Developing and administrating enterprise applications Experience on teams with emphasis on development within Microsoft SharePoint environments Experience implementing and/or administrating IT service support management tools Strong interpersonal skills, oral and written communications across all levels of an organization", "JOB DESCRIPTION & DETAILS     Day to day:  Insight Global is seeking a Data Engineer to support a local insurance company headquartered in Richmond, VA. This engineer will be responsible for enterprise data integration and reporting, as well as building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies. This candidate will be required to go onsite 2 days a week in the Richmond, VA area.     Responsibilities:  Assembling large, complex sets of data that meet non-functional and functional business requirements. Identifying, designing, and implementing internal process improvements including re-designing infrastructure for greater scalability, optimizing data delivery, and automating manual processes Building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies Building analytical tools to utilize the data pipeline, providing actionable insight into key business performance metrics including operational efficiency and customer acquisition Working with stakeholders including data, design, product and executive teams and assisting them with data-related technical issues Working with stakeholders including the Executive, Product, Data and Design teams to support their data infrastructure needs while assisting with data-related technical issues    Must Haves:  3-5+ years of experience as a Data Engineer Experience with MS SQL Server Platform (SSIS, SSRS & SSAS) Experience in data warehousing and ETL development (T-SQL, PLSQL, and/or SQL scripts) Experience working with intelligence products and data analytics tools (e.g. PowerBI, Tableau) Ability to compute, analyze and interpret complex and disparate data to produce relevant and consumable reports, dashboards, etc.", "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI RAYUS is committed to delivering clinical excellence in communities across the U.S., driven by our passion for and superior service to referring providers and patients. RAYUS Radiology is built on our brilliant medicine, brilliant team, brilliant technology and services - all to provide the highest level of patient\u00a0care\u00a0possible.", "-Own data needs for clients and internal teams -Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports -Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools -Manage the retrieval, compiling, and formatting of large volumes of data -Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. -Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support -Learn new technologies as they evolve, and understand their impact to systems -Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously -Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals -Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities -Present and clearly articulate solution options to key stakeholders -Be a go-to resource with thorough understanding of data structures for various ad platforms", "Publishing.com has helped thousands of normal everyday people to become successful self-published authors. And along the way, we also became one the most successful companies in the US (  Want to be at the forefront of the AI revolution? Join us! We are building the most comprehensive AI-powered self-publishing platform and you get to join us at ground zero. Instead of just teaching people how to create successful books, we are going to help them do it.  About you:  You are a data engineer with strong analytical skills and hands-on experience with modern data warehousing and business intelligence solutions. You know how to use code and no-code to ingest data from various sources, how to interpret data and translate it into business insight, and how to prepare reports and dashboards that are easy to understand and digest.  And you have a great attitude!  About this role:  As our first data engineer, you will have the opportunity to make important contributions to various aspects of our data platform. Your main responsibilities are:  Build a highly scalable data warehouse Propose, design, and implement data ingestion pipelines (ELT/ETL) Maintain our local and cloud data platforms Understand and interpret business intelligence requirements and translate them into technical solutions Build business analytics and dashboards to address sales and marketing needs  Required skills:  Strong problem solving skills Strong communication skills Strong SQL skills Expert in using data warehousing solutions such as BigQuery, Snowflake, or Databricks Experience with data ingestion services such as Fivetran, Matilion, Segment, or similar Experience with Google Sheets Experience with business analytics for marketing and sales Strong programming skills in JavaScript and Python Experience with HubSpot Experience with Git Experience with agile development Experience working with marketing and sales teams Strong sense of ownership  Preferred Skills:  Experience with Google Clouds Experience building CI/CD pipelines Experience with AWS, Azure, or GCP Experience with Terraform or other IaC solutions Experience with DevOps and SRE best practices", "About the job Job Summary   The Business Intelligence Developer works independently, and collaboratively, to elicit requirements and create specifications. They then design, architect, and implement complex and visually compelling reporting and business intelligence (BI) solutions (data visualizations, extract-transform-load (ETL), ad hoc querying, etc.)   The individual in this position interfaces with various functional teams to support the BI solution delivery. They proactively identify needs or issues, develop strategies, and propose/implement technical and process solutions. The Senior BI Developer leads complex or specialized projects and will grow to become a subject matter expert with responsibility for mentoring and training all levels of BI developers as well business stakeholders   Essential Functions And Tasks   Responsible for designing and implementing BI solutions using the Microsoft BI Toolkit (SQL, SSIS, SSAS, SSRS, Power BI) to enable the analysis of data to support strategic initiatives and ongoing business requirements. Solutions include, but are not limited to, end-user reports, ad hoc requests, data visualizations, extract-transform-load (ETL) systems, master data management (MDM), and other BI Solutions   This position is expected to have a proactive approach and create the best solution to address business needs and current infrastructure. Care will be given to provide accurate data to fulfill the requirements of the developed solutions   Actively seeks opportunities to expand technical knowledge and capabilities   Work with the Development team to establish best patterns, practices, and standards as new technology arises   Participate in the out of hours support process   Performs special projects and other duties as assigned   Education And Experience Requirements   Bachelor\u2019s Degree in Computer Science, Information Technology, Data Science, Math, Finance, or a related field, or equivalent training   Two (2) to five (5) years of experience as a Business Intelligence Developer   At least three (3) years of progressively responsible experience building Data Warehouse and Business intelligence solutions. Experience using Microsoft Business Intelligence technologies: SSAS, SSIS, SSRS or similar technologies and database platforms such as Information Builder\u2019s WebFocus, SQL, Tableau, SAP, Power BI, or Oracle. Experience working with SQL queries and data processes   Certification in Lean, Six Sigma or other advanced performance improvement methodology, preferred   Knowledge, Skills, And Abilities   Knowledge and experience with SQL, SSIS, SSAS and SSRSs that support an Enterprise Data Warehouse environment   Ideal candidates will have hands-on experience with the full life cycle of Data warehouse design and development including logical and physical data modeling, mapping data elements from various data sources, and loading EDW objects including dimensions and fact tables   Candidates must have hands-on experience with gathering business requirements, documenting the reporting and analysis specifications, and designing technical architecture   Proven ability to answer technical questions   Strong knowledge and experience with healthcare reporting, Analytics, and Business reporting needs is a must   Excellent communication and client-facing skills   Ability to be flexible and work under high pressure in a complex environment   HealthCare/RCM/Financial systems is a major plus   Experience with large Health care EMRs is a plus   Understand and comply with company policies and procedures", "JOB SUMMARY  At Houston Methodist, the IT Data Specialist is responsible for supporting an enterprise wide business intelligence and analytics framework that will provide the organization with solutions for effective decision-making. This position utilizes critical thinking, attention to detail, and effective communication skills and collaborates effectively with teams to consult with business area leads to generate solution recommendations. The IT Data Specialist plays a technical role on multiple projects and communicates effectively with technical and non-technical audiences. The position utilizes technical expertise in Business Intelligence architecture, design and implementation with experience in business, healthcare and technology projects. The incumbent will be actively involved in supporting, developing and advancing Houston Methodist\u2019s Analytics applications. The IT Data Specialist will use tools such as Microsoft SQL Server, Microsoft SQL Server Reporting Services, Microsoft SQL Server Integration Services, and Tableau to design and implement innovative approaches to data collection, analysis, interpretation and presentation to support planning and decision-making at all levels of the organization and assist in managing data as a corporate strategic resource.     Primary Job Responsibilities  Communicates (oral and written) effectively with customers, vendors, colleagues, and management about services, contact information, system availability, and information. Assists the business analysts to elicit requirements to document. technical and design specifications for package solutions, and/or software development. Assists with user education of business intelligence applications and helps ensure access to data with the goal of reduced reliance on technical specialists in order to obtain data. Develops Analytics Solutions including the data marts, Tableau data sources, reports and dashboards that support operational and strategic decision making. Identifies required source system data and develops ETL processes that move data from source systems into the data warehouse and data marts. Participates in resolving major system outages, disaster management and change control and provides technical or on call support for Analytics applications. Installs, configures, and deploys Analytics tools including as Microsoft SQL Server, and Tableau. Ensures all reported data and information are accurate, consistent, relevant and timely. Practices good time management, good assessment in professional decision making, and management reporting skills.", "The Role  We're seeking a seasoned and dynamic professional to join us as an Associate Consultant, Data Analytics. In this role, you'll be instrumental in delivering projects to our clients. You'll be responsible for analyzing, strategizing, implementing measures, and offering expert guidance to enhance our clients' operational resilience.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  \u2022  Conduct in-depth data analysis to identify trends, patterns, and insights that can inform client strategies and recommendations.  \u2022  Collaborate closely with clients to understand their business objectives and tailor data-driven solutions that address their specific needs.  \u2022  Create visually compelling and easy-to-understand data visualizations, dashboards, and reports to effectively communicate findings to both technical and non-technical stakeholders.  \u2022  Apply statistical techniques and predictive modeling to uncover correlations and forecast potential outcomes, enhancing the accuracy of strategic planning.  \u2022  Ensure the quality, accuracy, and reliability of data by conducting data cleaning, validation, and preprocessing procedures.  \u2022  Present analytical findings and recommendations to clients in a clear and concise manner, demonstrating the value of data-driven decision-making.  \u2022  Leverage cutting-edge analytics tools and technologies to optimize data analysis processes and streamline workflows.  \u2022  Collaborate with cross-functional teams to tackle complex business problems, utilizing your data expertise to drive innovative solutions.  \u2022  Stay up-to-date with the latest trends and advancements in data analytics, bringing new ideas and best practices to the team.  \u2022  Assist in project planning, timeline management, and resource allocation to ensure the successful execution of data analytics initiatives.  Qualifications  Bachelor's or Master's degree in a related field (e.g., Data Science, Statistics, Business Analytics). Proficiency in data analysis tools such as Python, R, or SQL. Experience with data visualization tools like Tableau, Power BI, or similar. Strong analytical thinking and problem-solving skills. Excellent communication and presentation abilities. Ability to work collaboratively in a team-oriented environment. Prior consulting or client-facing experience is a plus. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "\"Responsibilities Job Description Job Description  The Business Intelligence (BI) Developer is responsible for the design, creation, and maintenance of sustainable reporting solutions to support data-driven decisions by the client.  Drives significant analytic initiatives in support of business strategies.  Develops an understanding of business processes and operational tools in order to create meaningful reporting designs.  Responsible for the analysis of business data needs and develops the required data modeling.  Designs and develops creative and interactive data visualizations.  Partners with business leaders across the organization to support and implement high-quality, data-driven solutions.  Assists IT with collecting and storing operational data from source systems.  Stays current on all processes, techniques, tools, and industry best practices to ensure the client is at the forefront of Business Intelligence solutions.  REQUIRED QUALIFICATIONS  3-5 years of Business Intelligence experience  3-5 years of Data Analytics, Dashboarding, Reporting, or Analysis experience  Bachelor\u2019s Degree in Data Science, Business, or related field  JOB FUNCTIONS AND RESPONSIBILITIES  Partner with business leaders and SMEs to understand reporting and analytics needs within their functions.  Gather, document, and analyze business reporting and communications requirements from stakeholders  Map business requirements to source data structures and develop data models from data located within multiple data stores utilizing data solutions such as SQL or Snowflake  Design, build, and maintain dashboards visualizations using BI applications such as Tableau  Ensure dashboards are creatively designed and tell a story behind the data.  Analyze report data for accuracy and report on potential quality errors  Participate in peer review process to ensure all reports are accurate prior to distribution  Partner with business owners to prioritize projects to ensure the most important items are being successfully addressed.  Partner with IT to identify and store required data sets.  Provide ongoing analytics expertise and insights into data trends across the operational segments.  Lead and facilitate dashboard demonstration and educational sessions  Provide ad-hoc data analysis and support to business functions.  REQUIRED COMPETENCIES  Healthcare experience  Advanced skills in data applications such as Power BI, ETL, Tableau (some knowledge) and SQL (some knowledge)  Ability to display complex quantitative data in a simple, intuitive format to present findings in a clear manner  Creativity in designing data visualizations  Strong understanding of data structures that ease the generation of reliable data  Strong analytical skills with some moderate project management knowledge  Proficient Data mining and normalization skills  How to Apply:  If you are a results-driven professional with the qualifications and experience required for this role, we invite you to apply by responding to this portal or send your resume to careers@StoneLaurel.com with the subject line \"\"BI Developer.\"\" We look forward to welcoming a dedicated and strategic thinker to our team.  Company Description  StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "Data Analytics role", "In Addition, You  Have an entrepreneurial streak Are self-motivated and driven Just get things done Roll with the punches when the unexpected happens or if the team needs to pivot direction Are passionate Have strong report visualization and data design intuition Pay attention to user feedback Thrive in an environment of open feedback/brainstorming/sharing Are a team player and people like working with you Are intellectually curious and always wanting to learn more Interested in creating a culture driven by metrics and experimentation   The Business Intelligence Developer will Design, implement, and maintain Dashboards, visualizations, and supporting data analysis layers. Additionally, he/she will design and develop visualization solutions against data warehouses, data marts, and cubes. This position will coordinate with other team members and managers to translate business needs into technical solutions and provide technical assistance to users pulling data from our self-service environment. The Business Intelligence Developer will troubleshoot issues in cubes and database objects (procedures \u2013 as they relate to surfacing data) to identify and solve problems with data accuracy and performance.   Education/Licensing Requirements   High School Diploma or equivalent. Bachelor\u2019s degree in a computer-related field or equivalent experience. Master\u2019s degree in a computer-related field is a plus.   Experience Requirements   Minimum 5 years of experience in MS BI tools (SSRS, SSAS, Power BI)  5+ years of relevant experience in report development, data science, business analytics, business intelligence, or comparable data engineering role, including data warehousing and business intelligence tools, techniques, and technology Minimum of 2 years of experience in Power BI Knowledge of SQL to write complex, highly-optimized queries across large volumes of data Successful work experience in MS SQL programming, database design, data warehouse design, query performance tuning, and writing stored procedures. Knowledge of ETL and data warehouse concepts and processes Experience with Tableau or an equivalent reporting tool to create impactful reports, visualizations, and interactive dashboards Understanding of data models Creativity to determine the best solution for a real-world problem with quantitative data Experience supporting a multi-database environment. Excellent understanding of OLTP and OLAP systems. Knowledge of best practices and software development process   Essential Skills/Experience   Fluently speak, read, and write English. Good verbal and written communication skills. Proven ability to prioritize and multi-task. SQL programming, server integration, and reporting  Curiosity and passion for data, visualization, and solving problems Creativity to determine the best solution for a real-world problem with quantitative data Experience with reporting, descriptive statistics, probability, and cleaning big datasets Willingness to question the validity, accuracy of data, and assumptions Enjoyment from collaborating with others in a team environment Eagerness to learn in a fast-paced environment Knowledge of medical data a plus   Essential Characteristics   Self-directed and organized. Discrete/ability to maintain confidentiality. Team player. Detail-oriented. Sense of urgency. Customer service orientation. Drive and self-reliance Ability to work under pressure. Ability to work well independently. Ability to take direction.   Essential Job Responsibilities   Evaluate and monitor databases to resolve performance issues. Develop, deploy, maintain and debug SSIS packages. Develop, test, and maintain MS SQL Server databases. Work with Business Analysts to aid in the design of the system. Investigate and resolve problems of data accuracy and availability Participate in integral testing to identify problems early. Perform error and stress scenarios. Participate in design and code reviews. Identify architectural issues and propose alternative solutions. Install upgrades and patches to existing databases. Develop and maintain data warehouse documentation.   Additional Job Responsibilities   Maintains a neat, orderly work area.  Performs other incidental and related duties as required. Actively demonstrates teamwork at all times. Ability to work overtime.", "https://www.indeed.com/viewjob?jk=bbe2a3fe0476f181&tk=1h5a6oa4dh5hp801&from=serp&vjs=3  The Role  We are looking for an experienced and energetic leader to join the team as a Data Warehouse Specialist. As a Data Warehouse Specialist, you will play a critical role in developing data warehouses for our clients. You will be responsible for conducting assessments, developing strategies, and providing expert guidance to enhance their data governance.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  Collaborate with clients to understand their business requirements and design effective data warehouse solutions. Develop and implement data warehouse architecture, data models, schemas, and structures. Design and implement efficient Extract, Transform, and Load (ETL) processes to populate and update data warehouses. Ensure data quality and integrity by establishing appropriate data validation and cleansing procedures. Optimize data warehouse performance through indexing, partitioning, and other performance tuning techniques. Implement effective backup, recovery, and security measures for data warehouses. Evaluate existing data frameworks and identify opportunities for improvement. Conduct in-depth data analysis to identify data quality issues, inconsistencies, and gaps. Recommend and implement enhancements to data frameworks to meet client requirements. Collaborate with cross-functional teams to define data governance policies, standards, and best practices. Conduct regular audits to ensure compliance with data governance guidelines. Participate in project planning and scoping activities, providing technical expertise on data warehouse solutions. Demonstrate expertise in data modeling, dimensional modeling, and data warehouse design principles. Proficiently use SQL, ETL tools, and programming languages to extract, transform, and load data. Utilize data visualization tools to create meaningful reports and dashboards for clients. Stay up to date with the latest trends, tools, and technologies in data warehousing and business intelligence. Qualifications  Bachelor's degree in Computer Science, Information Systems, or a related field. Relevant certifications (e.g., AWS) are highly desirable. Proven experience working on data warehouse projects, including data modeling, ETL development, and performance optimization. Strong understanding of database concepts and proficiency in SQL. Experience with data warehousing tools and technologies (e.g., Snowflake, Amazon Redshift, Microsoft Azure SQL Data Warehouse) Proficiency in at least one ETL tool (e.g., Informatica, Talend, SSIS). Familiarity with data governance principles and best practices. Excellent problem-solving and analytical skills. Strong communication and interpersonal skills to effectively collaborate with clients and team members. Ability to manage multiple projects and prioritize tasks effectively. Professionalism and client-oriented mindset, with the ability to establish trust and maintain confidentiality. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "The Data Developer II will be responsible for developing, supporting, and enhancing database programs and reports using the SQL platform. This senior position typically handles projects of a more complex nature and serves as a resource to junior team members.  Key Responsibilities: \u00b7  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. \u00b7  Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. \u00b7  Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. \u00b7  Monitors database performance and tunes to maximize efficiency. \u00b7  Develops new and enhances existing database objects and packages to advance functionality and automation of systems.  Competencies Required: \u00b7  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. \u00b7  Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. \u00b7  Self-starter with the ability to work independently while supporting a team environment. \u00b7  Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. \u00b7  Flexibility to provide after hours and weekend support on occasion to support business needs. \u00b7  Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. \u00b7  Proficient with database performance monitoring and tuning to maximize efficiency. \u00b7  Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems. Qualifications   Minimum Qualifications/Experience: \u00b7  5-7 years\u2019 experience in a SQL Server development role required.    \u00b7  Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. \u00b7  2+ years of experience monitoring database performance and tuning to maximize efficiency required. \u00b7  SQL Server Integration and Reporting Services experience required.  Formal Education & Certification: \u00b7  High School Diploma or equivalent required. \u00b7  Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.  Work Status: \u00b7  Full-Time.  Supervisory Responsibility: \u00b7  None.  Travel: \u00b7  No travel expected.  Working Conditions: \u00b7  Conditions involve lifting no more than ten pounds, sitting most of the time, but may involve walking, moving, or standing for brief periods, and occasionally lifting and carrying articles like files, ledgers, folders, etc.", "5+ years SQL Development  Role Experience with SSIS and SSRS Looking for local to the Woodlands(greater Houston area).  Available for hybrid-remote work, but not looking to hire anyone remote that isn\u2019t local.  Basically if they are too far away that can\u2019t ask them to come into the office tomorrow, then they are too far away.  SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.   SQL Server Developer III Qualifications  Ideally 5- 7 years\u2019 experience in a SQL Server development role required. Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. 2+ years of experience monitoring database performance and tuning to maximize efficiency required. SQL Server Integration and Reporting Services experience required. High School Diploma or equivalent required. Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.", "Power BI Developer Position The Power BI Developer will be responsible for designing, developing, and maintaining interactive data visualizations and reports using the Power BI platform. To be successful in this role, the Power BI Developer will collaborate with stakeholders and business analysts to understand requirements and translate them into effective and visually appealing dashboards and reports. Your expertise in Power BI and data visualization will play a crucial role in helping our organization make informed decisions based on data-driven insights.", "Tableau Opportunity Hi Emmanuel,  I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak.  Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently.  Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Required Skills and Experience *  5-7 years of experience in a SQL Development role 3+ years of experience using SSIS/SSRS for automated data imports and hands-on report/parameter creation. 3+ years creating queries within Visual Studio Experience creating stored procedures and views within SQL in a work environment Experience working with Microsoft Server 2012 or newer .NET experience- C# or VB.NET ETL Development experience     Nice to Have Skills and Experience  Experience utilizing Healthcare Information Systems and Databases Bachelor's Degree in computer science or any related field     Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus) The annual base salary for this role ranges from $80,000 - $90,000. Starting pay will be based on several factors and commensurate with qualifications, experience, and work location.  Benefits/Perks:  Unlimited Paid Time Off Program Great benefit plans: Medical, Dental, Vision, FSA, Pre-tax Transit, Short Term Disability, Life Insurance, 401k AcronymCares Matching Gifts program for employee donations DE&I Employee Resource Groups", "Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis. With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables. Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS. Research and propose opportunities for data acquisition and new uses for existing data. Code, test, and document new or modified data systems to create robust and scalable applications for analytics. Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables. In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions. Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts. Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI. Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices. Collaborate with Quality Assurance team to ensure valid and proper deliverables. Support business decisions with ad-hoc analysis as needed. Participate in rotation of after-hours support. Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates. Research new technologies for implementation by the team for producing cutting-edge solutions. Cultivate business relationships with stakeholders. May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.", "ob Description:   BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.   Job Responsibilities   Managing the planning, scheduling and deployment of all hardware facilities and associated software for major or multiple sites. Trains, develops, and mentors staff by providing subject matter direction and guidance. Assigns, monitors, and reviews progress and accuracy of work.Provides staff management oversight including hiring, promoting, or making recommendations for staff.Conducts performance reviews and assessments, manages performance, engages in skills assessment, and promotes professional development of staff. Directing, motivating and developing staff, maximizing their individual contribution, professional growth and ability to function effectively with their colleagues as a team. Ensuring adherence to policies, plans, objectives, budgets and staffing allocations for the assigned site. Optimizes the utilization of resources and adheres to Departmental budgeting and fiscal responsibilities. Actively participates in project teams, manages and tracks project details, and provides leadership during periods of transition. Ensures compliance with corporate and industry standards, policies, procedures, and regulations.   Job Qualifications   Education   Bachelor's Degree in a Computer Sciences related field or equivalent work experience   Experience   5 years - Experience in Information Technology required   Skills\\Certifications   Knowledge of information technology concepts, methodology, terminology and standards. Demonstrated ability to interpret and translate technical and/or or complex concepts into information meaningful to project team members and/or business personnel. Strong interpersonal and organizational skills PC Skills required (Basic Microsoft Office and E-Mail) Adaptive to high pace and changing environment Must be able to communicate effectively with both technical and non-technical co-workers Must be willing to adjust schedule to perform maintenance and upgrades outside of business hours and be part of an on-call rotation.   Job Specific Requirements:    Working knowledge with regards to End User Experience (Business user experience) Prior experience with Agile is preferred.   Preferred Skills:   Number of Openings Available:   1   Worker Type:   Employee   Worker Sub-Type:   Employee   Company:   BCBST BlueCross BlueShield of Tennessee, Inc.   Applying for this job indicates your acknowledgement and understanding of the following statements:   BCBST is an Equal Opportunity employer (EEO), and all employees and applicants will be entitled to equal employment opportunities when employment decisions are made. BCBST will take affirmative action to recruit, hire, train and promote individuals in all job classifications without regard to race, religion, color, age, sex, national origin, citizenship, pregnancy, veteran status, sexual orientation, physical or mental disability, gender identity, or any other characteristic protected by applicable law.   Further information regarding BCBST's EEO Policies/Notices may be found by reviewing the following page:   BCBST's EEO Policies/Notices   BlueCross BlueShield of Tennessee is not accepting unsolicited assistance from search firms for this employment opportunity. All resumes submitted by search firms to any employee at BlueCross BlueShield of Tennessee via-email, the Internet or any other method without a valid, written Direct Placement Agreement in place for this position from BlueCross BlueShield of Tennessee HR/Talent Acquisition will not be considered. No fee will be paid in the event the applicant is hired by BlueCross BlueShield of Tennessee as a result of the referral or through other means.    All applicants will be advised that BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.", "Analyze and Define Raw Data Visualizing and developing BI solutions (Dashboards, Scorecards, Analytic reports) Implement best practices to ensure dashboard design consistency for the best user experience Design and test analytics platform code. Data Preparation (Predictive & Restrictive) Enhance and Streamline data collection process Custom Analysis Long term research and prediction Using statistical techniques, collect and analyse data from the clients internal databases and systems and convert it to actionable intelligence; Lead the design of comprehensive data, intelligence and value proposition tools; Identify and communicate trends within complex datasets to stakeholders across the business, including the top problems that need to be solved and how to solve them proactively; Use internal data analytics tools to develop data dashboards that can be accessed by corporate security partners and senior stakeholders on demand; Improve standard operating procedures (SOPs) for implementing databases and data collection systems Plan, research and draft a range of tailored reports to deliver actionable insight for internal clients, including periodic reports (monthly, quarterly, bi-annual, etc.) and bespoke briefs with minimal supervision; Maintain clear and coherent communication, both verbal and written, to understand data needs and report results; Display creative thinking and consulting skills Identify gaps in crucial data, information and intelligence, and submit plans to fill them; Conduct briefings as needed for a variety of levels of customers as requested (via phone, video conference, in-person briefing, or industry conference); Establish and maintain professional relationships with internal stakeholders across the client business", "Comprehend Greenhouse Gas regulatory requirements and translate them into business requirements and data objectives  Transform available data into actionable business intelligence to inform and recommend tactical and strategic Greenhouse Gas approaches  Use and manage existing date forecasting tools to generate GHG forecasts and actionable recommendations  Extend forecasting processes and methods to wider marketing and sales forecasting needs  Assimilate, aggregate, and query data to provide recommendations based on statistical analysis  Monitor data integrity and notify appropriate personnel of data impairments  Develop solutions for automating complex repeatable queries that normalize and cleanse data  Synthesize data into actionable content, and communicate findings back to the business  Become a subject matter expert on improving data, processes, and methodologies to identify inefficiencies and recommend improvements  Ensure that consistent documentation is developed and maintained to easily replicate and improve processes related to data and data analysis  Engage in creating quality metrics, reports, KPIs and Dashboards  Consult with business teams on project requirement gathering and communicating the appropriate selection, utilization, and interpretation of advanced statistical methodologies used in projects  Support GHG operational processes as needed  Effectively communicate and present to both technical and non-technical employees on advanced analytics", "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions. ESSENTIAL FUNCTIONS AND RESPONSIBILITIES Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned. SUPERVISORY RESPONSIBILITY Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management. QUALIFICATIONS Minimum Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems. REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.", "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com  Job Description  What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements.  Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed.", "DATA ENGINEER  In every office around the world, HH Global offers an entrepreneurial culture that sets ambitious goals and looks beyond the status quo.  At HH Global , we reward sharp, unconventional thinkers who are motivated to create their own success. Our winning culture draws from employees who step up to the challenge of solving tough problems and making a difference. We dream big, so our clients can dream bigger.  Responsibilities   Document new reporting features or bugs from both internal and external users   Coordinate testing of reports with users   Manage an accurate and visible task and project list and meet regularly for input on prioritization.   Analyzes data, identifies trends and outliers, and recommends solutions when appropriate.   Coordinate with team members overseas   Create and maintain system protocols by writing and updating procedures; this includes documentation and writing SQL stored procedures.   Generate standard or custom reports summarizing business, financial, or economic data for review by executives, managers, clients, and other stakeholders. This will involve using T-SQL, SSIS, SSRS, and other report writing tools.   Willingness to learn new reporting technologies such as Microsoft Power BI, Tableau, or Qlikview   Participate in physical and virtual meetings as required to facilitate functional requirement gathering and report development.   Maintain or update business intelligence tools, databases, dashboards, systems, or methods   Assist with project management activities by identifying project milestones, phases, and elements; tracking activities, resolving problems, and publishing progress reports.   Manage timely flow of business intelligence information to users.   Requirements   Must be legally authorized to work in the United States without needing current or future employer sponsorship.   Bachelor\u2019s degree in a business or technology related discipline   2 + Years work experience   Working knowledge of SQL   Microsoft Business Intelligence Suite (SSRS, SSIS, SSAS)   Experience with Azure cloud environment: Azure SQL Database, Azure Data Factory   Strong Microsoft Excel skills related to data analysis and manipulation   Proven ability to document and prioritize issues raised by others   Ability to prioritize tasks and directly support the department managers.   Good troubleshooting and error isolation skills.   Ability to work independently on assigned tasks as well as to accept direction on given assignments.   Must be able to interact and communicate with individuals at all levels of the organization.   Your resume will be reviewed by a member of our Recruiting team and we\u2019ll reach out to you directly if there\u2019s a fit. We\u2019re using video conferencing software (Microsoft Teams) to conduct our interviews, but all interviews will be live with a member of our Recruiting or Hiring teams.  Equal Employment Opportunity Employer: HH Global is an equal opportunity employer and all qualified applicants will receive consideration for employment without regard to race, color, religion, sex, national origin, disability status, protected veteran status, sexual orientation, gender, gender identity and gender expression, or any other characteristic protected by law.", "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions. The successful candidates will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.   Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. Degree in computer science, information systems, or related field or 10 years comparable experience in above PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. In addition to supporting extensions to the data warehouse design, this role will design and develop ETL required to onboard new types of business data. Finally, this role will also provide support for Analytics assignments as needed.  Responsibilities  Display sense of ownership over assigned work, requiring minimal direction and driving to completion in a sometimes fuzzy and uncharted environment. Designing and building new data pipelines that support business requirements. Work with IT and other business partners to support the evolution of the enterprise data architecture. Work with IT to build new ETLs to take data from various operational systems and extend existing data warehouse data model for analytics and reporting. Continually improve ongoing reporting and analysis processes, automating or simplifying self-service support for business constituents. Support the development of the company BI infrastructure, including the construction of scalable analytic solutions, and on-premises reporting tools. Utilize Power BI development to build scalable reporting models to serve BI reporting needs. Demonstrate the ability to gather requirements, extract and manipulate data residing in multiple disparate databases, and articulate solutions to support the business. Design, develop, and maintain performant data models in Power BI utilizing best practices. Serve as a subject matter expert for all data warehouse and enterprise systems Use new or existing technologies to produce analytics solutions (in the form of excel spreadsheets, dashboards, etc.). Work with IT and Analytics team to architect and build data pipelines to optimize for performance, data quality, scalability, ease of future development, and cost. Gather requirements, assess gaps and build roadmaps to help the analytics driven organization achieve its goals. Develop data-related Proof of Concepts in order to demonstrate feasibility and value to Symmetry business constituents. Qualifications / Requirements  Bachelor\u2019s degree in Information Systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+years\u2019 experience with advanced SQL concepts and writing SQL statements (SQL Server or similar). Prefer 2 years\u2019 experience with Microsoft BI Suite, PowerBI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Knowledge of the software development lifecycle, agile methodologies, and structured software development methodologies. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data At least 5 years of work experience", "\"Description: Leading with our people, Digital Consultants' mission is to deliver the highest level of professional solutions while being a trusted partner and advisor to our customers. With a culture of practicality, opportunity, and creativity we remain dedicated to being honest, trustworthy, respectful, and ethical in everything we do. We are a certified SBA 8(a) small-disadvantaged business that supports multiple IT customers within the Federal, civilian, and private sectors. Digital Consultants also offers our employees growth opportunities, competitive wages, and a full benefits package. Our founding principles, Fairness and Common Sense make working here more than a job, it is the Digital family.  Digital Consultants is seeking a Power BI Reports Developer to join our team! As the Power BI Reports Developer, you will be designing ETL processes and working directly with developers, testers, and other roles active to translate product roadmap features into well-defined product requirements including features, user stories, and acceptance test criteria.  Duties to include:  Maintain and support data analytics platforms Develop and update relevant technical documentation Collaborate directly with analysts and end users to integrate systems and create effective reports Develop and execute database queries and conduct analyses as needed Maintain status updates for all assigned ad hoc report requests Knowledge of SQL queries, SQL Server Reporting Services (SSRS), and MS SQL Server An expert that understands the Power BI platform and its tools very well. Takes complete responsibility for the development and administration of BI tools including transforming raw data into valuable and meaningful insights in the form of appealing dashboards and reports. Recreating existing reports from the current platform into Power BI.\"\" Build complex dimensional data models and reports from the bottom up Audit existing Power BI efforts with a focus on improvement Visualize compelling data stories on the report canvas Produce KPIs with user-friendly display dashboards Collaborate with client's data team Familiarity with data warehouse design (e.g. dimensional modeling) and data mining Requirements: Active DOD Secret Clearance IAT level II Certification: GSEC", "Competencies  Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience  3+ years\u2019 experience with Integration Services (SSIS)  5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions  Technical documentation skills Self-motivated and directed, with keen attention to detail  Experience with data management Good written and oral communications   Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data  Create ETL processes to load database structures  Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed Position Requirements  Education and Certifications Required \u2022\tBachelor\u2019s Degree in Business Analytics, Management Information Systems or, Business Computer Information Systems \u2022\tCBIP Certification a Plus Experience Required \u2022\t5 + years as a Business Intelligence Analyst, Business Analyst, Systems Support Analyst or Application Support Analyst \u2022\tExperience in Power BI developing reports and dashboards \u2022\tExperience in Business Objects Designer for creating and maintaining universes, WEBI, Derived tables, @functions and schemas \u2022\tUse of Business Objects to access data from a variety of sources \u2022\tPrior business systems analysis experience \u2022\tDrive RCA (root cause analysis) activities \u2022\tWorking experience in server and PC environments and skilled in navigating in a distributed server architecture Experience Preferred \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.", "What you\u2019ll do as the BI Analyst:   Help elevate the Operations and Technology teams by diving deep into data, exploring opportunities for gaining insight and extracting value from the data, and finally, contributing actively to the dashboarding and reporting needs within the company. Act as SME for Snapsheet\u2019s analysis data model, supporting customers and in-house users in finding the information they need for reporting. Collaborate with development and product to provide schema modeling recommendations  Assist in validating launch data from new product releases  Build and maintain documentation on the products you\u2019re building   What we are looking for in a BI Analyst: B.S. or higher degree in related fields 4+ years of experience as a BI analyst (or related role) Proficiency in leveraging SQL to build reports  Experience in building, maintaining, and managing reports & dashboards using data visualization tools (i.e. Tableau, Qlik, Sisense) Self-starter mentality  Nice to haves: Previous experience with AI or ML is a plus  Previous experience pulling metrics or analytics for an operations department/organization", "Kelsey-Seybold Clinic, a Houston tradition in patient-centered care, is a multispecialty clinic with 40+ locations and comprises more than 700 physicians providing primary and specialty care collaboratively.  With more than 65 different clinical and non-clinical specialties, you can design a career path at Kelsey-Seybold Clinic to grow your future in a new direction.  Works collaboratively as a senior member of the Business Intelligence & Reporting team under the direction of KSC Application Technology Leadership. Supports, develops, and maintains SQL database environments and related technology. Acts as a team member on multi-team projects and uses advanced skill sets to develop, test, troubleshoot, and support database-related projects and associated solutions/applications. Acts as a mentor to others learning essential and advanced SQL-related skills.  Requirements include:  Bachelor\u2019s degree in a technical area or equivalent work experience 6 years experience in SQL database administration Flexibility and the ability to adapt to change. Proven communication, presentation, analytical, problem-solving, technical, and writing skills. MS SQL Server Administration MS SQL Transact SQL Programming (T-SQL) MS SQL Data Transformation Services (DTS) and SQL Server Integration Services (SSIS) programming. Performance Tuning of Hardware & MS SQL Server. MS SQL Server Analysis Services (SSAS) MS SQL Server Reporting Services (SSRS) Demonstrates an advanced understanding of the following: Database modeling/normalization Indexing strategies and maintenance Backup and recovery models Clustering and high availability Preferences include:  MCDBA MCTS MCITP Vendor Certified SQL Administrator Other database-related certification/s Why Kelsey-Seybold Clinic?  Medical, Vision, and Dental Tuition Reimbursement Company Matching 401K Employee Reward and Recognition Program Paid time off for vacation, sick, and holidays Employee Assistance Program Continuing Medical Education allowance If you want a satisfying career and a rich, rewarding personal life, don t choose between them.  Achieve them both at Kelsey-Seybold Clinic.  Kelsey-Seybold Clinic strives to provide equal opportunity employment without regard to race, color, religion, age, national origin, sex, gender, sexual orientation, gender identity/expression, genetic information, disability, veteran status, or any other basis protected by organizational policy or by federal, state, or local laws unless such distinction is required by law. Kelsey-Seybold is a VEVRAA Federal Contractor and desires priority referrals of protected veterans.  Job Type: Full-time  Pay: $110,090.00 - $136,995.00 per year  Benefits:  401(k) Dental insurance Flexible schedule Health insurance Life insurance Paid time off Professional development assistance Retirement plan Tuition reimbursement Vision insurance Schedule:  Monday to Friday Education:  Bachelor's (Preferred) Experience:  Database administration: 6 years (Preferred) Microsoft SQL Server: 6 years (Preferred) License/Certification:  Texas Driver's license (Preferred) Work Location: In person", "Proven experience as a BI Developer with expertise in Tableau, SQL, and Tableau Prep. Strong proficiency in SQL for data manipulation and analysis. Experience in designing and developing interactive dashboards and reports using Tableau. Proficiency in at least one programming language like R, Python, or PostgreSQL.", "Key Responsibilities: - Troubleshoot and tune existing Data Warehouse, Dashboards and Reporting systems - Write and modify SSRS and Power BI reports - Design and improve current ETL processes - Maintain Azure Devops Pipelines - Create and update Power BI Data Models - Own and develop relationships with end-users, working with them to optimize and enhance existing reports and integrations - Help design, document and maintain system processes - Improve systems by studying current practices and designing modifications. - Recommend controls by identifying problems and writing improved procedures. - Maintain professional and technical knowledge by attending educational workshops; reviewing professional publications; establishing personal networks; benchmarking state-of-the-art practices Requirements \uf0b7 Bachelor\u2019s degree in Computer Science, Business or Information Science. \uf0b7 Minimum of 5 to 10 years of experience in the field or in a related area. \uf0b7 Experience with Microsoft SQL Server 2008 onwards, Transact-SQL, and Business Intelligence Development Studio (SSAS, SSIS, SSRS, Visual Studio). \uf0b7 Power BI Experience \uf0b7 Knowledge in Azure Data Factory and Pipelines \uf0b7 Familiarity with Essbase and MDX scripts a plus \uf0b7 Operational Data Warehouse experience \uf0b7 Must demonstrate basic knowledge or expertise in the following technology disciplines: Servers, Desktop/Laptop/Workstation Computing, Networking, Security, Programming, and/or IT Operations \uf0b7 Able to read, write and speak English fluently. \uf0b7 Proficient in Microsoft Office Suite (Outlook, Word, Excel, Access and PowerPoint) required. \uf0b7 Detail oriented and ability to work in a team setting. \uf0b7 Ability to be a self-starter and resolve issues with minimal supervision. \uf0b7 Maintains a positive attitude \uf0b7 Ability to handle multiple projects, prioritize tasks, and exercise good judgment. \uf0b7 Good customer skills \uf0b7 Willing to learn new systems and technology", "Title: Senior Report Developer Location: Remote - Anywhere USA As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company. This position will focus on delivery of solutions inside our Data Management/Analytics business unit. Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.", "Requirements  Bachelor\u2019s Degree desired in Computer Science, Information Technology, or related field Minimum of 5 years of experience with database design and Architecture, at least 2 years with Azure technologies, and previous Consulting experience Expert knowledge of Data Management, Business Intelligence and Analytics concepts including: Data Movement (ETL/ELT) Data Warehousing (Designing and Implementing, Azure SQL, Synapse) Azure Storage Technologies (Data Lake, Blob Storage) Data Governance (including Data Quality and Profiling, Master Data Management, and Metadata Management) Business Intelligence, including Reporting and Visualizations (Key Performance Indicators (KPI), and Scorecards) Predictive, Prescription, and Descriptive Analytics Expert knowledge of Microsoft Azure technologies: SQL Server on premises plus cloud supported versions) Azure Data Factory (including ARM templates) Azure Synapse, Cosmos DB Azure Data Lake/Azure Blob Storage Power BI for reporting and analytics Databricks Azure DevOps (including building Stories and tasks, and using development pipelines and ARM templates for publishing code) Eagerness to contribute in a team-oriented environment Excellent communication (written and oral) and interpersonal skills for both technical and non-technical teams Passionate about learning new technologies Analytical approach to problem-solving; ability to use technology to solve business problems Ability to work in a fast-paced environment   Additional Preferred Experience:  Analytics and Data Science tools, technologies, and techniques (R, Python, algorithms, Azure ML Studio/Services) Custom Visualizations in Microsoft Power BI using D3 and jQuery Azure Infrastructure architecture and design Knowledge and experience using Azure DevOps for source control, project deployment and project management", "Power BI Developer Hybrid Remote - 3x per week onsite Based in Rosemont IL Direct hire   At Medix, we are dedicated to creating opportunities for talent in Information Technology. Our dedicated recruiters offer a personalized service to make sure we truly understand your employment needs. We are currently seeking a hybrid remote Power BI Developer with one of our technology clients due growth. This is a direct hire opportunity. Partner with Medix, and you will experience the multiple benefits our company has to offer. We will hold a personal consultation with you to understand your skills and aspirations! Our placement services provide flexibility to accommodate your schedule and needs. We offer competitive compensation packages including full health, dental and vision insurance, 401k and PTO.  Power BI Developer  Job Responsibilities: Reports development Working with Power BI and other individuals across the data team to assist in the pulling of data from SQL and creating visualizations and dashboard for their application and software They will have a smaller team they meet with, but for the most part they will be operating on their own Need to have strong analytical skills and be able to adapt quickly Develop operational reports Build automated reports and dashboards with the help of Power BI and other reporting tools Understand business requirements to set functional specifications for reporting applications Be experienced in tools and systems on MS SQL Server BI Stack, including SSRS and TSQL, Power Query, MDX, PowerBI, and DAX Be able to quickly shape data into reporting and analytics solutions   Power BI Developer  Requirements:  As an Power BI Developer, this individual must be highly motivated, able to multitask and able to work in a fast paced IT environment. Qualified candidates must be able to self direct while working with others.  Other requirements of the role include:  4 years of Power BI experience (including dashboard creation and supporting end users on their visualization needs) Strong SQL experience  Strong understanding of BI functions and tools including SSRS, Power Query, and DAX Any fundamental database knowledge and relational database design  SSIS and SSRS knowledge", "Job Description Summary:  The Business Intelligence Developer is responsible for developing, implementing and supporting reporting and business intelligence solutions to meet the information needs of the organization. The Business Intelligence Developer supports one or more business units in preparing analysis and reporting to drive the business while ensuring accuracy and consistency. Must be able to work with multiple teams and business units simultaneously and thrive in fast-paced, dynamic environment. Must demonstrate the eagerness and ability to learn and must work well in a team environment.   Competencies   Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience 3+ years\u2019 experience with Integration Services (SSIS) 5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions Technical documentation skills Self-motivated and directed, with keen attention to detail Experience with data management Good written and oral communications  Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data Create ETL processes to load database structures Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Apeiron Sumus is looking for a Solution Assessment Consultant to join our team in United States. This person will lead the successful execution of a variety of projects from start to finish.  The ideal candidate is a self-starter with excellent time-management and problem-solving abilities who thrives in fast-paced environments. Someone with high energy, a curiosity about the industry, and tenacity and has previous Microsoft Technology sales experience. This person will bring new ideas, have a deep passion for the role and create ways to attain new accounts.  Responsibilities:  Assessment Implementation -\u202fTrusted advisor to consult on effective plan deployment and new opportunity developments. Able to qualify solution assessment opportunities, handover to Technical team for execution and position partners in the overall sales process.  Customer Engagement - Receives the nomination and engagement with the customer may begin through contact to secure acceptance of the Letter of Engagement and orchestrates project delivery under a remote assistance model.  Orchestrate Assessment process - Manage and execute the activities required to perform a Solution Assessment in each account. Starts the data collection phase, executed under a tele-assisted model that includes remote installation, configuration, and execution of discovery tools, data collection, troubleshooting, data analysis, and the creation of the deliverable for the Solution Assessment.  Report Information and Migration Handover - Shares and fine tunes the report information with Microsoft Team and Designated Migration Partner prior to presenting the team\u2019s Insights & Recommendations to the customer. Hand-offs the Assessment to a designated Migration Partner and Microsoft Field Team to act on the Migration Plan and Drive Consumption.  Partner and Supplier Relationship Management - Recommends Solution Assessment Partner (in case of partner delivered assessments) and coordinates end-to-end engagement with Partner  Professional and Technical competencies:  Hands-on experience with multiple sales techniques  Experience with Microsoft Office and CRM software  Familiarity with MS Cloud and PowerBI  Understanding of sales performance metrics Strong written and verbal communication skills  Attention to detail, data analysis, and analytical skills  Integrate consulting on Microsoft solutions and offerings in support of organizations\u2019 business needs Work with IT systems in support of collecting data  Self-Direction and a focus on quality, apply independent judgment to accomplish objectives   Desirable Certifications:  Microsoft Certified | Azure Fundamentals | AZ-900 Microsoft 365 Certified | Fundamentals | MS-900 Microsoft Certified | Dynamics 365 Fundamentals (CRM) | MB-910  Personal Profile:  Required languages: English Educational level: Bachelor\u2019s degree Special conditions or requirements: Open to work on a global environment with different cultures and languages This is a remote position", "Tableau Opportunity Hi Emmanuel, I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak. Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently. Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Job Description The Power BI / SSRS Developer\u2019s primary responsibility is to design, create and/or support data reporting systems and solutions for the Symmetry Lending organization. Systems include but are not limited to loan originations system, loan servicing system, data warehouse, company intranet, homegrown automation applications, and various partner interfaces. Additional responsibilities include analysis, design, and maintenance of departmental, financial, investor and regulatory reports. Qualifications / Requirements Experience working in the financial industry, ideally banking, lending, or similar as a Power BI and SSRS. Experience as a business analyst or quality assurance analyst is a major plus. 5+ years database design and development experience with MS SQL server technologies (SSRS and SSMS) with Data transformation / ETL and Power Query engine experience. 4+ years' experience with Power BI Desktop, Power Query, DAX (Data Analysis Expressions) language, data modeling, and visualizations. Strong analytical and data modeling skills with the ability to gather and analyze data from various sources, design effective data models, and create relationships between different data tables. Strong understanding of visualization with the ability to create compelling and interactive visualizations with an eye for design. A deep understanding of best practices for creating meaningful charts and graphs, and the ability to effectively communicate data insights to stakeholders. Collaborate with other analysts and developers to integrate Power BI solutions with other data sources and applications. Collaborate with key stakeholders across the organization to identify business requirements for reporting, dashboards, and visualizations. Experience writing complex and optimized SQL queries. Experience with SDLC and Agile processes. Strong verbal, written, and technical analysis skills. Responsibilities Work closely with business users and stakeholders to analyze and define business requirements. Create and provide time sensitive ad-hoc report/data requests. Participate in defining and adhering to best practices, standards and procedures as defined by Symmetry IT. Work closely with Quality Assurance to ensure accurate and compliant data implementations. Create various document artifacts including business requirements and technical design documents. Comply with company policies and procedures, security and regulatory requirements, and investor guidelines. Ensures all applicable internal NPI policies and procedures are followed, and confidentiality of borrower information is maintained. Any combination of following are strong pluses but not strictly required: You have a solid foundation in data analysis and an attention to detail which you use to understand business requirements and translate them into effective report designs. Your strong analytical skills will help you identify trends, patterns, and insights from the data. You have data warehouse design and/or some software development experience. You have a good understanding of data visualization principles and the ability to present data in a meaningful way. You are a continuous learner with a willingness to learn and stay updated with the latest trends, tools, and best practices.", "As a Business Solution Architect, you will\u2026 lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design. Lead the Functional team. Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "EKN Engineering is a fast-growing civil engineering and technology consulting company located in Irvine, CA. We are looking for a Data Analyst II to join us on our quest to further invent and innovate.  As a Data Analyst II, you will liaise with both internal and external stakeholders to anticipate their needs and help foster a data-led culture. You should be able to work with both technical and non-technical teams to define and measure key business metrics and use them in insightful reports. The successful candidate will turn data into information, information into insight, and insight into business decisions.  Responsibilities  Interpret data, analyze results, and identify opportunities for new reporting. Validate data by continually reviewing both reports and data sources for accuracy and consistency. Create and maintain reports and dashboards in Microsoft Excel and Power BI. Administer and improve the data management system, including deployment pipelines. Establish KPI's to measure the effectiveness of business decisions. Create presentations and reports based on recommendations and findings. Work with management to prioritize business and information needs. Requirements  Proficiency with Microsoft Excel. Intermediate-level proficiency using SQL or similar query language. Exceptional problem-solving, technical, and analytical skills. Bachelors' degree in Data Analytics, Mathematics, Statistics, or related field. Experience with Microsoft Power BI or Tableau or similar data visualization software. Competence managing various aspects of a data pipeline, including data validation, data management, data analysis and data visualization. &nbsp;", "SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.", "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.   This position is remote. We are unable to offer work sponsorship for this role.    We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.   Your impact:   Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company\u2019s product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform.", "Title: Senior Report Developer  Location: Remote - Anywhere USA  As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company.  This position will focus on delivery of solutions inside our Data Management/Analytics business unit.  Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Overview: Supports the mission of People's Community Clinic to provide high quality care, by championing and supporting a robust health analytics program.  The starting salary rate for this position is $65,000 - $75,000 annually. Responsibilities: Identifies and implements informatics strategies to support patient outcomes, professional practice and organizational performance. Continuously collects, analyzes, and reports data to end users, including clinicians and administrative staff, through one-time project-based work and by developing tools and systems to support end users\u2019 ongoing needs for data-driven decision making Trains clinical staff on the integrated use of analytics to create sustained progress toward a culture of quality improvement. Provides critical analysis and evaluation of health IT and recommends revision of clinical systems, processes, and workflow to ensure achievement of positive patient outcomes. Serves as the liaison for health IT efforts representing clinician needs. Incorporates clinical research and evidence-based clinical knowledge into informatics program and platform. Collaborate with clinical and IT team members to ensure the effectiveness of technologies and workflows that impact clinical users. Applies human factors and ergonomics to the design of systems and devices. Provides project management oversight of data improvement initiatives. Adheres to HIPAA guidelines. Qualifications: Education: High school diploma or GED. Bachelor\u2019s or other advanced degree in Healthcare Informatics, Nursing, Public Health, or related field preferred. Experience: Two years\u2019 experience working with data, preferably in a healthcare setting. Experience participating in quality improvement and quality assurance efforts preferred. Experience in using a database programming language such as SQL preferred. Experience in statistical programming language such as R or SPSS preferred.  Knowledge, Skills, and Abilities: Strong analytic ability, including problem identification and resolution. Familiarity with EHR and EHR analytics preferred. Strong knowledge of Excel. Ability to work effectively with people of diverse background and varying levels of computer and data expertise. Excellent written and oral communication skills. Ability to work independently with minimal supervision. Able to lead cross-functional teams and influence without direct supervisory authority. Ability to meet deadlines.  Certificate/License: None Required. RN license preferred.  Our Benefits Include: 18 PTO days per year & 11 paid holidays Major Medical Health Insurance Coverage. Most employees experience $0 in out-of-pocket medical expenses. Dental & Vision Flexible Spending Accounts Employer paid Life Insurance Employer paid Short-Term and Long-Term Disability Annual Training 403(b) with 4% employer matching", "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995. Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel! About The Opportunity Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry. You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. Key Responsibilities Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs. Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner. Experience & Qualifications Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field. Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. Solid experience in SQL and working with relational databases. Excellent analytical skills with the ability to dissect large amounts of data. Strong communication skills and the ability to effectively convey complex information. Experience in the corporate travel industry is a plus.", "Designing and maintaining SQL Server Database architecture as well as ensuring their optimal performance, availability, and security. Optimizing SQL Server Database performance, including query tuning, indexing, and statics maintenance. Creating complex parameterized (declare) T-SQL script, as well as using T-SQ: scripts and queries for business intelligence reporting. Writing optimized complex SQL queries for integration with other applications. Performing multipart sub-queries and joining the table indexing and maintenance (clustered and non-clustered). Creating user defined functions, views, and stored procedures. Working with intricate recursive queries, i.e., Common table expressions (CTE), table variables. Developing, configuring, and deploying SSIS packages. Implementing and enforcing database security measures, including access controls, encryption, auditing, updating, merging, deleting, and inserting the databases. Creating and using stored procedures and creating over clauses with or without partitioning. Effective partnership with development teams to design data management and governance protocols, manage the information lifecycle, design infrastructure, and data integration controls.", "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.  Key Responsibilities:  Data Visualization Design: Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques. Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels. Data Analysis and Insight Generation: Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization. Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization. Data Quality and Governance: Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams. Implement data quality checks and validation processes to maintain the integrity of visualized data. Stakeholder Management and Collaboration: Engage with various departments and business leaders to gather requirements and understand their data needs. Collaborate with stakeholders to refine visualization designs and align them with business objectives. Data Strategy and Technology: Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities. Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.", "The team members in our stores are made up of different backgrounds, experiences, and perspectives, all with something special to contribute. Our Rethink Reuse business model of purchasing, reselling and recycling gives the community a smart way to shop and keeps 700 million pounds of used goods from landfills each year.  We also help more than 100 non-profit organizations by purchasing donated goods from them, which provides a source of revenue to help support their vital community programs and services.", "Primarily responsible for the data warehouse ETL framework and architecture Partner and align with business leaders and stakeholders to understand the business needs and address them using the many variations of visualizers PowerBI has to offer Provide training, guidance, and support to users Build & modify a solid data infrastructure, to include underpinning enterprise scale BI analytics / reporting platform, add / create new data models and integrate new data as needed Monitor analytics and metrics results Interact with internal clients to evaluate performance, availability and to collaborate on ways to improve the platform / reporting data Identify and act upon data infrastructure needs, data warehouse design, infrastructure maintenance and investment areas Manage infrastructure projects from beginning to end, including ideation, execution, socialization, and stakeholder management Ensure data integrity and compliance with any and all data security policies Translate business requirements into technical documentation Debug, monitor and troubleshoot BI Solution in development and production environments Conduct and participate in code walkthroughs and document technical design Follow the release cycles and implement on-time delivery of bug fixes, change requests and enhancements Other Duties as assigned", "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices.", "Job Description  This person will be responsible for maintaining the quality and direction of data solutions in support of our Finance team.  The role requires knowledge of database development tools and services, with an emphasis on SSAS.  Qualifications  Experience Required: 7 \u2013 10 Years Education Required: Bachelors Degree Minimum seven (7+) years experience in a multi-disciplined IT environment with strong expertise in data analysis, data modeling, data governance and involvement in enterprise architecture Minimum of five (5+) years experience, hands-on, data profiling and performance tuning databases and data marts with Oracle and / or SQL Server Experience with performance improvement using Azure and/or on-premise Microsoft technologies Experience taking a leading role in architecting, designing and developing solutions exceeding business expectations Knowledge of interpreting business processes and requirements and translating them into logical and physical data models adhering to documented standards and best practices Excellent problem solving and communication skills with experience in interacting with business and technical teams at all levels Responsibilities  This person will be ultimately responsible for performing the data analysis and profiling necessary to provide direction, standards, and implementation of data management solutions associated with data ingestion, transformation, integration, and analytics Engage in full stack Microsoft BI development activities to deploy usable and measurable projects meeting business needs leveraging tools such as SSIS, SSAS, stored procedures and Power BI Write complex Stored procedures to harmonize data sets for reporting Setup dimensional/tabular data models Setup and deploy row/object level security Develop and publish Power BI reports Provide input and implement solutions to drive the continuous improvement of the development and support teams Participate in data integration, business intelligence (BI), and enterprise information management programs by rationalizing data processing to support reuse", "Role Summary  This role\u2019s objectives are to develop reports in Power BI that meet our clients\u2019 expectations. We anticipate this will require consequential expertise in working with Power BI, which includes DAX programming.   Duties and Responsibilities  Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.    Qualifications and Skills  Demonstrable expertise in working with Power BI, including DAX programming. Please note that having experience is insufficient. Succeeding in this role requires demonstrable expertise building sophisticated Power BI dashboards and interfaces.  Experience successfully engaging with clients to develop user-facing reports. Excellent verbal and written communication skills. Experience with other BI tools, notably Tableau, is strongly desired, but not required.    Why Abett?   Opportunity to join a high-growth, venture backed software company, with a clear and important mission.  Competitive market salary and equity options. Flexible hours/scheduling. Work remotely. Fully paid health, dental and vision benefits available. Unlimited PTO.", "POSITION: POWER BI DEVELOPER/ANALYST \u2013 W2 ONLY LOCATION: REMOTE TYPE: DIRECT HIRE Are you a problem-solver with a passion for data analysis and visualization? Our direct client, a leader in the global travel industry including being well known in global travel analytics, is seeking a Business Intelligence (BI) Developer/Analyst to join their leading-edge team. In this role, you&#39;ll bring your expert Power BI development skills, data analytics, SQL knowledge, and understanding of relational databases, working with valued clients in the corporate travel industry. You&#39;ll be at the forefront of their analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for their client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. This is also a great opportunity to work for a Microsoft Power BI Partner! Responsibilities: \uf0b7 Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client&#39;s needs. \uf0b7 Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. \uf0b7 SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. \uf0b7 Client Relationship Management: Work directly with a specific, valued main client, understanding their needs, and presenting your findings in a clear and persuasive manner. Qualifications: \uf0b7 Bachelor&#39;s Degree in Information Systems, Computer Science, Business Administration, or a related field. \uf0b7 Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. \uf0b7 Solid experience in SQL and working with relational databases. \uf0b7 Excellent analytical skills with the ability to dissect large amounts of data. \uf0b7 Strong communication skills and the ability to effectively convey complex information. \uf0b7 Experience in the corporate travel industry is a plus.", "Expected they will be able to:  \u2022\tCreating and developing actionable interactive reports and dashboards using statistical and business intelligence tools such as PowerBI \u2022\tConducting exploratory data analysis to identify areas for improvement and generate insights into products and services \u2022\tConsulting with stakeholders using human centered design approaches to understand the need for data products and to identify a potential solution. \u2022\tTranslating customer requirements for data products (datasets, reports, dashboards) into data solutions; creating calculated measures, columns, relationships, etc \u2022\tAnalyzing source systems and designing new data structures for high-volume, complex data. \u2022\tAccessing, transforming, cleansing, and testing data products using programming languages such as M, DAX, Python, R, and SQL. \u2022\tDesigning data visualization strategies that make large or complex datasets more understandable, accessible, and usable. \u2022\tDeveloping wireframes or prototypes of potential user experiences to share with stakeholder to collect feedback. \u2022\tCommunicating (orally and in written form) analytical results displayed through data visualizations to diverse stakeholder groups. General requirements:  \u2022\tTier 4-High Risk Public Trust Clearance \u2022\tIdeally 5 years of experience using business intelligence tools e.g. Power BI, to develop interactive data visualizations and reports. \u2022\tExperience using languages (e.g. DAX, M, Python, R, SQL) to structure and analyze data. \u2022\tKnowledge of data architecture and modelling, including relational databases.", "Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Responsibilities:  Collaborate with cross-functional teams to understand business requirements and translate them into technical solutions. Design, develop, and optimize database systems, ETL processes, and data models for efficient data storage and retrieval. Create interactive and insightful Tableau dashboards and reports to enable data visualization and analysis. Write and optimize complex SQL queries to extract and transform data for use in Tableau Troubleshoot issues related to data, databases, and Tableau reports. Provide support and mentorship to junior team members. Stay updated on emerging technologies, tools, and best practices in the field.    Required Skills:  Masters or bachelor in computer technology or related field  4 years of professional experience in back-end software development with a strong focus on Tableau and database management. A strong understanding of databases is crucial. This includes knowledge of relational database systems like MySQL, PostgreSQL, or Microsoft SQL Server, as well as NoSQL databases like MongoDB. Proficiency in writing and optimizing SQL queries for data retrieval and manipulation. Knowledge of complex joins, subqueries, and indexing is important. Ability to design and implement ETL processes to extract, transform, and load data from various sources into a database for analysis in Tableau. Understanding the business context and how data analysis and reporting contribute to business goals is important for creating relevant Tableau dashboards. Experience Utilizing: JIRA, ZEPHYR, Microsoft Word, PowerPoint, Excel, Teams, Share point. Strong communication skills    Desired Skills  Additional Key Information  Work must be performed from a US location and engaged resource must be video capable during work hours in the eastern US time zone. This position is on a long term/multi-year contract that includes the possibility for yearly performance-based bonuses. This should be a W-2 hire.", "With minimal supervision, completes the technical design, build, testing, and documentation of Power BI reports based on on-premises and SaaS data sources. The role is within a large and complex ERP implementation project and will primarily support the PMO in creating reporting solutions for project KPI tracking as well as data analysis and validation to support project activities.  * Education:-  bachelor\u2019s degree or equivalent experience is required  * Experience:- Minimum of four (4) to six (6) years of progressive, relevant information technology experience", "Insight Global is looking for a junior data integration engineer to join one of our clients in Midlothian VA. The role is hybrid on-site, 3 days per week. The engineer will be apart of the business systems solutions team. The ideal candidate would be responsible for coordinating and processing requests for SQL data integration work, validate requirements, identify system needs, recommend solutions, and work with other team members to develop end to end solutions.  This candidate would work with business lines and the data team to identify data sources, create data flow diagrams and document the processes.  Additional Responsibilities Include:  -Develop complex data structures and workflows to support processes utilizing MS SQL, custom integration tools and other resources.  -Stay informed of ways the organization uses data and makes recommendations as needed to improve efficiencies.  -Monitors and troubleshoot jobs and data issues.  -Coordinate integration changes as source systems are modified.", "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL  Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995.  Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel!  About The Opportunity  Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry.  You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies.  Key Responsibilities  Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs.  Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations.  SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives.  Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner.  Experience & Qualifications  Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field.  Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI.  Solid experience in SQL and working with relational databases.  Excellent analytical skills with the ability to dissect large amounts of data.  Strong communication skills and the ability to effectively convey complex information.  Experience in the corporate travel industry is a plus.", "Must-haves   - 5+ years of experience developing ETL database in a SQL Server Environment  - Strong knowledge of Data Warehousing methodology and ETL best practices  - Experience with SSIS and SSAS  - .Net experience (doing translations and storing them for later use)  - Database experience - knowing what is dirty data, how to move data, clustered and non-clustered indexing  - .Net experience (doing translations and storing them for later use). - Strong communication (verbal & written) - being able to communicate issues in a timely manner - API experience   Plusses   - DBA background  - OLAP cube development  - HTML experience - Power BI experience   Day-to-Day  Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.  This role is hybrid (up to 2-3 days onsite on some weeks) and a typical work week is Monday-Friday, 8am-5pm.", "Develop and maintain databases by acquiring data from primary and secondary sources. Build scripts and implement tools that will make the data evaluation process more flexible or scalable across datasets and platforms. Escalate and manage internal and external incident tickets through company\u2019s ticketing system. Work closely with project managers to understand and maintain focus on their analytics needs, including critical metrics and KPIs, and deliver actionable insights to relevant decision-makers. Provide after-hours or weekend support when necessary to perform high-risk or planned downtime of IT systems for upgrades and maintenance. Evaluate internal systems for efficiency, problems, and inaccuracies, and develop and maintain protocols for handling, processing, and cleaning data. Assist with the creation, deployment and maintenance of new datasets and reports that can be used to review and improve company goals across departments.", "Position Summary  Reasons you will want this position:  Cedar Gate Technologies is a rapidly growing company with limitless career growth and advancement for top performers Our culture appreciates and rewards creative ideas, especially those that achieve better outcomes for everyone Interact regularly with our executives and senior leadership. Gain valuable work experience with the leader in healthcare technology for value-based care Work in a highly productive environment with a Remote Hybrid work schedule, including a focus on work-life balance. Summary  Cedar Gate Technologies is looking to hire a hard-working and organized Senior BI Developer to be responsible for the upkeep and development of reports and dashboards to support business performance monitoring and decision-making. In this role, you will build and maintain designs for generating reports on financial and market intelligence, collaborate with internal department leaders and global resources to understand business needs, and successfully communicate project results and challenges. You will be part of a talented team that demonstrates superb technical competency, delivering mission-critical reporting infrastructure and ensuring the highest levels of performance and security.   Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.  Job Location: Hybrid Remote in our office in Houston, TX, but also considering Fully Remote within the USA   Required Experience / Qualifications  5 years of experience performing SQL-based data analysis 2 years of experience building friendly end-user reports and dashboards in SSRS, Power BI, or Tableau. Ability to work well under pressure by efficiently prioritizing and managing multiple tasks to meet performance expectations and deadlines. Superior customer service skills with demonstrated experience of this on the resume. Excellent written and verbal communication skills in English. Consistently presents a professional, businesslike image to the public, especially in front of clients, visitors, and internal leadership. BS/BA in a related field to Management Information Systems, Healthcare Management, or Computer Science/Engineering. Demonstrate strong critical thinking and analytical skills. Excellent interpersonal and observational skills in order to assess trainee\u2019s understanding and progress. Possess a positive attitude and a willingness to learn from everyone at all levels of experience. Self-motivated and team-oriented.", "Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "Graphic Business Solutions (GBS) is currently seeking a talented Database Developer with two or more years\u2019 proven SQL Server experience to join our growing software development team.  A successful candidate for this position will have a strong background in developing and maintaining world-class data solutions using Microsoft SQL Server technologies. The candidate will have advanced T-SQL skills with a strong ability to work independently on a wide range of business-enhancing data projects. Equally important to these specific technology skills are excellent written and verbal communication skills both with the team and external teams, the ability to multi-task, the ability to translate business requirements to database requirements, the ability adapt quickly to new environments and using creativity to solve difficult problems as a key member of the software development team.  Essential responsibilities and characteristics of this position include the following:  Develop and organize SQL Server objects, such as Stored Procedures, Functions, Views, Tables, SSIS packages, etc., that support automation efforts Co-develop SQL-based solutions for an e-commerce environment Generate and deliver solutions that provide business intelligence to stakeholders Collaborate with other database developers in the software development team on complex data projects Exhibit an understanding of fundamental database design principles Ability to prioritize and manage multiple concurrent tasks and projects Ability to collaborate in a small and productive development team Motivated self-starter with the ability to learn and adapt to new technologies Passion for working with technology and excitement for creating high-quality products Rigorous attention to detail and focus on the quality of deliverables Excellent verbal and written communication skills Dedication and an appetite for learning new technologies and furthering professional growth Solid analytical and problem-solving skills Requirements:  Minimum Required Qualifications:  Must have 5 or more years\u2019 worth of experience and deep knowledge of:  MSSQL Server 2019 or higher Advanced T-SQL skillset Knowledge of MS SQL Server performance tuning, and the design and implementation of a high-availability database architecture. ETL, SSIS, SSRS SSMS and Visual Studio GIT and version control Familiarity with MS development technologies, C#, ASP.NET and web technologies, HTML, Javascript, CSS, XML etc. highly desirable. Additional Preferred Qualifications:  Tableau Experience with reporting and business intelligence systems Exposure and understanding of Agile Methodologies Proficient with all aspects of the Software Development Lifecycle Excellence in debugging practices Comfortable with GIT and deployments Expert-level proficiency in Excel Desired Education:  Associate's degree or above in Computer Science, Information Systems, Business Administration or related field Work Hours:  Typically, Monday through Friday, 8:30 am to 5:00 pm with the flexibility to meet business demands as needed. This position does not require travel.", "We are looking for a savvy Power BI and Reporting Analyst, with previous experience in the retail energy space, to join our growing team of enterprise data and analytics experts. The hire will be responsible for advancing our reporting and analytics footprint. The ideal candidate is an experienced BI Analyst who enjoys optimizing data reporting processes and driving insights.  ESSENTIAL SKILLS AND EXPERIENCE Successful job applicants will be able to perform these functions. Reasonable accommodations will be made to enable individuals with disabilities to perform essential functions. \u2022 5+ years of experience in a related role. \u2022 3+ years of experience using Microsoft PowerBI. \u2022 2+ years of experience working in the retail energy space. \u2022 Advanced working SQL knowledge and experience working with relational databases, query authoring (SQL) as well as working familiarity with a variety\u00a0of\u00a0databases.", "5+ years of experience working with SQL/Azure SQL/T-SQL. proficiency with at least one RDBMS like SQL Server DB, Oracle, MySQL, Postgres is must. Understanding of modern cloud data platforms like Azure or Snowflake is preferred but not required. Understanding of ETL and data warehousing concepts, coupled with hands-on experience of at least one ETL tool like SSIS, Azure Data Factory, Talend, Informatica. Knowledge of Power BI, DAX, or Tableau or SSRS. Adapt at conveying insights through data, assisting partners in identifying what matters and what steps they can take to help their business. Devotion to the QA process, conducting QA testing, and adept troubleshooting While AI or ML experience is preferred, it is not obligatory. Awareness of modern-day storage, compute, serverless, and orchestration services offered by cloud platform such as Azure, AWS, GCP. Experience with task automation, configuration, and alerts via PowerShell, Azure Data Factory, Databricks, SQL Agent, Data Pipelines. Working knowledge of Python and/or Spark (preferred but not required). Understanding of data modeling is desired but not mandatory. Advanced knowledge of performance monitoring and optimization. Be able to analyze system resource utilization, bottlenecks, and plan platform capacity sizing (activity monitors, traces, query tuning, optimizers, etc.) Capability to quickly adapt to new projects, systems, and technology tools. Must reside in Southern California. Some of the systems we work with are: Yardi (multiple modules including Voyager, Deal Manager), SQL databases and DW, Smartsheet, HubSpot, various 3rd party data sources.", "Summary  Under general supervision, this position will involve reviewing, researching, analyzing, monitoring, and manipulating school and business-related data within many database systems, implementing information delivery improvements, ensuring data accuracy, and creating daily, weekly, and quarterly reports and dashboards, including support ticketing processes.   Essential Functions  Demonstrates expert proficiency in the design, development, and implementation of data, reporting and database technologies and tools, Consults with businesses to resolve complex data issues Champions\u2019 efforts to extend existing data architecture to ensure new and existing user demands and application requirements are met on an ongoing basis Advise database design/code through in-depth understanding of business needs/functionalities and provides expertise in devising, negotiating, and defending database schema and data models Consults with database administration and client areas and provides solutions in resolving complex issues during the translation to a physical database design Provides knowledge and expertise of enterprise data to assist Spartan functional groups in the creation and definition of internal and external dashboards, reports, and KPIs Provides direction and guidance on reports and visualizations and ensures recommendations are aligned with user needs and capabilities Uses expertise to evaluate market trends and provide input into the selection of tools and any necessary changes to the company\u2019s data management, reporting and visualization environment Serve as a mentor to other data analyst within IT and throughout organization Accomplishes engineering and organization mission by completing related results as needed  Knowledge / Skills:  Experience in consultative requirements elicitation, design and building of data management, reporting, and visualization solutions Motivated and able to quickly learn new technologies and tools 5+ years report and analysis development experience Experience scripting in TSQL and other database technologies Experience in SSRS or equivalent technologies Experience with PowerBI, Tableau or equivalent technologies (Power BI development/design experience is a plus) Ability to develop, design and solution specifications Demonstrated record of perusing and applying new advancements in information technology to solving business problems related to data management, reporting, and data visualization Must be a self-starter with effective oral and written communication skills. Must also be customer-service oriented and an experienced problem solver who seeks assistance when necessary Education and Work Experience  High School diploma or GED required Bachelor\u2019s degree preferred in computer science or related discipline, or equivalent work experience required 5 to 7 years\u2019 experience directly related to duties and responsibilities specified", "A remote position position opened for candidates in the USA; What you will do  Design and develop database solutions using SQL Server; Create and maintain data models, database schema, and data dictionaries; Implement Service Broker queue concepts; Provide solutions to other groups and work collaboratively with cross-functional teams; Discuss pros and cons of potential solutions and make recommendations based on business needs; Perform troubleshooting and debugging of database issues; Maintain database performance by identifying and resolving production and application development Must haves  7+ years of experience in data modeling, database development, and database design; Strong experience with SQL server; Work with Control-m jobs scheduling and Jenkins; Knowledge of Service Broker queue concepts and their implementation; Ability to create database schemas, data models, and data dictionaries; Ability to work well in a team-oriented, collaborative environment; Excellent communication and interpersonal skills.", "About the job ABOUT US Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards! ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable. Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns. With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement. THE ROLE The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting. We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements. You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units. KEY TASKS & RESPONSIBILITIES Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "\"Position: BI Developer Hours: 8-5pm EST Location: Remote - EST time zone   Local healthcare client in Atlanta, GA is looking to bring on a resource to the BI team to assist with day-to-day analysis and project/data development. They are seeking a high performer with the ability to hit the ground running and maintain a \"\"we vs me\"\" mentality with other team members.   Requirement:  Minimum 5 years of experience in the following: Strong SQL experience Strong Power BI experience Enterprise Database Reporting Analytical Thinker Business facing skillsets Report optimization Metric Insights experience is a plus Must be a team player - we vs me mentality   Responsibilities:   Ensures all projects and data developed is value-adding and provides actionable insights.  Building new data tables", "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI", "Responsibilities:   Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis.   With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables.   Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS.   Research and propose opportunities for data acquisition and new uses for existing data.   Code, test, and document new or modified data systems to create robust and scalable applications for analytics.   Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables.   In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions.   Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts.   Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI.   Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices.   Collaborate with Quality Assurance team to ensure valid and proper deliverables.   Support business decisions with ad-hoc analysis as needed.   Participate in rotation of after-hours support.   Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates.   Research new technologies for implementation by the team for producing cutting-edge solutions.   Cultivate business relationships with stakeholders.   May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.   Required:   Bachelor\u2019s degree in a related discipline (Computer Science, Information Systems Management, Engineering, or similar) or equivalent work experience.   Advanced knowledge of Microsoft\u2019s SQL Server, SSRS, SSIS, and SSAS.   Knowledgeable with Power BI, preferably with an on-premises environment.   Intermediate SQL Query, ETL, and Data Architecture experience.   Advanced Knowledge and ability in writing complex T-SQL code.   Ability to quickly identify and troubleshoot problematic SQL code.   Ability to design tables, data marts, and/or databases to suit reporting needs.   Knowledge of data mapping, database design, and data warehouse concepts.   Introductory experience with SQL Database Administration.   Knowledge using Jira, Bitbucket, GitKraken, and/or SourceTree with a good understanding of Git.   Desire and ability to learn emerging technologies and methodologies.   Ability to interpret report requests and requirements in order to build appropriate automated solutions.   Ability to work with shifting deadlines in a fast-paced environment.   Strong computer skills, including Microsoft Office (Access, Excel, Word, & Outlook).   Strong attention to detail, interpersonal skills, and notation skills.", "Responsibilities: Consult with internal and external customers to collect BI requirements. Understand the customer\u2019s datasets. Correlate the datasets with the BI requirements. Create Power BI visualizations and edit existing reports. Publish and administrate Power BI Workspaces. Creation of staging databases and data warehouses for consumption by Power BI. Setup and administration of Power BI data connections.  Specific Skills Required:  Strong T-SQL skills. Knowledge of data warehousing products and techniques, including OLAP and/or SSAS. Experience in working with different departments and cross-functional teams, including customer interface and requirements gathering. Ability to manage multiple priorities and juggle customer demands. Exceptional problem-solving skills with the ability to leverage a wide variety of data and related tools to improve the efficiency of the organization. Strong communication, teamwork, and organizational skills. Solid relationship management and leadership skills and the ability to assume increasing responsibilities in a rapidly changing environment. Strong general technical aptitude.   Preferred Skills:  Additional software development skills, particularly in .NET are highly desirable  Education & Years of Experience:  Bachelor\u2019s degree preferred. Two-plus years\u2019 experience in BI. Proven expertise in creating Power BI visualizations, workspaces, datasets, DAX, database queries.", "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred  5-7 years experience is preferred   Basic knowledge of programming languages in order to comprehend reading code and basic functions.   Ability to create business solutions that increase competitive advantage.   Ability to exercise good judgment in selecting methods and techniques for obtaining solutions.   Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines.   Ability to solve technical problems/ processes and understand complex details.   Ability to increase operating efficiency by producing high quality technical solutions.   A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level.   Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must."], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1]}, "label": "Job_Description", "count": 138, "min": "\"Description: Leading with our people, Digital Consultants' mission is to deliver the highest level of professional solutions while being a trusted partner and advisor to our customers. With a culture of practicality, opportunity, and creativity we remain dedicated to being honest, trustworthy, respectful, and ethical in everything we do. We are a certified SBA 8(a) small-disadvantaged business that supports multiple IT customers within the Federal, civilian, and private sectors. Digital Consultants also offers our employees growth opportunities, competitive wages, and a full benefits package. Our founding principles, Fairness and Common Sense make working here more than a job, it is the Digital family.  Digital Consultants is seeking a Power BI Reports Developer to join our team! As the Power BI Reports Developer, you will be designing ETL processes and working directly with developers, testers, and other roles active to translate product roadmap features into well-defined product requirements including features, user stories, and acceptance test criteria.  Duties to include:  Maintain and support data analytics platforms Develop and update relevant technical documentation Collaborate directly with analysts and end users to integrate systems and create effective reports Develop and execute database queries and conduct analyses as needed Maintain status updates for all assigned ad hoc report requests Knowledge of SQL queries, SQL Server Reporting Services (SSRS), and MS SQL Server An expert that understands the Power BI platform and its tools very well. Takes complete responsibility for the development and administration of BI tools including transforming raw data into valuable and meaningful insights in the form of appealing dashboards and reports. Recreating existing reports from the current platform into Power BI.\"\" Build complex dimensional data models and reports from the bottom up Audit existing Power BI efforts with a focus on improvement Visualize compelling data stories on the report canvas Produce KPIs with user-friendly display dashboards Collaborate with client's data team Familiarity with data warehouse design (e.g. dimensional modeling) and data mining Requirements: Active DOD Secret Clearance IAT level II Certification: GSEC", "max": "ob Description:   BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.   Job Responsibilities   Managing the planning, scheduling and deployment of all hardware facilities and associated software for major or multiple sites. Trains, develops, and mentors staff by providing subject matter direction and guidance. Assigns, monitors, and reviews progress and accuracy of work.Provides staff management oversight including hiring, promoting, or making recommendations for staff.Conducts performance reviews and assessments, manages performance, engages in skills assessment, and promotes professional development of staff. Directing, motivating and developing staff, maximizing their individual contribution, professional growth and ability to function effectively with their colleagues as a team. Ensuring adherence to policies, plans, objectives, budgets and staffing allocations for the assigned site. Optimizes the utilization of resources and adheres to Departmental budgeting and fiscal responsibilities. Actively participates in project teams, manages and tracks project details, and provides leadership during periods of transition. Ensures compliance with corporate and industry standards, policies, procedures, and regulations.   Job Qualifications   Education   Bachelor's Degree in a Computer Sciences related field or equivalent work experience   Experience   5 years - Experience in Information Technology required   Skills\\Certifications   Knowledge of information technology concepts, methodology, terminology and standards. Demonstrated ability to interpret and translate technical and/or or complex concepts into information meaningful to project team members and/or business personnel. Strong interpersonal and organizational skills PC Skills required (Basic Microsoft Office and E-Mail) Adaptive to high pace and changing environment Must be able to communicate effectively with both technical and non-technical co-workers Must be willing to adjust schedule to perform maintenance and upgrades outside of business hours and be part of an on-call rotation.   Job Specific Requirements:    Working knowledge with regards to End User Experience (Business user experience) Prior experience with Agile is preferred.   Preferred Skills:   Number of Openings Available:   1   Worker Type:   Employee   Worker Sub-Type:   Employee   Company:   BCBST BlueCross BlueShield of Tennessee, Inc.   Applying for this job indicates your acknowledgement and understanding of the following statements:   BCBST is an Equal Opportunity employer (EEO), and all employees and applicants will be entitled to equal employment opportunities when employment decisions are made. BCBST will take affirmative action to recruit, hire, train and promote individuals in all job classifications without regard to race, religion, color, age, sex, national origin, citizenship, pregnancy, veteran status, sexual orientation, physical or mental disability, gender identity, or any other characteristic protected by applicable law.   Further information regarding BCBST's EEO Policies/Notices may be found by reviewing the following page:   BCBST's EEO Policies/Notices   BlueCross BlueShield of Tennessee is not accepting unsolicited assistance from search firms for this employment opportunity. All resumes submitted by search firms to any employee at BlueCross BlueShield of Tennessee via-email, the Internet or any other method without a valid, written Direct Placement Agreement in place for this position from BlueCross BlueShield of Tennessee HR/Talent Acquisition will not be considered. No fee will be paid in the event the applicant is hired by BlueCross BlueShield of Tennessee as a result of the referral or through other means.    All applicants will be advised that BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate."}, {"values": {"label": ["Sue", "Kate", "Kyrsa", "Amanda", "Andrea", "Shaun", "Shirudkar", "Bharath", "Jason", "Nathan", "Rocky and Tracy", "Yolanda", "Matthew", "Ray", "Chris", "Jordan", "Colleen", "Tracy", "Toni", "Nikole", "Wesley", "Dave", "Daniela", "Lhuana", "Liz", "Preeti", "Kaylee", "Christopher", "Kelly", " Security+CE", "Lynda", "Capri", "Nydia Valenzuela", "Suzy", "Barcley", "Nicole", "Amy", "Ram", "Heather", "Sarah", "Edward", "Kyle", "Laney", "Meg", "Pamela", "Rita", "Ashley", "Joshua", "Abby", "Pearson", "Bradie", "Tim", "Patrick", "Matea", "Akshay", "Dana", "Samuel", "Drake", "Dan", "Scott Bostic", "Virginia", "Alexandra", "Tony", "Bobby", "Andrew", "Beau", "Sofiia", "Shreya", "Vanessa", "Anthony", "Luca", "Kevin", "Olivia", "Annie", "Talley", "Luis", "Jessica", "Julie", "Jeevana", "Milind", "Tashira", "Brittany", "Marie", "Sandeep", "Brendan", "Aaron", "prashant", "Lauren", "Elisa", "David", "Lisa", "Thomas", " and making adjustments to existing tables. Ability to find a way to be able to look at data to see how it will change reporting. Ability to understand a business problem and work through various legacy systems.  Ability to communicate clearly and efficiently with internal business members\"", "Laurine", "Cassie", "Fiona", "Wendy", "Malyssa", "Paige", "parshant", "Sharon", "Kylie", "Steven", " NC"], "data": [1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 2, 1, 3, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 3, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1]}, "label": "Recruiter_First_Name", "count": 104, "min": " NC", "max": "prashant"}, {"values": {"label": ["JOHNSON", "Grimes", "Bucher", "Lott", "Jones", "Ashburn", "Tolia", "Skelton", "Vazquez", "Weigel", "Pickering", "Daub", "Rociles", "Smith", "Poynter", "Rountree", "Allen", "Sethi", "Joshi", "Miller", "Mercer", "Talone", "Galyan", "Strandberg", "Kaylee", "Burk", "Tumang", "Capri", "Martin", "Fitzgerald", "Austin", "Mikelson", "V", "Cave", "Lambdin", "Harris", "Silva", "Hord", "Lieblang", "Amudala", "Adusumilli", "Stafford", "Lievina", "Lachica", "Antifave", "Booth", "Filian", "Adams", "Connor", "tolia", "Pearson", " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.  While our engagements have taken us around the globe", "Mcneil", "McGinnis", "Flanagan", "Van Ness", "Andrzejewski", "Toub", "Nulph", "Hathaway", "Murray", "Seiler", "Talbert", "Dandapa", "Kumar", "Cadet", "Nandi", "Talley", "Ostrander", "Massey and Miller", " or", "Dalrymple", "Aguayo", "Cruz", "Butler", "Lofgren", "Dipti", "Shreckengost", "Turner", "Abraham", "Selki", "Etherton", "Choe", "Alonzo", "Salazar", "Dryer", "Hegemier", "Thomas", "Guzman", "Johnson", "Schoemehl", "Penn", "Mcneill", "Detz", "Hill", "Carlson", "Gallagher", "Griffith", "Dye", "Singh", "MacKillop", "Barker", "Varga", "Parker", "Henry", "Daletski", "Wingate", "Jerkovic"], "data": [1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 2, 3, 1, 1, 3, 3, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 3, 1, 1, 2, 1, 1, 1, 3, 1, 1]}, "label": "Recruiter_Last_Name", "count": 108, "min": " or", "max": "tolia"}, {"values": {"label": ["Dipti_Shirudkar@bcbst.com", "Kevin.Thomas@honestmed.com", "careers@paccarparts.com", "parshant.tolia@RADYUSradiology.com", "nicole.mcneill@unifyconsulting.com", "SFlanagan@compia.global", "ThomasJ@woodforest.com", "sarah.weigel@gravityitresources.com", "bharath.amudala@peopletech.com", "bschoemehl@brooksource.com", "https://www.linkedin.com/in/sandeep-joshi-450a796/", "Paige.Bucher@insightglobal.com", "capri.talley@symmetrylending.com", "fconnor@eknengineering.com", "Virginia.Griffith@insightglobal.com", "Alexandra.Adams@sibylline.co.uk", "aaustin@brooksource.com", "thomas@itbtalent.com", "Toni.Parker@rice.edu", "kyrsa.galyan@snapsheet.me", "Joshua.Vazquez@ventrahealth.com", "lbooth@savers.com", "ahathaway@wiredhivetech.com", "linkedin.com/in/samjohnson2010", " SSCP Power BI Data Analyst or associate degree in a related field 5+ Power BI specific focus Experience w/ DevOps Framework Experience visualizing data in Power BI Desktop and Power BI Service Extensive experience with building dashboards and custom reports in Power BI Strong analytical orientation and problem-solving skills Focusing on backend work with very large and intricate data models to create high-performing dashboards and paginated reports Rebuild existing SAP Business Intelligence-based reports", "Pamela.Hord@oncoursehome.com", "olivia.d@publishing.com", "aaron.talbert@buyersedgeplatform.com", "allambdin@cshco.com", "tguzman@uslegalsupport.com", "atumang@ds-llc.com", "cassiesmithboz6b_p3y@indeedemail.com", "Malyssa.Daletski@hirschbach.com", "sbostic-stafford@signifyhealth.com", "dvanness@rexfordindustrial.com", "kate@abett.com", "Beau.Jones@connectiverx.com", "jobs@edward.com", "bbutler@tetratec.com", "v-nydiav@microsoft.com", "Russell", "lizostrander@auctiontechnologygroup.com", "lchoe@ledgent.com", "n/a", "slieblang@3cloudsolutions.com", "austinpcc+email+6nc-3c2907147b@talent.icims.com", "Barcley.Cadet@carriageservices.com", "laurine.lachica@modaliconsulting.com", "shreya.nandi@agileengine.com", "EWingate@paylocity.com", "Daniela.Aguayo@scipax.com", "<Tracy.Miller@stridecare.com>, <rocky.massey@stridecare.com>", "mateajerkovic@auctiontechnologygroup.com", "Ray.Andrzejewski@insightglobal.com", "ealonzo@altamed.org", "kpearson@theshipyard.com", "not sure", "bobby@markful.com", "akshay.kumar@Experis.com", "candidate-5eba678d684f@navaide.breezy-mail.com", "NDetz@m-inc.com", "luca.talone@niceforyou.com", "jason.dryer@randstadusa.com", "kyle.skelton@msg.clrco.com", "PREETI.SINGH@msg.paycomonline.com", "Tracy.Miller@stridecare.com", "vanessa@zarecruiting.com", "<adaub@lexipol.com>", "jtoub@nutrisystem.com", "ram@pavetalent.com", "patrick.gallagher@cedargate.com", "andrea.grimes@us.flightcentre.com", "hrsymmetrylending4_eja@indeedemail.com", "matthew.pickering@msg.clrco.com", "Dana.Turner@itineris.net", "kylie.hegemier@medixteam.com", "adaub@lexipol.com", "Julie.Antifave@technossus.com", "Lesli.Martinez-Torres@ey.com", "recruiting+226318872@applytojob.com", " working with some of the largest Fortune 500 companies", "heather.mcginnis@pacden.com", "david.dalrymple@cibr.com", "Meg.Allen@insightglobal.com", "aharris@lbconsulting.com", "Steven.Penn@ideaentity.com", "Patrick.Gallagher@msg.paycomonline.com", "jobs@primusglobal.com", "Nathan.Seiler@insightglobal.com", "inmail-hit-reply@linkedin.com", "rita.varga@shift4.com", "Tim.Strandberg@datavail.com", "cmurray@acgme.org", "wesley.mercer@matrixres.com", "marie.mikelson@profoundjobs.com", "scarlson@entelli.com", "Sofiia.Lievina@dxc.com", "Brendan.Barker@insightglobal.com", "https://www.linkedin.com/in/ashley-selki/.", "recruiting.echo.ac72a5fdd54642d79b800c8a75a2c01f@echo.newtonsoftware.com", "lcruz@mammoth777.com", "milinds@procomservices.com", "shaun.fitzgerald@jobot.com", "jabraham@marinerfinance.com", "jdefaehsz@jobvite.com", "dashburn@liveperson.com", "Lauren.Etherton@roberthalf.com", "kdye@acronym.com", "dmacKillop@aspirepartnersusa.com", "prashant.tolia@RAYUSradiology.com"], "data": [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1]}, "label": "Recruiter_Email_Address", "count": 110, "min": " SSCP Power BI Data Analyst or associate degree in a related field 5+ Power BI specific focus Experience w/ DevOps Framework Experience visualizing data in Power BI Desktop and Power BI Service Extensive experience with building dashboards and custom reports in Power BI Strong analytical orientation and problem-solving skills Focusing on backend work with very large and intricate data models to create high-performing dashboards and paginated reports Rebuild existing SAP Business Intelligence-based reports", "max": "wesley.mercer@matrixres.com"}, {"values": {"label": ["Rexford Industrial", "Wired Hive", "Atlas Technologies, Inc.", "NavAide", "Honest-Medical", "Acronym US", "Rayus radiology", "Flight Center Travel Group (FCTG)", "Markful", "Signify Health", "NICE North America LLC", "Publishing.com", "LEXIPOL", "Houston Methodist", "BlueCross BlueShield of Tennessee", "Carriage Services", "Agile Engine", "Randstad federal", "CIBR Warriors - BSA", "Sibylline", "Z & A Recruiting", "Cedar Gate Technologies", "Lotis Blue Consulting, LLC", "Shift4 Payments", "unifyconsulting.com", "Acronym", "Itineries", "Oncourse Home Solutions", "Luxoft", "Hirschbach", "Robert Half", "Woodforest National Bank", "People's Community Clinic", "Ledgent Technology", "Nutrisystem Inc", "Symmetry Lending", "Hirschbach Motor Lines", "siness intelligence developer", "hrussell@medasource.com", "Bridgesecurityadvisors", "Modali Consulting", "LivePerson", "Spartan College", "Cedar Gate Technologies Recruiter", "Ernst & Young, LLP", "SEAM Group", "Paylocity", "The Shipyard", "Ventra Health", "StrideCare", "People tech group", "TETRA Technologies", "HH Global", " utilizing PowerBi dashboards Design effective BI data models Evaluate and improve existing BI systems\"", "Pave Talent", "Idea Entity", "CoServ", "Jobot", "Lexipol LLC", "IDEA ENTITY", "MARINER FINANCE", "ESP IT", "Aspire Partners", "USLegalSupport", "Clarke Schaefer Hacket", "Pacific Dental Services", "Rice University", "Nice North America", "Edward Jones", "Digital Strategy LLC", "Mammoth Freighters", "Randstad Federal", "ArrowStream", "PRIMUS Global Services", "Spalding Consulting", "U.S. Legal Support", "AltaMed", "Savers", "Entelli", "ConnectiveRx", "Unify Consukting", "Savers/Value Village", "Snapsheet", "Community First Health Plans", "ACGME", "1 of 36 ProFound Staffing", "Centene Corporation - Brooksource", "CIBR Warriors", "Microsoft", "Auction Technology Group", "Abett", "Insight Global", "Kelsey-Seybold Clinic", "Technossus", "Gravity IT Resources", "Brooksource", "Procom - Woodforest National Bank", "Mariner Finance", " our focus has always been on being the best", "Datavail", "3Cloud", "Momentum Inc", "Itineris", "EKN Engineering", "Apeiron Sumus LLC", "Tech M/Citi Bank", "CompTIA", "Paccar Parts", "Northwest Cascade Inc.", "Medix Technology", "ATG (Auction Technology Group)"], "data": [1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 3, 1, 2, 2, 1, 2, 1, 1, 1, 2, 3, 1, 1, 1, 2, 2, 2, 4, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]}, "label": "Company_name", "count": 111, "min": " our focus has always been on being the best", "max": "unifyconsulting.com"}, {"values": {"label": ["Jane Mwangi_11/30/2023_Centene Corporation - Brooksource_PowerBI Eng", "Yama Touray_11/08/2023_Robert Half_Data Analyst", "Mary Gathogo_10/26/2023_Entelli_Power BI Developer", "Yama Touray_12/05/2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "MULUGETA TADE_12/04/2023_Symmetry Lending_ETL Developer", "Mary Gathogo_09/14/2023_Lotis Blue Consulting, LLC_Data Engineer - Consultant/Senior", "EMMANUEL OJENIYI_08/25/2023_Houston Methodist_IT Data Specialist", "LILIAN NJERI_09/07/2023_Itineris_BI Reporting", "EMMANUEL OJENIYI_11/28/2023_BlueCross BlueShield of Tennessee_EIT Team Lead", "Stephanie Anne Lim_11/21/2023_Aspire Partners_Business Development Specialist", "EMMANUEL OJENIYI_11/13/2023_Modali Consulting_Associate Consultant, Data Analyst", "Betty Asmerom_08/30/2023_AltaMed_Data Governance Analyst", "Calvine  Cheptoo _09/13/2023_Jobot_Associate BI Developer", "EMMANUEL OJENIYI_11/01/2023_Insight Global_BI Developer", "LILIAN NJERI_10/12/2023_Z & A Recruiting_Senior Business Analyst Data Visualization", "Nadege Nguemo Mbouyo_08/16/2023_PRIMUS Global Services_BI Developer", "Mary Gathogo_08/25/2023_SEAM Group_Sr. Data Engineer", "Rufus", "ANNE NDUNGU_09/24/2023_Microsoft_Business intelligence Analyst 2", "OLUKAYODE AKINRIMISI_11/21/2023_U.S. Legal Support_Business Intelligence Developer", "Avworo  OGHENEKEVWE _11/02/2023_Atlas Technologies, Inc._Power BI and Power Apps Developer", "EMMANUEL OJENIYI_10/21/2023_Cedar Gate Technologies Recruiter_Senior BI Developer", "Calvine  Cheptoo _08/15/2023_The Shipyard_Data Visualization Manager", "Mary Gathogo_09/07/2023_ACGME_Senior BI Architect", "Yama Touray_10/25/2023_ArrowStream_Data Engineer", "Yama Touray_08/28/2023_Randstad federal_Data Analyst", "Calvine  Cheptoo _11/02/2023_Markful_Database Developer", "Calvine  Cheptoo _10/18/2023_Paylocity_Business Intelligence Report Analyst", "JORUM MWANGI_10/13/2023_Auction Technology Group_Product BI Analyst", "EMMANUEL OJENIYI_12/06/2023_Ventra Health_Business Intelligence Developer", "OLUKAYODE AKINRIMISI_11/20/2023_USLegalSupport_Business Intelligence Developer", "EMMANUEL OJENIYI_09/14/2023_CIBR Warriors - BSA_Tableau Developer", "Yama Touray_08/27/2023_Randstad Federal_Data Analytics", "EMMANUEL OJENIYI_09/12/2023_CIBR Warriors_Tableau Developer", "Mary Gathogo_10/06/2023_Acronym US_Power BI Reporting Specialist", "Talq Tera_10/24/2023_NICE North America LLC_Business Intelligence Developer", "Calvine  Cheptoo _10/07/2023_Ledgent Technology_Sr Data Analyst", "Avworo  OGHENEKEVWE _10/07/2023_Abett_Business Intelligence Analyst", "Mary Gathogo_08/21/2023_Savers_Software Engineer", "JORUM MWANGI_09/05/2023_AltaMed_Tableau Developer (Business Intelligence)", "Shahad Jawad_11/18/2023_Rayus radiology_business intelligence developer", "abebe woldeargay_08/31/2023_CompTIA_Data Specialist", "ANNE NDUNGU_09/26/2023_Microsoft_Business intelligence Analyst 2", "Medasource", "AYODEJI OLAWOYE_11/03/2023_StrideCare_Database Administrator", "Feven Asmelash_11/24/2023_Modali Consulting_Data Warehouse Specialist", "Nadege Nguemo Mbouyo_10/08/2023_ATG (Auction Technology Group)_Product BI Analyst", "ANNE NDUNGU_09/21/2023_People tech group_BI Developer/Analyst", "Mary Gathogo_09/01/2023_3Cloud_Sr. Architect, Power BI", "Calvine  Cheptoo _10/17/2023_NavAide_Navy ERP Level III Data Analyst", " not the biggest.  We believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "Nadege Nguemo Mbouyo_08/15/2023_MARINER FINANCE_Business Intelligence Architect", "OLUKAYODE AKINRIMISI_11/21/2023_Idea Entity_SQL Developer", "Mary Gathogo_08/15/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "Talq Tera_08/15/2023_Hirschbach_Application Specialist", "Mary Gathogo_11/15/2023_HH Global_Data Engineer", "EMMANUEL OJENIYI_09/06/2023_Unify Consukting_Tableau Cloud", "Adib Kazi_08/29/2023_Sibylline_Embedded BI Data Visualisation Specialist SIBU510", "Mary Gathogo_09/15/2023_Snapsheet_Business Intelligence Developer", "Mary Gathogo_10/07/2023_Acronym US_Power BI Specialist", "Talq Tera_10/13/2023_Nice North America_Business Intelligence Developer", "Talq Tera_08/23/2023_The Shipyard_Data Visualization Manager", "EMMANUEL OJENIYI_10/20/2023_Cedar Gate Technologies_Senior BI Developer", "AYODEJI OLAWOYE_09/10/2023_Community First Health Plans_SQL Developer", "Shahad Jawad_11/18/2023_siness intelligence developer_siness intelligence developer", "Avworo  OGHENEKEVWE _09/06/2023_Randstad Federal_Data Engineer", "LILIAN NJERI_08/25/2023_LEXIPOL_Power BI Developer", "Talq Tera_12-04-2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "Talq Tera_10/07/2023_Spartan College_Senior IT Business System Analyst", "Mary Gathogo_08/21/2023_Clarke Schaefer Hacket_Power BI Developer", "Calvine  Cheptoo _08/11/2023_Symmetry Lending_Power BI / SSRS Developer", "Feven Asmelash_11/02/2023_Apeiron Sumus LLC_Solution Assessment Consultant", "AYODEJI OLAWOYE_08/17/2023_Savers/Value Village_Software Engineer, Business Intelligence", "Avworo  OGHENEKEVWE _09/10/2023_Insight Global_Data Integration Engineer", "Nadege Nguemo Mbouyo_10/10/2023_ATG (Auction Technology Group)_Product BI Analyst", "Mary Gathogo_09/12/2023_ACGME_Senior BI Architect", "LILIAN NJERI_09/18/2023_LivePerson_Business Data Analyst", "EMMANUEL OJENIYI_09/04/2023_Kelsey-Seybold Clinic_Senior SQL Database Administrator", "Calvine  Cheptoo _11/11/2023_Honest-Medical_Business Data Analyst", "EMMANUEL OJENIYI_08/17/2023_Luxoft_Tableau Developer", "OLUKAYODE AKINRIMISI_11/17/2023_Rice University_Systems Analyst", "Mary Gathogo_11/08/2023_Agile Engine_Senior Data Base Developer/Data Modeler", "EMMANUEL OJENIYI_10/17/2023_Insight Global_ETL Developer", "Yama Touray_08/29/2023_Mariner Finance_Business Intelligence Architect", "EMMANUEL OJENIYI_09/07/2023_Spalding Consulting_Business Intelligence Developer", "Yama Touray_08/21/2023_Signify Health_Business Intelligence Developer", "EMMANUEL OJENIYI_09/15/2023_Ernst & Young, LLP_Tableau Administrator", "AYODEJI OLAWOYE_08/30/2023_Community First Health Plans_SQL Developer", "AYODEJI OLAWOYE_11/08/2023_Publishing.com_BI Data Engineer", "Talq Tera_10/03/2023_The Shipyard_Data Visualization Manager", "Mary Gathogo_08/17/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "EMMANUEL OJENIYI_09/14/2023_Bridgesecurityadvisors_Tableau developers", "EMMANUEL OJENIYI_12-01-2023_Carriage Services_Sr. Datawarehouse and BI Developer", "Nadege Nguemo Mbouyo_10/09/2023_Auction Technology Group_Product BI Analyst", "OLUKAYODE AKINRIMISI_10/07/2023_Woodforest National Bank_Data Developer II", "Mary Gathogo_12-01-2023_Oncourse Home Solutions_Analytics Consultant", "EMMANUEL OJENIYI_11/30/2023_Momentum Inc_Tableau and Database Specialist", "Jane Mwangi_11/03/2023_Paccar Parts_Sr Business/Data Analyst", "AYODEJI OLAWOYE_08/23/2023_Lexipol LLC_Data Analytics", "OLUKAYODE AKINRIMISI_10/11/2023_Procom - Woodforest National Bank_Data Developer 2", "Nadege Nguemo Mbouyo_09/24/2023_Edward Jones_power BI Developer", "Mary Gathogo_08/15/2023_Medix Technology_Power BI Developer", "Altish Asfaw_08/31/2023_ESP IT_Power BI Developer", "Calvine  Cheptoo _10/04/2023_EKN Engineering_Data Analyst II", "OLUKAYODE AKINRIMISI_09/20/2023_Wired Hive_Power BI and Reporting Analyst", "Mary Gathogo_09/07/2023_Pave Talent_Power Platform Developer", "AYODEJI OLAWOYE_08/16/2023_Savers_Software Engineer", "Mary Gathogo_10/14/2023_Acronym_Power BI Reporting Specialist", "OLUKAYODE AKINRIMISI_09/21/2023_Gravity IT Resources_Lead SQL Developer", "EMMANUEL OJENIYI_09/21/2023_Tech M/Citi Bank_Senior Developer (Tableau + ETL)", "EMMANUEL OJENIYI_09/08/2023_Spalding Consulting_Business Intelligence Developer", "EMMANUEL OJENIYI_11/01/2023_Datavail_Senior Report Developer", "LILIAN NJERI_08/28/2023_CoServ_Business Intelligence Analyst-Power BI", "Yama Touray_10/18/2023_ArrowStream_Data Engineer", "Jane Mwangi_11/30/2023_People's Community Clinic_Clinical Data Analyst", "Calvine  Cheptoo _08/22/2023_Symmetry Lending_Data Engineer", "ANNE NDUNGU_08/22/2023_Northwest Cascade Inc._Data Analyst", "OLUKAYODE AKINRIMISI_11/12/2023_IDEA ENTITY_SQL Developer", "Shahad Jawad_11/20/2023_Nutrisystem Inc_Business Intelligence Lead Developer", "AYODEJI OLAWOYE_11/02/2023_StrideCare_DATABASE ADMINISTRATOR", "EMMANUEL OJENIYI_08/31/2023_Spalding Consulting_Business Intelligence Developer", "Altish Asfaw_08/28/2023_ESP IT_Power BI Developer", "EMMANUEL OJENIYI_10/04/2023_Brooksource_Business Intelligence Developer", "EMMANUEL OJENIYI_11/13/2023_Digital Strategy LLC_Technical Data Analyst (Remote)", "Mary Gathogo_10/11/2023_Shift4 Payments_Business Intelligence Analyst II", "Rio Rochelle Florague_11/10/2023_Insight Global_Data Engineer/ETL Developer", "Robelyn Florague_11/09/2023_1 of 36 ProFound Staffing_Tableau Data Analyst", "Talq Tera_11/15/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics role!", "EMMANUEL OJENIYI_10/13/2023_TETRA Technologies_BI Developer", "Talq Tera_11/14/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics", "LILIAN NJERI_10/06/2023_Mammoth Freighters_Sr. Data Analyst", "AYODEJI OLAWOYE_08/26/2023_Lexipol LLC_Data Analytics", "Calvine  Cheptoo _10/26/2023_Technossus_Sr. Consultant, Power BI Analyst", "LILIAN NJERI_08/25/2023_Itineries_Power BI Developer", "EMMANUEL OJENIYI_10/18/2023_Datavail_Senior Reports Developer", "Talq Tera_08/30/2023_Rexford Industrial_Data Engineer", "EMMANUEL OJENIYI_08/25/2023_unifyconsulting.com_Tableau Cloud opportunity with Unify Consulting"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "SetName", "count": 137, "min": " not the biggest.  We believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "max": "abebe woldeargay_08/31/2023_CompTIA_Data Specialist"}, {"values": {"label": ["31661", "39119", "37975", "39112", "35551", "37295", "37048", "38690", "37423", "38457", "Benhur", "38744", "37640", "36877", " client focus", "37165", "34701", "OLUKAYODE AKINRIMISI_11/28/2023_Medasource_BI Developer", "38532", "40376", "33898", "38944", "37077"], "data": [11, 11, 2, 2, 1, 8, 4, 3, 2, 5, 1, 3, 8, 21, 1, 29, 6, 1, 11, 1, 10, 1, 1]}, "label": "CandidateID", "count": 23, "min": " client focus", "max": "OLUKAYODE AKINRIMISI_11/28/2023_Medasource_BI Developer"}, {"values": {"label": ["31661", "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "rufus.benhur@digitalconsultants.org", "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying", " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.  Company Description StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte"], "data": [1, 4, 14, 119, 3, 1, 1]}, "label": "SurveyResponse", "count": 7, "min": " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.  Company Description StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "max": "rufus.benhur@digitalconsultants.org"}, {"values": {"label": ["\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", " with excellent question clarity", " with clear and engaging questions. The candidate felt comfortable and performed well", "Recruiter", " engaging interviewer", "Digital Consultants, LLC", "Technical", " NC"], "data": [1, 1, 4, 90, 17, 1, 28, 1]}, "label": "InterviewType", "count": 8, "min": " NC", "max": "Technical"}, {"values": {"label": ["56.25", "18.75", "0", "62.5", "6.25", "100", "75", "37.5", "25", "31.25", " engaging interviewer", " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.\\r\\n\\r\\nWhile our engagements have taken us around the globe", "43.75", "Avworo  OGHENEKEVWE _10/03/2023_Digital Consultants, LLC_Power BI Reports Developer", " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "12.5", " and relevant technical aspects. Strong performance in algorithm design and data structures"], "data": [14, 10, 64, 2, 6, 1, 1, 10, 6, 1, 2, 1, 2, 1, 4, 1, 17]}, "label": "Preparationscore", "count": 17, "min": " and relevant technical aspects. Strong performance in algorithm design and data structures", "max": "Avworo  OGHENEKEVWE _10/03/2023_Digital Consultants, LLC_Power BI Reports Developer"}, {"values": {"label": ["3", "0", " there was some neutrality in the additional feedback section.\"\"", " and relevant technical aspects. Strong performance in showcasing skills and qualifications", "6", " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "38457", "1", " working with some of the largest Fortune 500 companies", "4", " and relevant technical aspects. Strong performance in algorithm design and data structures", "2"], "data": [4, 72, 4, 1, 2, 17, 1, 28, 1, 2, 1, 10]}, "label": "AutoInterviewsCount", "count": 12, "min": " and relevant technical aspects. Strong performance in algorithm design and data structures", "max": "6"}, {"values": {"label": ["282", "1793", "823", "468", "425", "524", "1788", "251", "1696", "71", "1514", "195", "568", "908", "70", "75", "997", "736", "326", "1196", " though a challenge in recruiter miscommunication. Positive sentiment in open-ended responses", " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "341", "60", "1346", "1331", "1069", "827", "144", " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "283", "869", "1037", "778", "1891", "1813", "346", "237", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "1690", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "65", " our focus has always been on being the best", "21", "74", "72", "1517", "392", "791", "1703", "NULL"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 74]}, "label": "AutoInterviewsDuration", "count": 51, "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "max": "NULL"}, {"values": {"label": ["     \"\"ComfortWhileAnsweringQuestions\"\": 5", "0", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", " but some neutrality in additional feedback.\"\"", "Recruiter", " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "1", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", " not the biggest.\\r\\n\\r\\nWe believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "2"], "data": [4, 98, 1, 1, 1, 1, 2, 18, 7, 4, 3, 1, 2]}, "label": "MentorInterviewsCount", "count": 13, "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "max": "Recruiter"}, {"values": {"label": ["11", "2058", "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "18.75", "8", "479", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "46", "     \"\"ComfortWhileAnsweringQuestions\"\": 4", "1847", "136", "6", "1157", "60", "1878", "     \"\"ComfortWhileAnsweringQuestions\"\": 2", " client focus", "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "3990", "     \"\"HandlingChallengingQuestions\"\": 5", "63", "65", "21", "94", "74", "674", "     \"\"HandlingChallengingQuestions\"\": 4", "NULL"], "data": [2, 1, 12, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 98]}, "label": "MentorInterviewsDuration", "count": 29, "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "max": "NULL"}, {"values": {"label": ["Leslie Boye", "Aagbara Kpea", "     \"\"ComfortWhileAnsweringQuestions\"\": 5", " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.\"", "0", "Sakthia Okou", "Sowmya Attur", "Saher Maiber", "Shireesha Ravi", "Ayodele Adepoju", "Grace Karuga", "AMINAT OKERINDE", "Charanya Balakrishnan", "Kwabena Manu", "Frew Samuel", "ALEXANDER  OPIYO", "     \"\"HandlingChallengingQuestions\"\": 3", "     \"\"HandlingChallengingQuestions\"\": 5", "     \"\"HandlingChallengingQuestions\"\": 1", "     \"\"LikelihoodToRecommendCompany\"\": 5", "     \"\"HandlingChallengingQuestions\"\": 4"], "data": [5, 9, 2, 1, 1, 9, 5, 1, 47, 2, 4, 5, 17, 1, 7, 6, 4, 5, 2, 4, 6]}, "label": "Mentor", "count": 21, "min": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "max": "Sowmya Attur"}, {"values": {"label": ["JORUM MWANGI", "Avworo  OGHENEKEVWE ", "AYODEJI OLAWOYE", "     \"\"LikelihoodToRecommendCompany\"\": 3", "ANNE NDUNGU", "     \"\"LikelihoodToRecommendCompany\"\": 1", "OLUKAYODE AKINRIMISI", "LILIAN NJERI", "Nadege Nguemo Mbouyo", "     \"\"AlignmentWithExpectations\"\": 5", "     \"\"LikelihoodToRecommendCompany\"\": 4", "Feven Asmelash", "Mary Gathogo", "Shahad Jawad", "EMMANUEL OJENIYI", "     \"\"LikelihoodToRecommendCompany\"\": 2", "Yama Touray", "Talq Tera", "Adib Kazi", "Calvine  Cheptoo ", "     \"\"HandlingChallengingQuestions\"\": 3", "George", "     \"\"HandlingChallengingQuestions\"\": 5", "Jane Mwangi", "     \"\"LikelihoodToRecommendCompany\"\": 5", "Betty Asmerom", "     \"\"AlignmentWithExpectations\"\": 4", "Altish Asfaw", "MULUGETA TADE"], "data": [2, 5, 9, 2, 4, 1, 7, 8, 5, 1, 1, 2, 17, 3, 25, 2, 7, 10, 1, 7, 1, 1, 1, 3, 11, 1, 3, 2, 1]}, "label": "Applicant", "count": 29, "min": "     \"\"AlignmentWithExpectations\"\": 4", "max": "Yama Touray"}, {"values": {"label": ["7", "15", "11", "3", "8", "22", "Williams", "16", "0", "     \"\"LikelihoodToRecommendCompany\"\": 3", "5", "18", "17", "     \"\"AlignmentWithExpectations\"\": 1", "6", "     \"\"AlignmentWithExpectations\"\": 5", "23", "     \"\"InterviewerEngagement\"\": 5", "     \"\"AlignmentWithExpectations\"\": 3", "24", "9", "1", "20", "10", "     \"\"AlignmentWithExpectations\"\": 2", "     \"\"LikelihoodToRecommendCompany\"\": 5", "4", "     \"\"AlignmentWithExpectations\"\": 4", "12", "13", "14", "2"], "data": [8, 1, 2, 14, 3, 1, 1, 2, 4, 1, 9, 2, 1, 1, 4, 6, 1, 4, 2, 1, 3, 29, 1, 2, 1, 1, 11, 7, 1, 1, 1, 17]}, "label": "Recruiter_InterviewCount", "count": 32, "min": "     \"\"AlignmentWithExpectations\"\": 1", "max": "Williams"}, {"values": {"label": ["3", "0", "5", "6", "     \"\"AlignmentWithExpectations\"\": 5", "1490", "     \"\"InterviewerEngagement\"\": 5", "     \"\"SkillsAlignmentWithRole\"\": 5", "     \"\"AlignmentWithExpectations\"\": 3", "     \"\"InterviewerEngagement\"\": 2", "gwilliams@stonelaurel.com", "1", "4", "2", "     \"\"InterviewerEngagement\"\": 3"], "data": [10, 35, 4, 5, 1, 1, 12, 4, 1, 2, 1, 29, 17, 18, 3]}, "label": "Technical_InterviewCount", "count": 15, "min": "     \"\"AlignmentWithExpectations\"\": 3", "max": "gwilliams@stonelaurel.com"}, {"values": {"label": ["     \"\"SkillsAlignmentWithRole\"\": 4", "     \"\"QuestionClarityAndEffectiveness\"\": 5", "Sowmya Attur", "     \"\"SkillsAlignmentWithRole\"\": 2", "     \"\"InterviewerEngagement\"\": 5", "     \"\"SkillsAlignmentWithRole\"\": 5", "     \"\"QuestionClarityAndEffectiveness\"\": 4", "StoneLaurel", "     \"\"InterviewerEngagement\"\": 3"], "data": [2, 1, 1, 2, 1, 13, 3, 119, 1]}, "label": "InterviewScore", "count": 9, "min": "     \"\"InterviewerEngagement\"\": 3", "max": "StoneLaurel"}, {"values": {"label": ["0.0 - 7.0", "7.0 - 14.0", "14.0 - 21.0", "21.0 - 28.0", "28.0 - 35.0", "35.0 - 42.0", "42.0 - 49.0", "49.0 - 56.0", "56.0 - 63.0", "63.0 - 70.0"], "data": [35, 21, 16, 14, 14, 14, 7, 7, 7, 8]}, "label": "InterviewDate_stringindexer_transform", "count": 10, "min": 0.0, "max": 70.0}, {"values": {"label": ["0.0 - 8.8", "8.8 - 17.6", "17.6 - 26.4", "26.4 - 35.2", "35.2 - 44.0", "44.0 - 52.8", "52.8 - 61.6", "61.6 - 70.4", "70.4 - 79.2", "79.2 - 88.0"], "data": [45, 21, 15, 9, 8, 9, 9, 9, 9, 9]}, "label": "Job_Title_stringindexer_transform", "count": 10, "min": 0.0, "max": 88.0}, {"values": {"label": ["0.0 - 13.7", "13.7 - 27.4", "27.4 - 41.1", "41.1 - 54.8", "54.8 - 68.5", "68.5 - 82.2", "82.2 - 95.9", "95.9 - 109.6", "109.6 - 123.3", "123.3 - 137.0"], "data": [19, 14, 14, 13, 14, 14, 13, 14, 14, 14]}, "label": "Job_Description_stringindexer_transform", "count": 10, "min": 0.0, "max": 137.0}, {"values": {"label": ["0.0 - 10.3", "10.3 - 20.6", "20.6 - 30.9", "30.9 - 41.2", "41.2 - 51.5", "51.5 - 61.8", "61.8 - 72.1", "72.1 - 82.4", "82.4 - 92.7", "92.7 - 103.0"], "data": [28, 20, 20, 13, 10, 10, 11, 10, 10, 11]}, "label": "Recruiter_First_Name_stringindexer_transform", "count": 10, "min": 0.0, "max": 103.0}, {"values": {"label": ["0.0 - 10.7", "10.7 - 21.4", "21.4 - 32.1", "32.1 - 42.8", "42.8 - 53.5", "53.5 - 64.2", "64.2 - 74.9", "74.9 - 85.6", "85.6 - 96.3", "96.3 - 107.0"], "data": [28, 22, 18, 10, 11, 11, 10, 11, 11, 11]}, "label": "Recruiter_Last_Name_stringindexer_transform", "count": 10, "min": 0.0, "max": 107.0}, {"values": {"label": ["0.0 - 10.9", "10.9 - 21.8", "21.8 - 32.7", "32.7 - 43.6", "43.6 - 54.5", "54.5 - 65.4", "65.4 - 76.3", "76.3 - 87.2", "87.2 - 98.1", "98.1 - 109.0"], "data": [28, 22, 16, 11, 11, 11, 11, 11, 11, 11]}, "label": "Recruiter_Email_Address_stringindexer_transform", "count": 10, "min": 0.0, "max": 109.0}, {"values": {"label": ["0.0 - 11.0", "11.0 - 22.0", "22.0 - 33.0", "33.0 - 44.0", "44.0 - 55.0", "55.0 - 66.0", "66.0 - 77.0", "77.0 - 88.0", "88.0 - 99.0", "99.0 - 110.0"], "data": [28, 22, 15, 11, 11, 11, 11, 11, 11, 12]}, "label": "Company_name_stringindexer_transform", "count": 10, "min": 0.0, "max": 110.0}, {"values": {"label": ["0.0 - 13.6", "13.6 - 27.2", "27.2 - 40.8", "40.8 - 54.4", "54.4 - 68.0", "68.0 - 81.6", "81.6 - 95.2", "95.2 - 108.8", "108.8 - 122.4", "122.4 - 136.0"], "data": [20, 14, 13, 14, 13, 14, 14, 13, 14, 14]}, "label": "SetName_stringindexer_transform", "count": 10, "min": 0.0, "max": 136.0}, {"values": {"label": ["0.0 - 2.2", "2.2 - 4.4", "4.4 - 6.6", "6.6 - 8.8", "8.8 - 11.0", "11.0 - 13.2", "13.2 - 15.4", "15.4 - 17.6", "17.6 - 19.8", "19.8 - 22.0"], "data": [61, 22, 18, 14, 9, 8, 4, 2, 2, 3]}, "label": "CandidateID_stringindexer_transform", "count": 10, "min": 0.0, "max": 22.0}, {"values": {"label": ["0.0", "1.0", "4.0", "3.0", "2.0", "6.0", "5.0"], "data": [119, 14, 1, 3, 4, 1, 1]}, "label": "SurveyResponse_stringindexer_transform", "count": 7, "min": "0.0", "max": "6.0"}, {"values": {"label": ["0.0", "7.0", "1.0", "4.0", "3.0", "2.0", "6.0", "5.0"], "data": [90, 1, 28, 1, 4, 17, 1, 1]}, "label": "InterviewType_stringindexer_transform", "count": 8, "min": "0.0", "max": "7.0"}, {"values": {"label": ["0.0 - 1.6", "1.6 - 3.2", "3.2 - 4.8", "4.8 - 6.4", "6.4 - 8.0", "8.0 - 9.6", "9.6 - 11.2", "11.2 - 12.8", "12.8 - 14.4", "14.4 - 16.0"], "data": [81, 24, 10, 12, 4, 4, 3, 1, 2, 2]}, "label": "Preparationscore_stringindexer_transform", "count": 10, "min": 0.0, "max": 16.0}, {"values": {"label": ["0.0 - 1.1", "1.1 - 2.2", "2.2 - 3.3", "3.3 - 4.4", "4.4 - 5.5", "5.5 - 6.6", "6.6 - 7.7", "7.7 - 8.8", "8.8 - 9.9", "9.9 - 11.0"], "data": [100, 17, 10, 4, 4, 2, 2, 1, 1, 2]}, "label": "AutoInterviewsCount_stringindexer_transform", "count": 10, "min": 0.0, "max": 11.0}, {"values": {"label": ["0.0 - 5.0", "5.0 - 10.0", "10.0 - 15.0", "15.0 - 20.0", "20.0 - 25.0", "25.0 - 30.0", "30.0 - 35.0", "35.0 - 40.0", "40.0 - 45.0", "45.0 - 50.0"], "data": [97, 5, 5, 5, 5, 5, 5, 5, 5, 6]}, "label": "AutoInterviewsDuration_stringindexer_transform", "count": 10, "min": 0.0, "max": 50.0}, {"values": {"label": ["0.0 - 1.2", "1.2 - 2.4", "2.4 - 3.6", "3.6 - 4.8", "4.8 - 6.0", "6.0 - 7.2", "7.2 - 8.4", "8.4 - 9.6", "9.6 - 10.8", "10.8 - 12.0"], "data": [116, 7, 4, 4, 3, 4, 1, 1, 1, 2]}, "label": "MentorInterviewsCount_stringindexer_transform", "count": 10, "min": 0.0, "max": 12.0}, {"values": {"label": ["0.0 - 2.8", "2.8 - 5.6", "5.6 - 8.4", "8.4 - 11.2", "11.2 - 14.0", "14.0 - 16.8", "16.8 - 19.6", "19.6 - 22.4", "22.4 - 25.2", "25.2 - 28.0"], "data": [113, 7, 3, 3, 2, 3, 3, 3, 3, 3]}, "label": "MentorInterviewsDuration_stringindexer_transform", "count": 10, "min": 0.0, "max": 28.0}, {"values": {"label": ["0.0 - 2.0", "2.0 - 4.0", "4.0 - 6.0", "6.0 - 8.0", "8.0 - 10.0", "10.0 - 12.0", "12.0 - 14.0", "14.0 - 16.0", "16.0 - 18.0", "18.0 - 20.0"], "data": [64, 18, 13, 11, 10, 9, 8, 4, 3, 3]}, "label": "Mentor_stringindexer_transform", "count": 10, "min": 0.0, "max": 20.0}, {"values": {"label": ["0.0 - 2.8", "2.8 - 5.6", "5.6 - 8.4", "8.4 - 11.2", "11.2 - 14.0", "14.0 - 16.8", "16.8 - 19.6", "19.6 - 22.4", "22.4 - 25.2", "25.2 - 28.0"], "data": [53, 27, 21, 14, 6, 7, 6, 3, 3, 3]}, "label": "Applicant_stringindexer_transform", "count": 10, "min": 0.0, "max": 28.0}, {"values": {"label": ["0.0 - 3.1", "3.1 - 6.2", "6.2 - 9.3", "9.3 - 12.4", "12.4 - 15.5", "15.5 - 18.6", "18.6 - 21.7", "21.7 - 24.8", "24.8 - 27.9", "27.9 - 31.0"], "data": [71, 24, 14, 10, 6, 5, 3, 3, 3, 4]}, "label": "Recruiter_InterviewCount_stringindexer_transform", "count": 10, "min": 0.0, "max": 31.0}, {"values": {"label": ["0.0 - 1.4", "1.4 - 2.8", "2.8 - 4.2", "4.2 - 5.6", "5.6 - 7.0", "7.0 - 8.4", "8.4 - 9.8", "9.8 - 11.2", "11.2 - 12.6", "12.6 - 14.0"], "data": [64, 18, 29, 10, 5, 8, 3, 3, 1, 2]}, "label": "Technical_InterviewCount_stringindexer_transform", "count": 10, "min": 0.0, "max": 14.0}, {"values": {"label": ["8.0", "0.0", "7.0", "1.0", "4.0", "3.0", "2.0", "6.0", "5.0"], "data": [1, 119, 1, 13, 2, 2, 3, 1, 1]}, "label": "InterviewScore_stringindexer_transform", "count": 9, "min": "0.0", "max": "8.0"}]}, "selectedFE": [{"transformationsData": [{"feature_label": "InterviewDate", "transformation_label": "String Indexer"}], "feature": "InterviewDate", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "10/10/2023", "max": "9/8/2023", "missing": "0", "distinct": "71"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "InterviewDate"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "NoofDays", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "143", "mean": "-58.34", "stddev": "34.75", "min": "-111", "max": "6", "missing": "0"}, "updatedLabel": "NoofDays"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "LogInterviewID", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "143", "mean": "155.01", "stddev": "67.12", "min": "42", "max": "288", "missing": "0"}, "updatedLabel": "LogInterviewID"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "QID", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "143", "mean": "2614.15", "stddev": "228.25", "min": "0", "max": "2745", "missing": "0"}, "updatedLabel": "QID"}, {"transformationsData": [{"feature_label": "Job_Title", "transformation_label": "String Indexer"}], "feature": "Job_Title", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "Analytics Consultant", "max": "siness intelligence developer", "missing": "0", "distinct": "89"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Job_Title"}, {"transformationsData": [{"feature_label": "Job_Description", "transformation_label": "String Indexer"}], "feature": "Job_Description", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "\"Description: Leading with our people, Digital Consultants' mission is to deliver the highest level of professional solutions while being a trusted partner and advisor to our customers. With a culture of practicality, opportunity, and creativity we remain dedicated to being honest, trustworthy, respectful, and ethical in everything we do. We are a certified SBA 8(a) small-disadvantaged business that supports multiple IT customers within the Federal, civilian, and private sectors. Digital Consultants also offers our employees growth opportunities, competitive wages, and a full benefits package. Our founding principles, Fairness and Common Sense make working here more than a job, it is the Digital family.  Digital Consultants is seeking a Power BI Reports Developer to join our team! As the Power BI Reports Developer, you will be designing ETL processes and working directly with developers, testers, and other roles active to translate product roadmap features into well-defined product requirements including features, user stories, and acceptance test criteria.  Duties to include:  Maintain and support data analytics platforms Develop and update relevant technical documentation Collaborate directly with analysts and end users to integrate systems and create effective reports Develop and execute database queries and conduct analyses as needed Maintain status updates for all assigned ad hoc report requests Knowledge of SQL queries, SQL Server Reporting Services (SSRS), and MS SQL Server An expert that understands the Power BI platform and its tools very well. Takes complete responsibility for the development and administration of BI tools including transforming raw data into valuable and meaningful insights in the form of appealing dashboards and reports. Recreating existing reports from the current platform into Power BI.\"\" Build complex dimensional data models and reports from the bottom up Audit existing Power BI efforts with a focus on improvement Visualize compelling data stories on the report canvas Produce KPIs with user-friendly display dashboards Collaborate with client's data team Familiarity with data warehouse design (e.g. dimensional modeling) and data mining Requirements: Active DOD Secret Clearance IAT level II Certification: GSEC", "max": "ob Description:   BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.   Job Responsibilities   Managing the planning, scheduling and deployment of all hardware facilities and associated software for major or multiple sites. Trains, develops, and mentors staff by providing subject matter direction and guidance. Assigns, monitors, and reviews progress and accuracy of work.Provides staff management oversight including hiring, promoting, or making recommendations for staff.Conducts performance reviews and assessments, manages performance, engages in skills assessment, and promotes professional development of staff. Directing, motivating and developing staff, maximizing their individual contribution, professional growth and ability to function effectively with their colleagues as a team. Ensuring adherence to policies, plans, objectives, budgets and staffing allocations for the assigned site. Optimizes the utilization of resources and adheres to Departmental budgeting and fiscal responsibilities. Actively participates in project teams, manages and tracks project details, and provides leadership during periods of transition. Ensures compliance with corporate and industry standards, policies, procedures, and regulations.   Job Qualifications   Education   Bachelor's Degree in a Computer Sciences related field or equivalent work experience   Experience   5 years - Experience in Information Technology required   Skills\\Certifications   Knowledge of information technology concepts, methodology, terminology and standards. Demonstrated ability to interpret and translate technical and/or or complex concepts into information meaningful to project team members and/or business personnel. Strong interpersonal and organizational skills PC Skills required (Basic Microsoft Office and E-Mail) Adaptive to high pace and changing environment Must be able to communicate effectively with both technical and non-technical co-workers Must be willing to adjust schedule to perform maintenance and upgrades outside of business hours and be part of an on-call rotation.   Job Specific Requirements:    Working knowledge with regards to End User Experience (Business user experience) Prior experience with Agile is preferred.   Preferred Skills:   Number of Openings Available:   1   Worker Type:   Employee   Worker Sub-Type:   Employee   Company:   BCBST BlueCross BlueShield of Tennessee, Inc.   Applying for this job indicates your acknowledgement and understanding of the following statements:   BCBST is an Equal Opportunity employer (EEO), and all employees and applicants will be entitled to equal employment opportunities when employment decisions are made. BCBST will take affirmative action to recruit, hire, train and promote individuals in all job classifications without regard to race, religion, color, age, sex, national origin, citizenship, pregnancy, veteran status, sexual orientation, physical or mental disability, gender identity, or any other characteristic protected by applicable law.   Further information regarding BCBST's EEO Policies/Notices may be found by reviewing the following page:   BCBST's EEO Policies/Notices   BlueCross BlueShield of Tennessee is not accepting unsolicited assistance from search firms for this employment opportunity. All resumes submitted by search firms to any employee at BlueCross BlueShield of Tennessee via-email, the Internet or any other method without a valid, written Direct Placement Agreement in place for this position from BlueCross BlueShield of Tennessee HR/Talent Acquisition will not be considered. No fee will be paid in the event the applicant is hired by BlueCross BlueShield of Tennessee as a result of the referral or through other means.    All applicants will be advised that BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.", "missing": "0", "distinct": "138"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Job_Description"}, {"transformationsData": [{"feature_label": "Recruiter_First_Name", "transformation_label": "String Indexer"}], "feature": "Recruiter_First_Name", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " NC", "max": "prashant", "missing": "0", "distinct": "104"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_First_Name"}, {"transformationsData": [{"feature_label": "Recruiter_Last_Name", "transformation_label": "String Indexer"}], "feature": "Recruiter_Last_Name", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " or", "max": "tolia", "missing": "0", "distinct": "108"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_Last_Name"}, {"transformationsData": [{"feature_label": "Recruiter_Email_Address", "transformation_label": "String Indexer"}], "feature": "Recruiter_Email_Address", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " SSCP Power BI Data Analyst or associate degree in a related field 5+ Power BI specific focus Experience w/ DevOps Framework Experience visualizing data in Power BI Desktop and Power BI Service Extensive experience with building dashboards and custom reports in Power BI Strong analytical orientation and problem-solving skills Focusing on backend work with very large and intricate data models to create high-performing dashboards and paginated reports Rebuild existing SAP Business Intelligence-based reports", "max": "wesley.mercer@matrixres.com", "missing": "0", "distinct": "110"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_Email_Address"}, {"transformationsData": [{"feature_label": "Company_name", "transformation_label": "String Indexer"}], "feature": "Company_name", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " our focus has always been on being the best", "max": "unifyconsulting.com", "missing": "0", "distinct": "111"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Company_name"}, {"transformationsData": [{"feature_label": "SetName", "transformation_label": "String Indexer"}], "feature": "SetName", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " not the biggest.  We believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "max": "abebe woldeargay_08/31/2023_CompTIA_Data Specialist", "missing": "0", "distinct": "138"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "SetName"}, {"transformationsData": [{"feature_label": "CandidateID", "transformation_label": "String Indexer"}], "feature": "CandidateID", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "36821.76", "stddev": "2032.31", "min": " client focus", "max": "OLUKAYODE AKINRIMISI_11/28/2023_Medasource_BI Developer", "missing": "0", "distinct": "23"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "CandidateID"}, {"transformationsData": [{"feature_label": "SurveyResponse", "transformation_label": "String Indexer"}], "feature": "SurveyResponse", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "31661.0", "stddev": "nan", "min": " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.  Company Description StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "max": "rufus.benhur@digitalconsultants.org", "missing": "0", "distinct": "8"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "SurveyResponse"}, {"transformationsData": [{"feature_label": "InterviewType", "transformation_label": "String Indexer"}], "feature": "InterviewType", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": " NC", "max": "Technical", "missing": "0", "distinct": "8"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "InterviewType"}, {"transformationsData": [{"feature_label": "Preparationscore", "transformation_label": "String Indexer"}], "feature": "Preparationscore", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "16.68", "stddev": "22.91", "min": " and relevant technical aspects. Strong performance in algorithm design and data structures", "max": "Avworo  OGHENEKEVWE _10/03/2023_Digital Consultants, LLC_Power BI Reports Developer", "missing": "0", "distinct": "17"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Preparationscore"}, {"transformationsData": [{"feature_label": "AutoInterviewsCount", "transformation_label": "String Indexer"}], "feature": "AutoInterviewsCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "323.84", "stddev": "3525.29", "min": " and relevant technical aspects. Strong performance in algorithm design and data structures", "max": "6", "missing": "0", "distinct": "12"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "AutoInterviewsCount"}, {"transformationsData": [{"feature_label": "AutoInterviewsDuration", "transformation_label": "String Indexer"}], "feature": "AutoInterviewsDuration", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "743.87", "stddev": "610.7", "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "max": "NULL", "missing": "0", "distinct": "51"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "AutoInterviewsDuration"}, {"transformationsData": [{"feature_label": "MentorInterviewsCount", "transformation_label": "String Indexer"}], "feature": "MentorInterviewsCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "0.19", "stddev": "0.43", "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "max": "Recruiter", "missing": "0", "distinct": "13"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "MentorInterviewsCount"}, {"transformationsData": [{"feature_label": "MentorInterviewsDuration", "transformation_label": "String Indexer"}], "feature": "MentorInterviewsDuration", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "606.8", "stddev": "1035.23", "min": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "max": "NULL", "missing": "0", "distinct": "29"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "MentorInterviewsDuration"}, {"transformationsData": [{"feature_label": "Mentor", "transformation_label": "String Indexer"}], "feature": "Mentor", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "0.0", "stddev": "nan", "min": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "max": "Sowmya Attur", "missing": "0", "distinct": "21"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Mentor"}, {"transformationsData": [{"feature_label": "Applicant", "transformation_label": "String Indexer"}], "feature": "Applicant", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "     \"\"AlignmentWithExpectations\"\": 4", "max": "Yama Touray", "missing": "0", "distinct": "30"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Applicant"}, {"transformationsData": [{"feature_label": "Recruiter_InterviewCount", "transformation_label": "String Indexer"}], "feature": "Recruiter_InterviewCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "5.0", "stddev": "5.24", "min": "     \"\"AlignmentWithExpectations\"\": 1", "max": "Williams", "missing": "0", "distinct": "32"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Recruiter_InterviewCount"}, {"transformationsData": [{"feature_label": "Technical_InterviewCount", "transformation_label": "String Indexer"}], "feature": "Technical_InterviewCount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "14.31", "stddev": "136.43", "min": "     \"\"AlignmentWithExpectations\"\": 3", "max": "gwilliams@stonelaurel.com", "missing": "0", "distinct": "15"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Technical_InterviewCount"}, {"transformationsData": [{"feature_label": "InterviewScore", "transformation_label": "String Indexer"}], "feature": "InterviewScore", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "143", "mean": "", "stddev": "", "min": "     \"\"InterviewerEngagement\"\": 3", "max": "StoneLaurel", "missing": "0", "distinct": "10"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "InterviewScore"}], "autoFE_flag": true}, "status": "new", "position": {"x": 62, "y": 160}, "shape_attributes": {"image": {"refWidth": "100%", "refHeight": "100%", "xlinkHref": "assets/svg/transformation/feature-transformation.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 10, "fill": "#333333", "type": "transformation", "text": "Auto FE", "slug": "auto-fe", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}, "root": {"dataTooltipPosition": "bottom", "dataTooltipPositionSelector": ".joint-stencil", "mode": "auto"}, "body": {"fill": "transparent", "stroke": "#4295d1", "strokeWidth": 2, "strokeDasharray": "0"}, "dbValues": {"AutoFE": {"autoFE_flag": true, "dataPercentage": "10"}, "ManualFE": {"FE": []}, "selectedFE": [], "autoFE_flag": true}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"inherited": true, "checked": true, "field": "NoofDays", "alias": "NoofDays", "type": "numeric", "position": 0}, {"inherited": true, "checked": true, "field": "LogInterviewID", "alias": "LogInterviewID", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "QID", "alias": "QID", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "InterviewDate_stringindexer", "alias": "InterviewDate_stringindexer", "type": "real", "position": 3}, {"inherited": true, "checked": true, "field": "Job_Title_stringindexer", "alias": "Job_Title_stringindexer", "type": "real", "position": 4}, {"inherited": true, "checked": true, "field": "Job_Description_stringindexer", "alias": "Job_Description_stringindexer", "type": "real", "position": 5}, {"inherited": true, "checked": true, "field": "Recruiter_First_Name_stringindexer", "alias": "Recruiter_First_Name_stringindexer", "type": "real", "position": 6}, {"inherited": true, "checked": true, "field": "Recruiter_Last_Name_stringindexer", "alias": "Recruiter_Last_Name_stringindexer", "type": "real", "position": 7}, {"inherited": true, "checked": true, "field": "Recruiter_Email_Address_stringindexer", "alias": "Recruiter_Email_Address_stringindexer", "type": "real", "position": 8}, {"inherited": true, "checked": true, "field": "Company_name_stringindexer", "alias": "Company_name_stringindexer", "type": "real", "position": 9}, {"inherited": true, "checked": true, "field": "SetName_stringindexer", "alias": "SetName_stringindexer", "type": "real", "position": 10}, {"inherited": true, "checked": true, "field": "CandidateID_stringindexer", "alias": "CandidateID_stringindexer", "type": "real", "position": 11}, {"inherited": true, "checked": true, "field": "SurveyResponse_stringindexer", "alias": "SurveyResponse_stringindexer", "type": "real", "position": 12}, {"inherited": true, "checked": true, "field": "InterviewType_stringindexer", "alias": "InterviewType_stringindexer", "type": "real", "position": 13}, {"inherited": true, "checked": true, "field": "Preparationscore_stringindexer", "alias": "Preparationscore_stringindexer", "type": "real", "position": 14}, {"inherited": true, "checked": true, "field": "AutoInterviewsCount_stringindexer", "alias": "AutoInterviewsCount_stringindexer", "type": "real", "position": 15}, {"inherited": true, "checked": true, "field": "AutoInterviewsDuration_stringindexer", "alias": "AutoInterviewsDuration_stringindexer", "type": "real", "position": 16}, {"inherited": true, "checked": true, "field": "MentorInterviewsCount_stringindexer", "alias": "MentorInterviewsCount_stringindexer", "type": "real", "position": 17}, {"inherited": true, "checked": true, "field": "MentorInterviewsDuration_stringindexer", "alias": "MentorInterviewsDuration_stringindexer", "type": "real", "position": 18}, {"inherited": true, "checked": true, "field": "Mentor_stringindexer", "alias": "Mentor_stringindexer", "type": "real", "position": 19}, {"inherited": true, "checked": true, "field": "Applicant_stringindexer", "alias": "Applicant_stringindexer", "type": "real", "position": 20}, {"inherited": true, "checked": true, "field": "Recruiter_InterviewCount_stringindexer", "alias": "Recruiter_InterviewCount_stringindexer", "type": "real", "position": 21}, {"inherited": true, "checked": true, "field": "Technical_InterviewCount_stringindexer", "alias": "Technical_InterviewCount_stringindexer", "type": "real", "position": 22}, {"inherited": true, "checked": true, "field": "InterviewScore_stringindexer", "alias": "InterviewScore_stringindexer", "type": "real", "position": 23}], "actual_schema": [{"inherited": true, "checked": true, "field": "InterviewDate", "alias": "InterviewDate", "type": "date", "position": 0}, {"inherited": true, "checked": true, "field": "NoofDays", "alias": "NoofDays", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "LogInterviewID", "alias": "LogInterviewID", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "QID", "alias": "QID", "type": "numeric", "position": 3}, {"inherited": true, "checked": true, "field": "Job_Title", "alias": "Job_Title", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "Job_Description", "alias": "Job_Description", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "Recruiter_First_Name", "alias": "Recruiter_First_Name", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "Recruiter_Last_Name", "alias": "Recruiter_Last_Name", "type": "String", "position": 7}, {"inherited": true, "checked": true, "field": "Recruiter_Email_Address", "alias": "Recruiter_Email_Address", "type": "String", "position": 8}, {"inherited": true, "checked": true, "field": "Company_name", "alias": "Company_name", "type": "String", "position": 9}, {"inherited": true, "checked": true, "field": "SetName", "alias": "SetName", "type": "String", "position": 10}, {"inherited": true, "checked": true, "field": "CandidateID", "alias": "CandidateID", "type": "String", "position": 11}, {"inherited": true, "checked": true, "field": "SurveyResponse", "alias": "SurveyResponse", "type": "String", "position": 12}, {"inherited": true, "checked": true, "field": "InterviewType", "alias": "InterviewType", "type": "String", "position": 13}, {"inherited": true, "checked": true, "field": "Preparationscore", "alias": "Preparationscore", "type": "String", "position": 14}, {"inherited": true, "checked": true, "field": "AutoInterviewsCount", "alias": "AutoInterviewsCount", "type": "String", "position": 15}, {"inherited": true, "checked": true, "field": "AutoInterviewsDuration", "alias": "AutoInterviewsDuration", "type": "String", "position": 16}, {"inherited": true, "checked": true, "field": "MentorInterviewsCount", "alias": "MentorInterviewsCount", "type": "String", "position": 17}, {"inherited": true, "checked": true, "field": "MentorInterviewsDuration", "alias": "MentorInterviewsDuration", "type": "String", "position": 18}, {"inherited": true, "checked": true, "field": "Mentor", "alias": "Mentor", "type": "String", "position": 19}, {"inherited": true, "checked": true, "field": "Applicant", "alias": "Applicant", "type": "String", "position": 20}, {"inherited": true, "checked": true, "field": "Recruiter_InterviewCount", "alias": "Recruiter_InterviewCount", "type": "String", "position": 21}, {"inherited": true, "checked": true, "field": "Technical_InterviewCount", "alias": "Technical_InterviewCount", "type": "String", "position": 22}, {"inherited": true, "checked": true, "field": "InterviewScore", "alias": "InterviewScore", "type": "String", "position": 23}], "selected_schema": [], "created_at": "2023-12-07 17:44:31.327000", "originalcount": 143, "samplecount": 143, "samplefile": "/FileStore/platform/sampleData/6572047fc850af03eddd1461/part-00000-ebd20b89-8efb-4ae8-93db-c2986149cea8-c000.csv", "joinSchema": [], "updated_at": "2023-12-07 17:47:43.026000", "__v": 0, "datacache": 0, "sampleData": [{"InterviewDate": "12/6/2023", "NoofDays": 6, "LogInterviewID": 287, "QID": 2743, "Job_Title": "Business Intelligence Developer", "Job_Description": "About the job Job Summary   The Business Intelligence Developer works independently, and collaboratively, to elicit requirements and create specifications. They then design, architect, and implement complex and visually compelling reporting and business intelligence (BI) solutions (data visualizations, extract-transform-load (ETL), ad hoc querying, etc.)   The individual in this position interfaces with various functional teams to support the BI solution delivery. They proactively identify needs or issues, develop strategies, and propose/implement technical and process solutions. The Senior BI Developer leads complex or specialized projects and will grow to become a subject matter expert with responsibility for mentoring and training all levels of BI developers as well business stakeholders   Essential Functions And Tasks   Responsible for designing and implementing BI solutions using the Microsoft BI Toolkit (SQL, SSIS, SSAS, SSRS, Power BI) to enable the analysis of data to support strategic initiatives and ongoing business requirements. Solutions include, but are not limited to, end-user reports, ad hoc requests, data visualizations, extract-transform-load (ETL) systems, master data management (MDM), and other BI Solutions   This position is expected to have a proactive approach and create the best solution to address business needs and current infrastructure. Care will be given to provide accurate data to fulfill the requirements of the developed solutions   Actively seeks opportunities to expand technical knowledge and capabilities   Work with the Development team to establish best patterns, practices, and standards as new technology arises   Participate in the out of hours support process   Performs special projects and other duties as assigned   Education And Experience Requirements   Bachelor\u2019s Degree in Computer Science, Information Technology, Data Science, Math, Finance, or a related field, or equivalent training   Two (2) to five (5) years of experience as a Business Intelligence Developer   At least three (3) years of progressively responsible experience building Data Warehouse and Business intelligence solutions. Experience using Microsoft Business Intelligence technologies: SSAS, SSIS, SSRS or similar technologies and database platforms such as Information Builder\u2019s WebFocus, SQL, Tableau, SAP, Power BI, or Oracle. Experience working with SQL queries and data processes   Certification in Lean, Six Sigma or other advanced performance improvement methodology, preferred   Knowledge, Skills, And Abilities   Knowledge and experience with SQL, SSIS, SSAS and SSRSs that support an Enterprise Data Warehouse environment   Ideal candidates will have hands-on experience with the full life cycle of Data warehouse design and development including logical and physical data modeling, mapping data elements from various data sources, and loading EDW objects including dimensions and fact tables   Candidates must have hands-on experience with gathering business requirements, documenting the reporting and analysis specifications, and designing technical architecture   Proven ability to answer technical questions   Strong knowledge and experience with healthcare reporting, Analytics, and Business reporting needs is a must   Excellent communication and client-facing skills   Ability to be flexible and work under high pressure in a complex environment   HealthCare/RCM/Financial systems is a major plus   Experience with large Health care EMRs is a plus   Understand and comply with company policies and procedures", "Recruiter_First_Name": "Joshua", "Recruiter_Last_Name": "Vazquez", "Recruiter_Email_Address": "Joshua.Vazquez@ventrahealth.com", "Company_name": "Ventra Health", "SetName": "EMMANUEL OJENIYI_12/06/2023_Ventra Health_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "24", "Technical_InterviewCount": "6", "InterviewScore": "NULL"}, {"InterviewDate": "12/5/2023", "NoofDays": 5, "LogInterviewID": 273, "QID": 2744, "Job_Title": "Senior Analyst, IT Business Analyst", "Job_Description": "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com  Job Description  What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements.  Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed.", "Recruiter_First_Name": "Beau", "Recruiter_Last_Name": "Jones", "Recruiter_Email_Address": "Beau.Jones@connectiverx.com", "Company_name": "ConnectiveRx", "SetName": "Yama Touray_12/05/2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "12/4/2023", "NoofDays": 4, "LogInterviewID": 288, "QID": 2745, "Job_Title": "ETL Developer", "Job_Description": "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. You will be responsible for extracting, transforming, and loading data from various sources into our data warehouse, ensuring the accuracy, reliability, and performance of our data pipelines. Additionally, this role will also provide support for Reporting and Analytics assignments as needed.  Key Responsibilities:  Data Extraction and Transformation: Design and develop ETL processes to extract data from multiple sources, transform it to meet business requirements, and ensure data quality and consistency. SQL Server Integration Services (SSIS): Create, optimize, and maintain SSIS packages to automate data workflows, including data cleansing, enrichment, and loading into target systems. Complex SQL Queries: Create and optimize complex SQL queries, stored procedures, and functions to extract, transform, and load data from various data sources. Business Requirements: Collaborate with cross-functional teams to gather business requirements and translate them into technical specifications for data integration and ETL solutions. Data Profiling and Analysis: Perform data profiling and analysis to identify data quality issues and propose appropriate solutions. Data Quality: Implement data cleansing, transformation, and validation rules to ensure the accuracy and consistency of data. Data Modeling: Collaborate with database administrators and data architects to design and maintain data models and database schemas. Managing Data Pipelines: Manage and maintain data pipelines, ensuring their reliability, performance, and scalability to meet business needs. Agile Methodology: Apply Agile methodologies to ensure that ETL processes align with Agile principles and practices, facilitating collaboration, and adaptability within the team. Software Development Life Cycle (SDLC): Demonstrate a strong understanding of the Software Development Life Cycle (SDLC) process, ensuring that testing activities are aligned with each phase of the SDLC, from requirements gathering to deployment. Documentation: Develop and maintain documentation, including data flow diagrams, data dictionaries, and technical specifications. Performance Optimization: Monitor and optimize the performance of SQL queries, ETL processes, and database systems to ensure efficient data processing and system reliability. Issue Resolution: Troubleshoot and resolve data-related issues, including data integration failures, data quality problems, and performance bottlenecks. Industry Trends: Stay up to date with industry trends and best practices in SQL development, ETL, and data integration technologies. Be part of an on-call rotation. Qualifications / Requirements  Bachelor\u2019s degree in information systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred. Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+ years\u2019 experience with advanced SQL and SSIS Prefer 2 years\u2019 experience with Microsoft BI Suite, Power BI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint and modeling tools such as ERStudio Prefer experience with other ETL tools such as AWS Glue, etc. Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization. Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused. Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data Python experience a plus Familiarity with API integrations About Symmetry  Symmetry Lending specializes in providing mortgage fulfillment services to include origination, servicing, and capital markets needs to various Lenders across the country with whom we partner. We have offices in Atlanta, GA, Eden Prairie, MN, Denver, CO, Orlando, FL, and Anaheim, CA, and we do business from coast to coast. We take great pride in building a diverse team of motivated professionals that contribute to an exciting work atmosphere. We provide a competitive benefits package including medical, dental, and vision plan options, paid time off, and more.", "Recruiter_First_Name": "Capri", "Recruiter_Last_Name": "Talley", "Recruiter_Email_Address": "capri.talley@symmetrylending.com", "Company_name": "Symmetry Lending", "SetName": "MULUGETA TADE_12/04/2023_Symmetry Lending_ETL Developer", "CandidateID": "40376", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Kwabena Manu", "Applicant": "MULUGETA TADE", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "12/4/2023", "NoofDays": 4, "LogInterviewID": 274, "QID": 2741, "Job_Title": "Senior Analyst, IT Business Analyst", "Job_Description": "ConnectiveRx was formed in 2015 by bringing together the industry-leading business of PSKW, PDR/LDM, Careform (2017) and The Macaluso Group (2018) to advance our technology-driven expertise in providing state-of-the-art commercialization solutions. To learn more about our company, visit ConnectiveRx.com Job Description What you will do: The Senior Analyst, IT Business Analyst position will be responsible for gathering system requirements and determining technical feasibility for the requirements. Perform JAD, Brainstorming, Document Analysis and Interview sessions to determine business requirements, translate into specifications for technical work items, and prepare technical specifications conversions, upgrades, interfaces, reports, forms, and workflows Perform Data Modeling Analyze business trends by generating reports for supporting recommendations for action Perform tasks in Business Intelligence tools and managing Business Intelligence flow of information to users Provide technical support to existing solutions in the current and previous line of the business and exploring new solutions with improved performance Generate scenarios for various test cases involving data modeling and data analysis and draft high level test cycle plan Analyze, facilitate, model, and organize information to reconcile conflicts, elicit requirements and distinguish solution ideas from business needs, feasible in technical environment and Design Process flows Comb through Data, perform Data Mapping for ETL to conduct Data Migration and prepare File Interchange Agreement (FIA) for reporting requirements Facilitate technical kick off meetings, Backlog Grooming sessions, UAT sessions, etc. Participate in Daily Scrum, Sprint planning and Retrospective meetings Contribute to user story estimation Review Test plans and Test cases to ensure full requirement coverage in testing Up to 20% remote work allowed What we\u2019d like from you: Bachelor's degree (or foreign equivalent) in Computer Engineering, Electrical Engineering, Electronics & Communication Engineering, or a related 3 years of experience in a related occupation Experience with: Gathering systems requirements and determining technical feasibility of requirements Data Modeling using Business Intelligence (BI) tools 5 (SSIS, Cognos FWM) Creating ETL processes Using ETL (SSIS) to develop jobs to extract, clean, transform, and load data into data warehouse Performing statistical analysis on data Writing test cases for performing unit testing Designing, developing, and deploying reports in MS SQL Server environment Writing scripts in Visual Studio using C# and .Net; and Using SSRS-2008/2010/2015 Travel or Physical Requirements: Domestic travel up to one time per year required Equal Opportunity Employer: This employer (hereafter the Company) is an equal opportunity employer and does not discriminate in recruitment, hiring, training, promotion, or other employment policies on the basis of age, race, sex, color, religion, national origin, disability, veteran status, genetic information, or any other basis that is prohibited by federal, state, or local law. No question in this application is intended to secure information to be used for such discrimination. In addition, the Company makes reasonable accommodation to the needs of disabled applicants and employees, so long as this does not create an undue hardship on the Company or threaten the health or safety of others at work. This application will be given every consideration, but its receipt does not imply that the applicant will be employed", "Recruiter_First_Name": "Beau", "Recruiter_Last_Name": "Jones", "Recruiter_Email_Address": "Beau.Jones@connectiverx.com", "Company_name": "ConnectiveRx", "SetName": "Talq Tera_12-04-2023_ConnectiveRx_Senior Analyst, IT Business Analyst", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "21", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "10", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "12/1/2023", "NoofDays": 1, "LogInterviewID": 265, "QID": 2742, "Job_Title": "Analytics Consultant", "Job_Description": "Position Summary Join our team as an Analytics Consultant and help drive our marketing, call center, claims, and retention initiatives to new heights! We're seeking a highly skilled individual with a focus on data analysis and advanced analytics to support our efforts across all business units.  As an Analytics Consultant, you'll be responsible for analyzing data, providing actionable insights, and making data-driven decisions that impact our company strategy efforts. With your expertise in data analysis and advanced analytics, you'll play a key role in optimizing our analytics capabilities for maximum impact and ROI. You'll collaborate closely cross-functionally to gather data, analyze trends, and uncover insights that support our business objectives. You\u2019ll support the broader business in performing deep dive analyses to drive business growth. Think of yourself as an internal consultant tasked with improving business processes utilizing data driven insights.  Located at our office in Naperville, our office environment is a key driver of our company culture and employee experience, so a regular in-office hybrid model (generally T-TH in-office and M & F remote) is required.  Responsibilities include but are not limited to: Utilizing advanced analytics approaches such as cohort analysis, risk analysis, and predictive modeling to inform decision-making and improve the customer experience across the organization. Collaborating with various teams to gather and analyze customer data and provide insights that support decision-making and improve overall business processes. Developing dashboards and visualizations to provide regular reporting and insights to support various teams within the company. Identifying incremental opportunities to improve business processes and drive growth by leveraging data to inform marketing and acquisition efforts. Utilizing data to inform company-wide strategies and initiatives that drive growth and efficiency. Providing thought leadership on analytics and identifying new and innovative ways to leverage data to drive business growth across the organization. We\u2019re Excited if This is You: 5+ years of experience in analytics and 3+ years in business intelligence roles In-depth technical knowledge in data modeling, SQL, and Python Strong understanding of business metrics and ability to drive growth. Proficiency in driving data-driven insights and informed business decision making. Demonstrated track record of delivering significant business impact through data analysis and implementation of insights. Strong communication and collaboration skills, with the ability to work effectively in a team environment. Proven track record of partnering with Analytics and Commercial Finance functions to drive improvements by way of analytical capabilities. Education Bachelor\u2019s degree  Computer Skills Needed to Perform this Job Proficiency in Microsoft and Google Suites Prior knowledge of SQL Understanding of ETL/Cloud Infrastructure Proficiency in Tableau, Looker, or other BI tool", "Recruiter_First_Name": "Pamela", "Recruiter_Last_Name": "Hord", "Recruiter_Email_Address": "Pamela.Hord@oncoursehome.com", "Company_name": "Oncourse Home Solutions", "SetName": "Mary Gathogo_12-01-2023_Oncourse Home Solutions_Analytics Consultant", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "74", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "17", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "12/1/2023", "NoofDays": 1, "LogInterviewID": 282, "QID": 2740, "Job_Title": "Sr. Datawarehouse and BI Developer", "Job_Description": "Key Responsibilities: - Troubleshoot and tune existing Data Warehouse, Dashboards and Reporting systems - Write and modify SSRS and Power BI reports - Design and improve current ETL processes - Maintain Azure Devops Pipelines - Create and update Power BI Data Models - Own and develop relationships with end-users, working with them to optimize and enhance existing reports and integrations - Help design, document and maintain system processes - Improve systems by studying current practices and designing modifications. - Recommend controls by identifying problems and writing improved procedures. - Maintain professional and technical knowledge by attending educational workshops; reviewing professional publications; establishing personal networks; benchmarking state-of-the-art practices Requirements \uf0b7 Bachelor\u2019s degree in Computer Science, Business or Information Science. \uf0b7 Minimum of 5 to 10 years of experience in the field or in a related area. \uf0b7 Experience with Microsoft SQL Server 2008 onwards, Transact-SQL, and Business Intelligence Development Studio (SSAS, SSIS, SSRS, Visual Studio). \uf0b7 Power BI Experience \uf0b7 Knowledge in Azure Data Factory and Pipelines \uf0b7 Familiarity with Essbase and MDX scripts a plus \uf0b7 Operational Data Warehouse experience \uf0b7 Must demonstrate basic knowledge or expertise in the following technology disciplines: Servers, Desktop/Laptop/Workstation Computing, Networking, Security, Programming, and/or IT Operations \uf0b7 Able to read, write and speak English fluently. \uf0b7 Proficient in Microsoft Office Suite (Outlook, Word, Excel, Access and PowerPoint) required. \uf0b7 Detail oriented and ability to work in a team setting. \uf0b7 Ability to be a self-starter and resolve issues with minimal supervision. \uf0b7 Maintains a positive attitude \uf0b7 Ability to handle multiple projects, prioritize tasks, and exercise good judgment. \uf0b7 Good customer skills \uf0b7 Willing to learn new systems and technology", "Recruiter_First_Name": "Barcley", "Recruiter_Last_Name": "Cadet", "Recruiter_Email_Address": "Barcley.Cadet@carriageservices.com", "Company_name": "Carriage Services", "SetName": "EMMANUEL OJENIYI_12-01-2023_Carriage Services_Sr. Datawarehouse and BI Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "11", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "23", "Technical_InterviewCount": "6", "InterviewScore": "NULL"}, {"InterviewDate": "11/30/2023", "NoofDays": 0, "LogInterviewID": 285, "QID": 2738, "Job_Title": "PowerBI Eng", "Job_Description": "Hey Jane,  My name is Bradie, and I work with Brooksource, a National IT Services Company. I came across your profile and was extremely impressed with your PowerBI and SQL exposure paired with your business intelligence experience! That is exactly the kind of background our client is currently looking for.  Based on your experience, I have an awesome opportunity for you! I am reaching out to you today as an extension of our Fortune 24 Healthcare Insurance client, Centene Corporation.  We are currently seeking a mid-level Power BI Engineer to support the creation of analytics and visualization solutions tied to a suite of applications that encompass the following business functions: Fraud, Waste and Abuse, Claims processing and Quality Assurance. You will primarily support new application builds as well as improvements on existing applications.  What we are looking for: - 2-5 years professional experience creating/building data visualizations and dashboards - Strong experience with PowerBI and SQL queries -Exposure to Snowflake architecture mapping and creation preferred - Experience with Gitlab, Confluent Cloud, Kafka, or equivalent tools - High attitude/aptitude and ability to work in large data set environment  Additional Details: - 5+ month contract (potential to convert to FTE) - Fully remote schedule - W2 Only (no sponsorship provided)  I believe this opportunity could align great and would love the chance to speak with you further! Please let me know if you would be interested and when you would be available for a quick 10-minute phone call discussing the position further.  Looking forward to hearing back from you!  Bradie Schoemehl Senior Technical Recruiter", "Recruiter_First_Name": "Bradie", "Recruiter_Last_Name": "Schoemehl", "Recruiter_Email_Address": "bschoemehl@brooksource.com", "Company_name": "Centene Corporation - Brooksource", "SetName": "Jane Mwangi_11/30/2023_Centene Corporation - Brooksource_PowerBI Eng", "CandidateID": "38690", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "100", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1813", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "1878", "Mentor": "Leslie Boye", "Applicant": "Jane Mwangi", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "11/30/2023", "NoofDays": 0, "LogInterviewID": 286, "QID": 2739, "Job_Title": "Clinical Data Analyst", "Job_Description": "Overview: Supports the mission of People's Community Clinic to provide high quality care, by championing and supporting a robust health analytics program.  The starting salary rate for this position is $65,000 - $75,000 annually. Responsibilities: Identifies and implements informatics strategies to support patient outcomes, professional practice and organizational performance. Continuously collects, analyzes, and reports data to end users, including clinicians and administrative staff, through one-time project-based work and by developing tools and systems to support end users\u2019 ongoing needs for data-driven decision making Trains clinical staff on the integrated use of analytics to create sustained progress toward a culture of quality improvement. Provides critical analysis and evaluation of health IT and recommends revision of clinical systems, processes, and workflow to ensure achievement of positive patient outcomes. Serves as the liaison for health IT efforts representing clinician needs. Incorporates clinical research and evidence-based clinical knowledge into informatics program and platform. Collaborate with clinical and IT team members to ensure the effectiveness of technologies and workflows that impact clinical users. Applies human factors and ergonomics to the design of systems and devices. Provides project management oversight of data improvement initiatives. Adheres to HIPAA guidelines. Qualifications: Education: High school diploma or GED. Bachelor\u2019s or other advanced degree in Healthcare Informatics, Nursing, Public Health, or related field preferred. Experience: Two years\u2019 experience working with data, preferably in a healthcare setting. Experience participating in quality improvement and quality assurance efforts preferred. Experience in using a database programming language such as SQL preferred. Experience in statistical programming language such as R or SPSS preferred.  Knowledge, Skills, and Abilities: Strong analytic ability, including problem identification and resolution. Familiarity with EHR and EHR analytics preferred. Strong knowledge of Excel. Ability to work effectively with people of diverse background and varying levels of computer and data expertise. Excellent written and oral communication skills. Ability to work independently with minimal supervision. Able to lead cross-functional teams and influence without direct supervisory authority. Ability to meet deadlines.  Certificate/License: None Required. RN license preferred.  Our Benefits Include: 18 PTO days per year & 11 paid holidays Major Medical Health Insurance Coverage. Most employees experience $0 in out-of-pocket medical expenses. Dental & Vision Flexible Spending Accounts Employer paid Life Insurance Employer paid Short-Term and Long-Term Disability Annual Training 403(b) with 4% employer matching", "Recruiter_First_Name": "Tashira", "Recruiter_Last_Name": "Lott", "Recruiter_Email_Address": "austinpcc+email+6nc-3c2907147b@talent.icims.com", "Company_name": "People's Community Clinic", "SetName": "Jane Mwangi_11/30/2023_People's Community Clinic_Clinical Data Analyst", "CandidateID": "38690", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1517", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Leslie Boye", "Applicant": "Jane Mwangi", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "11/30/2023", "NoofDays": 0, "LogInterviewID": 280, "QID": 2733, "Job_Title": "Tableau and Database Specialist", "Job_Description": "Responsibilities:  Collaborate with cross-functional teams to understand business requirements and translate them into technical solutions. Design, develop, and optimize database systems, ETL processes, and data models for efficient data storage and retrieval. Create interactive and insightful Tableau dashboards and reports to enable data visualization and analysis. Write and optimize complex SQL queries to extract and transform data for use in Tableau Troubleshoot issues related to data, databases, and Tableau reports. Provide support and mentorship to junior team members. Stay updated on emerging technologies, tools, and best practices in the field.    Required Skills:  Masters or bachelor in computer technology or related field  4 years of professional experience in back-end software development with a strong focus on Tableau and database management. A strong understanding of databases is crucial. This includes knowledge of relational database systems like MySQL, PostgreSQL, or Microsoft SQL Server, as well as NoSQL databases like MongoDB. Proficiency in writing and optimizing SQL queries for data retrieval and manipulation. Knowledge of complex joins, subqueries, and indexing is important. Ability to design and implement ETL processes to extract, transform, and load data from various sources into a database for analysis in Tableau. Understanding the business context and how data analysis and reporting contribute to business goals is important for creating relevant Tableau dashboards. Experience Utilizing: JIRA, ZEPHYR, Microsoft Word, PowerPoint, Excel, Teams, Share point. Strong communication skills    Desired Skills  Additional Key Information  Work must be performed from a US location and engaged resource must be video capable during work hours in the eastern US time zone. This position is on a long term/multi-year contract that includes the possibility for yearly performance-based bonuses. This should be a W-2 hire.", "Recruiter_First_Name": "Nikole", "Recruiter_Last_Name": "Detz", "Recruiter_Email_Address": "NDetz@m-inc.com", "Company_name": "Momentum Inc", "SetName": "EMMANUEL OJENIYI_11/30/2023_Momentum Inc_Tableau and Database Specialist", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "74", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "65", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "22", "Technical_InterviewCount": "6", "InterviewScore": "NULL"}, {"InterviewDate": "11/28/2023", "NoofDays": -2, "LogInterviewID": 261, "QID": 2723, "Job_Title": "EIT Team Lead", "Job_Description": "ob Description:   BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.   Job Responsibilities   Managing the planning, scheduling and deployment of all hardware facilities and associated software for major or multiple sites. Trains, develops, and mentors staff by providing subject matter direction and guidance. Assigns, monitors, and reviews progress and accuracy of work.Provides staff management oversight including hiring, promoting, or making recommendations for staff.Conducts performance reviews and assessments, manages performance, engages in skills assessment, and promotes professional development of staff. Directing, motivating and developing staff, maximizing their individual contribution, professional growth and ability to function effectively with their colleagues as a team. Ensuring adherence to policies, plans, objectives, budgets and staffing allocations for the assigned site. Optimizes the utilization of resources and adheres to Departmental budgeting and fiscal responsibilities. Actively participates in project teams, manages and tracks project details, and provides leadership during periods of transition. Ensures compliance with corporate and industry standards, policies, procedures, and regulations.   Job Qualifications   Education   Bachelor's Degree in a Computer Sciences related field or equivalent work experience   Experience   5 years - Experience in Information Technology required   Skills\\Certifications   Knowledge of information technology concepts, methodology, terminology and standards. Demonstrated ability to interpret and translate technical and/or or complex concepts into information meaningful to project team members and/or business personnel. Strong interpersonal and organizational skills PC Skills required (Basic Microsoft Office and E-Mail) Adaptive to high pace and changing environment Must be able to communicate effectively with both technical and non-technical co-workers Must be willing to adjust schedule to perform maintenance and upgrades outside of business hours and be part of an on-call rotation.   Job Specific Requirements:    Working knowledge with regards to End User Experience (Business user experience) Prior experience with Agile is preferred.   Preferred Skills:   Number of Openings Available:   1   Worker Type:   Employee   Worker Sub-Type:   Employee   Company:   BCBST BlueCross BlueShield of Tennessee, Inc.   Applying for this job indicates your acknowledgement and understanding of the following statements:   BCBST is an Equal Opportunity employer (EEO), and all employees and applicants will be entitled to equal employment opportunities when employment decisions are made. BCBST will take affirmative action to recruit, hire, train and promote individuals in all job classifications without regard to race, religion, color, age, sex, national origin, citizenship, pregnancy, veteran status, sexual orientation, physical or mental disability, gender identity, or any other characteristic protected by applicable law.   Further information regarding BCBST's EEO Policies/Notices may be found by reviewing the following page:   BCBST's EEO Policies/Notices   BlueCross BlueShield of Tennessee is not accepting unsolicited assistance from search firms for this employment opportunity. All resumes submitted by search firms to any employee at BlueCross BlueShield of Tennessee via-email, the Internet or any other method without a valid, written Direct Placement Agreement in place for this position from BlueCross BlueShield of Tennessee HR/Talent Acquisition will not be considered. No fee will be paid in the event the applicant is hired by BlueCross BlueShield of Tennessee as a result of the referral or through other means.    All applicants will be advised that BlueCross, as a federal contractor, may be required to implement a COVID-19 vaccine mandate.", "Recruiter_First_Name": "Shirudkar", "Recruiter_Last_Name": "Dipti", "Recruiter_Email_Address": "Dipti_Shirudkar@bcbst.com", "Company_name": "BlueCross BlueShield of Tennessee", "SetName": "EMMANUEL OJENIYI_11/28/2023_BlueCross BlueShield of Tennessee_EIT Team Lead", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 4", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 4", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 4"}, {"InterviewDate": "11/28/2023", "NoofDays": -2, "LogInterviewID": 281, "QID": 2734, "Job_Title": "BI Developer", "Job_Description": "\"Position: BI Developer Hours: 8-5pm EST Location: Remote - EST time zone   Local healthcare client in Atlanta, GA is looking to bring on a resource to the BI team to assist with day-to-day analysis and project/data development. They are seeking a high performer with the ability to hit the ground running and maintain a \"\"we vs me\"\" mentality with other team members.   Requirement:  Minimum 5 years of experience in the following: Strong SQL experience Strong Power BI experience Enterprise Database Reporting Analytical Thinker Business facing skillsets Report optimization Metric Insights experience is a plus Must be a team player - we vs me mentality   Responsibilities:   Ensures all projects and data developed is value-adding and provides actionable insights.  Building new data tables", "Recruiter_First_Name": " and making adjustments to existing tables. Ability to find a way to be able to look at data to see how it will change reporting. Ability to understand a business problem and work through various legacy systems.  Ability to communicate clearly and efficiently with internal business members\"", "Recruiter_Last_Name": "Henry", "Recruiter_Email_Address": "Russell", "Company_name": "hrussell@medasource.com", "SetName": "Medasource", "CandidateID": "OLUKAYODE AKINRIMISI_11/28/2023_Medasource_BI Developer", "SurveyResponse": "31661", "InterviewType": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "Preparationscore": " engaging interviewer", "AutoInterviewsCount": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsDuration": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "MentorInterviewsCount": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "Mentor": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Applicant": "     \"\"HandlingChallengingQuestions\"\": 5", "Recruiter_InterviewCount": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Technical_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "InterviewScore": "     \"\"InterviewerEngagement\"\": 5"}, {"InterviewDate": "11/24/2023", "NoofDays": -6, "LogInterviewID": 215, "QID": 2688, "Job_Title": "Data Warehouse Specialist", "Job_Description": "https://www.indeed.com/viewjob?jk=bbe2a3fe0476f181&tk=1h5a6oa4dh5hp801&from=serp&vjs=3  The Role  We are looking for an experienced and energetic leader to join the team as a Data Warehouse Specialist. As a Data Warehouse Specialist, you will play a critical role in developing data warehouses for our clients. You will be responsible for conducting assessments, developing strategies, and providing expert guidance to enhance their data governance.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  Collaborate with clients to understand their business requirements and design effective data warehouse solutions. Develop and implement data warehouse architecture, data models, schemas, and structures. Design and implement efficient Extract, Transform, and Load (ETL) processes to populate and update data warehouses. Ensure data quality and integrity by establishing appropriate data validation and cleansing procedures. Optimize data warehouse performance through indexing, partitioning, and other performance tuning techniques. Implement effective backup, recovery, and security measures for data warehouses. Evaluate existing data frameworks and identify opportunities for improvement. Conduct in-depth data analysis to identify data quality issues, inconsistencies, and gaps. Recommend and implement enhancements to data frameworks to meet client requirements. Collaborate with cross-functional teams to define data governance policies, standards, and best practices. Conduct regular audits to ensure compliance with data governance guidelines. Participate in project planning and scoping activities, providing technical expertise on data warehouse solutions. Demonstrate expertise in data modeling, dimensional modeling, and data warehouse design principles. Proficiently use SQL, ETL tools, and programming languages to extract, transform, and load data. Utilize data visualization tools to create meaningful reports and dashboards for clients. Stay up to date with the latest trends, tools, and technologies in data warehousing and business intelligence. Qualifications  Bachelor's degree in Computer Science, Information Systems, or a related field. Relevant certifications (e.g., AWS) are highly desirable. Proven experience working on data warehouse projects, including data modeling, ETL development, and performance optimization. Strong understanding of database concepts and proficiency in SQL. Experience with data warehousing tools and technologies (e.g., Snowflake, Amazon Redshift, Microsoft Azure SQL Data Warehouse) Proficiency in at least one ETL tool (e.g., Informatica, Talend, SSIS). Familiarity with data governance principles and best practices. Excellent problem-solving and analytical skills. Strong communication and interpersonal skills to effectively collaborate with clients and team members. Ability to manage multiple projects and prioritize tasks effectively. Professionalism and client-oriented mindset, with the ability to establish trust and maintain confidentiality. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "Recruiter_First_Name": "Laurine", "Recruiter_Last_Name": "Lachica", "Recruiter_Email_Address": "laurine.lachica@modaliconsulting.com", "Company_name": "Modali Consulting", "SetName": "Feven Asmelash_11/24/2023_Modali Consulting_Data Warehouse Specialist", "CandidateID": "39112", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Ayodele Adepoju", "Applicant": "Feven Asmelash", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "11/21/2023", "NoofDays": -9, "LogInterviewID": 227, "QID": 2698, "Job_Title": "SQL Developer", "Job_Description": "https://www.indeed.com/viewjob?jk=dd7d5cb7585219aa&tk=1hepmokcejm4n800&from=serp&vjs=3&applied=1&from=smart-apply", "Recruiter_First_Name": "Steven", "Recruiter_Last_Name": "Penn", "Recruiter_Email_Address": "Steven.Penn@ideaentity.com", "Company_name": "Idea Entity", "SetName": "OLUKAYODE AKINRIMISI_11/21/2023_Idea Entity_SQL Developer", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/21/2023", "NoofDays": -9, "LogInterviewID": 254, "QID": 2722, "Job_Title": "Business Intelligence Developer", "Job_Description": "Competencies  Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience  3+ years\u2019 experience with Integration Services (SSIS)  5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions  Technical documentation skills Self-motivated and directed, with keen attention to detail  Experience with data management Good written and oral communications   Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data  Create ETL processes to load database structures  Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Recruiter_First_Name": "Tony", "Recruiter_Last_Name": "Guzman", "Recruiter_Email_Address": "tguzman@uslegalsupport.com", "Company_name": "U.S. Legal Support", "SetName": "OLUKAYODE AKINRIMISI_11/21/2023_U.S. Legal Support_Business Intelligence Developer", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/20/2023", "NoofDays": -10, "LogInterviewID": 248, "QID": 2717, "Job_Title": "Business Intelligence Lead Developer", "Job_Description": "Key Responsibilities:  Develop and optimize SQL queries for data extraction and analysis. Collaborate with business stakeholders to gather and understand reporting requirements. Create visually compelling and insightful reports using Looker. Field daily report requests from multiple Backoffice teams to meet the needs of customers. Conducting and troubleshooting reports and data models. Comprehend and work with Key Performance Indicators (KPIs) and metrics.  Qualifications:  A minimum of 10 years of experience in report writing or as a business analyst. Proficiency in SQL query development (queries, stored procedures, functions) and data analysis. Familiarity with SQL Server databases and data warehousing. Proven experience with one or more of the following reporting tools: Looker, Business Objects, Power BI, or Tableau. Strong understanding of KPIs and metrics. Exhibit adaptability and a quick learning curve to efficiently contribute to projects.  Knowledge of Snowflake Datawarehouse query development is a plus.", "Recruiter_First_Name": "Jessica", "Recruiter_Last_Name": "Toub", "Recruiter_Email_Address": "jtoub@nutrisystem.com", "Company_name": "Nutrisystem Inc", "SetName": "Shahad Jawad_11/20/2023_Nutrisystem Inc_Business Intelligence Lead Developer", "CandidateID": "38744", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "908", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "AMINAT OKERINDE", "Applicant": "Shahad Jawad", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "11/20/2023", "NoofDays": -10, "LogInterviewID": 224, "QID": 2695, "Job_Title": "Business Development Specialist", "Job_Description": "Earn $100K+ annually \u2026 as a Sideline\u2014no need to quit your day job. Part-time or full-time.    Pay for Performance, 1099 compensation.    The Ideal Candidate:    Self-motivator who routinely sets and exceeds their own goals. If you're goal-oriented and self-motivated, you'll thrive here. Proven track record of relationship-building and influencing. Exceptional relationship-building skills.    Position Overview:    Pay for Performance, 1099 compensation \u2013 residual monthly income paid for the client's life (average 10+ years!). This position requires no quotas and no caps on earnings. Work alongside your current position or business. Sideline, Part-time or Full-time. Training and ongoing support provided.   General Responsibilities:    Identify opportunities in our cost-saving services with prospects and new clients, building them into long-term relationships. Serve as a liaison between prospective clients and Business Development Director/SME.   Requirements:     Current or former Business Professional, Executive, B2B Sales Rep, Finance Executive, CFO, COO, or Controller. Ability to lead conversations with prospects and clients. Must have 10+ years of business experience working with decision-makers. Strong communication and interpersonal skills. Positive and results-driven. Ability to work well independently and with others.   About Us:    Aspire Partners offers B2B solutions with front-end timing and at no cost or investment to prospective companies. It's a win-win for clients. Current inflationary conditions make our services more relevant and in demand for all sectors. Companies desperately need our help. Our solutions can help companies thrive during these uncertain times by solving efficiency issues and adding to their bottom line.   Every business needs to reach peak profitability and efficiency. Handling account payables, reducing expenses, and attracting and retaining good employees is vital to the success of every business. We create operational efficiencies and actual cost savings for companies of all sizes and industries without switching vendors or current, established relationships with company vendors or service providers.", "Recruiter_First_Name": "David", "Recruiter_Last_Name": "MacKillop", "Recruiter_Email_Address": "dmacKillop@aspirepartnersusa.com", "Company_name": "Aspire Partners", "SetName": "Stephanie Anne Lim_11/21/2023_Aspire Partners_Business Development Specialist", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 4", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 2", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 1", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 3", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/20/2023", "NoofDays": -10, "LogInterviewID": 263, "QID": 2725, "Job_Title": "Business Intelligence Developer", "Job_Description": "Job Description Summary:  The Business Intelligence Developer is responsible for developing, implementing and supporting reporting and business intelligence solutions to meet the information needs of the organization. The Business Intelligence Developer supports one or more business units in preparing analysis and reporting to drive the business while ensuring accuracy and consistency. Must be able to work with multiple teams and business units simultaneously and thrive in fast-paced, dynamic environment. Must demonstrate the eagerness and ability to learn and must work well in a team environment.   Competencies   Technical Capacity. Problem Solving/Analysis. Communication Proficiency. Time Management.  Requirements:  3+ years\u2019 experience with SSRS Report development related experience 3+ years\u2019 experience with Integration Services (SSIS) 5+ years of Microsoft SQL Server experience with strong understanding of database structures and practices Demonstrated understanding of complex SQL, stored procedures, and database functions Technical documentation skills Self-motivated and directed, with keen attention to detail Experience with data management Good written and oral communications  Job Duties:  Build and deploy BI solutions (e.g. reporting tools) Translate business needs to technical specifications Create tools and database structures to store data Create ETL processes to load database structures Collaborate with business to understand operational processes and provide solutions for efficiency and/or automation", "Recruiter_First_Name": "Tony", "Recruiter_Last_Name": "Guzman", "Recruiter_Email_Address": "tguzman@uslegalsupport.com", "Company_name": "USLegalSupport", "SetName": "OLUKAYODE AKINRIMISI_11/20/2023_USLegalSupport_Business Intelligence Developer", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "11/18/2023", "NoofDays": -12, "LogInterviewID": 229, "QID": 2700, "Job_Title": "siness intelligence developer", "Job_Description": "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI RAYUS is committed to delivering clinical excellence in communities across the U.S., driven by our passion for and superior service to referring providers and patients. RAYUS Radiology is built on our brilliant medicine, brilliant team, brilliant technology and services - all to provide the highest level of patient\u00a0care\u00a0possible.", "Recruiter_First_Name": "prashant", "Recruiter_Last_Name": "Tolia", "Recruiter_Email_Address": "prashant.tolia@RAYUSradiology.com", "Company_name": "siness intelligence developer", "SetName": "Shahad Jawad_11/18/2023_siness intelligence developer_siness intelligence developer", "CandidateID": "38744", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "823", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "1157", "Mentor": "AMINAT OKERINDE", "Applicant": "Shahad Jawad", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "11/18/2023", "NoofDays": -12, "LogInterviewID": 230, "QID": 2701, "Job_Title": "business intelligence developer", "Job_Description": "JOB SUMMARY: Focuses on the development and delivery of Business Intelligence and Data Warehouse solutions including: ETL, dashboards, reports, and associated data structures using Microsoft Business Intelligence technologies, applications and tools.  ESSENTIAL DUTIES AND RESPONSIBILITIES:  (45%) Business Intelligence Solutions Develops data warehouse and reporting solutions utilizing Microsoft Business Intelligence based Tools, Services and Support (SSIS, SSAS, SSRS) Analyze BI requirements and design/develop, reporting solutions to support standard reporting, Dashboard and self-service environment Serves as the subject matter expert on data warehouse architecture, data warehouse, and data mart models Provides on-going support for operational, corporate and data warehouse staff in relation to existing reports with respect to their definitions and differences Participates in quality assurance testing and monitors issue ticketing system (50%) Data Warehouse Analyzes, designs, ETL solution based on the data mapping and provides data specifications for integrating new and/or updating data within the data warehouse Designs and or develops database objects (databases, tables, stored procedures, views etc.) to support ETL and data integrations. Ability to write complex SQL queries. Attains knowledge of data warehouse architecture and practices Agile development methods and techniques Attains knowledge of the data warehouse, data mart models and the business information maintained in each Continually reviews/analyzes data loaded into the data warehouse for accuracy and provides solutions for enhancing data accuracy and data processing performance  (5%) Completes other tasks and projects as assigned Requirements: Required:  Bachelor degree in related field Technical training and educational coursework in data warehouse and report development, design and administration Three (3) or more years of SQL development and report writing experience, ETL development with SSIS experience, data warehouse design and data integration Experience working with Microsoft Reporting Services or other reporting tools Experience with Microsoft Analysis Services and Dashboards development Experience with Agile methodology software development Preferred:  Healthcare experience is highly desirable Experience using Team Foundation Server (TFS) as source control, work flow, and task assignment Experience working with Power BI", "Recruiter_First_Name": "parshant", "Recruiter_Last_Name": "tolia", "Recruiter_Email_Address": "parshant.tolia@RADYUSradiology.com", "Company_name": "Rayus radiology", "SetName": "Shahad Jawad_11/18/2023_Rayus radiology_business intelligence developer", "CandidateID": "38744", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "11", "Mentor": "AMINAT OKERINDE", "Applicant": "Shahad Jawad", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "11/17/2023", "NoofDays": -13, "LogInterviewID": 246, "QID": 2715, "Job_Title": "Systems Analyst", "Job_Description": "Bachelor\u2019s Degree in Computer Science, Engineering, Management Information Systems, or a related field Five years of related experience in application administration and support, including experience utilizing SQL and related SQL management tools (SSMS, SSAS, SSIS and SSRS) Skills Required Knowledge of computer system capabilities, business processes and workflow Experience with enterprise applications and understanding of database driven applications Experience with SQL scripting Strong understanding of the software development life cycle Excellent communication skills, both written and verbal, including the ability to bridge functional and technical resources by communicating effectively with individuals of varying systems expertise and business needs Proven problem solving and analytical thinking and ability to approach problems logically and systematically Ability to maintain good customer relations with clients and external vendors and partners Essential Functions  Builds ad hoc queries, reports and business processes using standard Blackbaud CRM features/functionality      Builds custom business process and data integrations using SQL Supports system users with issues, new requests and system upgrades Collaborates with team members and individuals across the Development and Alumni Relations division to develop best practices, re-usable objects and effective documentation Analyzes and documents user needs, existing and new policies, processes, procedures and operational methods to consider possible improvements to new and existing systems Utilizes elicitation techniques to understand business processes and translate into system requirements and/or development of systems solutions Defines and documents business requirements, technical specifications and test cases for system developments May include the writing of all or a portion of functional and technical specifications Coordinates with business and technology teams, ascertaining system requirements, such as program functions, output requirements, input data acquisition, and system techniques and controls Problem solves in areas such as system design, input/output requirements and procedural flow between departments and/or business systems Performs configuration of enterprise application software Performs testing of new systems, upgrades and patching of existing systems Plans, conducts and documents results of testing Performs all other duties as assigned Additional Functions  Has frequent contact with division staff and other university offices Open office environment Many hours spent in front of a computer Evening/weekend and on call work as required to meet project deadlines and/or maintain system availability Preferences  Six or more years of related experience in application software support Programming experience utilizing SQL and related SQL tools, and report development tools using SSRS, PowerBI and/or Tableau Experience developing business intelligence solutions Experience building SSIS (SQL Server Integration Services) packages Experience with project management methodologies Experience with REST APIs Experience with alumni/development database systems, preferably Blackbaud CRM Experience in non-profit or higher education setting Thorough understanding and working knowledge of alumni relations and/or fundraising Skills Excellent organizational skills Strong attention to detail High levels of overall organization, accuracy and time management Goal oriented with the ability to prioritize a heavy workload Willingness to take charge of assignments and follow through with minimal supervision Ability to work with high level of confidentiality Proficiency in Microsoft Office Suite", "Recruiter_First_Name": "Toni", "Recruiter_Last_Name": "Parker", "Recruiter_Email_Address": "Toni.Parker@rice.edu", "Company_name": "Rice University", "SetName": "OLUKAYODE AKINRIMISI_11/17/2023_Rice University_Systems Analyst", "CandidateID": "31661", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/15/2023", "NoofDays": -15, "LogInterviewID": 247, "QID": 2716, "Job_Title": "Data Engineer", "Job_Description": "DATA ENGINEER  In every office around the world, HH Global offers an entrepreneurial culture that sets ambitious goals and looks beyond the status quo.  At HH Global , we reward sharp, unconventional thinkers who are motivated to create their own success. Our winning culture draws from employees who step up to the challenge of solving tough problems and making a difference. We dream big, so our clients can dream bigger.  Responsibilities   Document new reporting features or bugs from both internal and external users   Coordinate testing of reports with users   Manage an accurate and visible task and project list and meet regularly for input on prioritization.   Analyzes data, identifies trends and outliers, and recommends solutions when appropriate.   Coordinate with team members overseas   Create and maintain system protocols by writing and updating procedures; this includes documentation and writing SQL stored procedures.   Generate standard or custom reports summarizing business, financial, or economic data for review by executives, managers, clients, and other stakeholders. This will involve using T-SQL, SSIS, SSRS, and other report writing tools.   Willingness to learn new reporting technologies such as Microsoft Power BI, Tableau, or Qlikview   Participate in physical and virtual meetings as required to facilitate functional requirement gathering and report development.   Maintain or update business intelligence tools, databases, dashboards, systems, or methods   Assist with project management activities by identifying project milestones, phases, and elements; tracking activities, resolving problems, and publishing progress reports.   Manage timely flow of business intelligence information to users.   Requirements   Must be legally authorized to work in the United States without needing current or future employer sponsorship.   Bachelor\u2019s degree in a business or technology related discipline   2 + Years work experience   Working knowledge of SQL   Microsoft Business Intelligence Suite (SSRS, SSIS, SSAS)   Experience with Azure cloud environment: Azure SQL Database, Azure Data Factory   Strong Microsoft Excel skills related to data analysis and manipulation   Proven ability to document and prioritize issues raised by others   Ability to prioritize tasks and directly support the department managers.   Good troubleshooting and error isolation skills.   Ability to work independently on assigned tasks as well as to accept direction on given assignments.   Must be able to interact and communicate with individuals at all levels of the organization.   Your resume will be reviewed by a member of our Recruiting team and we\u2019ll reach out to you directly if there\u2019s a fit. We\u2019re using video conferencing software (Microsoft Teams) to conduct our interviews, but all interviews will be live with a member of our Recruiting or Hiring teams.  Equal Employment Opportunity Employer: HH Global is an equal opportunity employer and all qualified applicants will receive consideration for employment without regard to race, color, religion, sex, national origin, disability status, protected veteran status, sexual orientation, gender, gender identity and gender expression, or any other characteristic protected by law.", "Recruiter_First_Name": "Amanda", "Recruiter_Last_Name": "Filian", "Recruiter_Email_Address": "jdefaehsz@jobvite.com", "Company_name": "HH Global", "SetName": "Mary Gathogo_11/15/2023_HH Global_Data Engineer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "16", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "11/15/2023", "NoofDays": -15, "LogInterviewID": 231, "QID": 2702, "Job_Title": "Sr Engineer, Data Management and Analytics role!", "Job_Description": "Professional who expertly designs, creates, and implements Self-Service BI data models. Plan, implement and oversee comprehensive BI delivery strategy. Design, build and deploy EPIC reporting solutions (Clarity, Caboodle, RWB, Radar, Metrics) Innovator, adept at conceptualizing and developing marketable tools that cater to the needs and demands of multiple clients. Build relationships with the business users, understand how data can solve business problems, and formulate business requirements for the BI tools. Work with data warehouse System Analyst and Engineering team to implement data schema to accommodate new analytics requirements. Manage meta data for BI models, reports, and dashboards (author, usage, data source) Create technical and functional documentation and provide training for BI tools.", "Recruiter_First_Name": "Heather", "Recruiter_Last_Name": "McGinnis", "Recruiter_Email_Address": "heather.mcginnis@pacden.com", "Company_name": "Pacific Dental Services", "SetName": "Talq Tera_11/15/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics role!", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "60", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "94", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "9", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "11/14/2023", "NoofDays": -16, "LogInterviewID": 232, "QID": 2703, "Job_Title": "Sr Engineer, Data Management and Analytics", "Job_Description": "https://www.indeed.com/viewjob?jk=57bafe6006d3d2ad&tk=1hdr8h4cejr51801&from=serp&vjs=3", "Recruiter_First_Name": "Heather", "Recruiter_Last_Name": "McGinnis", "Recruiter_Email_Address": "heather.mcginnis@pacden.com", "Company_name": "Pacific Dental Services", "SetName": "Talq Tera_11/14/2023_Pacific Dental Services_Sr Engineer, Data Management and Analytics", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "8", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "11/13/2023", "NoofDays": -17, "LogInterviewID": 202, "QID": 2676, "Job_Title": "Associate Consultant, Data Analyst", "Job_Description": "The Role  We're seeking a seasoned and dynamic professional to join us as an Associate Consultant, Data Analytics. In this role, you'll be instrumental in delivering projects to our clients. You'll be responsible for analyzing, strategizing, implementing measures, and offering expert guidance to enhance our clients' operational resilience.  Modali Consulting believes in giving each person a chance to succeed and so you will be given the opportunity and autonomy to deliver quality, timely projects to our diverse client base.  Who you are. You rank high in conscientiousness and are generally considered to be both timely and structured. But you have the capability to match this with creative problem solving and are unafraid of learning something new. Most importantly, you seek to do good and right by people. You may be skilled at presenting complex information in an accessible way, and then churning feedback to your work into actionable outcomes.  TO APPLY: Please submit your resume and cover letter (optional) to careers@modaliconsulting.com.  Responsibilities  \u2022  Conduct in-depth data analysis to identify trends, patterns, and insights that can inform client strategies and recommendations.  \u2022  Collaborate closely with clients to understand their business objectives and tailor data-driven solutions that address their specific needs.  \u2022  Create visually compelling and easy-to-understand data visualizations, dashboards, and reports to effectively communicate findings to both technical and non-technical stakeholders.  \u2022  Apply statistical techniques and predictive modeling to uncover correlations and forecast potential outcomes, enhancing the accuracy of strategic planning.  \u2022  Ensure the quality, accuracy, and reliability of data by conducting data cleaning, validation, and preprocessing procedures.  \u2022  Present analytical findings and recommendations to clients in a clear and concise manner, demonstrating the value of data-driven decision-making.  \u2022  Leverage cutting-edge analytics tools and technologies to optimize data analysis processes and streamline workflows.  \u2022  Collaborate with cross-functional teams to tackle complex business problems, utilizing your data expertise to drive innovative solutions.  \u2022  Stay up-to-date with the latest trends and advancements in data analytics, bringing new ideas and best practices to the team.  \u2022  Assist in project planning, timeline management, and resource allocation to ensure the successful execution of data analytics initiatives.  Qualifications  Bachelor's or Master's degree in a related field (e.g., Data Science, Statistics, Business Analytics). Proficiency in data analysis tools such as Python, R, or SQL. Experience with data visualization tools like Tableau, Power BI, or similar. Strong analytical thinking and problem-solving skills. Excellent communication and presentation abilities. Ability to work collaboratively in a team-oriented environment. Prior consulting or client-facing experience is a plus. About  Modali Consulting prides itself on its staff and culture above all else because we are convinced that investing in people yields the best results. Its core principles are: (1) transparency and intellectual humility; (2) responsibility to each other; (3) commitment to challenging conventions; (4) failing forward and repeating success; and (5) fostering a cohesive and collaborative work environment for clients and employees alike. To learn more, go to www.modaliconsulting.com.  Diversity, Equity, and Inclusion. Modali Consulting is an inclusive equal opportunity employers committed to recruiting and retaining a diverse workforce and providing a work environment that is free from discrimination and harassment based upon any legally protected status or protected characteristic, including but not limited to an individual's sex, race, color, ethnicity, national origin, age, religion, disability, sexual orientation, veteran status, or gender identity.", "Recruiter_First_Name": "Laurine", "Recruiter_Last_Name": "Lachica", "Recruiter_Email_Address": "laurine.lachica@modaliconsulting.com", "Company_name": "Modali Consulting", "SetName": "EMMANUEL OJENIYI_11/13/2023_Modali Consulting_Associate Consultant, Data Analyst", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/13/2023", "NoofDays": -17, "LogInterviewID": 238, "QID": 2709, "Job_Title": "Technical Data Analyst (Remote)", "Job_Description": "https://ds-llc.com/technicaldataanalyst", "Recruiter_First_Name": "Abby", "Recruiter_Last_Name": "Tumang", "Recruiter_Email_Address": "atumang@ds-llc.com", "Company_name": "Digital Strategy LLC", "SetName": "EMMANUEL OJENIYI_11/13/2023_Digital Strategy LLC_Technical Data Analyst (Remote)", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "20", "Technical_InterviewCount": "6", "InterviewScore": "NULL"}, {"InterviewDate": "11/12/2023", "NoofDays": -18, "LogInterviewID": 228, "QID": 2699, "Job_Title": "SQL Developer", "Job_Description": "Designing and maintaining SQL Server Database architecture as well as ensuring their optimal performance, availability, and security. Optimizing SQL Server Database performance, including query tuning, indexing, and statics maintenance. Creating complex parameterized (declare) T-SQL script, as well as using T-SQ: scripts and queries for business intelligence reporting. Writing optimized complex SQL queries for integration with other applications. Performing multipart sub-queries and joining the table indexing and maintenance (clustered and non-clustered). Creating user defined functions, views, and stored procedures. Working with intricate recursive queries, i.e., Common table expressions (CTE), table variables. Developing, configuring, and deploying SSIS packages. Implementing and enforcing database security measures, including access controls, encryption, auditing, updating, merging, deleting, and inserting the databases. Creating and using stored procedures and creating over clauses with or without partitioning. Effective partnership with development teams to design data management and governance protocols, manage the information lifecycle, design infrastructure, and data integration controls.", "Recruiter_First_Name": "Steven", "Recruiter_Last_Name": "Penn", "Recruiter_Email_Address": "Steven.Penn@ideaentity.com", "Company_name": "IDEA ENTITY", "SetName": "OLUKAYODE AKINRIMISI_11/12/2023_IDEA ENTITY_SQL Developer", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "1331", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "11/11/2023", "NoofDays": -19, "LogInterviewID": 221, "QID": 2693, "Job_Title": "Business Data Analyst", "Job_Description": "Job Summary:  Join HonestMed, a fast-growing ecommerce company in the medical supply space, as a Data Analyst. Utilize your analytical prowess to enhance our online retail business's performance. Your primary responsibilities will include monitoring key performance indicators, such as website traffic, conversion rates, and sales, identifying growth opportunities, optimizing website designs, implementing marketing campaigns, and maintaining comprehensive business intelligence reporting to drive HonestMed's success.  Essential Functions and Key Responsibilities:  Identify, ingest, and clean critical data sources for modeling and reporting. Design and manage dashboards and reports for marketing and business teams. Provide actionable metrics, insights, and recommendations on consumer analytics and marketing campaigns. Lead projects leveraging data analytics to address complex business issues. Narrate the customer and service story through BI tools and timely reporting. Become the company's data expert, deeply understanding the data landscape across customer journeys. Promote data-literacy and accelerate data knowledge among colleagues and customers. Foster a team-oriented and inclusive work environment. Collaborate effectively with all organizational levels and stakeholders. Be on-site in Oceanside, CA Perform additional duties as required. Knowledge Skills and Abilities:  Minimum of 3 years in data analytics, focused on consumer, retail, and marketing data. Expertise in creating dynamic, data-driven dashboards, preferably in Tableau. Proficiency in consumer analytics, marketing analytics, and forecasting. Demonstrated ability to apply data and analytics to problem-solving. Experience in effectively presenting complex results to all organization levels. Outstanding leadership, communication, interpersonal, and presentation skills. Ability to foster positive working relationships within and outside the company. Required Education and Experience:  Bachelor's degree or relevant combination of education and experience. Strong proficiency in SQL, Python, and Excel. Experience in building data pipelines is a plus. Minimum 5 years of e-Commerce experience preferred. Strong data visualization skills with dashboard building expertise in Tableau or Power BI.", "Recruiter_First_Name": "Kevin", "Recruiter_Last_Name": "Thomas", "Recruiter_Email_Address": "Kevin.Thomas@honestmed.com", "Company_name": "Honest-Medical", "SetName": "Calvine  Cheptoo _11/11/2023_Honest-Medical_Business Data Analyst", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 4", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 4", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 5"}, {"InterviewDate": "11/10/2023", "NoofDays": -20, "LogInterviewID": 220, "QID": 2692, "Job_Title": "Data Engineer/ETL Developer", "Job_Description": "Must-haves   - 5+ years of experience developing ETL database in a SQL Server Environment  - Strong knowledge of Data Warehousing methodology and ETL best practices  - Experience with SSIS and SSAS  - .Net experience (doing translations and storing them for later use)  - Database experience - knowing what is dirty data, how to move data, clustered and non-clustered indexing  - .Net experience (doing translations and storing them for later use). - Strong communication (verbal & written) - being able to communicate issues in a timely manner - API experience   Plusses   - DBA background  - OLAP cube development  - HTML experience - Power BI experience   Day-to-Day  Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.  This role is hybrid (up to 2-3 days onsite on some weeks) and a typical work week is Monday-Friday, 8am-5pm.", "Recruiter_First_Name": "Nathan", "Recruiter_Last_Name": "Seiler", "Recruiter_Email_Address": "Nathan.Seiler@insightglobal.com", "Company_name": "Insight Global", "SetName": "Rio Rochelle Florague_11/10/2023_Insight Global_Data Engineer/ETL Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "18", "Technical_InterviewCount": "6", "InterviewScore": "NULL"}, {"InterviewDate": "11/9/2023", "NoofDays": -21, "LogInterviewID": 223, "QID": 2694, "Job_Title": "Tableau Data Analyst", "Job_Description": "SaaS solution provider located in the Cayman Islands is searching for a (Senior) Tableau Data Analyst to work remotely from anywhere in the United States.  Candidate will join their team and be responsible for designing, developing and maintaining the Tableau dashboards and reports.     About:  This company has extensive experience in operating world-class data centers hosting SaaS solutions.  They are a 20-year-old company with a solid client base focused on building long term client relationships and world class solutions.  They have a business model for long term loyalty with their staff and clients.     Candidate will work remotely from a home office and on occasion be required to work outside of regular business hours and share on-call duties with other members on the Application Support team.  Candidate will be given the opportunity to travel and work in a Caribbean lifestyle for one week each year when they visit the company\u2019s headquarters and data centers in the Cayman Islands.  Over time is expected in this position.     Note:  Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers. Job Requirements Education:  College Degree in Computer Science, Information Systems or related field.    Technical Skills & Abilities:  Three (3)+ years proven experience as a Tableau Developer or similar role - required Proficient in Tableau Desktop and Tableau Server Strong understanding of data visualization principles and best practices Experience with data modeling, data integration, and ETL processes Strong knowledge of SQL for data manipulation and querying; extensive experience writing functions and scripts    Responsibilities:  Develop and maintain Tableau dashboards and reports to support business analytics needs Collaborate with stakeholders to gather requirements and understand business objectives Design and implement data visualizations using Tableau best practices Create complex calculations, parameters, and filters to support data analysis Optimize Tableau performance and troubleshoot issues as needed Conduct data analysis and provide insights to drive business decision-making Stay up-to-date with Tableau features and functionalities to ensure effective utilization Soft Skills:  Excellent problem-solving skills and attention to detail Strong communication and collaboration abilities Fluent in the English language Additional Information Candidate must have the proof of right to work in the United States. Unable to sponsor or transfer H1B Visas now or in the future. Unable to work with Candidates on a C2C basis with third-party Employers.", "Recruiter_First_Name": "Marie", "Recruiter_Last_Name": "Mikelson", "Recruiter_Email_Address": "marie.mikelson@profoundjobs.com", "Company_name": "1 of 36 ProFound Staffing", "SetName": "Robelyn Florague_11/09/2023_1 of 36 ProFound Staffing_Tableau Data Analyst", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "18", "Technical_InterviewCount": "5", "InterviewScore": "NULL"}, {"InterviewDate": "11/8/2023", "NoofDays": -22, "LogInterviewID": 216, "QID": 2689, "Job_Title": "BI Data Engineer", "Job_Description": "Publishing.com has helped thousands of normal everyday people to become successful self-published authors. And along the way, we also became one the most successful companies in the US (  Want to be at the forefront of the AI revolution? Join us! We are building the most comprehensive AI-powered self-publishing platform and you get to join us at ground zero. Instead of just teaching people how to create successful books, we are going to help them do it.  About you:  You are a data engineer with strong analytical skills and hands-on experience with modern data warehousing and business intelligence solutions. You know how to use code and no-code to ingest data from various sources, how to interpret data and translate it into business insight, and how to prepare reports and dashboards that are easy to understand and digest.  And you have a great attitude!  About this role:  As our first data engineer, you will have the opportunity to make important contributions to various aspects of our data platform. Your main responsibilities are:  Build a highly scalable data warehouse Propose, design, and implement data ingestion pipelines (ELT/ETL) Maintain our local and cloud data platforms Understand and interpret business intelligence requirements and translate them into technical solutions Build business analytics and dashboards to address sales and marketing needs  Required skills:  Strong problem solving skills Strong communication skills Strong SQL skills Expert in using data warehousing solutions such as BigQuery, Snowflake, or Databricks Experience with data ingestion services such as Fivetran, Matilion, Segment, or similar Experience with Google Sheets Experience with business analytics for marketing and sales Strong programming skills in JavaScript and Python Experience with HubSpot Experience with Git Experience with agile development Experience working with marketing and sales teams Strong sense of ownership  Preferred Skills:  Experience with Google Clouds Experience building CI/CD pipelines Experience with AWS, Azure, or GCP Experience with Terraform or other IaC solutions Experience with DevOps and SRE best practices", "Recruiter_First_Name": "Olivia", "Recruiter_Last_Name": "Dandapa", "Recruiter_Email_Address": "olivia.d@publishing.com", "Company_name": "Publishing.com", "SetName": "AYODEJI OLAWOYE_11/08/2023_Publishing.com_BI Data Engineer", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1703", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "11/8/2023", "NoofDays": -22, "LogInterviewID": 217, "QID": 2690, "Job_Title": "Data Analyst", "Job_Description": "Description  Robert Half is currently working with a client seeking a Data Analyst. The Data Analyst will be responsible for the preparation of financial reports that serve as summary information for managers. The Data Analyst will be analyzing a variety of data types and reporting on that information. This Data Analyst position is for someone who is deadline driven and highly analytical.  What you get to do every single day   Call out relevant insights from compiled analytical reports  Organize, manipulate, and extract data in response to management requests  Create and share key decision-making data for market assessments, forecasting and further investigation  Complete data mining projects- Analyze corporate reports in order to create financial reports  Requirements   Complete competence in data management and manipulation  Ability to work independently with minimal oversight  BS/BA in Accounting, finance, or economics  Skilled in spreadsheet and reporting applications, including V-lookups, pivot tables, and queries  Strong communication skills and able to receive criticism well  Critical thinking and problem-solving skills are a must, as well as great attention to detail  Understanding of a variety of data models  5+ years of experience in financial planning and analysis, data analysis or similar role  Robert Half is the world\u2019s first and largest specialized talent solutions firm that connects highly qualified job seekers to opportunities at great companies. We offer contract, temporary and permanent placement solutions for finance and accounting, technology, marketing and creative, legal, and administrative and customer support roles.  Robert Half works to put you in the best position to succeed. We provide access to top jobs, competitive compensation and benefits, and free online training. Stay on top of every opportunity - whenever you choose - even on the go.  All applicants applying for U.S. job openings must be legally authorized to work in the United States. Benefits are available to contract/temporary professionals, including medical, vision, dental, and life and disability insurance. Hired contract/temporary professionals are also eligible to enroll in our company 401(k) plan. Visit", "Recruiter_First_Name": "Lauren", "Recruiter_Last_Name": "Etherton", "Recruiter_Email_Address": "Lauren.Etherton@roberthalf.com", "Company_name": "Robert Half", "SetName": "Yama Touray_11/08/2023_Robert Half_Data Analyst", "CandidateID": "37640", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 5", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 5", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 4"}, {"InterviewDate": "11/7/2023", "NoofDays": -23, "LogInterviewID": 214, "QID": 2687, "Job_Title": "Senior Data Base Developer/Data Modeler", "Job_Description": "A remote position position opened for candidates in the USA; What you will do  Design and develop database solutions using SQL Server; Create and maintain data models, database schema, and data dictionaries; Implement Service Broker queue concepts; Provide solutions to other groups and work collaboratively with cross-functional teams; Discuss pros and cons of potential solutions and make recommendations based on business needs; Perform troubleshooting and debugging of database issues; Maintain database performance by identifying and resolving production and application development Must haves  7+ years of experience in data modeling, database development, and database design; Strong experience with SQL server; Work with Control-m jobs scheduling and Jenkins; Knowledge of Service Broker queue concepts and their implementation; Ability to create database schemas, data models, and data dictionaries; Ability to work well in a team-oriented, collaborative environment; Excellent communication and interpersonal skills.", "Recruiter_First_Name": "Shreya", "Recruiter_Last_Name": "Nandi", "Recruiter_Email_Address": "shreya.nandi@agileengine.com", "Company_name": "Agile Engine", "SetName": "Mary Gathogo_11/08/2023_Agile Engine_Senior Data Base Developer/Data Modeler", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "8", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "15", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "11/3/2023", "NoofDays": -27, "LogInterviewID": 213, "QID": 2686, "Job_Title": "Sr Business/Data Analyst", "Job_Description": "Comprehend Greenhouse Gas regulatory requirements and translate them into business requirements and data objectives  Transform available data into actionable business intelligence to inform and recommend tactical and strategic Greenhouse Gas approaches  Use and manage existing date forecasting tools to generate GHG forecasts and actionable recommendations  Extend forecasting processes and methods to wider marketing and sales forecasting needs  Assimilate, aggregate, and query data to provide recommendations based on statistical analysis  Monitor data integrity and notify appropriate personnel of data impairments  Develop solutions for automating complex repeatable queries that normalize and cleanse data  Synthesize data into actionable content, and communicate findings back to the business  Become a subject matter expert on improving data, processes, and methodologies to identify inefficiencies and recommend improvements  Ensure that consistent documentation is developed and maintained to easily replicate and improve processes related to data and data analysis  Engage in creating quality metrics, reports, KPIs and Dashboards  Consult with business teams on project requirement gathering and communicating the appropriate selection, utilization, and interpretation of advanced statistical methodologies used in projects  Support GHG operational processes as needed  Effectively communicate and present to both technical and non-technical employees on advanced analytics", "Recruiter_First_Name": "Christopher", "Recruiter_Last_Name": "Hill", "Recruiter_Email_Address": "careers@paccarparts.com", "Company_name": "Paccar Parts", "SetName": "Jane Mwangi_11/03/2023_Paccar Parts_Sr Business/Data Analyst", "CandidateID": "38690", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "62.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "827", "MentorInterviewsCount": "2", "MentorInterviewsDuration": "1847", "Mentor": "Leslie Boye", "Applicant": "Jane Mwangi", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "11/3/2023", "NoofDays": -27, "LogInterviewID": 210, "QID": 2683, "Job_Title": "Database Administrator", "Job_Description": "About the job StrideCare, a healthcare multi-specialty physician group, is currently seeking a highly skilled and experienced Database Architect and Data Analyst to join our dynamic team. The ideal candidate will possess expertise in ETL processes, and Power BI, and have prior experience in the medical field.  Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.", "Recruiter_First_Name": "Rocky and Tracy", "Recruiter_Last_Name": "Massey and Miller", "Recruiter_Email_Address": "<Tracy.Miller@stridecare.com>, <rocky.massey@stridecare.com>", "Company_name": "StrideCare", "SetName": "AYODEJI OLAWOYE_11/03/2023_StrideCare_Database Administrator", "CandidateID": "33898", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 212, "QID": 2685, "Job_Title": "DATABASE ADMINISTRATOR", "Job_Description": "Job Duties And Responsibilities   Database Architecture and Management:  Design, develop, and maintain efficient and scalable database architectures to support the organization's data needs.   Collaborate with cross-functional teams to understand business requirements and translate them into effective database solutions.   Ensure data integrity, security, and performance by implementing best practices and industry standards.   Monitor and optimize database performance, troubleshoot issues, and recommend enhancements for system efficiency.   ETL Processes and Data Integration:  Develop and maintain robust Extract, Transform, Load (ETL) processes for seamless data integration and transformation.   Extract data from various sources, transform and cleanse it to meet business requirements, and load it into the database.   Ensure data accuracy and quality by implementing validation checks and resolving data anomalies.   Collaborate with teams to identify and implement opportunities for process automation and optimization.   Data Analysis and Reporting:  Perform comprehensive data analysis using statistical techniques and tools to extract valuable insights.   Interpret complex datasets, and identify trends, patterns, and correlations to support data-driven decision-making.   Develop and maintain interactive dashboards, reports, and visualizations using Power BI or similar tools.   Collaborate with stakeholders to define and track key performance indicators (KPIs) and provide actionable recommendations for business improvement.   NetSuite Integration and Administration:  Leverage your expertise in GP to integrate and manage data from external systems and sources.   Configure, customize and optimize NetSuite modules to meet specific business requirements.   Collaborate with internal teams and external vendors to ensure smooth integration and data flow.   Maintain and support NetSuite applications, ensuring data accuracy and system reliability.   Medical Domain Expertise  Apply your in-depth knowledge of medical data management, healthcare industry regulations, and terminology to drive data analysis and reporting.   Stay abreast of emerging trends, standards, and best practices in the medical field to ensure data compliance and accuracy.   Collaborate with healthcare professionals and subject matter experts to understand and address specific data needs.   Qualifications And Education Requirements   Bachelor's or Master's degree in Computer Science, Information Systems, Data Science, or a related field.   Must be local or able to work Hybrid in Dallas, TX   Proven experience as a Database Architect, Data Analyst, or a similar role.   Strong proficiency in designing and managing relational databases (e.g., SQL Server, Oracle, MySQL).   Expertise in ETL processes, data integration, and transformation techniques.   In-depth knowledge of NetSuite, including configuration, customization, and integration capabilities.   Proficiency in data analysis and visualization tools such as Power BI, Tableau, or similar platforms.   Familiarity with medical data management, healthcare industry regulations, and terminology.   Strong analytical and problem-solving skills with the ability to extract insights from complex datasets.   Excellent communication and collaboration skills to effectively work with cross-functional teams and stakeholders.   Attention to detail, with the ability to prioritize tasks and manage multiple projects simultaneously.   StrideCare Offers a Total Rewards Benefits Package That Includes   Major medical insurance   Dental and vision   401k   Long- and short-term disability   Corporate outings   Fun and casual corporate environment   PTO   Paid holidays   No weekends, evenings, nights, or holidays (paid holidays)   Excellent work - life balance (Monday - Friday work schedules)   Employee Assistance Program and more!", "Recruiter_First_Name": "Tracy", "Recruiter_Last_Name": "Miller", "Recruiter_Email_Address": "Tracy.Miller@stridecare.com", "Company_name": "StrideCare", "SetName": "AYODEJI OLAWOYE_11/02/2023_StrideCare_DATABASE ADMINISTRATOR", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1690", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 204, "QID": 2678, "Job_Title": "Power BI and Power Apps Developer", "Job_Description": "Design and develop interactive Power BI reports and dashboards. Extract, transform, and load (ETL) data from various sources into Power BI. Collaborate with business users to gather requirements and translate them into effective visualizations. Develop custom applications using Power Apps to streamline business processes. Integrate Power Apps with other Microsoft 365 applications and services. Create canvas and model-driven apps that meet the organization's needs. Design and implement data models to support reporting and analytics requirements. Perform data analysis to identify trends, patterns, and insights. Automate repetitive tasks and workflows using Power Automate (Flow). Ensure seamless integration between Power BI, Power Apps, and other Microsoft 365 tools. Collaborate with cross-functional teams to understand business requirements and provide technical solutions. Train end-users on how to use Power BI reports and Power Apps applications effectively.", "Recruiter_First_Name": "Kyle", "Recruiter_Last_Name": "Skelton", "Recruiter_Email_Address": "kyle.skelton@msg.clrco.com", "Company_name": "Atlas Technologies, Inc.", "SetName": "Avworo  OGHENEKEVWE _11/02/2023_Atlas Technologies, Inc._Power BI and Power Apps Developer", "CandidateID": "38457", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "31.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "72", "MentorInterviewsCount": "2", "MentorInterviewsDuration": "674", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 209, "QID": 2682, "Job_Title": "Solution Assessment Consultant", "Job_Description": "Apeiron Sumus is looking for a Solution Assessment Consultant to join our team in United States. This person will lead the successful execution of a variety of projects from start to finish.  The ideal candidate is a self-starter with excellent time-management and problem-solving abilities who thrives in fast-paced environments. Someone with high energy, a curiosity about the industry, and tenacity and has previous Microsoft Technology sales experience. This person will bring new ideas, have a deep passion for the role and create ways to attain new accounts.  Responsibilities:  Assessment Implementation -\u202fTrusted advisor to consult on effective plan deployment and new opportunity developments. Able to qualify solution assessment opportunities, handover to Technical team for execution and position partners in the overall sales process.  Customer Engagement - Receives the nomination and engagement with the customer may begin through contact to secure acceptance of the Letter of Engagement and orchestrates project delivery under a remote assistance model.  Orchestrate Assessment process - Manage and execute the activities required to perform a Solution Assessment in each account. Starts the data collection phase, executed under a tele-assisted model that includes remote installation, configuration, and execution of discovery tools, data collection, troubleshooting, data analysis, and the creation of the deliverable for the Solution Assessment.  Report Information and Migration Handover - Shares and fine tunes the report information with Microsoft Team and Designated Migration Partner prior to presenting the team\u2019s Insights & Recommendations to the customer. Hand-offs the Assessment to a designated Migration Partner and Microsoft Field Team to act on the Migration Plan and Drive Consumption.  Partner and Supplier Relationship Management - Recommends Solution Assessment Partner (in case of partner delivered assessments) and coordinates end-to-end engagement with Partner  Professional and Technical competencies:  Hands-on experience with multiple sales techniques  Experience with Microsoft Office and CRM software  Familiarity with MS Cloud and PowerBI  Understanding of sales performance metrics Strong written and verbal communication skills  Attention to detail, data analysis, and analytical skills  Integrate consulting on Microsoft solutions and offerings in support of organizations\u2019 business needs Work with IT systems in support of collecting data  Self-Direction and a focus on quality, apply independent judgment to accomplish objectives   Desirable Certifications:  Microsoft Certified | Azure Fundamentals | AZ-900 Microsoft 365 Certified | Fundamentals | MS-900 Microsoft Certified | Dynamics 365 Fundamentals (CRM) | MB-910  Personal Profile:  Required languages: English Educational level: Bachelor\u2019s degree Special conditions or requirements: Open to work on a global environment with different cultures and languages This is a remote position", "Recruiter_First_Name": "Nydia Valenzuela", "Recruiter_Last_Name": "Salazar", "Recruiter_Email_Address": "v-nydiav@microsoft.com", "Company_name": "Apeiron Sumus LLC", "SetName": "Feven Asmelash_11/02/2023_Apeiron Sumus LLC_Solution Assessment Consultant", "CandidateID": "39112", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Ayodele Adepoju", "Applicant": "Feven Asmelash", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "11/2/2023", "NoofDays": -28, "LogInterviewID": 205, "QID": 2679, "Job_Title": "Database Developer", "Job_Description": "Graphic Business Solutions (GBS) is currently seeking a talented Database Developer with two or more years\u2019 proven SQL Server experience to join our growing software development team.  A successful candidate for this position will have a strong background in developing and maintaining world-class data solutions using Microsoft SQL Server technologies. The candidate will have advanced T-SQL skills with a strong ability to work independently on a wide range of business-enhancing data projects. Equally important to these specific technology skills are excellent written and verbal communication skills both with the team and external teams, the ability to multi-task, the ability to translate business requirements to database requirements, the ability adapt quickly to new environments and using creativity to solve difficult problems as a key member of the software development team.  Essential responsibilities and characteristics of this position include the following:  Develop and organize SQL Server objects, such as Stored Procedures, Functions, Views, Tables, SSIS packages, etc., that support automation efforts Co-develop SQL-based solutions for an e-commerce environment Generate and deliver solutions that provide business intelligence to stakeholders Collaborate with other database developers in the software development team on complex data projects Exhibit an understanding of fundamental database design principles Ability to prioritize and manage multiple concurrent tasks and projects Ability to collaborate in a small and productive development team Motivated self-starter with the ability to learn and adapt to new technologies Passion for working with technology and excitement for creating high-quality products Rigorous attention to detail and focus on the quality of deliverables Excellent verbal and written communication skills Dedication and an appetite for learning new technologies and furthering professional growth Solid analytical and problem-solving skills Requirements:  Minimum Required Qualifications:  Must have 5 or more years\u2019 worth of experience and deep knowledge of:  MSSQL Server 2019 or higher Advanced T-SQL skillset Knowledge of MS SQL Server performance tuning, and the design and implementation of a high-availability database architecture. ETL, SSIS, SSRS SSMS and Visual Studio GIT and version control Familiarity with MS development technologies, C#, ASP.NET and web technologies, HTML, Javascript, CSS, XML etc. highly desirable. Additional Preferred Qualifications:  Tableau Experience with reporting and business intelligence systems Exposure and understanding of Agile Methodologies Proficient with all aspects of the Software Development Lifecycle Excellence in debugging practices Comfortable with GIT and deployments Expert-level proficiency in Excel Desired Education:  Associate's degree or above in Computer Science, Information Systems, Business Administration or related field Work Hours:  Typically, Monday through Friday, 8:30 am to 5:00 pm with the flexibility to meet business demands as needed. This position does not require travel.", "Recruiter_First_Name": "Bobby", "Recruiter_Last_Name": "Shreckengost", "Recruiter_Email_Address": "bobby@markful.com", "Company_name": "Markful", "SetName": "Calvine  Cheptoo _11/02/2023_Markful_Database Developer", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 4", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 3", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 2"}, {"InterviewDate": "11/1/2023", "NoofDays": -29, "LogInterviewID": 203, "QID": 2677, "Job_Title": "Senior Report Developer", "Job_Description": "Title: Senior Report Developer Location: Remote - Anywhere USA As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company. This position will focus on delivery of solutions inside our Data Management/Analytics business unit. Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Recruiter_First_Name": "Tim", "Recruiter_Last_Name": "Strandberg", "Recruiter_Email_Address": "Tim.Strandberg@datavail.com", "Company_name": "Datavail", "SetName": "EMMANUEL OJENIYI_11/01/2023_Datavail_Senior Report Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "2058", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "16", "Technical_InterviewCount": "5", "InterviewScore": "NULL"}, {"InterviewDate": "11/1/2023", "NoofDays": -29, "LogInterviewID": 208, "QID": 2681, "Job_Title": "BI Developer", "Job_Description": "Job: BI Developer  Location: Woodlands, TX  Duration: 6 Month contract-to-perm     Job Description *  The BI Developer will be responsible for the design and development of data models that support enterprise analytical reporting and dashboard solutions. This position will work closely with business users and executives to gather, define, and translate business requirements into BI solutions. The applicant must have excellent collaboration skills with the ability to communicate concepts and solutions effectively and clearly. This position will also play a key technical role requiring expert level skills in the design, development and implementation of data warehousing and BI solutions. This person needs to be located in the Houston, TX area to attend in person meetings (about once every other month) to collaborate on team meetings.", "Recruiter_First_Name": "Ray", "Recruiter_Last_Name": "Andrzejewski", "Recruiter_Email_Address": "Ray.Andrzejewski@insightglobal.com", "Company_name": "Insight Global", "SetName": "EMMANUEL OJENIYI_11/01/2023_Insight Global_BI Developer", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 4"}, {"InterviewDate": "10/31/2023", "NoofDays": -30, "LogInterviewID": 207, "QID": 2680, "Job_Title": "Business Intelligence Developer (BI)", "Job_Description": "\"Responsibilities Job Description Job Description  The Business Intelligence (BI) Developer is responsible for the design, creation, and maintenance of sustainable reporting solutions to support data-driven decisions by the client.  Drives significant analytic initiatives in support of business strategies.  Develops an understanding of business processes and operational tools in order to create meaningful reporting designs.  Responsible for the analysis of business data needs and develops the required data modeling.  Designs and develops creative and interactive data visualizations.  Partners with business leaders across the organization to support and implement high-quality, data-driven solutions.  Assists IT with collecting and storing operational data from source systems.  Stays current on all processes, techniques, tools, and industry best practices to ensure the client is at the forefront of Business Intelligence solutions.  REQUIRED QUALIFICATIONS  3-5 years of Business Intelligence experience  3-5 years of Data Analytics, Dashboarding, Reporting, or Analysis experience  Bachelor\u2019s Degree in Data Science, Business, or related field  JOB FUNCTIONS AND RESPONSIBILITIES  Partner with business leaders and SMEs to understand reporting and analytics needs within their functions.  Gather, document, and analyze business reporting and communications requirements from stakeholders  Map business requirements to source data structures and develop data models from data located within multiple data stores utilizing data solutions such as SQL or Snowflake  Design, build, and maintain dashboards visualizations using BI applications such as Tableau  Ensure dashboards are creatively designed and tell a story behind the data.  Analyze report data for accuracy and report on potential quality errors  Participate in peer review process to ensure all reports are accurate prior to distribution  Partner with business owners to prioritize projects to ensure the most important items are being successfully addressed.  Partner with IT to identify and store required data sets.  Provide ongoing analytics expertise and insights into data trends across the operational segments.  Lead and facilitate dashboard demonstration and educational sessions  Provide ad-hoc data analysis and support to business functions.  REQUIRED COMPETENCIES  Healthcare experience  Advanced skills in data applications such as Power BI, ETL, Tableau (some knowledge) and SQL (some knowledge)  Ability to display complex quantitative data in a simple, intuitive format to present findings in a clear manner  Creativity in designing data visualizations  Strong understanding of data structures that ease the generation of reliable data  Strong analytical skills with some moderate project management knowledge  Proficient Data mining and normalization skills  How to Apply:  If you are a results-driven professional with the qualifications and experience required for this role, we invite you to apply by responding to this portal or send your resume to careers@StoneLaurel.com with the subject line \"\"BI Developer.\"\" We look forward to welcoming a dedicated and strategic thinker to our team.  Company Description  StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "Recruiter_First_Name": " NC", "Recruiter_Last_Name": " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.  While our engagements have taken us around the globe", "Recruiter_Email_Address": " working with some of the largest Fortune 500 companies", "Company_name": " our focus has always been on being the best", "SetName": " not the biggest.  We believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "CandidateID": " client focus", "SurveyResponse": " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.  Company Description StoneLaurel is a management consulting firm with the capabilities of a large provider and the personal touch of a boutique partner. Headquartered in Charlotte", "InterviewType": " NC", "Preparationscore": " we\u2019ve been moving our clients\u2019 business forward for more than 20 years.\\r\\n\\r\\nWhile our engagements have taken us around the globe", "AutoInterviewsCount": " working with some of the largest Fortune 500 companies", "AutoInterviewsDuration": " our focus has always been on being the best", "MentorInterviewsCount": " not the biggest.\\r\\n\\r\\nWe believe that trust matters and relationships are the foundation of good business. We put people first with flexible methodologies", "MentorInterviewsDuration": " client focus", "Mentor": " and forward-thinking. Our seasoned team applies deep industry knowledge to create practical solutions.\"", "Applicant": "George", "Recruiter_InterviewCount": "Williams", "Technical_InterviewCount": "gwilliams@stonelaurel.com", "InterviewScore": "StoneLaurel"}, {"InterviewDate": "10/26/2023", "NoofDays": -35, "LogInterviewID": 200, "QID": 2674, "Job_Title": "Sr. Consultant, Power BI Analyst", "Job_Description": "Technossus, a leading software solutions and technology consulting company, is seeking a qualified and experienced Sr. Consultant, Power BI Analyst to join our team. As a Sr. Consultant, Power BI Analyst, you will be responsible for developing interactive and insightful dashboards and reports to help our clients make better-informed business decisions. At Technossus, we value our commitment to delivering cutting-edge solutions, and our Sr. Consultant, Power BI Analyst is a key player in ensuring our clients receive exceptional value and quality every time.  Location: Full time onsite in Long Beach 5 days a week   Responsibilities Collaborate with stakeholders and team members to understand their business intelligence needs and translate them into data visualizations that provide actionable insights. Develop interactive dashboards and reports in Power BI to track business performance and identify trends. Analyze and interpret data to provide recommendations that enhance decision-making processes. Design and implement data models and data architecture to support the management and analysis of large data sets. Identify and resolve data quality and integration issues. Share best practices with the team to increase knowledge and optimize processes. Stay up-to-date with the latest Business Intelligence trends and technologies. Requirements  Proven experience in developing high-quality dashboards and reports in Power BI. Understanding of Data Warehouse design and architecture. Strong business acumen and the ability to translate business requirements into technical solutions. Excellent communication and presentation skills. 5+ years of working experience as BI Analyst and a bachelor's degree in engineering, computer science, commerce degree or equivalent 5+ Years of Power BI experience with DAX and Power Query Strong/excellent SQL Skills including PL/SQL Benefits  Our job titles may span more than one career level. The starting base pay for this role is between $110,000.00 and $140,000.00. The actual base pay is dependent upon many factors, such as: training, transferable skills, work experience, business needs, and market demands. The base pay range is subject to change and may be modified in the future. This role may also be eligible for bonus and benefits.  Benefits:  Medical, Dental, Vision, 401k Match Health Savings & Flexible Spending Account Health Care FSA Dependent Day Care FSA Company paid life, AD&D, & LTD insurance Flexible PTO policy Continued training to level up your skills Supplemental benefits available: Accident Insurance Critical Illness Insurance Hospital Indemnity Employee Assistance Program Physical Demands:  While performing the duties of this job, the employee routinely is required to sit; walk; talk and hear; use hands to keyboard, finger, handle, and feel; stoop, kneel, crouch, twist, reach, and stretch. Speaking and hearing ability sufficient to communicate in person, over telephone, and/or video conference.  The ability to stand, walk, and sit in a computer chair for long periods of time. The ability to see and respond to dangerous situations. Speaking and hearing ability sufficient to communicate in person, over telephone and/or video conferences. Sufficient hand, arm, and finger dexterity to operate a computer keyboard and other office equipment. Emotional Demands:  While performing the duties of this role the employee is required to maintain a professional and positive attitude with clients and colleagues. Frequent deep thinking and interactions with multiple stakeholders and clients. Ability to utilize knowledge and experience to problem solve, make quick decisions, and interpret proposals publicly or in group setting.  Ability to problem solve Able to make quick decisions Frequent deep thinking Communicate clearly with coworkers Lead and direct a team Articulate objectives and expectations clearly Speak publicly Interpret data", "Recruiter_First_Name": "Julie", "Recruiter_Last_Name": "Antifave", "Recruiter_Email_Address": "Julie.Antifave@technossus.com", "Company_name": "Technossus", "SetName": "Calvine  Cheptoo _10/26/2023_Technossus_Sr. Consultant, Power BI Analyst", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 3", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 3", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/26/2023", "NoofDays": -35, "LogInterviewID": 201, "QID": 2675, "Job_Title": "Power BI Developer", "Job_Description": "POSITION: POWER BI DEVELOPER/ANALYST \u2013 W2 ONLY LOCATION: REMOTE TYPE: DIRECT HIRE Are you a problem-solver with a passion for data analysis and visualization? Our direct client, a leader in the global travel industry including being well known in global travel analytics, is seeking a Business Intelligence (BI) Developer/Analyst to join their leading-edge team. In this role, you&#39;ll bring your expert Power BI development skills, data analytics, SQL knowledge, and understanding of relational databases, working with valued clients in the corporate travel industry. You&#39;ll be at the forefront of their analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for their client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. This is also a great opportunity to work for a Microsoft Power BI Partner! Responsibilities: \uf0b7 Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client&#39;s needs. \uf0b7 Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. \uf0b7 SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. \uf0b7 Client Relationship Management: Work directly with a specific, valued main client, understanding their needs, and presenting your findings in a clear and persuasive manner. Qualifications: \uf0b7 Bachelor&#39;s Degree in Information Systems, Computer Science, Business Administration, or a related field. \uf0b7 Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. \uf0b7 Solid experience in SQL and working with relational databases. \uf0b7 Excellent analytical skills with the ability to dissect large amounts of data. \uf0b7 Strong communication skills and the ability to effectively convey complex information. \uf0b7 Experience in the corporate travel industry is a plus.", "Recruiter_First_Name": "Suzy", "Recruiter_Last_Name": "Carlson", "Recruiter_Email_Address": "scarlson@entelli.com", "Company_name": "Entelli", "SetName": "Mary Gathogo_10/26/2023_Entelli_Power BI Developer", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/25/2023", "NoofDays": -36, "LogInterviewID": 197, "QID": 2671, "Job_Title": "Data Engineer", "Job_Description": "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.   This position is remote. We are unable to offer work sponsorship for this role.    We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.   Your impact:   Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company\u2019s product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform.", "Recruiter_First_Name": "Aaron", "Recruiter_Last_Name": "Talbert", "Recruiter_Email_Address": "aaron.talbert@buyersedgeplatform.com", "Company_name": "ArrowStream", "SetName": "Yama Touray_10/25/2023_ArrowStream_Data Engineer", "CandidateID": "37640", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/24/2023", "NoofDays": -37, "LogInterviewID": 198, "QID": 2672, "Job_Title": "Business Intelligence Developer", "Job_Description": "Primarily responsible for the data warehouse ETL framework and architecture Partner and align with business leaders and stakeholders to understand the business needs and address them using the many variations of visualizers PowerBI has to offer Provide training, guidance, and support to users Build & modify a solid data infrastructure, to include underpinning enterprise scale BI analytics / reporting platform, add / create new data models and integrate new data as needed Monitor analytics and metrics results Interact with internal clients to evaluate performance, availability and to collaborate on ways to improve the platform / reporting data Identify and act upon data infrastructure needs, data warehouse design, infrastructure maintenance and investment areas Manage infrastructure projects from beginning to end, including ideation, execution, socialization, and stakeholder management Ensure data integrity and compliance with any and all data security policies Translate business requirements into technical documentation Debug, monitor and troubleshoot BI Solution in development and production environments Conduct and participate in code walkthroughs and document technical design Follow the release cycles and implement on-time delivery of bug fixes, change requests and enhancements Other Duties as assigned", "Recruiter_First_Name": "Luca", "Recruiter_Last_Name": "Talone", "Recruiter_Email_Address": "luca.talone@niceforyou.com", "Company_name": "NICE North America LLC", "SetName": "Talq Tera_10/24/2023_NICE North America LLC_Business Intelligence Developer", "CandidateID": "39119", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying", "InterviewType": " with excellent question clarity", "Preparationscore": " engaging interviewer", "AutoInterviewsCount": " and relevant technical aspects. Strong performance in showcasing skills and qualifications", "AutoInterviewsDuration": " though a challenge in recruiter miscommunication. Positive sentiment in open-ended responses", "MentorInterviewsCount": " but some neutrality in additional feedback.\"\"", "MentorInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 2", "Mentor": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Applicant": "     \"\"HandlingChallengingQuestions\"\": 3", "Recruiter_InterviewCount": "     \"\"LikelihoodToRecommendCompany\"\": 3", "Technical_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 3", "InterviewScore": "     \"\"InterviewerEngagement\"\": 3"}, {"InterviewDate": "10/21/2023", "NoofDays": -40, "LogInterviewID": 195, "QID": 2669, "Job_Title": "Senior BI Developer", "Job_Description": "Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.", "Recruiter_First_Name": "Patrick", "Recruiter_Last_Name": "Gallagher", "Recruiter_Email_Address": "Patrick.Gallagher@msg.paycomonline.com", "Company_name": "Cedar Gate Technologies Recruiter", "SetName": "EMMANUEL OJENIYI_10/21/2023_Cedar Gate Technologies Recruiter_Senior BI Developer", "CandidateID": "37165", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was generally positive", "InterviewType": " with clear and engaging questions. The candidate felt comfortable and performed well", "Preparationscore": " particularly in technical aspects. They provided specific examples of their experience and handled challenging questions effectively. However", "AutoInterviewsCount": " there was some neutrality in the additional feedback section.\"\"", "AutoInterviewsDuration": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 4", "MentorInterviewsCount": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "MentorInterviewsDuration": "     \"\"HandlingChallengingQuestions\"\": 4", "Mentor": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Applicant": "     \"\"AlignmentWithExpectations\"\": 4", "Recruiter_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "Technical_InterviewCount": "     \"\"SkillsAlignmentWithRole\"\": 5", "InterviewScore": "     \"\"QuestionClarityAndEffectiveness\"\": 4"}, {"InterviewDate": "10/20/2023", "NoofDays": -41, "LogInterviewID": 196, "QID": 2670, "Job_Title": "Senior BI Developer", "Job_Description": "Position Summary  Reasons you will want this position:  Cedar Gate Technologies is a rapidly growing company with limitless career growth and advancement for top performers Our culture appreciates and rewards creative ideas, especially those that achieve better outcomes for everyone Interact regularly with our executives and senior leadership. Gain valuable work experience with the leader in healthcare technology for value-based care Work in a highly productive environment with a Remote Hybrid work schedule, including a focus on work-life balance. Summary  Cedar Gate Technologies is looking to hire a hard-working and organized Senior BI Developer to be responsible for the upkeep and development of reports and dashboards to support business performance monitoring and decision-making. In this role, you will build and maintain designs for generating reports on financial and market intelligence, collaborate with internal department leaders and global resources to understand business needs, and successfully communicate project results and challenges. You will be part of a talented team that demonstrates superb technical competency, delivering mission-critical reporting infrastructure and ensuring the highest levels of performance and security.   Roles & Responsibilities  Engage product owners and business stakeholders when gathering requirements and then use agile methodology to deliver desired reporting via Power BI, SSRS, Crystal Reports, Tableau, or other reporting tools. Translate business requirements into technical specifications for designing and developing BI reports or dashboards that provide accessible information for decision-making. Develop expertise and thought leadership in analytics, business intelligence, and reporting while providing new and innovative approaches to business analysis and interpretation. Use an enterprise data warehouse environment, consisting of dimensional/relational data modeling techniques and ETL processes, to write complex queries in SQL that join data across multiple systems. Prepare ad-hoc reports and presentations that accurately convey data trends and associated analysis for business solutions, such as increasing productivity or cutting costs. Use SQL to provide database support by coding, scripting, or modifying the existing SQL queries, views, and stored procedures. Troubleshoot BI tool problems and models to build, code, and execute unit and integration test plans and provide technical support as needed. Monitor production systems and servers for issues and then resolve those issues or elevate them for resolution. Build and execute unit and integration test plans and then prepare systems for deployment.  Job Location: Hybrid Remote in our office in Houston, TX, but also considering Fully Remote within the USA   Required Experience / Qualifications  5 years of experience performing SQL-based data analysis 2 years of experience building friendly end-user reports and dashboards in SSRS, Power BI, or Tableau. Ability to work well under pressure by efficiently prioritizing and managing multiple tasks to meet performance expectations and deadlines. Superior customer service skills with demonstrated experience of this on the resume. Excellent written and verbal communication skills in English. Consistently presents a professional, businesslike image to the public, especially in front of clients, visitors, and internal leadership. BS/BA in a related field to Management Information Systems, Healthcare Management, or Computer Science/Engineering. Demonstrate strong critical thinking and analytical skills. Excellent interpersonal and observational skills in order to assess trainee\u2019s understanding and progress. Possess a positive attitude and a willingness to learn from everyone at all levels of experience. Self-motivated and team-oriented.", "Recruiter_First_Name": "Patrick", "Recruiter_Last_Name": "Gallagher", "Recruiter_Email_Address": "patrick.gallagher@cedargate.com", "Company_name": "Cedar Gate Technologies", "SetName": "EMMANUEL OJENIYI_10/20/2023_Cedar Gate Technologies_Senior BI Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "14", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/18/2023", "NoofDays": -43, "LogInterviewID": 186, "QID": 2662, "Job_Title": "Senior Reports Developer", "Job_Description": "Title: Senior Report Developer  Location: Remote - Anywhere USA  As an Analytics Developer within the Data Management Business Unit at Datavail you will lead Data Management and Analytics application consultancy projects to success, work closely with the technical delivery and account management team to (1) Ensure customer satisfaction (2) Develop Analytics applications as defined by customer needs and (3) Provide consulting and advisory help in the area of Analytics application development and best practices for the business unit and company.  This position will focus on delivery of solutions inside our Data Management/Analytics business unit.  Candidates with working knowledge and experience in delivering analytics and reporting solutions to clients using: Tableau, PowerBI (required). Additionally working with Quicksight as well as other related BI/Analytics technologies in the areas of ETL, Reporting, and Dashboard development are preferred. Design interactive Power BI/Tableau reports, dashboards, and visualizations that meet business requirements Develop and implement data models and data transformation processes in Power BI/Tableau Collaborate with cross-functional teams to gather and analyze business requirements Identify data quality issues and propose solutions to improve data accuracy Optimize and enhance existing Power BI solutions to improve performance Create and maintain technical documentation for Power BI/Tableau solutions Stay updated with the latest Power BI features and trends to suggest improvements and best practices Solid understanding of data modeling and database concepts Experience in designing and developing interactive dashboards and visualizations Proficient in SQL for data extraction and transformation Familiarity with ETL processes and data integration techniques Strong analytical and problem-solving skills Excellent communication and collaboration abilities", "Recruiter_First_Name": "Tim", "Recruiter_Last_Name": "Strandberg", "Recruiter_Email_Address": "Tim.Strandberg@datavail.com", "Company_name": "Datavail", "SetName": "EMMANUEL OJENIYI_10/18/2023_Datavail_Senior Reports Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "13", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/18/2023", "NoofDays": -43, "LogInterviewID": 180, "QID": 2657, "Job_Title": "Business Intelligence Report Analyst", "Job_Description": "Position Overview The Talent Business Intelligence (BI) Reporting Analyst works within Talent & Program Delivery to provide expertise in data analysis, business intelligence tools, and learning and development measurement principles to contribute to the ongoing improvement of employee performance and skills within the organization. This individual will design, develop, and validate dashboards, alerts, and reports that measure business performance across Talent & Delivery programs for management purposes. Ensures information is easily available to users for direct consumption. Conducts analyses of functional business processes and participates in the development of business cases in the support of continuous improvement programs and the implementation of enabling technologies. This individual provides leadership in facilitating information gathering, structured documentation and presentation of findings to all levels of management. This role enhances program effectiveness and enables sound business decisions by providing insights and data which are accurate, relevant, and reliable. Primary Responsibilities To perform this job successfully, an individual must be able to perform each essential duty satisfactorily. The requirements listed below are representative of the knowledge, skill, and/or ability required. Reasonable accommodations may be made to enable individuals with disabilities to perform the essential functions.  Collect and organize data from various sources, including learning management systems (LMS), employee performance training records, surveys, and other relevant systems. Define and track key performance indicators (KPIs) related to learning and development, such as training completion rates, learner engagement, skill acquisition, and business impact. Interprets & analyzes operational metrics in order to create meaningful dashboards & reporting related to Talent & Program Delivery initiatives. Design, build and deploy BI solutions Works with subject matter experts, especially within various departments across the enterprise, to understand business KPIs and resulting outcomes, defining requirements for data integration, reporting, analysis, and descriptive, predictive, and prescriptive business intelligence solution options. Builds and updates process control measurements and changes existing reports and dashboards as needed Increases the usage practices around objective performance data in day-to-day management activities Other duties as assigned Education and Experience  The minimum education, experience, skills and certifications/training required to successfully perform the job:  Bachelor\u2019s degree in business, computer science, information systems or equivalent work experience Minimum 4 years\u2019 experience Oracle BI, SAP Business Objects etc. Knowledge of Data Warehouse platforms Knowledge of languages such as Python, R, Scala, SQL, etc. Experience working with multidimensional data sets/databases such as SQL, Salesforce, JSON, etc. Strong MS Office skills, especially with Power BI and Excel Understanding of report writing required Experience with Lean Six Sigma preferred", "Recruiter_First_Name": "Elisa", "Recruiter_Last_Name": "Wingate", "Recruiter_Email_Address": "EWingate@paylocity.com", "Company_name": "Paylocity", "SetName": "Calvine  Cheptoo _10/18/2023_Paylocity_Business Intelligence Report Analyst", "CandidateID": "38532", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 1", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 1", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 1", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 3", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 2", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/18/2023", "NoofDays": -43, "LogInterviewID": 193, "QID": 2668, "Job_Title": "Data Engineer", "Job_Description": "ArrowStream is an innovative SaaS business and member of Buyers Edge Platform that's changing the way foodservice businesses optimize their supply chain. We are looking for a passionate, collaborative, and an intellectually curious Account Manager. We are looking for passionate, innovative, and curious engineers to transform our platforms and keep ahead of the latest technology. Our technical team members are smart and quick, able to work in teams across our technology stack throughout the full product lifecycle and develop new features. Their work enables customers to succeed by helping them better manage their supply chains to drive efficiency and deliver value.  This position is remote. We are unable to offer work sponsorship for this role.  We are looking for a passionate, collaborative, and intellectually curious Data Engineer to transform our platforms and keep ahead of the latest technology. The Data Engineer will be responsible for the design and development of analytical data solutions including back-end and schema components as well as front end development of customer-facing reports and dashboards.  Your impact:  Actively participate in an agile software development lifecycle, decomposing requirements, documenting, and discussing the design, estimation, and implementation. Design, implement and run data analytics platform components and pipelines written in the latest data engineering languages, tools and technologies to assemble large complex data sets with real-time integration requirements. Design, implement and run cloud-based micro-services. Collaborate with product owners and UX designers to develop and influence the company's product strategy for customer analytics. Design, develop and administer customer-facing reports and dossiers in MicroStrategy that are highly performant, scalable, and secure. Design, develop and administer highly-performant, scalable, and secure manner back-end components including Intelligence Server, Metadata layer (Schema objects), REST API, and Web layer. Complete performance tuning across the entire MicroStrategy stack, including Intelligence Server, Metadata layer (Schema objects), and Web layer. Collaborate to and evaluate proposed database schema designs to ensure they will be performant for MicroStrategy. Contribute to the knowledge base, wiki, and other ArrowStream resources. Work with and learn from highly-skilled engineers who have built an industry-leading product platform. About you:  Microsoft SQL Server solutions DB Architecture Stored Procedure SSIS Performance Tuning Enterprise Analytics Toolsets Examples: MicroStrategy, Power BI, Tableau, Looker Python Scripting Agile Development Process Jira 3+ years hands-on experience in developing and architecture of large-scale, multi-tenant, real-time, customer-facing data platforms using relational and non-relational database platforms and micro-services architecture patterns. 3+ years hands-on experience in developing Microsoft SQL Server solutions including DB architecture, stored procedure, SSIS and performance tuning. 1+ years hands-on experience in designing and developing enterprise analytics reports and dashboards that are deployed into a customer-facing analytics reporting platform. 1+ years hands-on experience with enterprise analytics back-end components including schema, analytics engine and web layer to support a customer-facing analytics reporting platform. 1+ years hands-on experience with REST API, Python scripting experience is a plus. Significant experience collaborating with individuals in product development and engineering roles to envision and deliver a customer-facing analytics report platform. Experience in delivering an agile environment and understand how to maximize results from sprints, releases and road maps. Experience in creating a variety of architecture and business artifacts to communicate all aspects of a proposed solution to a diverse audience comprised of technical and business team members. Experience in designing and leading experiments or proofs of concept which increase team knowledge and bring about effective technical and business decisions. Keep up with industry trends, enjoy teaching yourself new technology, and enjoy talking about different technical problems and their solutions. Courage to debate with colleagues and drive out the best solution for the organization, not just your solution. One or more industry certifications in a relevant data architecture or engineering topic area.", "Recruiter_First_Name": "Aaron", "Recruiter_Last_Name": "Talbert", "Recruiter_Email_Address": "aaron.talbert@buyersedgeplatform.com", "Company_name": "ArrowStream", "SetName": "Yama Touray_10/18/2023_ArrowStream_Data Engineer", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "6", "AutoInterviewsDuration": "425", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "10/17/2023", "NoofDays": -44, "LogInterviewID": 189, "QID": 2665, "Job_Title": "Navy ERP Level III Data Analyst", "Job_Description": "NavAide is on the lookout for dedicated professionals committed to supporting the Navy's strategic alignment in enhancing the FM workforce, standardizing business processes, and leveraging data analytics. Specifically, this role will engage deeply in the Navy ERP data migration initiative and facilitate close collaboration with FM&C and Government clients. If you thrive in dynamic, challenging settings and have a penchant for pioneering change and innovation, then this opportunity might just be your next great leap.  Duties & Responsibilities:  Work in tandem with FM&C and Government clients, understanding data migration needs, and aligning them with the strategic aspirations of the ASN FM&C. Lead and oversee the creation and deployment of a Program Management Plan, touching crucial facets like organizational structure, transition plan, risk management, and performance metrics. Steer data health assessments and migration processes including, but not limited to, data mapping, post-migration data validation, and business transition. Oversee financial reconciliation, DDRS reporting, and user acceptance testing. Be at the forefront of organizational change management by crafting strategies and conducting change readiness assessments. Play a pivotal role in training strategy development, execution, and user management to ensure a smooth and hitch-free data migration process. Provide unwavering leadership to subordinate teams, making sure of strict adherence to financial standards and guidance. Knowledge, Skills & Abilities:  Demonstrable expertise in IT development, database management, and data analytics. Excellent communication, negotiation, and problem-solving acumen. Strong alignment with NavAide's ethos and guiding principles. Proficiency in tools and languages such as SQL, Python, and R, along with familiarity with data visualization tools like Tableau and Power BI. In-depth understanding of Navy ERP migration or related large-scale data migration projects. Education & Experience:  A Bachelor's Degree from an accredited institution in a field relevant to the role. Between 6-15+ years of work experience, with a preference for those who have engaged with State or Federal Government agencies or sizable corporations. While not mandatory, certifications or exposure to the Department of Navy Financial Management & Systems would be an added advantage.", "Recruiter_First_Name": "Lauren", "Recruiter_Last_Name": "Poynter", "Recruiter_Email_Address": "candidate-5eba678d684f@navaide.breezy-mail.com", "Company_name": "NavAide", "SetName": "Calvine  Cheptoo _10/17/2023_NavAide_Navy ERP Level III Data Analyst", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "195", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "10/17/2023", "NoofDays": -44, "LogInterviewID": 192, "QID": 2667, "Job_Title": "ETL Developer", "Job_Description": "Insight Global is looking for an ETL Developer to work onsite at their facility in North Houston (Spring, TX). This person will work as part of a team to define, develop, and test architectures and processes for collecting, storing, transforming, and managing big data into optimized views for business intelligence and modelling. On a daily basis, this person will receive customer requirements from the team Lead and client management. They will use SSIS for pattern identification, package development and deployment. Use SQL to create views based on business requirements. They will be responsible for data integration preparation, cube development/management, data integration, and maintenance as well as build, maintain, and update internal data structures for current and new data sources. They must also communicate issues that arise proactively without waiting to be contacted.", "Recruiter_First_Name": "Paige", "Recruiter_Last_Name": "Bucher", "Recruiter_Email_Address": "Paige.Bucher@insightglobal.com", "Company_name": "Insight Global", "SetName": "EMMANUEL OJENIYI_10/17/2023_Insight Global_ETL Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "12", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/14/2023", "NoofDays": -47, "LogInterviewID": 175, "QID": 2652, "Job_Title": "Power BI Reporting Specialist", "Job_Description": "This is the job\u2026. Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026. 3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026. Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "Recruiter_First_Name": "Kelly", "Recruiter_Last_Name": "Dye", "Recruiter_Email_Address": "kdye@acronym.com", "Company_name": "Acronym", "SetName": "Mary Gathogo_10/14/2023_Acronym_Power BI Reporting Specialist", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/13/2023", "NoofDays": -48, "LogInterviewID": 187, "QID": 2663, "Job_Title": "Product BI Analyst", "Job_Description": "About the job ABOUT US Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards! ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable. Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns. With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement. THE ROLE The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting. We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements. You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units. KEY TASKS & RESPONSIBILITIES Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Liz", "Recruiter_Last_Name": "Ostrander", "Recruiter_Email_Address": "lizostrander@auctiontechnologygroup.com", "Company_name": "Auction Technology Group", "SetName": "JORUM MWANGI_10/13/2023_Auction Technology Group_Product BI Analyst", "CandidateID": "37975", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "AMINAT OKERINDE", "Applicant": "JORUM MWANGI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "10/13/2023", "NoofDays": -48, "LogInterviewID": 179, "QID": 2656, "Job_Title": "BI Developer", "Job_Description": "No description details", "Recruiter_First_Name": "Brittany", "Recruiter_Last_Name": "Butler", "Recruiter_Email_Address": "bbutler@tetratec.com", "Company_name": "TETRA Technologies", "SetName": "EMMANUEL OJENIYI_10/13/2023_TETRA Technologies_BI Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "11", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/12/2023", "NoofDays": -49, "LogInterviewID": 182, "QID": 2659, "Job_Title": "Senior Business Analyst Data Visualization", "Job_Description": "Senior Analyst \u2013 Business Strategy and Data Visualization  Incredible well-established, high growth Texas based company is looking for a to join their San Antonio team! Company offers challenge, is team-oriented, has a great work/life balance and a career path! This Company is recognized for its customer service focus and single digit turnover!  The Senior Analyst is responsible for analyzing data and presenting insightful recommendations and findings!  Essential Functions:  \u00b7 Informs marketing strategy by analyzing marketing campaign effectiveness and ROI, sharing insights about response rates across channels and audiences with Marketing Managers  \u00b7 Perform analysis and creates insight that inform sales and marketing decisions in operations, sales, marketing, and support groups.  \u00b7 Presents valuable insightful information and recommends actionable items.  \u00b7 Downloads data from multiple systems and reporting databases, develops and disseminates reports to end users.  \u00b7 Responds to data requests from management and performs basic reporting.  \u00b7 Develops and executes complex reports and custom queries.  \u00b7 Prepares technical reports by collecting, analyzing, and summarizing information and trends from various systems.  \u00b7 Maintains databases for the collection, analysis, and dissemination of operational data throughout the company.  \u00b7 Entry, extraction, and ad-hoc reporting from various systems to support business objectives and the needs of the department.  \u00b7 Provides report training to applicable departments/roles.  \u00b7 Creates and provides opportunity and market share reports and analysis using all applicable business reporting databases.  Qualifications:  \u00b7 High school diploma or equivalent required; BA/BS, preferred.  \u00b7 A minimum of three years of work-related experience required.  \u00b7 Strong knowledge of data analytics and applicable reporting tools  \u00b7 Strong analytical and database management skills  \u00b7 Strong working knowledge and/or experience including but not limited to DBS, Tableau, Alteryx, WMS, Salesforce, MS Dynamics and Outlook  \u00b7 Ability to identify problems and to review related information to develop and evaluate options and implement solutions.  \u00b7 Consulting and influencing abilities.  \u00b7 Excellent interpersonal and customer service skills  \u00b7 Creative ability to understand the implications of new information for both current and future problem-solving and decision-making.  \u00b7 Ability to train and motivate others.  \u00b7 Outgoing personality  #IND1  Job Type: Full-time  Pay: $81,000.00 - $88,000.00 per year  Benefits:  401(k) 401(k) matching Dental insurance Flexible spending account Health insurance Health savings account Paid time off Parental leave Professional development assistance Tuition reimbursement Vision insurance Schedule:  Monday to Friday Work Location: Hybrid remote in Irving, TX 75062", "Recruiter_First_Name": "Vanessa", "Recruiter_Last_Name": "Burk", "Recruiter_Email_Address": "vanessa@zarecruiting.com", "Company_name": "Z & A Recruiting", "SetName": "LILIAN NJERI_10/12/2023_Z & A Recruiting_Senior Business Analyst Data Visualization", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "5", "InterviewScore": "NULL"}, {"InterviewDate": "10/12/2023", "NoofDays": -49, "LogInterviewID": 181, "QID": 2658, "Job_Title": "Business Intelligence Developer", "Job_Description": "Primarily responsible for the data warehouse ETL framework and architecture Partner and align with business leaders and stakeholders to understand the business needs and address them using the many variations of visualizers PowerBI has to offer Provide training, guidance, and support to users Build & modify a solid data infrastructure, to include underpinning enterprise scale BI analytics / reporting platform, add / create new data models and integrate new data as needed Monitor analytics and metrics results Interact with internal clients to evaluate performance, availability and to collaborate on ways to improve the platform / reporting data Identify and act upon data infrastructure needs, data warehouse design, infrastructure maintenance and investment areas Manage infrastructure projects from beginning to end, including ideation, execution, socialization, and stakeholder management Ensure data integrity and compliance with any and all data security policies Translate business requirements into technical documentation Debug, monitor and troubleshoot BI Solution in development and production environments Conduct and participate in code walkthroughs and document technical design Follow the release cycles and implement on-time delivery of bug fixes, change requests and enhancements Other Duties as assigned", "Recruiter_First_Name": "Luca", "Recruiter_Last_Name": "Talone", "Recruiter_Email_Address": "luca.talone@niceforyou.com", "Company_name": "Nice North America", "SetName": "Talq Tera_10/13/2023_Nice North America_Business Intelligence Developer", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "4", "AutoInterviewsDuration": "75", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/11/2023", "NoofDays": -50, "LogInterviewID": 155, "QID": 2632, "Job_Title": "Data Developer 2", "Job_Description": "5+ years SQL Development  Role Experience with SSIS and SSRS Looking for local to the Woodlands(greater Houston area).  Available for hybrid-remote work, but not looking to hire anyone remote that isn\u2019t local.  Basically if they are too far away that can\u2019t ask them to come into the office tomorrow, then they are too far away.  SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.   SQL Server Developer III Qualifications  Ideally 5- 7 years\u2019 experience in a SQL Server development role required. Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. 2+ years of experience monitoring database performance and tuning to maximize efficiency required. SQL Server Integration and Reporting Services experience required. High School Diploma or equivalent required. Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.", "Recruiter_First_Name": "Thomas", "Recruiter_Last_Name": "Johnson", "Recruiter_Email_Address": "ThomasJ@woodforest.com", "Company_name": "Procom - Woodforest National Bank", "SetName": "OLUKAYODE AKINRIMISI_10/11/2023_Procom - Woodforest National Bank_Data Developer 2", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "6", "AutoInterviewsDuration": "468", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/11/2023", "NoofDays": -50, "LogInterviewID": 178, "QID": 2655, "Job_Title": "Business Intelligence Analyst II", "Job_Description": "Overview:Shift4 (NYSE: FOUR) is boldly redefining commerce by simplifying complex payments ecosystems across the world. As the leader in commerce-enabling technology, Shift4 powers billions of transactions annually for hundreds of thousands of businesses in virtually every industry. For more information, visit www.shift4.com. We are looking for a Business Intelligence Analyst (BA) with a Data Mapping Focus to join our Information Technology Group. As a BIA, you will be understanding business operations and gather, analyze and identify data from their sources to map to target databases and reports of the Business Intelligence solution to ensure the flow of information and data to the entire organization. The position requires at least 3 years of prior experience as a Business Intelligence Analyst within Data Mapping. We are looking for individuals that are extremely self-sufficient, available to work flexible hours and hold themselves to the highest standards of professionalism. Responsibilities:  Responsible for the BI Data Mapping, which includes analyzing business requirements from stakeholders, identifying location of necessary data from technical systems, and defining transformations to meet target needs. Create and maintain documents of needed BI Data Mapping. Conduct source data profiling for anomalies and information summaries. Interpret data from a business perspective to aid in the modeling of the data targets such as business intelligence reports or an enterprise data warehouse. Supports the strategy for how data will be documented, handled, stored and processed to support the requirements from across all business units. Provides support for the ETL and BI developers for all data related analysis, questions and issues. Maintain accountability of Data Mapping using our Software Development Life Cycle (SDLC). Contribute to and enforce the use of the Business Intelligence solution. Support key metrics and shared goals that determine success for a particular area. Qualifications:  3-5+ years of experience in business intelligence analysis surrounding system knowledge and data mapping. Advanced experience of technical systems from both the application and data repository points of view. Advanced experience in SQL proficiency (T-SQL, MySQL, and PostgreSQL). Advanced experience in extracting, transforming and mining of data. Advanced experience with BI tools such as Tableau and ETL tools like SSIS. Advanced experience working with various data sources such as AWS Redshift, Postgres, SQL Server, Amazon Athena, Excel, Flat Files, etc. Advanced experience working with large data sets from sources such as AWS Redshift, Postgres, SQL Server, etc. Experience working with an Enterprise Data Warehouse and Dimensional Databases is a plus. Advanced experience of the SDLC and how BIA processes fit into KANBAN and Scrum Frameworks. Experience with Jira and Confluence is a plus. Ability to prioritize multiple tasks and easily adjust to changing priorities. Ability to identify problems, initiate solutions, and effectively collaborate and communicate with team members. Have excellent verbal and written communication skills. Location: Remote  Location: 2202 N. Irving Street, Allentown, PA 18109  Job Type: Full-time  Experience:  SQL: 3 years (Required) Oracle: 3 years (Preferred) finding, understand and working with data in a variety of databases/files: 3 years (Required) understanding the business process of systems: 3 years (Required) data mapping: 3 years (Required) documentation of data mapping (reports): 3 years (Required) writing queries and simple database view: 3 years (Required) Microsoft Excel: 3 years (Required)", "Recruiter_First_Name": "Rita", "Recruiter_Last_Name": "Varga", "Recruiter_Email_Address": "rita.varga@shift4.com", "Company_name": "Shift4 Payments", "SetName": "Mary Gathogo_10/11/2023_Shift4 Payments_Business Intelligence Analyst II", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 3", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 1", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 2", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 2", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 3", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 2"}, {"InterviewDate": "10/10/2023", "NoofDays": -51, "LogInterviewID": 177, "QID": 2654, "Job_Title": "Product BI Analyst", "Job_Description": "About the job ABOUT US Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards! ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable. Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns. With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement. THE ROLE The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting. We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements. You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units. KEY TASKS & RESPONSIBILITIES Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Liz", "Recruiter_Last_Name": "Ostrander", "Recruiter_Email_Address": "lizostrander@auctiontechnologygroup.com", "Company_name": "ATG (Auction Technology Group)", "SetName": "Nadege Nguemo Mbouyo_10/10/2023_ATG (Auction Technology Group)_Product BI Analyst", "CandidateID": "34701", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "10/9/2023", "NoofDays": -52, "LogInterviewID": 176, "QID": 2653, "Job_Title": "Product BI Analyst", "Job_Description": "About the job ABOUT US  Auction Technology Group (ATG) is an award-winning business - won the title of Tech Business of the Year at the 2021 PLC awards!   ATG exists to revolutionize the secondary market. We believe in a world where millions of objects can be traded online at the best possible value through our channel of green commerce that gives new life to all things timeless, sustainable, or re-usable.   Our mission is to be the global marketplace connecting bidders, businesses, collectors, consigners, contractors, and consumers to an under-explored world curated by thousands of trusted auctioneer experts. ATG operates global digital marketplaces in three verticals for the auction industry: art and antiques, industrial & commercial and consumer surplus and returns.     With 350 employees worldwide and teams in the US, Canada, Germany and the UK, our mission is to lead the digital transformation of these markets through tech innovation and digital expertise. ATG will provide all necessary computing and communication equipment and will never ask a potential employee to purchase work equipment on their own account and seek reimbursement.   THE ROLE  The Data Analytics team plays a crucial role in our digital business. As a shared service function, our focus is on ensuring our stakeholders needs are being met, be that for sales, product, marketing, operations or finance. The current main outputs are enabling self-service reporting and analysis, creating new or ad hoc reports, retrospective analysis and automation of it, as well as forecasting.   We are looking for a Business Intelligence Analyst whose main focus will be empowering our Product teams with data and insight. You will be an expert BI report designer and data modeler, enhancing our suite of self-service reports in Power BI. You will have access to our Enterprise Data Warehouse to support this and you will have the chance to influence its continued development with your unique knowledge of the Product team's reporting requirements.   You will be an expert data analyst; comfortable working with large datasets of varying origin and cleanliness, using a variety of systems, and presenting findings back to the business teams. You will need excellent communication skills as this is a highly visible role working across the global organization to partner closely with the Product Managers to understand their ongoing requirements. This role will be main contact for the Product data set. It will be the primary contact for manual data extraction/manipulation as well as reporting datasets to business units.   KEY TASKS & RESPONSIBILITIES   Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Liz", "Recruiter_Last_Name": "Ostrander", "Recruiter_Email_Address": "lizostrander@auctiontechnologygroup.com", "Company_name": "Auction Technology Group", "SetName": "Nadege Nguemo Mbouyo_10/09/2023_Auction Technology Group_Product BI Analyst", "CandidateID": "34701", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 3", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 2", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 3", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 3", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 2", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 4"}, {"InterviewDate": "10/8/2023", "NoofDays": -53, "LogInterviewID": 172, "QID": 2649, "Job_Title": "Product BI Analyst", "Job_Description": "Remediating support requests related to data and data flows Collecting, interpreting and disseminating complex data Developing and maintaining reporting and dashboards to inform and empower stakeholders Partner with the business to understand their requirements and uncover where the real data challenges & opportunities lie Support and guide business users to access the data required for insight / analysis Monitor analytics and metrics results Work with the business to create detailed backlog items which can then be prioritized with the department leaders Work closely with the BI Engineer and Platform engineering team to ensure that the new datasets are implemented and deployed appropriately into the data warehouse Scrutiny of new dimensions/metrics/processes prior to release Generate and maintain good quality documentation Meet deadlines and complete projects within timeframes Keep abreast of the latest developments in technology (particularly relating to Power BI) Meet requirements for ad-hoc requests   KNOWLEDGE, SKILLS & EXPERIENCE REQUIRED  Solid experience in a business intelligence role(s) Excellent SQL skills using a platform such as SQL Server, Oracle, MySQL, AWS, TSQL Extensive experience of data visualization including proficiency in Microsoft Power BI or Looker (similar experience with Arcadia, Tableau etc will be considered) Experience translating business requirements into deliverable user stories Experience working within an Agile environment using Scrum or Kanban Experience with Salesforce CRM an advantage Experience with Google Analytics Strong background turning data insights into strategy/solutions Highly numerate and analytical with an excellent attention to detail Excellent presentation, written and verbal communications skills to both technical and business stakeholders Ability to multi-task and remain calm and focused in a high-pressure environment Previous work experience with aggregator or marketplace websites, SaaS products would be an advantage Strong written and verbal communication skills Preferred experience utilizing Google Big Query", "Recruiter_First_Name": "Matea", "Recruiter_Last_Name": "Jerkovic", "Recruiter_Email_Address": "mateajerkovic@auctiontechnologygroup.com", "Company_name": "ATG (Auction Technology Group)", "SetName": "Nadege Nguemo Mbouyo_10/08/2023_ATG (Auction Technology Group)_Product BI Analyst", "CandidateID": "34701", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 162, "QID": 2639, "Job_Title": "Data Developer II", "Job_Description": "SQL Server Developer Key Responsibilities  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. Monitors database performance and tunes to maximize efficiency. Develops new and enhances existing database objects and packages to advance functionality and automation of systems. SQL Server DeveloperIII Competencies Required  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. Self-starter with the ability to work independently while supporting a team environment. Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. Flexibility to provide after hours and weekend support on occasion to support business needs. Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. Proficient with database performance monitoring and tuning to maximize efficiency. Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems.", "Recruiter_First_Name": "Milind", "Recruiter_Last_Name": "Sethi", "Recruiter_Email_Address": "milinds@procomservices.com", "Company_name": "Woodforest National Bank", "SetName": "OLUKAYODE AKINRIMISI_10/07/2023_Woodforest National Bank_Data Developer II", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "997", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 171, "QID": 2648, "Job_Title": "Data Developer II", "Job_Description": "The Data Developer II will be responsible for developing, supporting, and enhancing database programs and reports using the SQL platform. This senior position typically handles projects of a more complex nature and serves as a resource to junior team members.  Key Responsibilities: \u00b7  Serves as a senior resource to junior team members, assisting with questions, obstacles and issue resolution. \u00b7  Collaborates with program managers, team members and developers on specific project business objectives to determine database structural requirements. \u00b7  Partners with business owners to gather and determine business requirements; analyzes data to develop or update reports, stored procedures and databases solutions. \u00b7  Monitors database performance and tunes to maximize efficiency. \u00b7  Develops new and enhances existing database objects and packages to advance functionality and automation of systems.  Competencies Required: \u00b7  Excellent customer service, problem solving, and communication skills with the ability to effectively identify and translate business user needs, and to convey complex technical information in a clear and concise manner. \u00b7  Strong organizational skills with the ability to manage timelines and prioritize workload in a high-pressure, results-oriented environment. \u00b7  Self-starter with the ability to work independently while supporting a team environment. \u00b7  Developed analytical and troubleshooting skills with strong attention to detail and high concern for data accuracy. \u00b7  Flexibility to provide after hours and weekend support on occasion to support business needs. \u00b7  Strong data analysis and mapping skills with intermediate proficiency in Microsoft database and reporting technologies and tools including Office, SharePoint, SQL Server Integration and Reporting Services and Management Studio, Visual Studio, and Team Foundation Server. \u00b7  Proficient with database performance monitoring and tuning to maximize efficiency. \u00b7  Knowledgeable in the development of new databases and enhancing existing database objects and packages to advance functionality and automation of systems. Qualifications   Minimum Qualifications/Experience: \u00b7  5-7 years\u2019 experience in a SQL Server development role required.    \u00b7  Experience in developing new and enhancing existing database objects and packages to advance functionality and automation of systems required. \u00b7  2+ years of experience monitoring database performance and tuning to maximize efficiency required. \u00b7  SQL Server Integration and Reporting Services experience required.  Formal Education & Certification: \u00b7  High School Diploma or equivalent required. \u00b7  Bachelor\u2019s degree in Computer Science, Information Systems, or related field preferred.  Work Status: \u00b7  Full-Time.  Supervisory Responsibility: \u00b7  None.  Travel: \u00b7  No travel expected.  Working Conditions: \u00b7  Conditions involve lifting no more than ten pounds, sitting most of the time, but may involve walking, moving, or standing for brief periods, and occasionally lifting and carrying articles like files, ledgers, folders, etc.", "Recruiter_First_Name": "Milind", "Recruiter_Last_Name": "Sethi", "Recruiter_Email_Address": "milinds@procomservices.com", "Company_name": "Woodforest National Bank", "SetName": "OLUKAYODE AKINRIMISI_10/07/2023_Woodforest National Bank_Data Developer II", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 166, "QID": 2643, "Job_Title": "Senior IT Business System Analyst", "Job_Description": "Summary  Under general supervision, this position will involve reviewing, researching, analyzing, monitoring, and manipulating school and business-related data within many database systems, implementing information delivery improvements, ensuring data accuracy, and creating daily, weekly, and quarterly reports and dashboards, including support ticketing processes.   Essential Functions  Demonstrates expert proficiency in the design, development, and implementation of data, reporting and database technologies and tools, Consults with businesses to resolve complex data issues Champions\u2019 efforts to extend existing data architecture to ensure new and existing user demands and application requirements are met on an ongoing basis Advise database design/code through in-depth understanding of business needs/functionalities and provides expertise in devising, negotiating, and defending database schema and data models Consults with database administration and client areas and provides solutions in resolving complex issues during the translation to a physical database design Provides knowledge and expertise of enterprise data to assist Spartan functional groups in the creation and definition of internal and external dashboards, reports, and KPIs Provides direction and guidance on reports and visualizations and ensures recommendations are aligned with user needs and capabilities Uses expertise to evaluate market trends and provide input into the selection of tools and any necessary changes to the company\u2019s data management, reporting and visualization environment Serve as a mentor to other data analyst within IT and throughout organization Accomplishes engineering and organization mission by completing related results as needed  Knowledge / Skills:  Experience in consultative requirements elicitation, design and building of data management, reporting, and visualization solutions Motivated and able to quickly learn new technologies and tools 5+ years report and analysis development experience Experience scripting in TSQL and other database technologies Experience in SSRS or equivalent technologies Experience with PowerBI, Tableau or equivalent technologies (Power BI development/design experience is a plus) Ability to develop, design and solution specifications Demonstrated record of perusing and applying new advancements in information technology to solving business problems related to data management, reporting, and data visualization Must be a self-starter with effective oral and written communication skills. Must also be customer-service oriented and an experienced problem solver who seeks assistance when necessary Education and Work Experience  High School diploma or GED required Bachelor\u2019s degree preferred in computer science or related discipline, or equivalent work experience required 5 to 7 years\u2019 experience directly related to duties and responsibilities specified", "Recruiter_First_Name": "Preeti", "Recruiter_Last_Name": "Singh", "Recruiter_Email_Address": "PREETI.SINGH@msg.paycomonline.com", "Company_name": "Spartan College", "SetName": "Talq Tera_10/07/2023_Spartan College_Senior IT Business System Analyst", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 169, "QID": 2646, "Job_Title": "Power BI Specialist", "Job_Description": "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus)", "Recruiter_First_Name": "Kelly", "Recruiter_Last_Name": "Dye", "Recruiter_Email_Address": "kdye@acronym.com", "Company_name": "Acronym US", "SetName": "Mary Gathogo_10/07/2023_Acronym US_Power BI Specialist", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "6.25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "136", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "11", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 165, "QID": 2642, "Job_Title": "Sr Data Analyst", "Job_Description": "Sr Data Analyst Partnered with a client who simplifies shipping logistics for merchants and warehouses, offering customized API solutions that streamline the shipping process and make logistics a seamless and stress- free experience. Position Overview: As a Senior Data Analyst, you will play a key role in providing valuable insights and supporting data- driven decision-making processes. You will work closely with cross-functional teams to analyze complex data sets, identify trends, and help drive business growth. The ideal candidate will have a minimum of 5 years of experience in data analysis, strong proficiency in VBA, and advanced MS Excel skills.  Key Responsibilities: \uf0b7 Perform in-depth data analysis to identify trends, patterns, and insights. \uf0b7 Create and maintain complex Excel models using VBA to automate repetitive tasks and streamline processes. \uf0b7 Create macros that can be changed easily in a fast-changing environment. \uf0b7 Provide recommendations for process improvements based on data analysis. \uf0b7 Stay updated on industry trends and best practices in data analysis. \uf0b7 Mentor and provide guidance to junior analysts when necessary. Qualifications: \uf0b7 Bachelor&#39;s degree in a related field (e.g., Statistics, Mathematics, Computer Science). \uf0b7 Minimum of 5 years of experience as a Data Analyst. \uf0b7 Proficiency in VBA for Excel automation is a must. \uf0b7 Advanced skills in Microsoft Excel, including pivot tables, complex formulas, and data visualization. \uf0b7 Strong analytical and problem-solving skills. \uf0b7 Excellent communication and teamwork abilities. \uf0b7 Ability to prioritize and multi-task. \uf0b7 Attention to detail and high level of accuracy. \uf0b7 Experience with data visualization tools (e.g., Tableau, Power BI). \uf0b7 Knowledge of shipping, logistics, or eCommerce industry is not mandatory, but a plus. \uf0b7 Fluency in Mandarin is not mandatory, a plus.", "Recruiter_First_Name": "Lisa", "Recruiter_Last_Name": "Choe", "Recruiter_Email_Address": "lchoe@ledgent.com", "Company_name": "Ledgent Technology", "SetName": "Calvine  Cheptoo _10/07/2023_Ledgent Technology_Sr Data Analyst", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "251", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "6", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 170, "QID": 2647, "Job_Title": "Business Intelligence Analyst", "Job_Description": "Role Summary  This role\u2019s objectives are to develop reports in Power BI that meet our clients\u2019 expectations. We anticipate this will require consequential expertise in working with Power BI, which includes DAX programming.   Duties and Responsibilities  Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.    Qualifications and Skills  Demonstrable expertise in working with Power BI, including DAX programming. Please note that having experience is insufficient. Succeeding in this role requires demonstrable expertise building sophisticated Power BI dashboards and interfaces.  Experience successfully engaging with clients to develop user-facing reports. Excellent verbal and written communication skills. Experience with other BI tools, notably Tableau, is strongly desired, but not required.    Why Abett?   Opportunity to join a high-growth, venture backed software company, with a clear and important mission.  Competitive market salary and equity options. Flexible hours/scheduling. Work remotely. Fully paid health, dental and vision benefits available. Unlimited PTO.", "Recruiter_First_Name": "Kate", "Recruiter_Last_Name": "Lofgren", "Recruiter_Email_Address": "kate@abett.com", "Company_name": "Abett", "SetName": "Avworo  OGHENEKEVWE _10/07/2023_Abett_Business Intelligence Analyst", "CandidateID": "38457", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "21", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "46", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/7/2023", "NoofDays": -54, "LogInterviewID": 173, "QID": 2650, "Job_Title": "Business Intelligence Analyst", "Job_Description": "Engage with clients and prospective clients to understand their analytical needs. Generally, these audiences consist of benefits and finance staff at Fortune 500 enterprises.  Engage with Abett\u2019s data engineering, information security, and software development teams, to ensure appropriate data is expressed in dimensional models.  Develop template reports in Power BI to meet clients\u2019 needs.  Engage with clients to ensure reports are functioning to client expectations and requirements.", "Recruiter_First_Name": "Kate", "Recruiter_Last_Name": "Lofgren", "Recruiter_Email_Address": "kate@abett.com", "Company_name": "Abett", "SetName": "Avworo  OGHENEKEVWE _10/07/2023_Abett_Business Intelligence Analyst", "CandidateID": "38457", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "43.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "869", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "60", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "10/6/2023", "NoofDays": -55, "LogInterviewID": 164, "QID": 2641, "Job_Title": "Power BI Reporting Specialist", "Job_Description": "This is the job\u2026.  Support month end reporting activities and QA. Production support, troubleshoot and resolve issues / discrepancies reported. Understand business requirements in BI context and design data models to transform raw data into meaningful insights. Perform DAX queries and functions in Power BI. Develop or enhance reusable data model and visual templates in Power BI. Work with engineering and data teams to set up reporting related automations. This is you\u2026.  3-4 years of experience in Power BI (must) Evidence of prior successful Power BI deliveries (must) Practical knowledge of dimensional modeling / star schema (must) Strong communication skills (must) Ability to deliver on a deadline (must) Ability to manage multiple priorities at the same time (must) Power BI certification (strong plus) Familiarity with digital search marketing (strong plus) Familiarity with marketing in general (plus) Experience training others in job skills (plus) Skills\u2026.  Power BI expertise (must) Data modeling proficiency including both M and Dax (must) Data visualization proficiency (must) Excel proficiency (must) Other BI Tool experience, e.g., Tableau or Data Studio (plus) General SQL experience, particularly MySQL (plus) UX design experience (plus) The annual base salary for this role ranges from $80,000 - $90,000. Starting pay will be based on several factors and commensurate with qualifications, experience, and work location.  Benefits/Perks:  Unlimited Paid Time Off Program Great benefit plans: Medical, Dental, Vision, FSA, Pre-tax Transit, Short Term Disability, Life Insurance, 401k AcronymCares Matching Gifts program for employee donations DE&I Employee Resource Groups", "Recruiter_First_Name": "Kelly", "Recruiter_Last_Name": "Dye", "Recruiter_Email_Address": "kdye@acronym.com", "Company_name": "Acronym US", "SetName": "Mary Gathogo_10/06/2023_Acronym US_Power BI Reporting Specialist", "CandidateID": "36877", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 5", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 5", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "10/6/2023", "NoofDays": -55, "LogInterviewID": 157, "QID": 2634, "Job_Title": "Sr. Data Analyst", "Job_Description": "Job Responsibilities  \u00b7 Collaborate closely with cross-functional teams in engineering, supply chain, and production to identify key performance metrics and indicators.  \u00b7 Design, develop, and implement comprehensive Power BI dashboards and reports that provide actionable insights for program management and decision-making.  \u00b7 Utilize DAX language to create advanced calculations, measures, and transformations to ensure accurate representation of metrics in reports.  \u00b7 Build and maintain complex data models with a keen focus on establishing accurate and efficient table relationships, enabling seamless data flow and analysis.  \u00b7 Analyze large datasets to extract valuable insights, identify trends, and present findings in a clear and concise manner.  \u00b7 Work closely with stakeholders to understand their data needs and translate requirements into effective data visualizations.  \u00b7 Lead the development of data-driven solutions that enhance program efficiency, quality, and overall performance.  \u00b7 Establish data quality standards and procedures to ensure accuracy, consistency, and reliability of metrics.  \u00b7 Stay current with industry trends, best practices, and advancements in data visualization, DAX language, and program management techniques.  Education/Experience  \u00b7 Bachelor's degree in a relevant field such as Engineering, Supply Chain Management, Business Analytics, or a related discipline. Master's degree is a plus.  \u00b7 Proven experience (5+ years) in utilizing Power BI for data visualization and creating advanced dashboards and reports.  \u00b7 Demonstrated expertise in setting up and managing metrics for complex programs within engineering, supply chain, or production environments.  \u00b7 Proficiency in the DAX language is essential, with the ability to create complex calculations and measures.  \u00b7 Strong aptitude for establishing and optimizing table relationships to ensure accurate data modeling.  \u00b7 Excellent analytical skills and the ability to transform raw data into meaningful insights.  \u00b7 Effective communication skills to collaborate with technical and non-technical stakeholders.  \u00b7 Experience in data manipulation, transformation, and cleaning for accurate analysis.  \u00b7 Detail-oriented mindset with a commitment to data accuracy and quality.  \u00b7 Ability to work independently, prioritize tasks, and manage multiple projects simultaneously.  \u00b7 Familiarity with engineering, supply chain, or production processes is a plus.  \u00b7 Certifications in Power BI and relevant data analysis fields are valuable.", "Recruiter_First_Name": "Luis", "Recruiter_Last_Name": "Cruz", "Recruiter_Email_Address": "lcruz@mammoth777.com", "Company_name": "Mammoth Freighters", "SetName": "LILIAN NJERI_10/06/2023_Mammoth Freighters_Sr. Data Analyst", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "62.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1696", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "46", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "5", "InterviewScore": "NULL"}, {"InterviewDate": "10/4/2023", "NoofDays": -57, "LogInterviewID": 159, "QID": 2636, "Job_Title": "Data Analyst II", "Job_Description": "EKN Engineering is a fast-growing civil engineering and technology consulting company located in Irvine, CA. We are looking for a Data Analyst II to join us on our quest to further invent and innovate.  As a Data Analyst II, you will liaise with both internal and external stakeholders to anticipate their needs and help foster a data-led culture. You should be able to work with both technical and non-technical teams to define and measure key business metrics and use them in insightful reports. The successful candidate will turn data into information, information into insight, and insight into business decisions.  Responsibilities  Interpret data, analyze results, and identify opportunities for new reporting. Validate data by continually reviewing both reports and data sources for accuracy and consistency. Create and maintain reports and dashboards in Microsoft Excel and Power BI. Administer and improve the data management system, including deployment pipelines. Establish KPI's to measure the effectiveness of business decisions. Create presentations and reports based on recommendations and findings. Work with management to prioritize business and information needs. Requirements  Proficiency with Microsoft Excel. Intermediate-level proficiency using SQL or similar query language. Exceptional problem-solving, technical, and analytical skills. Bachelors' degree in Data Analytics, Mathematics, Statistics, or related field. Experience with Microsoft Power BI or Tableau or similar data visualization software. Competence managing various aspects of a data pipeline, including data validation, data management, data analysis and data visualization. &nbsp;", "Recruiter_First_Name": "Fiona", "Recruiter_Last_Name": "Connor", "Recruiter_Email_Address": "fconnor@eknengineering.com", "Company_name": "EKN Engineering", "SetName": "Calvine  Cheptoo _10/04/2023_EKN Engineering_Data Analyst II", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "341", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "10/4/2023", "NoofDays": -57, "LogInterviewID": 163, "QID": 2640, "Job_Title": "Business Intelligence Developer", "Job_Description": "No description details", "Recruiter_First_Name": "Amanda", "Recruiter_Last_Name": "Austin", "Recruiter_Email_Address": "aaustin@brooksource.com", "Company_name": "Brooksource", "SetName": "EMMANUEL OJENIYI_10/04/2023_Brooksource_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "12.5", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "479", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "10", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "10/3/2023", "NoofDays": -58, "LogInterviewID": 158, "QID": 2635, "Job_Title": "Power BI Reports Developer", "Job_Description": "\"Description: Leading with our people, Digital Consultants' mission is to deliver the highest level of professional solutions while being a trusted partner and advisor to our customers. With a culture of practicality, opportunity, and creativity we remain dedicated to being honest, trustworthy, respectful, and ethical in everything we do. We are a certified SBA 8(a) small-disadvantaged business that supports multiple IT customers within the Federal, civilian, and private sectors. Digital Consultants also offers our employees growth opportunities, competitive wages, and a full benefits package. Our founding principles, Fairness and Common Sense make working here more than a job, it is the Digital family.  Digital Consultants is seeking a Power BI Reports Developer to join our team! As the Power BI Reports Developer, you will be designing ETL processes and working directly with developers, testers, and other roles active to translate product roadmap features into well-defined product requirements including features, user stories, and acceptance test criteria.  Duties to include:  Maintain and support data analytics platforms Develop and update relevant technical documentation Collaborate directly with analysts and end users to integrate systems and create effective reports Develop and execute database queries and conduct analyses as needed Maintain status updates for all assigned ad hoc report requests Knowledge of SQL queries, SQL Server Reporting Services (SSRS), and MS SQL Server An expert that understands the Power BI platform and its tools very well. Takes complete responsibility for the development and administration of BI tools including transforming raw data into valuable and meaningful insights in the form of appealing dashboards and reports. Recreating existing reports from the current platform into Power BI.\"\" Build complex dimensional data models and reports from the bottom up Audit existing Power BI efforts with a focus on improvement Visualize compelling data stories on the report canvas Produce KPIs with user-friendly display dashboards Collaborate with client's data team Familiarity with data warehouse design (e.g. dimensional modeling) and data mining Requirements: Active DOD Secret Clearance IAT level II Certification: GSEC", "Recruiter_First_Name": " Security+CE", "Recruiter_Last_Name": " or", "Recruiter_Email_Address": " SSCP Power BI Data Analyst or associate degree in a related field 5+ Power BI specific focus Experience w/ DevOps Framework Experience visualizing data in Power BI Desktop and Power BI Service Extensive experience with building dashboards and custom reports in Power BI Strong analytical orientation and problem-solving skills Focusing on backend work with very large and intricate data models to create high-performing dashboards and paginated reports Rebuild existing SAP Business Intelligence-based reports", "Company_name": " utilizing PowerBi dashboards Design effective BI data models Evaluate and improve existing BI systems\"", "SetName": "Rufus", "CandidateID": "Benhur", "SurveyResponse": "rufus.benhur@digitalconsultants.org", "InterviewType": "Digital Consultants, LLC", "Preparationscore": "Avworo  OGHENEKEVWE _10/03/2023_Digital Consultants, LLC_Power BI Reports Developer", "AutoInterviewsCount": "38457", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "Recruiter", "MentorInterviewsDuration": "18.75", "Mentor": "0", "Applicant": "NULL", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1490", "InterviewScore": "Sowmya Attur"}, {"InterviewDate": "10/3/2023", "NoofDays": -58, "LogInterviewID": 151, "QID": 2629, "Job_Title": "Data Visualization Manager", "Job_Description": "Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms", "Recruiter_First_Name": "Kaylee", "Recruiter_Last_Name": "Pearson", "Recruiter_Email_Address": "kpearson@theshipyard.com", "Company_name": "The Shipyard", "SetName": "Talq Tera_10/03/2023_The Shipyard_Data Visualization Manager", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "25", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "3990", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "9/26/2023", "NoofDays": -65, "LogInterviewID": 147, "QID": 2625, "Job_Title": "Business intelligence Analyst 2", "Job_Description": "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred 5-7 years experience is preferred Basic knowledge of programming languages in order to comprehend reading code and basic functions. Ability to create business solutions that increase competitive advantage. Ability to exercise good judgment in selecting methods and techniques for obtaining solutions. Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines. Ability to solve technical problems/ processes and understand complex details. Ability to increase operating efficiency by producing high quality technical solutions. A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level. Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must.", "Recruiter_First_Name": "Jeevana", "Recruiter_Last_Name": "Adusumilli", "Recruiter_Email_Address": "n/a", "Company_name": "Microsoft", "SetName": "ANNE NDUNGU_09/26/2023_Microsoft_Business intelligence Analyst 2", "CandidateID": "37048", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "43.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "778", "MentorInterviewsCount": "1", "MentorInterviewsDuration": "63", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/24/2023", "NoofDays": -67, "LogInterviewID": 144, "QID": 2622, "Job_Title": "Business intelligence Analyst 2", "Job_Description": "Bachelor's degree in technical field such as computer science, computer engineering or related field required. MBA or other related advanced degree preferred  5-7 years experience is preferred   Basic knowledge of programming languages in order to comprehend reading code and basic functions.   Ability to create business solutions that increase competitive advantage.   Ability to exercise good judgment in selecting methods and techniques for obtaining solutions.   Project management skills in order to handle diverse projects, often times simultaneously, and meet aggressive deadlines.   Ability to solve technical problems/ processes and understand complex details.   Ability to increase operating efficiency by producing high quality technical solutions.   A high level of interpersonal and verbal communication skills necessary to relate to other people at their systems knowledge level.   Degrees or certifications required : Degree is preferred. Does not need to have MBA. Coding knowledge is a plus and Power BI is a must.", "Recruiter_First_Name": "Jeevana", "Recruiter_Last_Name": "Adusumilli", "Recruiter_Email_Address": "n/a", "Company_name": "Microsoft", "SetName": "ANNE NDUNGU_09/24/2023_Microsoft_Business intelligence Analyst 2", "CandidateID": "37048", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "37.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "791", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/24/2023", "NoofDays": -67, "LogInterviewID": 146, "QID": 2624, "Job_Title": "power BI Developer", "Job_Description": "- Open to W-2 candidates - Building Power BI dashboards - Some sort of risk environment (Could be cyber/operations/etc..) OR another financial institution", "Recruiter_First_Name": "Wendy", "Recruiter_Last_Name": "Rociles", "Recruiter_Email_Address": "jobs@edward.com", "Company_name": "Edward Jones", "SetName": "Nadege Nguemo Mbouyo_09/24/2023_Edward Jones_power BI Developer", "CandidateID": "34701", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "346", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "9/21/2023", "NoofDays": -70, "LogInterviewID": 136, "QID": 2617, "Job_Title": "Lead SQL Developer", "Job_Description": "Job Description  This person will be responsible for maintaining the quality and direction of data solutions in support of our Finance team.  The role requires knowledge of database development tools and services, with an emphasis on SSAS.  Qualifications  Experience Required: 7 \u2013 10 Years Education Required: Bachelors Degree Minimum seven (7+) years experience in a multi-disciplined IT environment with strong expertise in data analysis, data modeling, data governance and involvement in enterprise architecture Minimum of five (5+) years experience, hands-on, data profiling and performance tuning databases and data marts with Oracle and / or SQL Server Experience with performance improvement using Azure and/or on-premise Microsoft technologies Experience taking a leading role in architecting, designing and developing solutions exceeding business expectations Knowledge of interpreting business processes and requirements and translating them into logical and physical data models adhering to documented standards and best practices Excellent problem solving and communication skills with experience in interacting with business and technical teams at all levels Responsibilities  This person will be ultimately responsible for performing the data analysis and profiling necessary to provide direction, standards, and implementation of data management solutions associated with data ingestion, transformation, integration, and analytics Engage in full stack Microsoft BI development activities to deploy usable and measurable projects meeting business needs leveraging tools such as SSIS, SSAS, stored procedures and Power BI Write complex Stored procedures to harmonize data sets for reporting Setup dimensional/tabular data models Setup and deploy row/object level security Develop and publish Power BI reports Provide input and implement solutions to drive the continuous improvement of the development and support teams Participate in data integration, business intelligence (BI), and enterprise information management programs by rationalizing data processing to support reuse", "Recruiter_First_Name": "Sarah", "Recruiter_Last_Name": "Weigel", "Recruiter_Email_Address": "sarah.weigel@gravityitresources.com", "Company_name": "Gravity IT Resources", "SetName": "OLUKAYODE AKINRIMISI_09/21/2023_Gravity IT Resources_Lead SQL Developer", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "9/21/2023", "NoofDays": -70, "LogInterviewID": 137, "QID": 2618, "Job_Title": "BI Developer/Analyst", "Job_Description": "With minimal supervision, completes the technical design, build, testing, and documentation of Power BI reports based on on-premises and SaaS data sources. The role is within a large and complex ERP implementation project and will primarily support the PMO in creating reporting solutions for project KPI tracking as well as data analysis and validation to support project activities.  * Education:-  bachelor\u2019s degree or equivalent experience is required  * Experience:- Minimum of four (4) to six (6) years of progressive, relevant information technology experience", "Recruiter_First_Name": "Bharath", "Recruiter_Last_Name": "Amudala", "Recruiter_Email_Address": "bharath.amudala@peopletech.com", "Company_name": "People tech group", "SetName": "ANNE NDUNGU_09/21/2023_People tech group_BI Developer/Analyst", "CandidateID": "37048", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1793", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "9/21/2023", "NoofDays": -70, "LogInterviewID": 134, "QID": 2615, "Job_Title": "Senior Developer (Tableau + ETL)", "Job_Description": "Immediate Hire \u2013 Senior Developer (Tableau + ETL) - Irving, TX  (DAY 1 ONSITE) Hybrid    Role: Senior Developer (Tableau + ETL)  Location: Irving, TX  (DAY 1 ONSITE) Hybrid  Duration: Fulltime     Required skills (technical & professional) : \u2022       8+ years of overall IT experience. \u2022       4+ years\u2019 experience working with Tableau with ETL experience. \u2022       You will work closely with customers, product owners and dev team to ensure requirements and business objectives are translated into working technical designs \u2022       Drive end-to-end design, development and implementation of complex solutions, often using new technologies \u2022       Design and develop Tableau reports and dashboards that will yield actionable insights that present the answers to business questions \u2022       Code and modify SQL/ETL based on dashboard requirements \u2022       Run ad-hoc analysis for Product and Business Managers using standard query languages and operationalize for repeatable use via Tableau reporting suite", "Recruiter_First_Name": "Thomas", "Recruiter_Last_Name": "Martin", "Recruiter_Email_Address": "thomas@itbtalent.com", "Company_name": "Tech M/Citi Bank", "SetName": "EMMANUEL OJENIYI_09/21/2023_Tech M/Citi Bank_Senior Developer (Tableau + ETL)", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "9", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/20/2023", "NoofDays": -71, "LogInterviewID": 133, "QID": 2614, "Job_Title": "Power BI and Reporting Analyst", "Job_Description": "We are looking for a savvy Power BI and Reporting Analyst, with previous experience in the retail energy space, to join our growing team of enterprise data and analytics experts. The hire will be responsible for advancing our reporting and analytics footprint. The ideal candidate is an experienced BI Analyst who enjoys optimizing data reporting processes and driving insights.  ESSENTIAL SKILLS AND EXPERIENCE Successful job applicants will be able to perform these functions. Reasonable accommodations will be made to enable individuals with disabilities to perform essential functions. \u2022 5+ years of experience in a related role. \u2022 3+ years of experience using Microsoft PowerBI. \u2022 2+ years of experience working in the retail energy space. \u2022 Advanced working SQL knowledge and experience working with relational databases, query authoring (SQL) as well as working familiarity with a variety\u00a0of\u00a0databases.", "Recruiter_First_Name": "Anthony", "Recruiter_Last_Name": "Hathaway", "Recruiter_Email_Address": "ahathaway@wiredhivetech.com", "Company_name": "Wired Hive", "SetName": "OLUKAYODE AKINRIMISI_09/20/2023_Wired Hive_Power BI and Reporting Analyst", "CandidateID": "31661", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "OLUKAYODE AKINRIMISI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "9/18/2023", "NoofDays": -73, "LogInterviewID": 127, "QID": 2608, "Job_Title": "Business Data Analyst", "Job_Description": "LivePerson (NASDAQ: LPSN) is a global leader in trustworthy and equal AI for business. Hundreds of the world's leading brands \u2014 including HSBC, Chipotle, and Virgin Media \u2014 use our Conversational Cloud platform to engage with millions of consumers safely and responsibly. We power a billion conversational interactions every month, providing a uniquely rich data set and safety tools to unlock the power of Generative AI and Large Language Models for better business outcomes.  At LivePerson, we foster an inclusive workplace culture that encourages meaningful connection, collaboration, and innovation. Every mind is invited to ask questions and actively seek new ways to achieve success and reach their full potential. We operate as one with a growth mindset. This means spotting opportunities, solving ambiguities and seeking effective solutions to challenges that make things better.   Overview:  Reporting to the Director of Data, Models, and Decisions (DMD), the successful candidate has an opportunity to join an innovative data science and engineering team that's operationalizing data across the organization. We see model-driven processes and workflows as a means to reduce uncertainty, reveal opportunity, and generate operational leverage that collectively create a new dimension of competitive advantage and lay the foundation for new revenue streams.  You will: Apply cutting-edge data visualization techniques to reveal actionable insights to business users Solve challenging data problems through in-depth analysis of many systems Apply statistical analysis to summarize data and forecast trends Participate in Data Requirement Gathering, Data Preparation and devise proper Data Interpretation Ensure data is maintained in our platform and all systems with best quality, always considering automation and scalability of your solutions Evangelize our products and train others on Data Visualization and presentation techniques, enabling them to create dashboards and reports themselves  You have: Demonstrated ability to uncover insights and relationships across numerous datasets 5+ years of experience analyzing data and creating dashboards and reports (Looker / PowerBI / Tableau / Metabase) 5+ years of experience interpreting and writing advanced SQL 2+ years of experience in Python and good working knowledge of pandas and matplotlib Bachelor's degree in Computer Science, Statistics, or another quantitative field Ability to work closely with teammates in a highly collaborative environment and simultaneously be a self-starter with strong individual contributions Excellent communication and presentation skills  Benefits: The salary range for this role will be between $88,000 to $120,000 Final compensation will be determined by a variety of factors, including, but not limited to, your location, skills, experience, education, and/or certifications. During the phone screening, the recruiter will provide the location-specific salary range for this role. Regardless of your personal situation or where you are in the world, LivePerson offers comprehensive and great benefits programs to meet your needs:  Health: medical, dental, vision and wellbeing. Time away: Public holidays and discretionary PTO package for flexible days off with manager approval. Financial: 401K, ESPP, Basic life and AD&D insurance, long-term and short-term disability Family: parental leave, maternity support, fertility services. Development: tuition reimbursement, native AI learning. Additional: 24/7 access to professional counselors, voluntary insurance coverage, exclusive perks and discounts. #LI-Remote", "Recruiter_First_Name": "Dan", "Recruiter_Last_Name": "Ashburn", "Recruiter_Email_Address": "dashburn@liveperson.com", "Company_name": "LivePerson", "SetName": "LILIAN NJERI_09/18/2023_LivePerson_Business Data Analyst", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1788", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/15/2023", "NoofDays": -76, "LogInterviewID": 126, "QID": 2607, "Job_Title": "Business Intelligence Developer", "Job_Description": "What you\u2019ll do as the BI Analyst:   Help elevate the Operations and Technology teams by diving deep into data, exploring opportunities for gaining insight and extracting value from the data, and finally, contributing actively to the dashboarding and reporting needs within the company. Act as SME for Snapsheet\u2019s analysis data model, supporting customers and in-house users in finding the information they need for reporting. Collaborate with development and product to provide schema modeling recommendations  Assist in validating launch data from new product releases  Build and maintain documentation on the products you\u2019re building   What we are looking for in a BI Analyst: B.S. or higher degree in related fields 4+ years of experience as a BI analyst (or related role) Proficiency in leveraging SQL to build reports  Experience in building, maintaining, and managing reports & dashboards using data visualization tools (i.e. Tableau, Qlik, Sisense) Self-starter mentality  Nice to haves: Previous experience with AI or ML is a plus  Previous experience pulling metrics or analytics for an operations department/organization", "Recruiter_First_Name": "Kyrsa", "Recruiter_Last_Name": "Galyan", "Recruiter_Email_Address": "kyrsa.galyan@snapsheet.me", "Company_name": "Snapsheet", "SetName": "Mary Gathogo_09/15/2023_Snapsheet_Business Intelligence Developer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "9", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/15/2023", "NoofDays": -76, "LogInterviewID": 129, "QID": 2610, "Job_Title": "Tableau Administrator", "Job_Description": "Responsible for impact analysis, identifying common BI patterns, L3 support queries, and more.", "Recruiter_First_Name": "Yolanda", "Recruiter_Last_Name": "Rountree", "Recruiter_Email_Address": "Lesli.Martinez-Torres@ey.com", "Company_name": "Ernst & Young, LLP", "SetName": "EMMANUEL OJENIYI_09/15/2023_Ernst & Young, LLP_Tableau Administrator", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "8", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/14/2023", "NoofDays": -77, "LogInterviewID": 122, "QID": 2603, "Job_Title": "Tableau Developer", "Job_Description": "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:   At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Recruiter_First_Name": "David", "Recruiter_Last_Name": "Dalrymple", "Recruiter_Email_Address": "david.dalrymple@cibr.com", "Company_name": "CIBR Warriors - BSA", "SetName": "EMMANUEL OJENIYI_09/14/2023_CIBR Warriors - BSA_Tableau Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/14/2023", "NoofDays": -77, "LogInterviewID": 123, "QID": 2604, "Job_Title": "Tableau developers", "Job_Description": "The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions. The successful candidates will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.   Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. Degree in computer science, information systems, or related field or 10 years comparable experience in above PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Recruiter_First_Name": "Dave", "Recruiter_Last_Name": "Dalrymple", "Recruiter_Email_Address": "david.dalrymple@cibr.com", "Company_name": "Bridgesecurityadvisors", "SetName": "EMMANUEL OJENIYI_09/14/2023_Bridgesecurityadvisors_Tableau developers", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "71", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/14/2023", "NoofDays": -77, "LogInterviewID": 120, "QID": 2601, "Job_Title": "Data Engineer - Consultant/Senior", "Job_Description": "DATA ENGINEER \u2013 CONSULTANT/SENIOR  Lotis Blue Consulting is a growth advisory that helps clients grow and transform their organization to achieve their business goals. We apply expertise in behavioral and data science to set business and go-to-market strategy and then improve organization alignment to enable effective execution. We are looking for data and analytics-savvy professionals to join our Chicago-based team of consultants who have proven Data Engineering expertise and experience working with other data analysts and project resources. This role is client-facing and will be a fully-fledged member of the client service project team helping us to identify, understand and solve complex problems.  PRIMARY RESPONSIBILITIES Work with the Lotis Blue team to develop hypotheses that explain business problems or opportunities, and then create the analytical work plan to test them Create and manage highly structured data requests that acquire the right information in the right format to execute on the analytical work plan Serve as lead point of contact with the client and be accountable for all matters related to data acquisition, cleaning, integration, management, transformation, interpretation, and analytics Work with Power BI or Tableau to present and visualize new insights or reveal complex relationships between variables in a clear, accurate, and compelling manner that supports evolving ideation Lead discussions internally around the relationship between different data elements to add to the Lotis Blue team\u2019s knowledge, awareness, clarity, and depth in addressing the client situation and potential solutions Develop and provide meaningful insights and relevant points-of-view on complex concepts directly to clients through simple, plainspoken materials Contribute to leading-edge thinking that deepens the Firm\u2019s capabilities in data science and engineering and differentiates Lotis Blue in the market QUALIFICATIONS & EXPERIENCES Bachelor\u2019s degree in computer science, mathematics, engineering or related field At least two years of experience working on an analytics or data science team Experience communicating directly with clients and addressing business problems through analytics Passion for learning and track record of keeping up to date on technologies, platforms, and tools Some travel may be required REQUIRED KNOWLEDGE, SKILLS & CAPABILITIES Business acumen Teamwork and collaboration Critical thinking and ideation Project management Experience with and capability to execute on: Production databases (e.g., SQL Server, MongoDB) and related administrative tools (e.g., SQL Management Studio, Navicat) Python (preferable) or R Business Intelligence tools (e.g., Power BI, Tableau) PREFERRED KNOWLEDGE, SKILLS & CAPABILITIES Working knowledge of Azure Experience managing databases in the cloud (as well as AWS) Working knowledge of data transformation tools (e.g., Alteryx) Experience operationalizing data pipelines to support analytics in a production environment Coursework or qualification in Machine Learning Experience applying ML techniques in real world business scenarios", "Recruiter_First_Name": "Andrew", "Recruiter_Last_Name": "Harris", "Recruiter_Email_Address": "aharris@lbconsulting.com", "Company_name": "Lotis Blue Consulting, LLC", "SetName": "Mary Gathogo_09/14/2023_Lotis Blue Consulting, LLC_Data Engineer - Consultant/Senior", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "8", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/13/2023", "NoofDays": -78, "LogInterviewID": 125, "QID": 2606, "Job_Title": "Associate BI Developer", "Job_Description": "Salary in the $60-80K range + 10-20% bonus.  Here's some info on the need - MUST have  at least one year of experience with SQL, ETL, SSRS, and Power BI experience (data modeling, data viz, dashboarding, ad hoc reporting).  Seeking an Associate Business Intelligence (BI) Developer to contribute to the creation of BI solutions, transforming raw data into valuable insights.   Key Responsibilities:  \u2022   Assess requests for data interfaces, perform data profiling, and determine optimal methods for request fulfillment  \u2022    Translate diverse business requirements into precise technical specifications  \u2022     Construct data models to support data visualizations, interactive dashboards, and ad hoc data inquiries  \u2022    Engage in collaborative efforts with fellow developers and end-users as requests progress through their life cycle  \u2022     Conduct unit testing and quality assurance assessments on data models and reports  \u2022   Produce, review, interpret, and troubleshoot intricate code while adhering to established standards  \u2022   Investigate and resolve unforeseen work items, communicating findings promptly to the team and end users  \u2022    Evaluate and enhance our existing BI system   Essential Qualifications:  \u2022    Minimum of 1 year of experience in BI development  \u2022     Proficiency in SQL, SSRS, Excel, and Power BI  \u2022    Familiarity with relational databases, with a preference for understanding SQL Server Database Management Systems (RDBMS) principles  \u2022    Proficient in ETL processes and skilled in implementing data transformations using SQL and Power BI  \u2022     Basic knowledge of source control is advantageous", "Recruiter_First_Name": "Shaun", "Recruiter_Last_Name": "Fitzgerald", "Recruiter_Email_Address": "shaun.fitzgerald@jobot.com", "Company_name": "Jobot", "SetName": "Calvine  Cheptoo _09/13/2023_Jobot_Associate BI Developer", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1346", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/12/2023", "NoofDays": -79, "LogInterviewID": 119, "QID": 2600, "Job_Title": "Tableau Developer", "Job_Description": "This contract is W2 ONLY, no C2C.   The responsibilities of a tableau developer include creating technical solutions within Tableau, creating data strategies, and designing and executing tests for the solutions.    The successful candidate will have a broad understanding of the business landscape (Ideally in Hospitality and/or Finance), strong analytical skills, and the ability to design reports. Strong written and verbal communication, the ability to work as part of a team, and proficiency in reporting analysis tools are essential.  Responsibilities and Requirements:  At least 3 years primary job responsibility in developing and maintaining advanced reporting, analytics, dashboards and other solutions withing Tableau. Demonstrable data analysis, data validation, and data mapping/design. At least 4 years of experience in reviewing and improving existing systems and collaborating with teams to integrate new systems. Experience conducting Tableau unit tests and developing database queries to analyze the effects and troubleshoot any issues. Skill and ability to demonstrate and articulate an understanding of SQL, rational databases, and data normalization. PowerBI and experience in use of other query and reporting analysis tools a plus. Competency in Excel advanced functionality (macros, pivot tables, etc.) a plus.", "Recruiter_First_Name": "David", "Recruiter_Last_Name": "Dalrymple", "Recruiter_Email_Address": "david.dalrymple@cibr.com", "Company_name": "CIBR Warriors", "SetName": "EMMANUEL OJENIYI_09/12/2023_CIBR Warriors_Tableau Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/12/2023", "NoofDays": -79, "LogInterviewID": 116, "QID": 2597, "Job_Title": "Senior BI Architect", "Job_Description": "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Recruiter_First_Name": "Colleen", "Recruiter_Last_Name": "Murray", "Recruiter_Email_Address": "cmurray@acgme.org", "Company_name": "ACGME", "SetName": "Mary Gathogo_09/12/2023_ACGME_Senior BI Architect", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/12/2023", "NoofDays": -79, "LogInterviewID": 117, "QID": 2598, "Job_Title": "Senior BI Architect", "Job_Description": "Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions. ESSENTIAL FUNCTIONS AND RESPONSIBILITIES Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned. SUPERVISORY RESPONSIBILITY Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management. QUALIFICATIONS Minimum Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems. REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.", "Recruiter_First_Name": "Colleen", "Recruiter_Last_Name": "Murray", "Recruiter_Email_Address": "cmurray@acgme.org", "Company_name": "ACGME", "SetName": "Mary Gathogo_09/12/2023_ACGME_Senior BI Architect", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "282", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/11/2023", "NoofDays": -80, "LogInterviewID": 118, "QID": 2599, "Job_Title": "Data Integration Engineer", "Job_Description": "Insight Global is looking for a junior data integration engineer to join one of our clients in Midlothian VA. The role is hybrid on-site, 3 days per week. The engineer will be apart of the business systems solutions team. The ideal candidate would be responsible for coordinating and processing requests for SQL data integration work, validate requirements, identify system needs, recommend solutions, and work with other team members to develop end to end solutions.  This candidate would work with business lines and the data team to identify data sources, create data flow diagrams and document the processes.  Additional Responsibilities Include:  -Develop complex data structures and workflows to support processes utilizing MS SQL, custom integration tools and other resources.  -Stay informed of ways the organization uses data and makes recommendations as needed to improve efficiencies.  -Monitors and troubleshoot jobs and data issues.  -Coordinate integration changes as source systems are modified.", "Recruiter_First_Name": "Virginia", "Recruiter_Last_Name": "Griffith", "Recruiter_Email_Address": "Virginia.Griffith@insightglobal.com", "Company_name": "Insight Global", "SetName": "Avworo  OGHENEKEVWE _09/10/2023_Insight Global_Data Integration Engineer", "CandidateID": "38457", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "9/10/2023", "NoofDays": -81, "LogInterviewID": 114, "QID": 2595, "Job_Title": "SQL Developer", "Job_Description": "Required Skills and Experience *  5-7 years of experience in a SQL Development role 3+ years of experience using SSIS/SSRS for automated data imports and hands-on report/parameter creation. 3+ years creating queries within Visual Studio Experience creating stored procedures and views within SQL in a work environment Experience working with Microsoft Server 2012 or newer .NET experience- C# or VB.NET ETL Development experience     Nice to Have Skills and Experience  Experience utilizing Healthcare Information Systems and Databases Bachelor's Degree in computer science or any related field     Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "Recruiter_First_Name": "Brendan", "Recruiter_Last_Name": "Barker", "Recruiter_Email_Address": "Brendan.Barker@insightglobal.com", "Company_name": "Community First Health Plans", "SetName": "AYODEJI OLAWOYE_09/10/2023_Community First Health Plans_SQL Developer", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/8/2023", "NoofDays": -83, "LogInterviewID": 110, "QID": 2592, "Job_Title": "Business Intelligence Developer", "Job_Description": "Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.", "Recruiter_First_Name": "Daniela", "Recruiter_Last_Name": "Aguayo", "Recruiter_Email_Address": "Daniela.Aguayo@scipax.com", "Company_name": "Spalding Consulting", "SetName": "EMMANUEL OJENIYI_09/08/2023_Spalding Consulting_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "9/8/2023", "NoofDays": -83, "LogInterviewID": 107, "QID": 2589, "Job_Title": "BI Reporting", "Job_Description": "As a Business Solution Architect, you will\u2026 lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design. Lead the Functional team. Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "Recruiter_First_Name": "Dana", "Recruiter_Last_Name": "Turner", "Recruiter_Email_Address": "Dana.Turner@itineris.net", "Company_name": "Itineris", "SetName": "LILIAN NJERI_09/07/2023_Itineris_BI Reporting", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "4", "InterviewScore": "NULL"}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 103, "QID": 2585, "Job_Title": "Power Platform Developer", "Job_Description": "Responsibilities:  \u00b7 Experience Developing, deploying, and supporting SharePoint, Teams, Power Platform and SPFx applications.  \u00b7 Strong technical knowledge with Power Platform tools including Power Automate (Flow), Power Apps, Power BI, DataVerse.  \u00b7 Experience with enterprise level canvas applications utilizing Power Platform tools  \u00b7 Knowledge of Power Automate Technical REST & SOAP protocols  Desired Technical Skills:  Strong technical knowledge with Power Platform tools such as Power Automate (Flow), Power Apps, Power BI, DataVerse. Proven experience developing enterprise level applications utilizing Power Platform tools Strong experience with SharePoint administration, workflows, and development. Strong Microsoft Power Platform development experience Web development experience including, JavaScript, SQL ,XML, and CSS Design/implementation experience in the Microsoft Power Platform \u2013 MS PowerApps, Power Automate, and PowerBI. Experience :  Bachelor\u2019s in computer science, Information Systems or related field OR 4+ years of relevant work experience 3+ years of experience Developing and administrating enterprise applications Experience on teams with emphasis on development within Microsoft SharePoint environments Experience implementing and/or administrating IT service support management tools Strong interpersonal skills, oral and written communications across all levels of an organization", "Recruiter_First_Name": "Ram", "Recruiter_Last_Name": "V", "Recruiter_Email_Address": "ram@pavetalent.com", "Company_name": "Pave Talent", "SetName": "Mary Gathogo_09/07/2023_Pave Talent_Power Platform Developer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "6", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 111, "QID": 2593, "Job_Title": "Senior BI Architect", "Job_Description": "JOB OVERVIEW  Under general guidance, will be responsible for leading the design, development, and maintenance of the business intelligence (BI) platform implementation, semantic modeling, analytics, reporting, and dashboarding capabilities. This professional will work in collaboration with the appropriate data architects, data engineers, and business stakeholders to analyze, design, develop, test, and support enterprise-level BI solutions.  ESSENTIAL FUNCTIONS AND RESPONSIBILITIES  Leads the design and development of BI platform implementation, semantic modeling, analytics reporting, and dashboard capabilities. Leads the design build and management of BI models, reports, dashboards, and published apps including Power BI Report Builder for paginated reports. Manages tenants and capacity, tenant settings, gateways, workspaces, and security (such as role-based access control (RBAC) and row-level security (RLS)). Manages BI deployment model to approve user acceptance testing outcomes and determine completion of user acceptance testing activities. Oversees enterprise-level dashboard design utilizing best practices for dataset governance and report file management system. Works closely with the manager, data analytics, reporting, and quality to develop BI report governance process, procedures, and auditing. Manages and mentors a team of BI report developers in developing new reports, enhancing and maintaining existing reports, and creating and maintaining documentation for enterprise BI solutions. Collaborates with training lead to develop BI training programs. Continuously stays abreast of industry best practices. Other duties as assigned.  SUPERVISORY RESPONSIBILITY  Supervises, directs, and evaluates assigned staff member(s). Supervisory functions include: making hiring and termination decisions; prioritizing assignments and directing work; developing and overseeing employee work schedules and approving time away from work; providing and/or facilitating employee training and development; approving/processing employee concerns and problems and counseling or disciplining as appropriate; completing employee performance appraisals; determining or making recommendations regarding new hire salaries and salary changes; and acting as the liaison between employees and management.  QUALIFICATIONS  Minimum  Bachelor\u2019s degree in computer science, engineering, or a related scientific or technical discipline. Five years\u2019 experience performing duties similar to those listed. Three years\u2019 experience with Microsoft Azure database platform, including Azure Data Lake, Data Factory, and SQL. Three years\u2019 experience with Microsoft Power BI applications, Embedded Power BI, and third-party external tools such as Tabular Editor and DAX Studio as well as with Power BI Desktop, Power BI service; experience in DAX functions and Power BI modeling. Three years\u2019 experience creating user documentation and providing user training. Three years\u2019 experience defining and designing dimensional models. Three years\u2019 experience with enterprise integration, advanced analytics, and data models that support a federated architecture. Three years\u2019 experience with system design and integration tasks, comprising design and implementation of major systems, integration of systems elements, and related support systems.  REQUIRED KNOWLEDGE, SKILL SETS, AND ABILITIES  Demonstrated proficiency with a variety of Microsoft application development and database management tools. Knowledge of data warehouse principles and practices, as well as ETL solutions. Knowledge of BI tools and technology in addition to Power BI. Strong SQL and data extraction skills. Agility with additional programming languages such as Python and Scala. Demonstrated commitment to and compliance with the organization\u2019s policies and procedures. Results-oriented focus; able to work independently and take initiative. Ability to implement projects and adhere to established timelines; must be able to work with various staff members and departments to complete projects. Comfort with ambiguity, variability, and change in business requirements. Ability to communicate clearly, effectively, and appropriately for the intended purpose and audience.  WORK ENVIRONMENT/CONDITIONS  This position is based in a typical office environment with no specific or unusual physical or environmental demands. Most of the work performed is normally done in the ACGME office and/or a home office with the typical physical demands of an office environment.", "Recruiter_First_Name": "Colleen", "Recruiter_Last_Name": "Murray", "Recruiter_Email_Address": "cmurray@acgme.org", "Company_name": "ACGME", "SetName": "Mary Gathogo_09/07/2023_ACGME_Senior BI Architect", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "7", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 100, "QID": 2583, "Job_Title": "Tableau Cloud", "Job_Description": "Tableau Opportunity Hi Emmanuel, I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak. Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently. Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Recruiter_First_Name": "Nicole", "Recruiter_Last_Name": "Mcneill", "Recruiter_Email_Address": "nicole.mcneill@unifyconsulting.com", "Company_name": "Unify Consukting", "SetName": "EMMANUEL OJENIYI_09/06/2023_Unify Consukting_Tableau Cloud", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 109, "QID": 2591, "Job_Title": "Business Intelligence Developer", "Job_Description": "Spalding Consulting, Inc. is seeking a Business Intelligence Developer in Lexington Park, MD -Remote.  Spalding Consulting, Inc. is a professional services company delivering cutting-edge solutions to the Department of Defense since 2001. Our expert-level solutions include software development, information technology, program management, financial management and business intelligence services. Spalding Consulting offers competitive compensation, career development, flexible work schedules and excellent benefits.  Position Type: Full-Time Work Location: This is a remote position (see on-site requirements below).  **On-Site Requirements: On-boarding will require 1-2 visits to Patuxent River, MD for candidates that are local to the area. Candidates out of state will be onboarded virtually. Training will be virtual and telework maximized/permitted to the greatest extent possible, however for local candidates, training/tasking may require on-site work a few hours per week. Future on-site/telework requirements/schedules may change as additional client direction is received.      Essential Functions: Collaborate with team to breakdown requirements into plausible increments Create visualizations and calculations to support customer needs Modify and construct data models as appropriate  Assist with technical and user documentation Assist with team peer reviews and testing Support existing or develop new applications for numerous customers Other duties as assigned or required.   Qualifications and Experience:  Required: At least 5 years of experience developing software programs using any language At least 2 years\u2019 experience of developing solutions to support an ETL process Experience with Oracle, SQL, or Teradata databases Experience with working on a team of at least 5 developers Experience with understanding and modifying data models  Desired: Development experience using Tableau or Qlik Experience using Atlassian Jira Experience making REST API calls Experience in an Agile development environment   Security Clearance: Must be eligible to obtain a Secret clearance. Requirements to obtain a clearance include US Citizenship, security investigation, etc.", "Recruiter_First_Name": "Daniela", "Recruiter_Last_Name": "Aguayo", "Recruiter_Email_Address": "Daniela.Aguayo@scipax.com", "Company_name": "Spalding Consulting", "SetName": "EMMANUEL OJENIYI_09/07/2023_Spalding Consulting_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "9/7/2023", "NoofDays": -84, "LogInterviewID": 106, "QID": 2588, "Job_Title": "Data Engineer", "Job_Description": "JOB DESCRIPTION & DETAILS     Day to day:  Insight Global is seeking a Data Engineer to support a local insurance company headquartered in Richmond, VA. This engineer will be responsible for enterprise data integration and reporting, as well as building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies. This candidate will be required to go onsite 2 days a week in the Richmond, VA area.     Responsibilities:  Assembling large, complex sets of data that meet non-functional and functional business requirements. Identifying, designing, and implementing internal process improvements including re-designing infrastructure for greater scalability, optimizing data delivery, and automating manual processes Building required infrastructure for optimal extraction, transformation and loading of data from various data sources using AWS and SQL technologies Building analytical tools to utilize the data pipeline, providing actionable insight into key business performance metrics including operational efficiency and customer acquisition Working with stakeholders including data, design, product and executive teams and assisting them with data-related technical issues Working with stakeholders including the Executive, Product, Data and Design teams to support their data infrastructure needs while assisting with data-related technical issues    Must Haves:  3-5+ years of experience as a Data Engineer Experience with MS SQL Server Platform (SSIS, SSRS & SSAS) Experience in data warehousing and ETL development (T-SQL, PLSQL, and/or SQL scripts) Experience working with intelligence products and data analytics tools (e.g. PowerBI, Tableau) Ability to compute, analyze and interpret complex and disparate data to produce relevant and consumable reports, dashboards, etc.", "Recruiter_First_Name": "Meg", "Recruiter_Last_Name": "Allen", "Recruiter_Email_Address": "Meg.Allen@insightglobal.com", "Company_name": "Randstad Federal", "SetName": "Avworo  OGHENEKEVWE _09/06/2023_Randstad Federal_Data Engineer", "CandidateID": "38457", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sowmya Attur", "Applicant": "Avworo  OGHENEKEVWE ", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "9/5/2023", "NoofDays": -86, "LogInterviewID": 104, "QID": 2586, "Job_Title": "Senior SQL Database Administrator", "Job_Description": "Kelsey-Seybold Clinic, a Houston tradition in patient-centered care, is a multispecialty clinic with 40+ locations and comprises more than 700 physicians providing primary and specialty care collaboratively.  With more than 65 different clinical and non-clinical specialties, you can design a career path at Kelsey-Seybold Clinic to grow your future in a new direction.  Works collaboratively as a senior member of the Business Intelligence & Reporting team under the direction of KSC Application Technology Leadership. Supports, develops, and maintains SQL database environments and related technology. Acts as a team member on multi-team projects and uses advanced skill sets to develop, test, troubleshoot, and support database-related projects and associated solutions/applications. Acts as a mentor to others learning essential and advanced SQL-related skills.  Requirements include:  Bachelor\u2019s degree in a technical area or equivalent work experience 6 years experience in SQL database administration Flexibility and the ability to adapt to change. Proven communication, presentation, analytical, problem-solving, technical, and writing skills. MS SQL Server Administration MS SQL Transact SQL Programming (T-SQL) MS SQL Data Transformation Services (DTS) and SQL Server Integration Services (SSIS) programming. Performance Tuning of Hardware & MS SQL Server. MS SQL Server Analysis Services (SSAS) MS SQL Server Reporting Services (SSRS) Demonstrates an advanced understanding of the following: Database modeling/normalization Indexing strategies and maintenance Backup and recovery models Clustering and high availability Preferences include:  MCDBA MCTS MCITP Vendor Certified SQL Administrator Other database-related certification/s Why Kelsey-Seybold Clinic?  Medical, Vision, and Dental Tuition Reimbursement Company Matching 401K Employee Reward and Recognition Program Paid time off for vacation, sick, and holidays Employee Assistance Program Continuing Medical Education allowance If you want a satisfying career and a rich, rewarding personal life, don t choose between them.  Achieve them both at Kelsey-Seybold Clinic.  Kelsey-Seybold Clinic strives to provide equal opportunity employment without regard to race, color, religion, age, national origin, sex, gender, sexual orientation, gender identity/expression, genetic information, disability, veteran status, or any other basis protected by organizational policy or by federal, state, or local laws unless such distinction is required by law. Kelsey-Seybold is a VEVRAA Federal Contractor and desires priority referrals of protected veterans.  Job Type: Full-time  Pay: $110,090.00 - $136,995.00 per year  Benefits:  401(k) Dental insurance Flexible schedule Health insurance Life insurance Paid time off Professional development assistance Retirement plan Tuition reimbursement Vision insurance Schedule:  Monday to Friday Education:  Bachelor's (Preferred) Experience:  Database administration: 6 years (Preferred) Microsoft SQL Server: 6 years (Preferred) License/Certification:  Texas Driver's license (Preferred) Work Location: In person", "Recruiter_First_Name": "Cassie", "Recruiter_Last_Name": "Smith", "Recruiter_Email_Address": "cassiesmithboz6b_p3y@indeedemail.com", "Company_name": "Kelsey-Seybold Clinic", "SetName": "EMMANUEL OJENIYI_09/04/2023_Kelsey-Seybold Clinic_Senior SQL Database Administrator", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "9/5/2023", "NoofDays": -86, "LogInterviewID": 97, "QID": 2580, "Job_Title": "Tableau Developer (Business Intelligence)", "Job_Description": "Responsibilities Work closely with Data integration team to stage data for the reporting requirement Build rich visualization dashboards using tableau , SSRS and other relevant technologies Perform report administration & user access provisioning activities for optimized performance Support business team for self-service and ad-hoc activities Set standards for reporting & BI functions; design templates which are scalable, repeatable, and simple Work with business teams to understand their unique business and technical requirements for tools and analytics Lead the requirement gathering, design and development of reporting solution using various tools e.g Tableau, MS SSRS for all different types of reporting for all LOB. Lead the development of Master Reporting Inventory as part of Data Governance initiatives. Effective collaboration with multiple levels of end users including data stewards, leadership and management, executive and other end users. Led the reporting design and architecture and work closely with infrastructure to meet the needs of the business Work with other technical staff, such as networking to ensure connectivity, compatibility, and scalability of reporting platform & systems Support ongoing monitoring, automation and refinement of reporting solutions Work with management to identify and resolve reporting related issues Participate in process reviews and enhancements. Participate in design and delivery of cubes, dashboards and various self-service business intelligence solutions. Maintains a high degree of business functional knowledge and current automated technologies and tools. All other duties assigned", "Recruiter_First_Name": "Edward", "Recruiter_Last_Name": "Alonzo", "Recruiter_Email_Address": "not sure", "Company_name": "AltaMed", "SetName": "JORUM MWANGI_09/05/2023_AltaMed_Tableau Developer (Business Intelligence)", "CandidateID": "37975", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "568", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "AMINAT OKERINDE", "Applicant": "JORUM MWANGI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "9/1/2023", "NoofDays": -90, "LogInterviewID": 95, "QID": 2578, "Job_Title": "Sr. Architect, Power BI", "Job_Description": "Requirements  Bachelor\u2019s Degree desired in Computer Science, Information Technology, or related field Minimum of 5 years of experience with database design and Architecture, at least 2 years with Azure technologies, and previous Consulting experience Expert knowledge of Data Management, Business Intelligence and Analytics concepts including: Data Movement (ETL/ELT) Data Warehousing (Designing and Implementing, Azure SQL, Synapse) Azure Storage Technologies (Data Lake, Blob Storage) Data Governance (including Data Quality and Profiling, Master Data Management, and Metadata Management) Business Intelligence, including Reporting and Visualizations (Key Performance Indicators (KPI), and Scorecards) Predictive, Prescription, and Descriptive Analytics Expert knowledge of Microsoft Azure technologies: SQL Server on premises plus cloud supported versions) Azure Data Factory (including ARM templates) Azure Synapse, Cosmos DB Azure Data Lake/Azure Blob Storage Power BI for reporting and analytics Databricks Azure DevOps (including building Stories and tasks, and using development pipelines and ARM templates for publishing code) Eagerness to contribute in a team-oriented environment Excellent communication (written and oral) and interpersonal skills for both technical and non-technical teams Passionate about learning new technologies Analytical approach to problem-solving; ability to use technology to solve business problems Ability to work in a fast-paced environment   Additional Preferred Experience:  Analytics and Data Science tools, technologies, and techniques (R, Python, algorithms, Azure ML Studio/Services) Custom Visualizations in Microsoft Power BI using D3 and jQuery Azure Infrastructure architecture and design Knowledge and experience using Azure DevOps for source control, project deployment and project management", "Recruiter_First_Name": "Sue", "Recruiter_Last_Name": "Lieblang", "Recruiter_Email_Address": "slieblang@3cloudsolutions.com", "Company_name": "3Cloud", "SetName": "Mary Gathogo_09/01/2023_3Cloud_Sr. Architect, Power BI", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "5", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/31/2023", "NoofDays": -91, "LogInterviewID": 94, "QID": 2577, "Job_Title": "Business Intelligence Developer", "Job_Description": "Responsible for the design, development and maintenance of informational dashboards, data and report development. KPIs and dashboards according to semi-monthly / monthly cycle reporting. Coordinate forecasting exercise and planning resources. Analyze activity performance on providing reports, timelines, and analysis such as month-by-month hourly resource time utilization and unit costing, analysis on trends. Developing and providing accurate reporting tools for organization in relation with Programs and Indirect budgets. Interfacing with project teams to ensure consistent reporting of project performance, scope and accurate project forecasting. Conduct cost/benefit analysis and develop business case. Put in place all actions needed regarding continuous improvement and processes. A demonstrable experience in producing high quality and detailed written documents. Other duties as assigned or required.", "Recruiter_First_Name": "Daniela", "Recruiter_Last_Name": "Aguayo", "Recruiter_Email_Address": "Daniela.Aguayo@scipax.com", "Company_name": "Spalding Consulting", "SetName": "EMMANUEL OJENIYI_08/31/2023_Spalding Consulting_Business Intelligence Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/31/2023", "NoofDays": -91, "LogInterviewID": 93, "QID": 2576, "Job_Title": "Data Specialist", "Job_Description": "Data Specialist", "Recruiter_First_Name": "Sharon", "Recruiter_Last_Name": "Flanagan", "Recruiter_Email_Address": "SFlanagan@compia.global", "Company_name": "CompTIA", "SetName": "abebe woldeargay_08/31/2023_CompTIA_Data Specialist", "CandidateID": "37077", "SurveyResponse": "\"{   \"\"InterviewSummary\"\": \"\"The interview experience was overall highly satisfying with excellent question clarity", "InterviewType": " engaging interviewer", "Preparationscore": " and relevant technical aspects. Strong performance in algorithm design and data structures", "AutoInterviewsCount": " though a challenge in graph theory due to limited preparation. Positive alignment with role's skills and qualifications", "AutoInterviewsDuration": " highlighting adaptability. Strategies employed for challenging questions demonstrated composure and structured responses.\"\"", "MentorInterviewsCount": "      \"\"ScaleQuestions\"\": {     \"\"ClearFeedbackOnNextSteps\"\": 5", "MentorInterviewsDuration": "     \"\"ComfortWhileAnsweringQuestions\"\": 5", "Mentor": "     \"\"HandlingChallengingQuestions\"\": 4", "Applicant": "     \"\"LikelihoodToRecommendCompany\"\": 5", "Recruiter_InterviewCount": "     \"\"AlignmentWithExpectations\"\": 4", "Technical_InterviewCount": "     \"\"InterviewerEngagement\"\": 5", "InterviewScore": "     \"\"SkillsAlignmentWithRole\"\": 5"}, {"InterviewDate": "8/31/2023", "NoofDays": -91, "LogInterviewID": 92, "QID": 2575, "Job_Title": "Power BI Developer", "Job_Description": "Power BI Developer Position The Power BI Developer will be responsible for designing, developing, and maintaining interactive data visualizations and reports using the Power BI platform. To be successful in this role, the Power BI Developer will collaborate with stakeholders and business analysts to understand requirements and translate them into effective and visually appealing dashboards and reports. Your expertise in Power BI and data visualization will play a crucial role in helping our organization make informed decisions based on data-driven insights.", "Recruiter_First_Name": "Samuel", "Recruiter_Last_Name": "JOHNSON", "Recruiter_Email_Address": "linkedin.com/in/samjohnson2010", "Company_name": "ESP IT", "SetName": "Altish Asfaw_08/31/2023_ESP IT_Power BI Developer", "CandidateID": "37423", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "1196", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Leslie Boye", "Applicant": "Altish Asfaw", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/30/2023", "NoofDays": -92, "LogInterviewID": 96, "QID": 2579, "Job_Title": "SQL Developer", "Job_Description": "Job Description *  My Client in the the San Antonio, TX is hiring for a local SQL Developer to join their team in support of their data efforts within the healthcare space. This individual will be joining a vitally important team, where they are pulling PHI Data from multiple departments internally and sending data to external vendors for further medical research. It is important for this individual to have a strong understanding of SSIS packages and ETL Development using Visual Studio in order to work onsite. This is a one round interview and will be expected to elaborate on the FULL process of ETL and SSIS.", "Recruiter_First_Name": "Brendan", "Recruiter_Last_Name": "Barker", "Recruiter_Email_Address": "Brendan.Barker@insightglobal.com", "Company_name": "Community First Health Plans", "SetName": "AYODEJI OLAWOYE_08/30/2023_Community First Health Plans_SQL Developer", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "37.5", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "392", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "8/30/2023", "NoofDays": -92, "LogInterviewID": 98, "QID": 2581, "Job_Title": "Data Governance Analyst", "Job_Description": "The Data Governance Management Office (DGMO) is responsible for the development, implementation, and continuous improvement of an enterprise data governance framework that will increase coordination and consistency across enterprise domains, establish a shared, cross-functional understanding of critical data assets and concepts, and improve AltaMed\u2019s ability to make data-informed decisions using quality, trusted data & insights.   The Data Governance (DG) Analyst is responsible for facilitating and managing data governance initiatives, including the development of data standards, policies and procedures, and working with stakeholders from across the organization to promote and implement data governance best practices (data classification, data lineage, lifecycle management). This role will convene cross-functional groups to understand and document data requirements, data flows, and data use. In addition, the DG Analyst will help define and execute toward the implementation of an enterprise data governance roadmap, collaborating with data & analytics technical teams to bridge business objectives to analytical products & solutions.   To be successful in this role, individuals must have a blend of business acumen, a problem-solving attitude, data governance and data management knowledge, and a strong ability to communicate effectively with both technical and non-technical stakeholders. Other critical success factors include: comfort with ambiguity, curiosity and willingness to learn new subject matter, and an ability to build relationships with a focus on partnership. This role will support cross-functional teams with analysis and measurement of key data governance inputs, and requires some proficiency with data analysis and data quality measurement techniques.   Responsibilities   Contribute to and facilitate the creation of policies, standards, and documents on topics such as: data governance, data stewardship, master data management, data quality management. Build and maintain data governance collateral to centralize, coordinate, and share DGMO content with a wide array of enterprise stakeholders. Work with key business and technical stakeholders to create, manage, and curate an enterprise business glossary, data dictionary, and data catalog. Capture and share detailed formal documents, such as governance meeting minutes for operational, tactical, strategic, and executive audiences. Implement change control & change management processes and tools, and resolve enterprise data governance issues. Develop and socialize data maps to ensure transparency in the lineage and flow of data within and outside of the organization. Define and drive tactical roadmaps for enterprise data governance adoption, including socialization, stakeholder buy-in, operating model implementation, and data governance training. Work with other data & analytics teams to develop, promote, and monitor adherence to data quality standards. Develop, maintain, and socialize data inventory tools and methods to support data asset documentation & governance. Work with key stakeholders to define, monitor, and share data governance key performance, quality, and adherence metrics. Perform other duties as assigned.   Qualifications   Bachelor\u2019s degree in information technology, business, public health, mathematics, finance, or a related field, with appropriate professional and technical experience required. Minimum of 4 years of experience in data management, data analytics, product management, or consulting, or other relevant work experience required. Experience with project management techniques, such as cross-functional project coordination & delivery, work plan development, requirements gathering is required. Prior professional experience working within a healthcare environment (payer, provider, vendor) required. Proven ability to facilitate effective meetings and work sessions across various levels of staff and leadership required. Prior experience with data governance tools and platforms highly preferred. Previous experience in health care analytics, data strategy, business strategy, or clinical administration preferred. Prior experience with product management & agile delivery principles (Scaled Agile - SAFe) preferred. Show less  Seniority level Entry level Employment type Full-time Job function Information Technology Industries Wellness and Fitness Services", "Recruiter_First_Name": "Edward", "Recruiter_Last_Name": "Alonzo", "Recruiter_Email_Address": "ealonzo@altamed.org", "Company_name": "AltaMed", "SetName": "Betty Asmerom_08/30/2023_AltaMed_Data Governance Analyst", "CandidateID": "35551", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Saher Maiber", "Applicant": "Betty Asmerom", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/30/2023", "NoofDays": -92, "LogInterviewID": 87, "QID": 2570, "Job_Title": "Data Engineer", "Job_Description": "5+ years of experience working with SQL/Azure SQL/T-SQL. proficiency with at least one RDBMS like SQL Server DB, Oracle, MySQL, Postgres is must. Understanding of modern cloud data platforms like Azure or Snowflake is preferred but not required. Understanding of ETL and data warehousing concepts, coupled with hands-on experience of at least one ETL tool like SSIS, Azure Data Factory, Talend, Informatica. Knowledge of Power BI, DAX, or Tableau or SSRS. Adapt at conveying insights through data, assisting partners in identifying what matters and what steps they can take to help their business. Devotion to the QA process, conducting QA testing, and adept troubleshooting While AI or ML experience is preferred, it is not obligatory. Awareness of modern-day storage, compute, serverless, and orchestration services offered by cloud platform such as Azure, AWS, GCP. Experience with task automation, configuration, and alerts via PowerShell, Azure Data Factory, Databricks, SQL Agent, Data Pipelines. Working knowledge of Python and/or Spark (preferred but not required). Understanding of data modeling is desired but not mandatory. Advanced knowledge of performance monitoring and optimization. Be able to analyze system resource utilization, bottlenecks, and plan platform capacity sizing (activity monitors, traces, query tuning, optimizers, etc.) Capability to quickly adapt to new projects, systems, and technology tools. Must reside in Southern California. Some of the systems we work with are: Yardi (multiple modules including Voyager, Deal Manager), SQL databases and DW, Smartsheet, HubSpot, various 3rd party data sources.", "Recruiter_First_Name": "Drake", "Recruiter_Last_Name": "Van Ness", "Recruiter_Email_Address": "dvanness@rexfordindustrial.com", "Company_name": "Rexford Industrial", "SetName": "Talq Tera_08/30/2023_Rexford Industrial_Data Engineer", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "326", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/29/2023", "NoofDays": -93, "LogInterviewID": 78, "QID": 2561, "Job_Title": "Embedded BI Data Visualisation Specialist SIBU510", "Job_Description": "Analyze and Define Raw Data Visualizing and developing BI solutions (Dashboards, Scorecards, Analytic reports) Implement best practices to ensure dashboard design consistency for the best user experience Design and test analytics platform code. Data Preparation (Predictive & Restrictive) Enhance and Streamline data collection process Custom Analysis Long term research and prediction Using statistical techniques, collect and analyse data from the clients internal databases and systems and convert it to actionable intelligence; Lead the design of comprehensive data, intelligence and value proposition tools; Identify and communicate trends within complex datasets to stakeholders across the business, including the top problems that need to be solved and how to solve them proactively; Use internal data analytics tools to develop data dashboards that can be accessed by corporate security partners and senior stakeholders on demand; Improve standard operating procedures (SOPs) for implementing databases and data collection systems Plan, research and draft a range of tailored reports to deliver actionable insight for internal clients, including periodic reports (monthly, quarterly, bi-annual, etc.) and bespoke briefs with minimal supervision; Maintain clear and coherent communication, both verbal and written, to understand data needs and report results; Display creative thinking and consulting skills Identify gaps in crucial data, information and intelligence, and submit plans to fill them; Conduct briefings as needed for a variety of levels of customers as requested (via phone, video conference, in-person briefing, or industry conference); Establish and maintain professional relationships with internal stakeholders across the client business", "Recruiter_First_Name": "Alexandra", "Recruiter_Last_Name": "Adams", "Recruiter_Email_Address": "Alexandra.Adams@sibylline.co.uk", "Company_name": "Sibylline", "SetName": "Adib Kazi_08/29/2023_Sibylline_Embedded BI Data Visualisation Specialist SIBU510", "CandidateID": "38944", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "71", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "Adib Kazi", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/29/2023", "NoofDays": -93, "LogInterviewID": 91, "QID": 2574, "Job_Title": "Business Intelligence Architect", "Job_Description": "Responsibilities:   Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis.   With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables.   Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS.   Research and propose opportunities for data acquisition and new uses for existing data.   Code, test, and document new or modified data systems to create robust and scalable applications for analytics.   Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables.   In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions.   Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts.   Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI.   Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices.   Collaborate with Quality Assurance team to ensure valid and proper deliverables.   Support business decisions with ad-hoc analysis as needed.   Participate in rotation of after-hours support.   Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates.   Research new technologies for implementation by the team for producing cutting-edge solutions.   Cultivate business relationships with stakeholders.   May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.   Required:   Bachelor\u2019s degree in a related discipline (Computer Science, Information Systems Management, Engineering, or similar) or equivalent work experience.   Advanced knowledge of Microsoft\u2019s SQL Server, SSRS, SSIS, and SSAS.   Knowledgeable with Power BI, preferably with an on-premises environment.   Intermediate SQL Query, ETL, and Data Architecture experience.   Advanced Knowledge and ability in writing complex T-SQL code.   Ability to quickly identify and troubleshoot problematic SQL code.   Ability to design tables, data marts, and/or databases to suit reporting needs.   Knowledge of data mapping, database design, and data warehouse concepts.   Introductory experience with SQL Database Administration.   Knowledge using Jira, Bitbucket, GitKraken, and/or SourceTree with a good understanding of Git.   Desire and ability to learn emerging technologies and methodologies.   Ability to interpret report requests and requirements in order to build appropriate automated solutions.   Ability to work with shifting deadlines in a fast-paced environment.   Strong computer skills, including Microsoft Office (Access, Excel, Word, & Outlook).   Strong attention to detail, interpersonal skills, and notation skills.", "Recruiter_First_Name": "Jordan", "Recruiter_Last_Name": "Abraham", "Recruiter_Email_Address": "jabraham@marinerfinance.com", "Company_name": "Mariner Finance", "SetName": "Yama Touray_08/29/2023_Mariner Finance_Business Intelligence Architect", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 86, "QID": 2569, "Job_Title": "Data Analyst", "Job_Description": "Expected they will be able to:  \u2022\tCreating and developing actionable interactive reports and dashboards using statistical and business intelligence tools such as PowerBI \u2022\tConducting exploratory data analysis to identify areas for improvement and generate insights into products and services \u2022\tConsulting with stakeholders using human centered design approaches to understand the need for data products and to identify a potential solution. \u2022\tTranslating customer requirements for data products (datasets, reports, dashboards) into data solutions; creating calculated measures, columns, relationships, etc \u2022\tAnalyzing source systems and designing new data structures for high-volume, complex data. \u2022\tAccessing, transforming, cleansing, and testing data products using programming languages such as M, DAX, Python, R, and SQL. \u2022\tDesigning data visualization strategies that make large or complex datasets more understandable, accessible, and usable. \u2022\tDeveloping wireframes or prototypes of potential user experiences to share with stakeholder to collect feedback. \u2022\tCommunicating (orally and in written form) analytical results displayed through data visualizations to diverse stakeholder groups. General requirements:  \u2022\tTier 4-High Risk Public Trust Clearance \u2022\tIdeally 5 years of experience using business intelligence tools e.g. Power BI, to develop interactive data visualizations and reports. \u2022\tExperience using languages (e.g. DAX, M, Python, R, SQL) to structure and analyze data. \u2022\tKnowledge of data architecture and modelling, including relational databases.", "Recruiter_First_Name": "Jason", "Recruiter_Last_Name": "Dryer", "Recruiter_Email_Address": "jason.dryer@randstadusa.com", "Company_name": "Randstad federal", "SetName": "Yama Touray_08/28/2023_Randstad federal_Data Analyst", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1037", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 88, "QID": 2571, "Job_Title": "Power BI Developer", "Job_Description": "Power BI Developer Position The Power BI Developer will be responsible for designing, developing, and maintaining interactive data visualizations and reports using the Power BI platform. To be successful in this role, the Power BI Developer will collaborate with stakeholders and business analysts to understand requirements and translate them into effective and visually appealing dashboards and reports. Your expertise in Power BI and data visualization will play a crucial role in helping our organization make informed decisions based on data-driven insights.", "Recruiter_First_Name": "Samuel", "Recruiter_Last_Name": "Johnson", "Recruiter_Email_Address": "inmail-hit-reply@linkedin.com", "Company_name": "ESP IT", "SetName": "Altish Asfaw_08/28/2023_ESP IT_Power BI Developer", "CandidateID": "37423", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "237", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Leslie Boye", "Applicant": "Altish Asfaw", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 84, "QID": 2567, "Job_Title": "Business Intelligence Analyst-Power BI", "Job_Description": "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed Position Requirements  Education and Certifications Required \u2022\tBachelor\u2019s Degree in Business Analytics, Management Information Systems or, Business Computer Information Systems \u2022\tCBIP Certification a Plus Experience Required \u2022\t5 + years as a Business Intelligence Analyst, Business Analyst, Systems Support Analyst or Application Support Analyst \u2022\tExperience in Power BI developing reports and dashboards \u2022\tExperience in Business Objects Designer for creating and maintaining universes, WEBI, Derived tables, @functions and schemas \u2022\tUse of Business Objects to access data from a variety of sources \u2022\tPrior business systems analysis experience \u2022\tDrive RCA (root cause analysis) activities \u2022\tWorking experience in server and PC environments and skilled in navigating in a distributed server architecture Experience Preferred \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Recruiter_First_Name": "Wesley", "Recruiter_Last_Name": "Mercer", "Recruiter_Email_Address": "wesley.mercer@matrixres.com", "Company_name": "CoServ", "SetName": "LILIAN NJERI_08/28/2023_CoServ_Business Intelligence Analyst-Power BI", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "56.25", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1514", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/28/2023", "NoofDays": -94, "LogInterviewID": 89, "QID": 2572, "Job_Title": "Business Intelligence Analyst-Power BI", "Job_Description": "Primary Position Responsibilities \u2022\tCreates, updates and maintains reporting solutions utilizing Power BI, Crystal Reports, Business Objects Designer and WEBI for multiple business partners. \u2022\tCreates, updates and maintains data consistency and data quality with strong data catalog and data dictionary management \u2022\tEngages business partners to understand requirements, map to logical and physical data models and develop thoughtful insights into the data \u2022\tUses a variety of OLAP tools and methods to access data from a variety of sources such as Oracle, MS SQL server and IBM DB2 \u2022\tCreates and runs SQL queries in order to analyze data and develop solutions \u2022\tProvides great service and technical support of issues, including data validation and maintaining reporting accuracy \u2022\tProvides ad hoc query and reporting to business requests, as needed \u2022\tInterfaces with Business Units, Client Services Desk, vendor and other IT areas to develop reporting solutions \u2022\tAssists manager in developing/revising and documenting policies and procedures for supporting data governance and reporting best practice Secondary Position Responsibilities \u2022\tAttends all required company training and employee development. \u2022\tAttends monthly department meeting or reviews safety material independently. \u2022\tCross-platform problem solving, solution investigation and delivery  \u2022\tMentors junior Analysts \u2022\tParticipates/represents IT Enterprise Applications during Enterprise and departmental projects \u2022\tPerforms other duties and activities as directed    Experience Preferred  \u2022\tExperience in analytical thinking and problem solving \u2022\tExperience in requirements elicitation and preparation of functional design documents \u2022\tKnowledge of software development lifecycle (SDLC) and Agile \u2022\tWorking knowledge of relational databases and client-server concepts \u2022\tExperience guiding small enhancement projects a plus \u2022\tFamiliar with analysis and design (RAD) concepts \u2022\tAny type of Azure cloud experience is a plus because the client is moving in that direction Skills and Abilities Required \u2022\tStrong abilities in using Power BI, Crystal Reports, Business Objects and other OLAP tools to provide data analysis and report viewing \u2022\tUnderstanding of Business and Technology Systems conceptual and logical architectures \u2022\tAbility to create and execute SQL queries \u2022\tDemonstrate a sound understanding of Systems and Processes \u2022\tCustomer focused with excellent interpersonal, problem solving, oral and written communication skills \u2022\tAbility to gather and evaluate functional and technical requirements for small product enhancements and releases \u2022\tAbility to work effectively as a project team member \u2022\tStrong analytical skills and skills interfacing with end-users \u2022\tAbility to influence direction \u2022\tProficiency using Microsoft Office software (Word, Excel, PowerPoint, Teams, Visio, OneNote) \u2022\tAbility to influence direction Skills and Abilities Preferred \u2022\tKnowledge of SQL, SSIS, SSRS and Azure Data Factory. \u2022\tData analysis and modeling.", "Recruiter_First_Name": "Chris", "Recruiter_Last_Name": "Cave", "Recruiter_Email_Address": "wesley.mercer@matrixres.com", "Company_name": "CoServ", "SetName": "LILIAN NJERI_08/28/2023_CoServ_Business Intelligence Analyst-Power BI", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "3", "InterviewScore": "NULL"}, {"InterviewDate": "8/27/2023", "NoofDays": -95, "LogInterviewID": 90, "QID": 2573, "Job_Title": "Data Analytics", "Job_Description": "Data Analytics role", "Recruiter_First_Name": "Jason", "Recruiter_Last_Name": "Dryer", "Recruiter_Email_Address": "jason.dryer@randstadusa.com", "Company_name": "Randstad Federal", "SetName": "Yama Touray_08/27/2023_Randstad Federal_Data Analytics", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "56.25", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "1069", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/26/2023", "NoofDays": -96, "LogInterviewID": 85, "QID": 2568, "Job_Title": "Data Analytics", "Job_Description": "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.  Key Responsibilities:  Data Visualization Design: Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques. Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels. Data Analysis and Insight Generation: Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization. Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization. Data Quality and Governance: Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams. Implement data quality checks and validation processes to maintain the integrity of visualized data. Stakeholder Management and Collaboration: Engage with various departments and business leaders to gather requirements and understand their data needs. Collaborate with stakeholders to refine visualization designs and align them with business objectives. Data Strategy and Technology: Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities. Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.", "Recruiter_First_Name": "Ashley", "Recruiter_Last_Name": "Selki", "Recruiter_Email_Address": "https://www.linkedin.com/in/ashley-selki/.", "Company_name": "Lexipol LLC", "SetName": "AYODEJI OLAWOYE_08/26/2023_Lexipol LLC_Data Analytics", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 79, "QID": 2562, "Job_Title": "IT Data Specialist", "Job_Description": "JOB SUMMARY  At Houston Methodist, the IT Data Specialist is responsible for supporting an enterprise wide business intelligence and analytics framework that will provide the organization with solutions for effective decision-making. This position utilizes critical thinking, attention to detail, and effective communication skills and collaborates effectively with teams to consult with business area leads to generate solution recommendations. The IT Data Specialist plays a technical role on multiple projects and communicates effectively with technical and non-technical audiences. The position utilizes technical expertise in Business Intelligence architecture, design and implementation with experience in business, healthcare and technology projects. The incumbent will be actively involved in supporting, developing and advancing Houston Methodist\u2019s Analytics applications. The IT Data Specialist will use tools such as Microsoft SQL Server, Microsoft SQL Server Reporting Services, Microsoft SQL Server Integration Services, and Tableau to design and implement innovative approaches to data collection, analysis, interpretation and presentation to support planning and decision-making at all levels of the organization and assist in managing data as a corporate strategic resource.     Primary Job Responsibilities  Communicates (oral and written) effectively with customers, vendors, colleagues, and management about services, contact information, system availability, and information. Assists the business analysts to elicit requirements to document. technical and design specifications for package solutions, and/or software development. Assists with user education of business intelligence applications and helps ensure access to data with the goal of reduced reliance on technical specialists in order to obtain data. Develops Analytics Solutions including the data marts, Tableau data sources, reports and dashboards that support operational and strategic decision making. Identifies required source system data and develops ETL processes that move data from source systems into the data warehouse and data marts. Participates in resolving major system outages, disaster management and change control and provides technical or on call support for Analytics applications. Installs, configures, and deploys Analytics tools including as Microsoft SQL Server, and Tableau. Ensures all reported data and information are accurate, consistent, relevant and timely. Practices good time management, good assessment in professional decision making, and management reporting skills.", "Recruiter_First_Name": "Akshay", "Recruiter_Last_Name": "Kumar", "Recruiter_Email_Address": "akshay.kumar@Experis.com", "Company_name": "Houston Methodist", "SetName": "EMMANUEL OJENIYI_08/25/2023_Houston Methodist_IT Data Specialist", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "70", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 80, "QID": 2563, "Job_Title": "Tableau Cloud opportunity with Unify Consulting", "Job_Description": "Tableau Opportunity Hi Emmanuel,  I would love to connect with you to discuss a Tableau Cloud opportunity with Unify Consulting. The first part of this project is to build out Tableau Cloud and hopefully it will continue with migration from on prem. If you are interested in learning more, please share your email address with me, I can send you a link to my calendar, so we arrange a good time to speak.  Please note: We are also not able to provide sponsorship for this role and we are not able to do C2C or C2H currently.  Nicole McNeill Talent Acquisition nicole.mcneill@unifyconsulting.com unifyconsulting.com", "Recruiter_First_Name": "Nicole", "Recruiter_Last_Name": "Mcneil", "Recruiter_Email_Address": "nicole.mcneill@unifyconsulting.com", "Company_name": "unifyconsulting.com", "SetName": "EMMANUEL OJENIYI_08/25/2023_unifyconsulting.com_Tableau Cloud opportunity with Unify Consulting", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 82, "QID": 2565, "Job_Title": "Power BI Developer", "Job_Description": "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.   Key Responsibilities:   Data Visualization Design:  Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques.  Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels.  Data Analysis and Insight Generation:  Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization.  Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization.  Data Quality and Governance:  Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams.  Implement data quality checks and validation processes to maintain the integrity of visualized data.  Stakeholder Management and Collaboration:  Engage with various departments and business leaders to gather requirements and understand their data needs.  Collaborate with stakeholders to refine visualization designs and align them with business objectives.  Data Strategy and Technology:  Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities.  Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.  Qualifications and Requirements  Bachelor's or Master's degree in Data Science, Data Visualization, Computer Science, or comparable experience.  Proven experience (typically 5+ years) in data visualization, with a track record of creating impactful visualizations.  Strong proficiency in data visualization tools such as Power BI, Tableau, or other industry-leading platforms.  Solid understanding of data analysis and data interpretation techniques to support the creation of meaningful visualizations.  Demonstrated ability to translate complex data concepts into clear and visually appealing presentations.  Strong communication and collaboration skills to work effectively with cross-functional teams and stakeholders.  Analytical mindset with a passion for discovering insights through data visualization.", "Recruiter_First_Name": "Annie", "Recruiter_Last_Name": "Daub", "Recruiter_Email_Address": "adaub@lexipol.com", "Company_name": "LEXIPOL", "SetName": "LILIAN NJERI_08/25/2023_LEXIPOL_Power BI Developer", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 83, "QID": 2566, "Job_Title": "Power BI Developer", "Job_Description": "As a Business Solution Architect, you will\u2026  lead Itineris' functional team with the delivery of UMAX to our Clients. Work with the client implementation manager to confirm that the Project- specific Business Process Design meets business needs and define acceptance criteria. Work with the client, share the timelines of the project, communicate information in a timely manner. Lead and/or participate in Business Process Workshops Define, present and defend solutions in the Decision Board of Stakeholders with least impact to the solution Own the to-be process vision which is fully mapped to UMAX functionality. Support the Project Manager to manage Project scope and assist in change management throughout the project. Work with the Functional Solution Architect to ensure the operational strategy is fully supported by the solution design.   Lead the Functional team.  Work with the technical solution architect, and data migration lead to ensure all are working towards the same goals.", "Recruiter_First_Name": "Dana", "Recruiter_Last_Name": "Turner", "Recruiter_Email_Address": "Dana.Turner@itineris.net", "Company_name": "Itineries", "SetName": "LILIAN NJERI_08/25/2023_Itineries_Power BI Developer", "CandidateID": "37295", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "1891", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Sakthia Okou", "Applicant": "LILIAN NJERI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/25/2023", "NoofDays": -97, "LogInterviewID": 81, "QID": 2564, "Job_Title": "Sr. Data Engineer", "Job_Description": "Essential Functions/ Responsibilities: The demands described here are representative of those that must be met by an employee to successfully perform the essential functions of this job. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Lead technical design, implementation, and problem resolution Partner cross-functionally to define and complete well-structured user stories Maintain, evolve and adhere to a maturing data governance policy Maintain and evolve a rapidly growing and robust data model containing vital customer information Design and implement reliable ETL solutions from a variety of data sources (APIs, Proprietary DB, No-SQL ) Provide best in class business analytics in the form of web-based reports and dashboards Define Data Engineering project feature delivery timelines and risks Provide mitigation options to solve for blockers and technical risks as they arise Identify technical debt, and communicate plans to manage it responsibly Provide mentoring as needed to team members Required Skills/Abilities: The requirements listed below are representative of the knowledge, skills, and/or abilities required to perform each essential duty satisfactorily. Reasonable accommodations may be made to enable individuals with disabilities to perform essential functions.  Desire and passion to learn from like-minded, experienced, data-obsessed team members A strong sense of ownership, pride and commitment to quality Mastery of Microsoft Power BI Mastery of Business Intelligence data visualization tools Mastery of RDBMS (MSSQL) and/or NoSQL database technologies (MongoDB, Cosmos DB) Experience with cloud-based and/or on premises data warehousing (Azure preferred) Experience with Power BI Embedded Analytics Experience with Agile software development principles A track record of teamwork through high quality and timely Data Engineering projects Benefits you will receive:  Opportunity to work on an exciting and highly visible project at SEAM Group Participation in a fast-growing company Opportunity to learn new technologies and expand your skillset Flexible time off Flexible work hours Collaborative and embracing culture Comprehensive healthcare plan that includes access to health, dental, vision, disability, and life insurance at group rates 8 Paid Holidays Company 401k matching program Educational Reimbursement up to $1,000/year", "Recruiter_First_Name": "Laney", "Recruiter_Last_Name": "Nulph", "Recruiter_Email_Address": "recruiting.echo.ac72a5fdd54642d79b800c8a75a2c01f@echo.newtonsoftware.com", "Company_name": "SEAM Group", "SetName": "Mary Gathogo_08/25/2023_SEAM Group_Sr. Data Engineer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "4", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/23/2023", "NoofDays": -99, "LogInterviewID": 73, "QID": 2556, "Job_Title": "Data Visualization Manager", "Job_Description": "-Own data needs for clients and internal teams -Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports -Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools -Manage the retrieval, compiling, and formatting of large volumes of data -Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. -Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support -Learn new technologies as they evolve, and understand their impact to systems -Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously -Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals -Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities -Present and clearly articulate solution options to key stakeholders -Be a go-to resource with thorough understanding of data structures for various ad platforms", "Recruiter_First_Name": "Kaylee", "Recruiter_Last_Name": "Pearson", "Recruiter_Email_Address": "kpearson@theshipyard.com", "Company_name": "The Shipyard", "SetName": "Talq Tera_08/23/2023_The Shipyard_Data Visualization Manager", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/23/2023", "NoofDays": -99, "LogInterviewID": 77, "QID": 2560, "Job_Title": "Data Analytics", "Job_Description": "Position Overview  As the Data Analytics Developer, you will be responsible for designing and building data visualizations to derive valuable insights from our organization's data resources. Your primary focus will be on creating interactive dashboards and reports that effectively communicate complex data in a clear and visually appealing manner. Working closely with cross-functional teams, you will understand their data needs and requirements, ensuring that the visualizations you create align with business objectives and support data-driven decision-making. Your expertise in data visualization tools and techniques will play a crucial role in optimizing operational efficiency, improving customer experience, and contributing to the overall success of the company.  Key Responsibilities:  Data Visualization Design: Develop interactive and visually engaging data visualizations, dashboards, and reports using industry-leading tools and techniques. Translate complex data sets into clear and intuitive visual representations, making data insights accessible to stakeholders at all levels. Data Analysis and Insight Generation: Work with data analysts and data engineers to understand the underlying data and extract key insights for visualization. Collaborate with teams across the organization to identify business challenges and opportunities that can be addressed through data visualization. Data Quality and Governance: Ensure the accuracy and reliability of data used in visualizations by working closely with data engineering and data governance teams. Implement data quality checks and validation processes to maintain the integrity of visualized data. Stakeholder Management and Collaboration: Engage with various departments and business leaders to gather requirements and understand their data needs. Collaborate with stakeholders to refine visualization designs and align them with business objectives. Data Strategy and Technology: Stay up-to-date with the latest data visualization tools and technologies, recommending appropriate solutions to enhance visualization capabilities. Contribute to the development of the organization's data strategy by providing insights on data visualization best practices.", "Recruiter_First_Name": "Annie", "Recruiter_Last_Name": "Daub", "Recruiter_Email_Address": "<adaub@lexipol.com>", "Company_name": "Lexipol LLC", "SetName": "AYODEJI OLAWOYE_08/23/2023_Lexipol LLC_Data Analytics", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "1", "AutoInterviewsDuration": "65", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/22/2023", "NoofDays": -100, "LogInterviewID": 74, "QID": 2557, "Job_Title": "Data Engineer", "Job_Description": "Job Description  This role will play a pivotal role in assisting the IT team with the evolution of the company data architecture. In addition to supporting extensions to the data warehouse design, this role will design and develop ETL required to onboard new types of business data. Finally, this role will also provide support for Analytics assignments as needed.  Responsibilities  Display sense of ownership over assigned work, requiring minimal direction and driving to completion in a sometimes fuzzy and uncharted environment. Designing and building new data pipelines that support business requirements. Work with IT and other business partners to support the evolution of the enterprise data architecture. Work with IT to build new ETLs to take data from various operational systems and extend existing data warehouse data model for analytics and reporting. Continually improve ongoing reporting and analysis processes, automating or simplifying self-service support for business constituents. Support the development of the company BI infrastructure, including the construction of scalable analytic solutions, and on-premises reporting tools. Utilize Power BI development to build scalable reporting models to serve BI reporting needs. Demonstrate the ability to gather requirements, extract and manipulate data residing in multiple disparate databases, and articulate solutions to support the business. Design, develop, and maintain performant data models in Power BI utilizing best practices. Serve as a subject matter expert for all data warehouse and enterprise systems Use new or existing technologies to produce analytics solutions (in the form of excel spreadsheets, dashboards, etc.). Work with IT and Analytics team to architect and build data pipelines to optimize for performance, data quality, scalability, ease of future development, and cost. Gather requirements, assess gaps and build roadmaps to help the analytics driven organization achieve its goals. Develop data-related Proof of Concepts in order to demonstrate feasibility and value to Symmetry business constituents. Qualifications / Requirements  Bachelor\u2019s degree in Information Systems, Computer Science, Finance, or similar education from an accredited college 2-3 years Accounting and Finance background preferred Strong skillset in Microsoft Excel (2-3 years, financial formulas & VBA is a plus) and familiarity with Microsoft Office Productivity Suite (Excel, Word, etc.) 5+years\u2019 experience with advanced SQL concepts and writing SQL statements (SQL Server or similar). Prefer 2 years\u2019 experience with Microsoft BI Suite, PowerBI, Power Query, PowerPivot, Reporting Service (SSRS), SharePoint Experience in mentoring other team members in development best practice, and methodologies. You are passionate about data quality control and know how and where to anticipate potential errors. Knowledge of the software development lifecycle, agile methodologies, and structured software development methodologies. Experience performing analysis with large datasets in a cloud-based environment. Ability to work effectively with stakeholders at all levels within the organization Strong communication and time management skills and a self-motivated approach Ability to work independently, detail-oriented, and execution focused Highly collaborative and team oriented Tenacious (doesn\u2019t give up easily) Genuine passion for clean and reliable data At least 5 years of work experience", "Recruiter_First_Name": "Capri", "Recruiter_Last_Name": "Talley", "Recruiter_Email_Address": "capri.talley@symmetrylending.com", "Company_name": "Symmetry Lending", "SetName": "Calvine  Cheptoo _08/22/2023_Symmetry Lending_Data Engineer", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "18.75", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "283", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/22/2023", "NoofDays": -100, "LogInterviewID": 72, "QID": 2555, "Job_Title": "Data Analyst", "Job_Description": "Develop and maintain databases by acquiring data from primary and secondary sources. Build scripts and implement tools that will make the data evaluation process more flexible or scalable across datasets and platforms. Escalate and manage internal and external incident tickets through company\u2019s ticketing system. Work closely with project managers to understand and maintain focus on their analytics needs, including critical metrics and KPIs, and deliver actionable insights to relevant decision-makers. Provide after-hours or weekend support when necessary to perform high-risk or planned downtime of IT systems for upgrades and maintenance. Evaluate internal systems for efficiency, problems, and inaccuracies, and develop and maintain protocols for handling, processing, and cleaning data. Assist with the creation, deployment and maintenance of new datasets and reports that can be used to review and improve company goals across departments.", "Recruiter_First_Name": "Matthew", "Recruiter_Last_Name": "Pickering", "Recruiter_Email_Address": "matthew.pickering@msg.clrco.com", "Company_name": "Northwest Cascade Inc.", "SetName": "ANNE NDUNGU_08/22/2023_Northwest Cascade Inc._Data Analyst", "CandidateID": "37048", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "4", "AutoInterviewsDuration": "524", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Grace Karuga", "Applicant": "ANNE NDUNGU", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/21/2023", "NoofDays": -101, "LogInterviewID": 75, "QID": 2558, "Job_Title": "Business Intelligence Developer", "Job_Description": "In Addition, You  Have an entrepreneurial streak Are self-motivated and driven Just get things done Roll with the punches when the unexpected happens or if the team needs to pivot direction Are passionate Have strong report visualization and data design intuition Pay attention to user feedback Thrive in an environment of open feedback/brainstorming/sharing Are a team player and people like working with you Are intellectually curious and always wanting to learn more Interested in creating a culture driven by metrics and experimentation   The Business Intelligence Developer will Design, implement, and maintain Dashboards, visualizations, and supporting data analysis layers. Additionally, he/she will design and develop visualization solutions against data warehouses, data marts, and cubes. This position will coordinate with other team members and managers to translate business needs into technical solutions and provide technical assistance to users pulling data from our self-service environment. The Business Intelligence Developer will troubleshoot issues in cubes and database objects (procedures \u2013 as they relate to surfacing data) to identify and solve problems with data accuracy and performance.   Education/Licensing Requirements   High School Diploma or equivalent. Bachelor\u2019s degree in a computer-related field or equivalent experience. Master\u2019s degree in a computer-related field is a plus.   Experience Requirements   Minimum 5 years of experience in MS BI tools (SSRS, SSAS, Power BI)  5+ years of relevant experience in report development, data science, business analytics, business intelligence, or comparable data engineering role, including data warehousing and business intelligence tools, techniques, and technology Minimum of 2 years of experience in Power BI Knowledge of SQL to write complex, highly-optimized queries across large volumes of data Successful work experience in MS SQL programming, database design, data warehouse design, query performance tuning, and writing stored procedures. Knowledge of ETL and data warehouse concepts and processes Experience with Tableau or an equivalent reporting tool to create impactful reports, visualizations, and interactive dashboards Understanding of data models Creativity to determine the best solution for a real-world problem with quantitative data Experience supporting a multi-database environment. Excellent understanding of OLTP and OLAP systems. Knowledge of best practices and software development process   Essential Skills/Experience   Fluently speak, read, and write English. Good verbal and written communication skills. Proven ability to prioritize and multi-task. SQL programming, server integration, and reporting  Curiosity and passion for data, visualization, and solving problems Creativity to determine the best solution for a real-world problem with quantitative data Experience with reporting, descriptive statistics, probability, and cleaning big datasets Willingness to question the validity, accuracy of data, and assumptions Enjoyment from collaborating with others in a team environment Eagerness to learn in a fast-paced environment Knowledge of medical data a plus   Essential Characteristics   Self-directed and organized. Discrete/ability to maintain confidentiality. Team player. Detail-oriented. Sense of urgency. Customer service orientation. Drive and self-reliance Ability to work under pressure. Ability to work well independently. Ability to take direction.   Essential Job Responsibilities   Evaluate and monitor databases to resolve performance issues. Develop, deploy, maintain and debug SSIS packages. Develop, test, and maintain MS SQL Server databases. Work with Business Analysts to aid in the design of the system. Investigate and resolve problems of data accuracy and availability Participate in integral testing to identify problems early. Perform error and stress scenarios. Participate in design and code reviews. Identify architectural issues and propose alternative solutions. Install upgrades and patches to existing databases. Develop and maintain data warehouse documentation.   Additional Job Responsibilities   Maintains a neat, orderly work area.  Performs other incidental and related duties as required. Actively demonstrates teamwork at all times. Ability to work overtime.", "Recruiter_First_Name": "Scott Bostic", "Recruiter_Last_Name": "Stafford", "Recruiter_Email_Address": "sbostic-stafford@signifyhealth.com", "Company_name": "Signify Health", "SetName": "Yama Touray_08/21/2023_Signify Health_Business Intelligence Developer", "CandidateID": "37640", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "37.5", "AutoInterviewsCount": "3", "AutoInterviewsDuration": "736", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "ALEXANDER  OPIYO", "Applicant": "Yama Touray", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/21/2023", "NoofDays": -101, "LogInterviewID": 66, "QID": 2549, "Job_Title": "Software Engineer", "Job_Description": "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices. What you have:   Required Knowledge, Skills and Abilities:   Hands-on experience working with modern ETL, BI tools & technology. Hands-on delivery experience in leading cloud data platforms: Snowflake, Azure Synapse. Extensive recent experience with SQL and SQL analytics: SQL Server, SSIS, SSRS, SSAS Hands-on experience implementing ETL pipelines using packaged tools: Attunity, Azure Data Factory Familiarity and experience with common BI and data exploration tools \u2013 Power BI, DAX Software development experience with C/C++ a definite plus. Scripting experience with Python, Ruby, Perl, Bash a definite plus. Perform data analysis required to troubleshoot data related issues and assist in the resolution of data issues. Strong organizational skills. Excellent written and oral communication skills. Business / Retail Operations background preferred.", "Recruiter_First_Name": "Lynda", "Recruiter_Last_Name": "Booth", "Recruiter_Email_Address": "lbooth@savers.com", "Company_name": "Savers", "SetName": "Mary Gathogo_08/21/2023_Savers_Software Engineer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/21/2023", "NoofDays": -101, "LogInterviewID": 70, "QID": 2553, "Job_Title": "Power BI Developer", "Job_Description": "Responsibilities: Consult with internal and external customers to collect BI requirements. Understand the customer\u2019s datasets. Correlate the datasets with the BI requirements. Create Power BI visualizations and edit existing reports. Publish and administrate Power BI Workspaces. Creation of staging databases and data warehouses for consumption by Power BI. Setup and administration of Power BI data connections.  Specific Skills Required:  Strong T-SQL skills. Knowledge of data warehousing products and techniques, including OLAP and/or SSAS. Experience in working with different departments and cross-functional teams, including customer interface and requirements gathering. Ability to manage multiple priorities and juggle customer demands. Exceptional problem-solving skills with the ability to leverage a wide variety of data and related tools to improve the efficiency of the organization. Strong communication, teamwork, and organizational skills. Solid relationship management and leadership skills and the ability to assume increasing responsibilities in a rapidly changing environment. Strong general technical aptitude.   Preferred Skills:  Additional software development skills, particularly in .NET are highly desirable  Education & Years of Experience:  Bachelor\u2019s degree preferred. Two-plus years\u2019 experience in BI. Proven expertise in creating Power BI visualizations, workspaces, datasets, DAX, database queries.", "Recruiter_First_Name": "Amy", "Recruiter_Last_Name": "Lambdin", "Recruiter_Email_Address": "allambdin@cshco.com", "Company_name": "Clarke Schaefer Hacket", "SetName": "Mary Gathogo_08/21/2023_Clarke Schaefer Hacket_Power BI Developer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "3", "Technical_InterviewCount": "2", "InterviewScore": "NULL"}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 65, "QID": 2548, "Job_Title": "Power BI Developer/Analyst (Corporate Travel)", "Job_Description": "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995. Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel! About The Opportunity Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry. You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies. Key Responsibilities Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs. Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations. SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives. Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner. Experience & Qualifications Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field. Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI. Solid experience in SQL and working with relational databases. Excellent analytical skills with the ability to dissect large amounts of data. Strong communication skills and the ability to effectively convey complex information. Experience in the corporate travel industry is a plus.", "Recruiter_First_Name": "Andrea", "Recruiter_Last_Name": "Grimes", "Recruiter_Email_Address": "andrea.grimes@us.flightcentre.com", "Company_name": "Flight Center Travel Group (FCTG)", "SetName": "Mary Gathogo_08/17/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 51, "QID": 0, "Job_Title": "Application Specialist", "Job_Description": "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites up to 50% of the time Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Recruiter_First_Name": "Malyssa", "Recruiter_Last_Name": "Daletski", "Recruiter_Email_Address": "Malyssa.Daletski@hirschbach.com", "Company_name": "Hirschbach Motor Lines", "SetName": "NULL", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 67, "QID": 2550, "Job_Title": "Software Engineer, Business Intelligence", "Job_Description": "Essential Job Functions:  Ability to interpret business requirements and assist in the development of products to meet those requirements. Develop and maintain scalable data pipelines and builds out new API integrations to support continuing increases in data volume and complexity. Ability to translate design document elements into application code and actively participation in code and design reviews. Collaborate with peers to design scalable and flexible solutions that will grow with business demands. Outstanding skills presenting to both technical and executive audiences, whether impromptu on a whiteboard or using presentations and demos Support the BI environment for the enterprise by enabling new features, evangelizing best practices, resolving customer issues and, working with vendors and partners when additional support is needed. Provide technical guidance on how to resolve customer-specific technical challenges. Support other team members develop their expertise. Support developing and documenting standards and practices.", "Recruiter_First_Name": "Sandeep", "Recruiter_Last_Name": "Joshi", "Recruiter_Email_Address": "https://www.linkedin.com/in/sandeep-joshi-450a796/", "Company_name": "Savers/Value Village", "SetName": "AYODEJI OLAWOYE_08/17/2023_Savers/Value Village_Software Engineer, Business Intelligence", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/17/2023", "NoofDays": -105, "LogInterviewID": 62, "QID": 2545, "Job_Title": "Tableau Developer", "Job_Description": "Design and Develop Tableau reports and dashboards \u2022 Provide operational support for existing Tableau reports/dashboards \u2022 Provide subject matter expertise for designing of Tableau workbooks \u2022 Participate in analysis, design, development, testing, deployment and support of dashboards and reports \u2022 Perform impact analysis and validation of existing production reports and universes after application and database upgrade \u2022 Interface with business analysts and/or users to clarify requirements. Work closely with the different business groups to cater to their reporting and dashboard needs. \u2022 Troubleshoot dashboard and report problems independently, determining the root cause and fixing the problem. \u2022 Understand reporting database schema/model, identify joins/tables, and perform data analysis. \u2022 Experience building complex dashboards using Tableau \u2022 Implement industry BI standards and best practices \u2022 Proactively identify problems/issues/risks and provide solutions \u2022 Develop report & dashboards using Business Objects and Tableau and Provide status updates on regular basis and be committed to aggressive delivery timelines", "Recruiter_First_Name": "Sofiia", "Recruiter_Last_Name": "Lievina", "Recruiter_Email_Address": "Sofiia.Lievina@dxc.com", "Company_name": "Luxoft", "SetName": "EMMANUEL OJENIYI_08/17/2023_Luxoft_Tableau Developer", "CandidateID": "37165", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "EMMANUEL OJENIYI", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/16/2023", "NoofDays": -106, "LogInterviewID": 64, "QID": 2547, "Job_Title": "Software Engineer", "Job_Description": "The team members in our stores are made up of different backgrounds, experiences, and perspectives, all with something special to contribute. Our Rethink Reuse business model of purchasing, reselling and recycling gives the community a smart way to shop and keeps 700 million pounds of used goods from landfills each year.  We also help more than 100 non-profit organizations by purchasing donated goods from them, which provides a source of revenue to help support their vital community programs and services.", "Recruiter_First_Name": "Lynda", "Recruiter_Last_Name": "Booth", "Recruiter_Email_Address": "lbooth@savers.com", "Company_name": "Savers", "SetName": "AYODEJI OLAWOYE_08/16/2023_Savers_Software Engineer", "CandidateID": "33898", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Aagbara Kpea", "Applicant": "AYODEJI OLAWOYE", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/16/2023", "NoofDays": -106, "LogInterviewID": 69, "QID": 2552, "Job_Title": "BI Developer", "Job_Description": "Proven experience as a BI Developer with expertise in Tableau, SQL, and Tableau Prep. Strong proficiency in SQL for data manipulation and analysis. Experience in designing and developing interactive dashboards and reports using Tableau. Proficiency in at least one programming language like R, Python, or PostgreSQL.", "Recruiter_First_Name": "Lhuana", "Recruiter_Last_Name": "Silva", "Recruiter_Email_Address": "jobs@primusglobal.com", "Company_name": "PRIMUS Global Services", "SetName": "Nadege Nguemo Mbouyo_08/16/2023_PRIMUS Global Services_BI Developer", "CandidateID": "34701", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 68, "QID": 2551, "Job_Title": "Business Intelligence Architect", "Job_Description": "Gather and process raw data from multiple disparate sources (including writing scripts, calling APIs, write SQL queries, utilizing SSIS, etc.) into a form suitable for analysis. With assistance of Team Lead, review and interpret ongoing business requirements, research required data, and build appropriate deliverables. Refactor or develop relational data models, dimensional data models, data dictionaries, and necessary metadata using SSAS. Research and propose opportunities for data acquisition and new uses for existing data. Code, test, and document new or modified data systems to create robust and scalable applications for analytics. Work with Team Lead on the design and direction of enterprise-wide data architecture as well as design documentation deliverables. In collaboration with Team Leads and Senior Developers, create supporting technical and functional documentation, including data flow diagrams, and provide support for deployed solutions. Working in collaboration with our application and SQL developers, design and build high-performance algorithms, prototypes, predictive models, and proof of concepts. Create advanced multi-leveled (drill-downs/sub-reports) tabular and graphical reports to meet user requirements using SQL and Microsoft SQL Reporting Services (SSRS) and Power BI. Work with senior developers to identify and implement process improvements through the design and implementation of policies, procedures, standardized documentation, and analytics infrastructure to enforce industry best practices. Collaborate with Quality Assurance team to ensure valid and proper deliverables. Support business decisions with ad-hoc analysis as needed. Participate in rotation of after-hours support. Explain tasks and processes in a clear and concise manner that can be consumed and understood to non-technical business associates. Research new technologies for implementation by the team for producing cutting-edge solutions. Cultivate business relationships with stakeholders. May perform additional functions depending on market demand and staffing in order to provide consistent quality customer service.", "Recruiter_First_Name": "Jordan", "Recruiter_Last_Name": "Abraham", "Recruiter_Email_Address": "jabraham@marinerfinance.com", "Company_name": "MARINER FINANCE", "SetName": "Nadege Nguemo Mbouyo_08/15/2023_MARINER FINANCE_Business Intelligence Architect", "CandidateID": "34701", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Nadege Nguemo Mbouyo", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 42, "QID": 2526, "Job_Title": "Application Specialist", "Job_Description": "Duties & Responsibilities  Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Recruiter_First_Name": "Malyssa", "Recruiter_Last_Name": "Daletski", "Recruiter_Email_Address": "recruiting+226318872@applytojob.com", "Company_name": "Hirschbach", "SetName": "Talq Tera_08/15/2023_Hirschbach_Application Specialist", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 43, "QID": 2527, "Job_Title": "Application Specialist", "Job_Description": "Meet with customers post implementation to ensure status of program Travel to customer sites may be required in this role Create and manage customer action items Work with current customers on potential changes Maintain existing Power BI reports Maintain existing reporting workflows Troubleshoot existing reports and reporting framework Identify reporting requirements in business conversation", "Recruiter_First_Name": "Malyssa", "Recruiter_Last_Name": "Daletski", "Recruiter_Email_Address": "Malyssa.Daletski@hirschbach.com", "Company_name": "Hirschbach", "SetName": "Talq Tera_08/15/2023_Hirschbach_Application Specialist", "CandidateID": "39119", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Shireesha Ravi", "Applicant": "Talq Tera", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 58, "QID": 2541, "Job_Title": "Power BI Developer/Analyst (Corporate Travel)", "Job_Description": "Power BI Developer/Analyst (Corporate Travel) - Hybrid - Chicago, IL  Flight Centre Travel Group (FCTG) is one of the world\u2019s largest travel retailers and corporate travel managers. The company, which is headquartered in Brisbane, Australia has company-owned leisure and corporate travel business in 23 countries, spanning Australia, New Zealand, the Americas, Europe, the United Kingdom, South Africa, the United Arab Emirates and Asia. FCTG also operates a global corporate travel management network, which extends to more than 90 countries through company-owned businesses and independent licensees. The company opened its first leisure travel shop in Sydney, Australia in 1982 and listed on the Australian Securities Exchange in 1995.  Our purpose is to \u201copen up the world for those who want to see\u201d. Every day, we give people all around the world the opportunity to experience something really amazing \u2013 travel!  About The Opportunity  Are you a problem-solver with a passion for data analysis and visualization? We are seeking a Business Intelligence (BI) Developer/Analyst to join our leading-edge team. In this role, you'll bring your expert Power BI development skills, SQL knowledge, and understanding of relational databases to bear, working directly with one of our most valued clients in the corporate travel industry.  You'll be at the forefront of our analytics operations, translating complex datasets into accessible, impactful insights that can drive strategic decisions for our client. Your well-crafted BI dashboards and reports will become integral tools, contributing to the improvement of travel management processes and strategies.  Key Responsibilities  Power BI Development: Design, develop, and optimize advanced BI dashboards and reports using Power BI. Ensure they are intuitive, efficient, and tailored to the client's needs.  Data Analysis: Conduct comprehensive analysis of complex data, identifying trends, and translating insights into actionable recommendations.  SQL and Database Management: Leverage SQL skills to query, manipulate and manage data within relational databases. Ensure the efficient and effective use of data in support of strategic initiatives.  Client Relationship Management: Work directly with our client, understanding their needs, and presenting your findings in a clear and persuasive manner.  Experience & Qualifications  Bachelor's Degree in Information Systems, Computer Science, Business Administration, or a related field.  Proven experience as a BI Developer or Data Scientist, with strong proficiency in Power BI.  Solid experience in SQL and working with relational databases.  Excellent analytical skills with the ability to dissect large amounts of data.  Strong communication skills and the ability to effectively convey complex information.  Experience in the corporate travel industry is a plus.", "Recruiter_First_Name": "Andrea", "Recruiter_Last_Name": "Grimes", "Recruiter_Email_Address": "andrea.grimes@us.flightcentre.com", "Company_name": "Flight Center Travel Group (FCTG)", "SetName": "Mary Gathogo_08/15/2023_Flight Center Travel Group (FCTG)_Power BI Developer/Analyst (Corporate Travel)", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 59, "QID": 2542, "Job_Title": "Power BI Developer", "Job_Description": "Power BI Developer Hybrid Remote - 3x per week onsite Based in Rosemont IL Direct hire   At Medix, we are dedicated to creating opportunities for talent in Information Technology. Our dedicated recruiters offer a personalized service to make sure we truly understand your employment needs. We are currently seeking a hybrid remote Power BI Developer with one of our technology clients due growth. This is a direct hire opportunity. Partner with Medix, and you will experience the multiple benefits our company has to offer. We will hold a personal consultation with you to understand your skills and aspirations! Our placement services provide flexibility to accommodate your schedule and needs. We offer competitive compensation packages including full health, dental and vision insurance, 401k and PTO.  Power BI Developer  Job Responsibilities: Reports development Working with Power BI and other individuals across the data team to assist in the pulling of data from SQL and creating visualizations and dashboard for their application and software They will have a smaller team they meet with, but for the most part they will be operating on their own Need to have strong analytical skills and be able to adapt quickly Develop operational reports Build automated reports and dashboards with the help of Power BI and other reporting tools Understand business requirements to set functional specifications for reporting applications Be experienced in tools and systems on MS SQL Server BI Stack, including SSRS and TSQL, Power Query, MDX, PowerBI, and DAX Be able to quickly shape data into reporting and analytics solutions   Power BI Developer  Requirements:  As an Power BI Developer, this individual must be highly motivated, able to multitask and able to work in a fast paced IT environment. Qualified candidates must be able to self direct while working with others.  Other requirements of the role include:  4 years of Power BI experience (including dashboard creation and supporting end users on their visualization needs) Strong SQL experience  Strong understanding of BI functions and tools including SSRS, Power Query, and DAX Any fundamental database knowledge and relational database design  SSIS and SSRS knowledge", "Recruiter_First_Name": "Kylie", "Recruiter_Last_Name": "Hegemier", "Recruiter_Email_Address": "kylie.hegemier@medixteam.com", "Company_name": "Medix Technology", "SetName": "Mary Gathogo_08/15/2023_Medix Technology_Power BI Developer", "CandidateID": "36877", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Charanya Balakrishnan", "Applicant": "Mary Gathogo", "Recruiter_InterviewCount": "2", "Technical_InterviewCount": "0", "InterviewScore": "NULL"}, {"InterviewDate": "8/15/2023", "NoofDays": -107, "LogInterviewID": 52, "QID": 2535, "Job_Title": "Data Visualization Manager", "Job_Description": "WHAT YOU\u2019LL DO  Own data needs for clients and internal teams Set up data environments within business intelligence platform, including setting up new data sources, maintaining attributes, and creating datasets for advertising reports Collect data requirements from internal teams to assist in the design of a scalable infrastructure to drive decision making using technology and BI tools Manage the retrieval, compiling, and formatting of large volumes of data Engage frequently with data developer and project management during implementation; be available to quickly answer questions that arise during implementation and to make scope tradeoff decisions. Contribute to data visualization future-proofing through annual roadmap planning and collaborate with internal teams and users to understand new opportunities for support Learn new technologies as they evolve, and understand their impact to systems Manage multiple deliverables with multiple stakeholders and clients in a fast-paced environment simultaneously Build relationships across the agency and evangelize data offerings as a centralized tool available to all departments and individuals Establish a relationship with internal stakeholders to understand their business need for reporting and data visualization capabilities Present and clearly articulate solution options to key stakeholders Be a go-to resource with thorough understanding of data structures for various ad platforms WHAT YOU\u2019LL BRING  Bachelor's Degree in Data Analysis, Data Development, Marketing Data & Analytics, or related field and/or 3-5 years equivalent work experience in Data Developer or similar Data & Analytics Role Proficiency in SQL Experience with BI and Analytics Tools Experience building and supporting high-performance data models, visualizations, and KPIs for key initiatives Experience with data storytelling, data science, or data strategy Knowledge of data modeling and entity relationships Ability to write code with clean documentation Strong entrepreneurial drive Strong verbal and written communication skills and a collaborative, problem-solving mindset Customer/client service experience (internal and/or external audiences) Strong critical thinking, problem solving and analytical skills Strong verbal and written communication skills Proven experience in implementing innovations that drive business goals led from user feedback and experience NOT REQUIRED, BUT PREFERRED  Marketing, media, & advertising knowledge, including digital and traditional channels Experience with tools that support data engineering such as Looker, Fivetran, AWS, DBT Experience with data warehousing architecture and data modeling", "Recruiter_First_Name": "Pearson", "Recruiter_Last_Name": "Kaylee", "Recruiter_Email_Address": "kpearson@theshipyard.com", "Company_name": "The Shipyard", "SetName": "Calvine  Cheptoo _08/15/2023_The Shipyard_Data Visualization Manager", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Recruiter", "Preparationscore": "18.75", "AutoInterviewsCount": "2", "AutoInterviewsDuration": "144", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "1", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}, {"InterviewDate": "8/11/2023", "NoofDays": -111, "LogInterviewID": 53, "QID": 2536, "Job_Title": "Power BI / SSRS Developer", "Job_Description": "Job Description The Power BI / SSRS Developer\u2019s primary responsibility is to design, create and/or support data reporting systems and solutions for the Symmetry Lending organization. Systems include but are not limited to loan originations system, loan servicing system, data warehouse, company intranet, homegrown automation applications, and various partner interfaces. Additional responsibilities include analysis, design, and maintenance of departmental, financial, investor and regulatory reports. Qualifications / Requirements Experience working in the financial industry, ideally banking, lending, or similar as a Power BI and SSRS. Experience as a business analyst or quality assurance analyst is a major plus. 5+ years database design and development experience with MS SQL server technologies (SSRS and SSMS) with Data transformation / ETL and Power Query engine experience. 4+ years' experience with Power BI Desktop, Power Query, DAX (Data Analysis Expressions) language, data modeling, and visualizations. Strong analytical and data modeling skills with the ability to gather and analyze data from various sources, design effective data models, and create relationships between different data tables. Strong understanding of visualization with the ability to create compelling and interactive visualizations with an eye for design. A deep understanding of best practices for creating meaningful charts and graphs, and the ability to effectively communicate data insights to stakeholders. Collaborate with other analysts and developers to integrate Power BI solutions with other data sources and applications. Collaborate with key stakeholders across the organization to identify business requirements for reporting, dashboards, and visualizations. Experience writing complex and optimized SQL queries. Experience with SDLC and Agile processes. Strong verbal, written, and technical analysis skills. Responsibilities Work closely with business users and stakeholders to analyze and define business requirements. Create and provide time sensitive ad-hoc report/data requests. Participate in defining and adhering to best practices, standards and procedures as defined by Symmetry IT. Work closely with Quality Assurance to ensure accurate and compliant data implementations. Create various document artifacts including business requirements and technical design documents. Comply with company policies and procedures, security and regulatory requirements, and investor guidelines. Ensures all applicable internal NPI policies and procedures are followed, and confidentiality of borrower information is maintained. Any combination of following are strong pluses but not strictly required: You have a solid foundation in data analysis and an attention to detail which you use to understand business requirements and translate them into effective report designs. Your strong analytical skills will help you identify trends, patterns, and insights from the data. You have data warehouse design and/or some software development experience. You have a good understanding of data visualization principles and the ability to present data in a meaningful way. You are a continuous learner with a willingness to learn and stay updated with the latest trends, tools, and best practices.", "Recruiter_First_Name": "Talley", "Recruiter_Last_Name": "Capri", "Recruiter_Email_Address": "hrsymmetrylending4_eja@indeedemail.com", "Company_name": "Symmetry Lending", "SetName": "Calvine  Cheptoo _08/11/2023_Symmetry Lending_Power BI / SSRS Developer", "CandidateID": "38532", "SurveyResponse": "NULL", "InterviewType": "Technical", "Preparationscore": "0", "AutoInterviewsCount": "0", "AutoInterviewsDuration": "NULL", "MentorInterviewsCount": "0", "MentorInterviewsDuration": "NULL", "Mentor": "Frew Samuel", "Applicant": "Calvine  Cheptoo ", "Recruiter_InterviewCount": "0", "Technical_InterviewCount": "1", "InterviewScore": "NULL"}], "stage_runningstate": "executed", "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": "{}"}}, {"_id": "6572047fc850af03eddd1463", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/Colaberry Interview Prep.csv", "in": ["6572047fc850af03eddd1462"], "out": [], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "InterviewerPerformanceAssessment(Regression)_AutoML", "comment": "", "pipeline_id": "6572047fc850af03eddd145e", "sub_type": "Automl", "stage_type": "ml", "mlCategory": "Regression", "stage_attributes": {"model_type": "regression", "label": "InterviewScore_stringindexer", "features": ["NoofDays", "LogInterviewID", "QID", "InterviewDate_stringindexer", "Job_Title_stringindexer", "Job_Description_stringindexer", "Recruiter_First_Name_stringindexer", "Recruiter_Last_Name_stringindexer", "Recruiter_Email_Address_stringindexer", "Company_name_stringindexer", "SetName_stringindexer", "CandidateID_stringindexer", "SurveyResponse_stringindexer", "InterviewType_stringindexer", "Preparationscore_stringindexer", "AutoInterviewsCount_stringindexer", "AutoInterviewsDuration_stringindexer", "MentorInterviewsCount_stringindexer", "MentorInterviewsDuration_stringindexer", "Mentor_stringindexer", "Applicant_stringindexer", "Recruiter_InterviewCount_stringindexer", "Technical_InterviewCount_stringindexer"], "percentage": "60", "executionTime": "10", "sampling": "1", "sampling_value": "", "optimizeBy": "r2", "run_id": "", "server_url": "/numtraPlatform/NumtraPlatformV3/uploads/platform/"}, "status": "new", "position": {"x": 187, "y": 160}, "shape_attributes": {"image": {"refWidth": "100%", "refHeight": "100%", "xlinkHref": "assets/svg/ml-engine/regression.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 10, "fill": "#333333", "type": "aml", "text": "Regression-AutoML", "slug": "auto-ml", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}, "root": {"dataTooltipPosition": "bottom", "dataTooltipPositionSelector": ".joint-stencil", "mode": "auto"}, "body": {"fill": "transparent", "stroke": "#4295d1", "strokeWidth": 2, "strokeDasharray": "0"}, "dbValues": {"model_type": "", "label": "", "features": []}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15c7", "field": "NoofDays", "alias": "NoofDays", "type": "numeric", "position": "0"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15c8", "field": "LogInterviewID", "alias": "LogInterviewID", "type": "numeric", "position": "1"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15c9", "field": "QID", "alias": "QID", "type": "numeric", "position": "2"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15ca", "field": "InterviewDate_stringindexer", "alias": "InterviewDate_stringindexer", "type": "real", "position": "3"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15cb", "field": "Job_Title_stringindexer", "alias": "Job_Title_stringindexer", "type": "real", "position": "4"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15cc", "field": "Job_Description_stringindexer", "alias": "Job_Description_stringindexer", "type": "real", "position": "5"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15cd", "field": "Recruiter_First_Name_stringindexer", "alias": "Recruiter_First_Name_stringindexer", "type": "real", "position": "6"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15ce", "field": "Recruiter_Last_Name_stringindexer", "alias": "Recruiter_Last_Name_stringindexer", "type": "real", "position": "7"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15cf", "field": "Recruiter_Email_Address_stringindexer", "alias": "Recruiter_Email_Address_stringindexer", "type": "real", "position": "8"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15d0", "field": "Company_name_stringindexer", "alias": "Company_name_stringindexer", "type": "real", "position": "9"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15d1", "field": "SetName_stringindexer", "alias": "SetName_stringindexer", "type": "real", "position": "10"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15d2", "field": "CandidateID_stringindexer", "alias": "CandidateID_stringindexer", "type": "real", "position": "11"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15d3", "field": "SurveyResponse_stringindexer", "alias": "SurveyResponse_stringindexer", "type": "real", "position": "12"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15d4", "field": "InterviewType_stringindexer", "alias": "InterviewType_stringindexer", "type": "real", "position": "13"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15d5", "field": "Preparationscore_stringindexer", "alias": "Preparationscore_stringindexer", "type": "real", "position": "14"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063fc850af03eddd15d6", "field": "AutoInterviewsCount_stringindexer", "alias": "AutoInterviewsCount_stringindexer", "type": "real", "position": "15"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063fc850af03eddd15d7", "field": "AutoInterviewsDuration_stringindexer", "alias": "AutoInterviewsDuration_stringindexer", "type": "real", "position": "16"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063fc850af03eddd15d8", "field": "MentorInterviewsCount_stringindexer", "alias": "MentorInterviewsCount_stringindexer", "type": "real", "position": "17"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063fc850af03eddd15d9", "field": "MentorInterviewsDuration_stringindexer", "alias": "MentorInterviewsDuration_stringindexer", "type": "real", "position": "18"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063fc850af03eddd15da", "field": "Mentor_stringindexer", "alias": "Mentor_stringindexer", "type": "real", "position": "19"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063fc850af03eddd15db", "field": "Applicant_stringindexer", "alias": "Applicant_stringindexer", "type": "real", "position": "20"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063fc850af03eddd15dc", "field": "Recruiter_InterviewCount_stringindexer", "alias": "Recruiter_InterviewCount_stringindexer", "type": "real", "position": "21"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063fc850af03eddd15dd", "field": "Technical_InterviewCount_stringindexer", "alias": "Technical_InterviewCount_stringindexer", "type": "real", "position": "22"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063fc850af03eddd15de", "field": "InterviewScore_stringindexer", "alias": "InterviewScore_stringindexer", "type": "real", "position": "23"}], "actual_schema": [{"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15af", "field": "InterviewDate", "alias": "InterviewDate", "type": "date", "position": "0"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15b0", "field": "NoofDays", "alias": "NoofDays", "type": "numeric", "position": "1"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15b1", "field": "LogInterviewID", "alias": "LogInterviewID", "type": "numeric", "position": "2"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15b2", "field": "QID", "alias": "QID", "type": "numeric", "position": "3"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15b3", "field": "Job_Title", "alias": "Job_Title", "type": "String", "position": "4"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15b4", "field": "Job_Description", "alias": "Job_Description", "type": "String", "position": "5"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15b5", "field": "Recruiter_First_Name", "alias": "Recruiter_First_Name", "type": "String", "position": "6"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15b6", "field": "Recruiter_Last_Name", "alias": "Recruiter_Last_Name", "type": "String", "position": "7"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15b7", "field": "Recruiter_Email_Address", "alias": "Recruiter_Email_Address", "type": "String", "position": "8"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15b8", "field": "Company_name", "alias": "Company_name", "type": "String", "position": "9"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15b9", "field": "SetName", "alias": "SetName", "type": "String", "position": "10"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15ba", "field": "CandidateID", "alias": "CandidateID", "type": "String", "position": "11"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15bb", "field": "SurveyResponse", "alias": "SurveyResponse", "type": "String", "position": "12"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15bc", "field": "InterviewType", "alias": "InterviewType", "type": "String", "position": "13"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15bd", "field": "Preparationscore", "alias": "Preparationscore", "type": "String", "position": "14"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15be", "field": "AutoInterviewsCount", "alias": "AutoInterviewsCount", "type": "String", "position": "15"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15bf", "field": "AutoInterviewsDuration", "alias": "AutoInterviewsDuration", "type": "String", "position": "16"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15c0", "field": "MentorInterviewsCount", "alias": "MentorInterviewsCount", "type": "String", "position": "17"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15c1", "field": "MentorInterviewsDuration", "alias": "MentorInterviewsDuration", "type": "String", "position": "18"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15c2", "field": "Mentor", "alias": "Mentor", "type": "String", "position": "19"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15c3", "field": "Applicant", "alias": "Applicant", "type": "String", "position": "20"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15c4", "field": "Recruiter_InterviewCount", "alias": "Recruiter_InterviewCount", "type": "String", "position": "21"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15c5", "field": "Technical_InterviewCount", "alias": "Technical_InterviewCount", "type": "String", "position": "22"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6572063ec850af03eddd15c6", "field": "InterviewScore", "alias": "InterviewScore", "type": "String", "position": "23"}], "selected_schema": [], "created_at": "2023-12-07 17:44:31.328000", "originalcount": 143, "samplecount": 143, "samplefile": "/FileStore/platform/sampleData/6572047fc850af03eddd1461/part-00000-ebd20b89-8efb-4ae8-93db-c2986149cea8-c000.csv", "joinSchema": [], "updated_at": "2023-12-07 17:59:52.127000", "__v": 0, "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": {}}}]